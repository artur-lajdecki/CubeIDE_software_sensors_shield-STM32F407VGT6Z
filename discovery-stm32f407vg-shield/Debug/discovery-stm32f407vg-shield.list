
discovery-stm32f407vg-shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c31c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a90  0800c4b0  0800c4b0  0001c4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef40  0800ef40  00020338  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef40  0800ef40  0001ef40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef48  0800ef48  00020338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef4c  0800ef4c  0001ef4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0800ef50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000338  0800f288  00020338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  0800f288  00020940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269d5  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000484f  00000000  00000000  00046d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  0004b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  0004d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a06  00000000  00000000  0004eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002215a  00000000  00000000  0007554e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e176f  00000000  00000000  000976a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178e17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b00  00000000  00000000  00178e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c494 	.word	0x0800c494

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	0800c494 	.word	0x0800c494

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};


void FIRFilter_Init(FIRFilter *fir) {
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e009      	b.n	800100e <FIRFilter_Init+0x22>

		fir->buf[n] = 0.0f;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d9f2      	bls.n	8000ffa <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* Clear filter output */
	fir->out = 0.0f;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	ed87 0a00 	vstr	s0, [r7]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	601a      	str	r2, [r3, #0]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d103      	bne.n	800106e <FIRFilter_Update+0x3e>

		fir->bufIndex = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800107c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
 8001082:	e021      	b.n	80010c8 <FIRFilter_Update+0x98>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <FIRFilter_Update+0x62>

			sumIndex--;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3b01      	subs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8001092:	2309      	movs	r3, #9
 8001094:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <FIRFilter_Update+0xb4>)
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	edd3 6a00 	vldr	s13, [r3]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	3301      	adds	r3, #1
 80010c6:	73bb      	strb	r3, [r7, #14]
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	d9da      	bls.n	8001084 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	ee07 3a90 	vmov	s15, r3

}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000000 	.word	0x20000000

080010e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010fa:	4b59      	ldr	r3, [pc, #356]	; (8001260 <MX_ADC1_Init+0x178>)
 80010fc:	4a59      	ldr	r2, [pc, #356]	; (8001264 <MX_ADC1_Init+0x17c>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <MX_ADC1_Init+0x178>)
 8001102:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001106:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <MX_ADC1_Init+0x178>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800110e:	4b54      	ldr	r3, [pc, #336]	; (8001260 <MX_ADC1_Init+0x178>)
 8001110:	2201      	movs	r2, #1
 8001112:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001114:	4b52      	ldr	r3, [pc, #328]	; (8001260 <MX_ADC1_Init+0x178>)
 8001116:	2201      	movs	r2, #1
 8001118:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111a:	4b51      	ldr	r3, [pc, #324]	; (8001260 <MX_ADC1_Init+0x178>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <MX_ADC1_Init+0x178>)
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001128:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <MX_ADC1_Init+0x178>)
 800112a:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <MX_ADC1_Init+0x180>)
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <MX_ADC1_Init+0x178>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8001134:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <MX_ADC1_Init+0x178>)
 8001136:	2209      	movs	r2, #9
 8001138:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <MX_ADC1_Init+0x178>)
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001142:	4b47      	ldr	r3, [pc, #284]	; (8001260 <MX_ADC1_Init+0x178>)
 8001144:	2201      	movs	r2, #1
 8001146:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <MX_ADC1_Init+0x178>)
 800114a:	f001 ff27 	bl	8002f9c <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001154:	f001 f8d4 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001160:	2303      	movs	r3, #3
 8001162:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	4619      	mov	r1, r3
 8001168:	483d      	ldr	r0, [pc, #244]	; (8001260 <MX_ADC1_Init+0x178>)
 800116a:	f002 f87f 	bl	800326c <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001174:	f001 f8c4 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001178:	2301      	movs	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4836      	ldr	r0, [pc, #216]	; (8001260 <MX_ADC1_Init+0x178>)
 8001186:	f002 f871 	bl	800326c <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001190:	f001 f8b6 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001194:	2302      	movs	r3, #2
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001198:	2303      	movs	r3, #3
 800119a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <MX_ADC1_Init+0x178>)
 80011a2:	f002 f863 	bl	800326c <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011ac:	f001 f8a8 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011b0:	2303      	movs	r3, #3
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <MX_ADC1_Init+0x178>)
 80011be:	f002 f855 	bl	800326c <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011c8:	f001 f89a 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011d0:	2305      	movs	r3, #5
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <MX_ADC1_Init+0x178>)
 80011da:	f002 f847 	bl	800326c <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80011e4:	f001 f88c 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e8:	2305      	movs	r3, #5
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80011ec:	2306      	movs	r3, #6
 80011ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <MX_ADC1_Init+0x178>)
 80011f6:	f002 f839 	bl	800326c <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001200:	f001 f87e 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001204:	2306      	movs	r3, #6
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001208:	2307      	movs	r3, #7
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_ADC1_Init+0x178>)
 8001212:	f002 f82b 	bl	800326c <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800121c:	f001 f870 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001220:	2307      	movs	r3, #7
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001224:	2308      	movs	r3, #8
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_ADC1_Init+0x178>)
 800122e:	f002 f81d 	bl	800326c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001238:	f001 f862 	bl	8002300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800123c:	2311      	movs	r3, #17
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001240:	2309      	movs	r3, #9
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_ADC1_Init+0x178>)
 800124a:	f002 f80f 	bl	800326c <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001254:	f001 f854 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000390 	.word	0x20000390
 8001264:	40012000 	.word	0x40012000
 8001268:	0f000001 	.word	0x0f000001

0800126c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <HAL_ADC_MspInit+0xdc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d158      	bne.n	8001340 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_ADC_MspInit+0xe0>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a2d      	ldr	r2, [pc, #180]	; (800134c <HAL_ADC_MspInit+0xe0>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a26      	ldr	r2, [pc, #152]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012c6:	23ff      	movs	r3, #255	; 0xff
 80012c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <HAL_ADC_MspInit+0xe4>)
 80012da:	f002 fee9 	bl	80040b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_ADC_MspInit+0xec>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001304:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001314:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001318:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800131c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001326:	f002 fb53 	bl	80039d0 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001330:	f000 ffe6 	bl	8002300 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40012000 	.word	0x40012000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	200003d8 	.word	0x200003d8
 8001358:	40026410 	.word	0x40026410

0800135c <DAQ_channel_init>:
//struct DAQ_channel *DAQ_channel_SelectChannel(DAQ_channel_no no) {
//	return &DAQ_channel[no];
//}

void DAQ_channel_init(DAQ_channel_no no, GPIO_TypeDef* CHANNEL_GPIOx,
		uint16_t  CHANNEL_GPIO_Pin, struct thermistor *th, struct photodiode *ph) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	4613      	mov	r3, r2
 800136c:	81bb      	strh	r3, [r7, #12]

	DAQ_channel_set_index(no, no);
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f819 	bl	80013ac <DAQ_channel_set_index>
	DAQ_channel_set_GPIO_TypeDef(no, CHANNEL_GPIOx);
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f82e 	bl	80013e0 <DAQ_channel_set_GPIO_TypeDef>
	DAQ_channel_set_GPIO_Pin(no, CHANNEL_GPIO_Pin);
 8001384:	89ba      	ldrh	r2, [r7, #12]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f840 	bl	8001410 <DAQ_channel_set_GPIO_Pin>
	DAQ_channel_set_thermistor(no, th);
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f86f 	bl	8001478 <DAQ_channel_set_thermistor>
	DAQ_channel_set_photodiode(no, ph);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	69b9      	ldr	r1, [r7, #24]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f882 	bl	80014a8 <DAQ_channel_set_photodiode>

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DAQ_channel_set_index>:

void DAQ_channel_set_index(DAQ_channel_no no, uint8_t i) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].index = i;
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	4907      	ldr	r1, [pc, #28]	; (80013dc <DAQ_channel_set_index+0x30>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	701a      	strb	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000484 	.word	0x20000484

080013e0 <DAQ_channel_set_GPIO_TypeDef>:

void DAQ_channel_set_GPIO_TypeDef(DAQ_channel_no no, GPIO_TypeDef* CHANNEL_GPIOx) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].CHANNEL_GPIOx = CHANNEL_GPIOx;
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	4907      	ldr	r1, [pc, #28]	; (800140c <DAQ_channel_set_GPIO_TypeDef+0x2c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3304      	adds	r3, #4
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000484 	.word	0x20000484

08001410 <DAQ_channel_set_GPIO_Pin>:

void DAQ_channel_set_GPIO_Pin(DAQ_channel_no no, uint16_t  CHANNEL_GPIO_Pin) {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	80bb      	strh	r3, [r7, #4]
	DAQ_channel[no].CHANNEL_GPIO_Pin = CHANNEL_GPIO_Pin;
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <DAQ_channel_set_GPIO_Pin+0x30>)
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3308      	adds	r3, #8
 8001430:	88ba      	ldrh	r2, [r7, #4]
 8001432:	801a      	strh	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000484 	.word	0x20000484

08001444 <DAQ_channel_set_flag_enable>:

void DAQ_channel_set_flag_enable(DAQ_channel_no no, _Bool flag) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_enable = flag;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4907      	ldr	r1, [pc, #28]	; (8001474 <DAQ_channel_set_flag_enable+0x30>)
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	330a      	adds	r3, #10
 8001464:	79ba      	ldrb	r2, [r7, #6]
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000484 	.word	0x20000484

08001478 <DAQ_channel_set_thermistor>:

void DAQ_channel_set_thermistor(DAQ_channel_no no, struct thermistor *th) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].th = th;
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	4907      	ldr	r1, [pc, #28]	; (80014a4 <DAQ_channel_set_thermistor+0x2c>)
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	330c      	adds	r3, #12
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000484 	.word	0x20000484

080014a8 <DAQ_channel_set_photodiode>:

void DAQ_channel_set_photodiode(DAQ_channel_no no, struct photodiode *ph) {
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].ph = ph;
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4907      	ldr	r1, [pc, #28]	; (80014d4 <DAQ_channel_set_photodiode+0x2c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3310      	adds	r3, #16
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000484 	.word	0x20000484

080014d8 <DAQ_channel_set_flag_save>:

void DAQ_channel_set_flag_save(DAQ_channel_no no, _Bool flag) {
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_save = flag;
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4907      	ldr	r1, [pc, #28]	; (8001508 <DAQ_channel_set_flag_save+0x30>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3314      	adds	r3, #20
 80014f8:	79ba      	ldrb	r2, [r7, #6]
 80014fa:	701a      	strb	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	20000484 	.word	0x20000484

0800150c <DAQ_channel_set_flag_th_limit>:

void DAQ_channel_set_flag_th_limit(DAQ_channel_no no, _Bool flag) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_th_limit = flag;
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	4907      	ldr	r1, [pc, #28]	; (800153c <DAQ_channel_set_flag_th_limit+0x30>)
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3315      	adds	r3, #21
 800152c:	79ba      	ldrb	r2, [r7, #6]
 800152e:	701a      	strb	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000484 	.word	0x20000484

08001540 <DAQ_channel_set_th_limit>:

void DAQ_channel_set_th_limit(DAQ_channel_no no, uint32_t th_limit) {
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].th_limit = th_limit;
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	4923      	ldr	r1, [pc, #140]	; (80015dc <DAQ_channel_set_th_limit+0x9c>)
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3318      	adds	r3, #24
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	601a      	str	r2, [r3, #0]
	DAQ_channel[no].th->temperature_max_value = ((float)DAQ_channel[no].th_limit/100);
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	491e      	ldr	r1, [pc, #120]	; (80015dc <DAQ_channel_set_th_limit+0x9c>)
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3318      	adds	r3, #24
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	4917      	ldr	r1, [pc, #92]	; (80015dc <DAQ_channel_set_th_limit+0x9c>)
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	330c      	adds	r3, #12
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015e0 <DAQ_channel_set_th_limit+0xa0>
 8001590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001594:	edc3 7a01 	vstr	s15, [r3, #4]
	DAQ_channel[no].th->ADC_max_value = ntc3950_Celcius_to_ADC(DAQ_channel[no].th->temperature_max_value, ADC1read[8]);
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	4910      	ldr	r1, [pc, #64]	; (80015dc <DAQ_channel_set_th_limit+0x9c>)
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	330c      	adds	r3, #12
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <DAQ_channel_set_th_limit+0xa4>)
 80015b0:	6a19      	ldr	r1, [r3, #32]
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <DAQ_channel_set_th_limit+0x9c>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4403      	add	r3, r0
 80015c0:	330c      	adds	r3, #12
 80015c2:	681c      	ldr	r4, [r3, #0]
 80015c4:	4608      	mov	r0, r1
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	f000 fea1 	bl	8002310 <ntc3950_Celcius_to_ADC>
 80015ce:	4603      	mov	r3, r0
 80015d0:	60a3      	str	r3, [r4, #8]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000484 	.word	0x20000484
 80015e0:	42c80000 	.word	0x42c80000
 80015e4:	2000036c 	.word	0x2000036c

080015e8 <DAQ_channel_set_flag_ph_limit>:

void DAQ_channel_set_flag_ph_limit(DAQ_channel_no no, _Bool flag) {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_ph_limit = flag;
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	4907      	ldr	r1, [pc, #28]	; (8001618 <DAQ_channel_set_flag_ph_limit+0x30>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	331c      	adds	r3, #28
 8001608:	79ba      	ldrb	r2, [r7, #6]
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000484 	.word	0x20000484

0800161c <DAQ_channel_set_ph_limit>:

void DAQ_channel_set_ph_limit(DAQ_channel_no no, uint32_t ph_limit) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].ph_limit = ph_limit;
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	4923      	ldr	r1, [pc, #140]	; (80016b8 <DAQ_channel_set_ph_limit+0x9c>)
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3320      	adds	r3, #32
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	601a      	str	r2, [r3, #0]
	DAQ_channel[no].ph->power_max_value = ((float)DAQ_channel[no].ph_limit/100);
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	491e      	ldr	r1, [pc, #120]	; (80016b8 <DAQ_channel_set_ph_limit+0x9c>)
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3320      	adds	r3, #32
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4917      	ldr	r1, [pc, #92]	; (80016b8 <DAQ_channel_set_ph_limit+0x9c>)
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3310      	adds	r3, #16
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	eddf 6a14 	vldr	s13, [pc, #80]	; 80016bc <DAQ_channel_set_ph_limit+0xa0>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	edc3 7a01 	vstr	s15, [r3, #4]
	DAQ_channel[no].ph->ADC_max_value = photodiode_power_to_ADC(DAQ_channel[no].ph->power_max_value, ADC1read[8]);
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	4910      	ldr	r1, [pc, #64]	; (80016b8 <DAQ_channel_set_ph_limit+0x9c>)
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3310      	adds	r3, #16
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	edd3 7a01 	vldr	s15, [r3, #4]
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <DAQ_channel_set_ph_limit+0xa4>)
 800168c:	6a19      	ldr	r1, [r3, #32]
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <DAQ_channel_set_ph_limit+0x9c>)
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	3310      	adds	r3, #16
 800169e:	681c      	ldr	r4, [r3, #0]
 80016a0:	4608      	mov	r0, r1
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	f000 ff97 	bl	80025d8 <photodiode_power_to_ADC>
 80016aa:	4603      	mov	r3, r0
 80016ac:	60a3      	str	r3, [r4, #8]

}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000484 	.word	0x20000484
 80016bc:	42c80000 	.word	0x42c80000
 80016c0:	2000036c 	.word	0x2000036c

080016c4 <DAQ_channel_get_GPIO_TypeDef>:
uint8_t DAQ_channel_get_index(DAQ_channel_no no) {
	return DAQ_channel[no].index;

}

GPIO_TypeDef *DAQ_channel_get_GPIO_TypeDef(DAQ_channel_no no) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].CHANNEL_GPIOx;
 80016ce:	79fa      	ldrb	r2, [r7, #7]
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <DAQ_channel_get_GPIO_TypeDef+0x28>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3304      	adds	r3, #4
 80016de:	681b      	ldr	r3, [r3, #0]

}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000484 	.word	0x20000484

080016f0 <DAQ_channel_get_GPIO_Pin>:

uint16_t DAQ_channel_get_GPIO_Pin(DAQ_channel_no no) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].CHANNEL_GPIO_Pin;
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	4906      	ldr	r1, [pc, #24]	; (8001718 <DAQ_channel_get_GPIO_Pin+0x28>)
 80016fe:	4613      	mov	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	3308      	adds	r3, #8
 800170a:	881b      	ldrh	r3, [r3, #0]

}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	20000484 	.word	0x20000484

0800171c <DAQ_channel_get_flag_enable>:

_Bool DAQ_channel_get_flag_enable(DAQ_channel_no no) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_enable;
 8001726:	79fa      	ldrb	r2, [r7, #7]
 8001728:	4906      	ldr	r1, [pc, #24]	; (8001744 <DAQ_channel_get_flag_enable+0x28>)
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	330a      	adds	r3, #10
 8001736:	781b      	ldrb	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	20000484 	.word	0x20000484

08001748 <DAQ_channel_get_flag_save>:

struct photodiode *DAQ_channel_get_photodiode(DAQ_channel_no no) {
	return DAQ_channel[no].ph;
}

_Bool DAQ_channel_get_flag_save(DAQ_channel_no no) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_save;
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4906      	ldr	r1, [pc, #24]	; (8001770 <DAQ_channel_get_flag_save+0x28>)
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	3314      	adds	r3, #20
 8001762:	781b      	ldrb	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000484 	.word	0x20000484

08001774 <DAQ_channel_get_flag_th_limit>:

_Bool DAQ_channel_get_flag_th_limit(DAQ_channel_no no) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_th_limit;
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4906      	ldr	r1, [pc, #24]	; (800179c <DAQ_channel_get_flag_th_limit+0x28>)
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3315      	adds	r3, #21
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20000484 	.word	0x20000484

080017a0 <DAQ_channel_get_flag_ph_limit>:

uint32_t DAQ_channel_get_th_limit(DAQ_channel_no no) {
	return DAQ_channel[no].th_limit;
}

_Bool DAQ_channel_get_flag_ph_limit(DAQ_channel_no no) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_ph_limit;
 80017aa:	79fa      	ldrb	r2, [r7, #7]
 80017ac:	4906      	ldr	r1, [pc, #24]	; (80017c8 <DAQ_channel_get_flag_ph_limit+0x28>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	331c      	adds	r3, #28
 80017ba:	781b      	ldrb	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20000484 	.word	0x20000484

080017cc <DAQ_channel_off>:
uint32_t DAQ_channel_get_ph_limit(DAQ_channel_no no) {
	return DAQ_channel[no].ph_limit;
}

//ONOFF
void DAQ_channel_off(DAQ_channel_no no) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	DAQ_channel_set_flag_enable(no, false);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fe32 	bl	8001444 <DAQ_channel_set_flag_enable>
	HAL_GPIO_WritePin(DAQ_channel_get_GPIO_TypeDef(no), DAQ_channel_get_GPIO_Pin(no), GPIO_PIN_SET); //transistor open -> channel closed
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff6e 	bl	80016c4 <DAQ_channel_get_GPIO_TypeDef>
 80017e8:	4604      	mov	r4, r0
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff7f 	bl	80016f0 <DAQ_channel_get_GPIO_Pin>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2201      	movs	r2, #1
 80017f6:	4619      	mov	r1, r3
 80017f8:	4620      	mov	r0, r4
 80017fa:	f002 fdf5 	bl	80043e8 <HAL_GPIO_WritePin>
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}

08001806 <DAQ_channel_on>:

void DAQ_channel_on(DAQ_channel_no no) {
 8001806:	b590      	push	{r4, r7, lr}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
	DAQ_channel_set_flag_enable(no, true);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fe15 	bl	8001444 <DAQ_channel_set_flag_enable>
	HAL_GPIO_WritePin(DAQ_channel_get_GPIO_TypeDef(no), DAQ_channel_get_GPIO_Pin(no), GPIO_PIN_RESET); //transistor closed -> channel open
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff51 	bl	80016c4 <DAQ_channel_get_GPIO_TypeDef>
 8001822:	4604      	mov	r4, r0
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff62 	bl	80016f0 <DAQ_channel_get_GPIO_Pin>
 800182c:	4603      	mov	r3, r0
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	4620      	mov	r0, r4
 8001834:	f002 fdd8 	bl	80043e8 <HAL_GPIO_WritePin>
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}

08001840 <DAQ_CHANGE_enable>:
	DAQ_channel[no].ph->power_max_value =  ((float)DAQ_channel[no].ph_limit/100);
	DAQ_channel[no].ph->ADC_max_value = photodiode_power_to_ADC(DAQ_channel[no].ph->power_max_value, ADC1read[8]);

}

void DAQ_CHANGE_enable(DAQ_channel_no no) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af04      	add	r7, sp, #16
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(2, 2+(30*0), "Channel has been turned: ", Font_7x10, WHITE, BLACK);
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <DAQ_CHANGE_enable+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	9202      	str	r2, [sp, #8]
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	9201      	str	r2, [sp, #4]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	9200      	str	r2, [sp, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <DAQ_CHANGE_enable+0x94>)
 800185e:	2102      	movs	r1, #2
 8001860:	2002      	movs	r0, #2
 8001862:	f004 fe6b 	bl	800653c <ST7735_WriteString>

	if(DAQ_channel_get_flag_enable(no)){
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff57 	bl	800171c <DAQ_channel_get_flag_enable>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <DAQ_CHANGE_enable+0x5a>
		DAQ_channel_off(no);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ffa8 	bl	80017cc <DAQ_channel_off>
		ST7735_WriteString(2, 2+(30*2), "OFF", Font_16x26, RED, BLACK);
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <DAQ_CHANGE_enable+0x98>)
 800187e:	2200      	movs	r2, #0
 8001880:	9202      	str	r2, [sp, #8]
 8001882:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	9200      	str	r2, [sp, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <DAQ_CHANGE_enable+0x9c>)
 8001890:	213e      	movs	r1, #62	; 0x3e
 8001892:	2002      	movs	r0, #2
 8001894:	f004 fe52 	bl	800653c <ST7735_WriteString>
 8001898:	e011      	b.n	80018be <DAQ_CHANGE_enable+0x7e>
	}
	else {
		DAQ_channel_on(no);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ffb2 	bl	8001806 <DAQ_channel_on>
		ST7735_WriteString(2, 2+(30*2), "ON", Font_16x26, GREEN, BLACK);
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <DAQ_CHANGE_enable+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	9202      	str	r2, [sp, #8]
 80018a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80018ac:	9201      	str	r2, [sp, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	9200      	str	r2, [sp, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <DAQ_CHANGE_enable+0xa0>)
 80018b6:	213e      	movs	r1, #62	; 0x3e
 80018b8:	2002      	movs	r0, #2
 80018ba:	f004 fe3f 	bl	800653c <ST7735_WriteString>
	}
	DAQ_channel_set_flag_enable(no, false);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fdbe 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000034 	.word	0x20000034
 80018d4:	0800c4b0 	.word	0x0800c4b0
 80018d8:	2000003c 	.word	0x2000003c
 80018dc:	0800c4cc 	.word	0x0800c4cc
 80018e0:	0800c4d0 	.word	0x0800c4d0

080018e4 <DAQ_CHANGE_save>:

void DAQ_CHANGE_save(DAQ_channel_no no) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(2, 2+(30*2), "Settings saved", Font_16x26, GREEN, BLACK);
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <DAQ_CHANGE_save+0x38>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	9202      	str	r2, [sp, #8]
 80018f4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80018f8:	9201      	str	r2, [sp, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	9200      	str	r2, [sp, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <DAQ_CHANGE_save+0x3c>)
 8001902:	213e      	movs	r1, #62	; 0x3e
 8001904:	2002      	movs	r0, #2
 8001906:	f004 fe19 	bl	800653c <ST7735_WriteString>

	DAQ_channel_set_flag_save(no, false);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fde2 	bl	80014d8 <DAQ_channel_set_flag_save>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000003c 	.word	0x2000003c
 8001920:	0800c4d4 	.word	0x0800c4d4

08001924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_DMA_Init+0x5c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <MX_DMA_Init+0x5c>)
 8001934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_DMA_Init+0x5c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2038      	movs	r0, #56	; 0x38
 800194c:	f002 f809 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001950:	2038      	movs	r0, #56	; 0x38
 8001952:	f002 f822 	bl	800399a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2044      	movs	r0, #68	; 0x44
 800195c:	f002 f801 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001960:	2044      	movs	r0, #68	; 0x44
 8001962:	f002 f81a 	bl	800399a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2046      	movs	r0, #70	; 0x46
 800196c:	f001 fff9 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001970:	2046      	movs	r0, #70	; 0x46
 8001972:	f002 f812 	bl	800399a <HAL_NVIC_EnableIRQ>

}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	; 0x30
 8001988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <MX_GPIO_Init+0x188>)
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a3e      	ldr	r2, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_GPIO_Init+0x188>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001a48:	4831      	ldr	r0, [pc, #196]	; (8001b10 <MX_GPIO_Init+0x18c>)
 8001a4a:	f002 fccd 	bl	80043e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a54:	482f      	ldr	r0, [pc, #188]	; (8001b14 <MX_GPIO_Init+0x190>)
 8001a56:	f002 fcc7 	bl	80043e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	218f      	movs	r1, #143	; 0x8f
 8001a5e:	482e      	ldr	r0, [pc, #184]	; (8001b18 <MX_GPIO_Init+0x194>)
 8001a60:	f002 fcc2 	bl	80043e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001a64:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4824      	ldr	r0, [pc, #144]	; (8001b10 <MX_GPIO_Init+0x18c>)
 8001a7e:	f002 fb17 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4820      	ldr	r0, [pc, #128]	; (8001b1c <MX_GPIO_Init+0x198>)
 8001a9a:	f002 fb09 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4817      	ldr	r0, [pc, #92]	; (8001b14 <MX_GPIO_Init+0x190>)
 8001ab8:	f002 fafa 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001abc:	230f      	movs	r3, #15
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <MX_GPIO_Init+0x194>)
 8001ad4:	f002 faec 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <MX_GPIO_Init+0x194>)
 8001af0:	f002 fade 	bl	80040b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2028      	movs	r0, #40	; 0x28
 8001afa:	f001 ff32 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afe:	2028      	movs	r0, #40	; 0x28
 8001b00:	f001 ff4b 	bl	800399a <HAL_NVIC_EnableIRQ>

}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000

08001b20 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <MX_I2C2_Init+0x54>)
 8001b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_I2C2_Init+0x58>)
 8001b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b5e:	f002 fc75 	bl	800444c <HAL_I2C_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b68:	f000 fbca 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000544 	.word	0x20000544
 8001b74:	40005800 	.word	0x40005800
 8001b78:	000186a0 	.word	0x000186a0

08001b7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_I2C_MspInit+0x84>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12c      	bne.n	8001bf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_I2C_MspInit+0x88>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <HAL_I2C_MspInit+0x8c>)
 8001bd8:	f002 fa6a 	bl	80040b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_I2C_MspInit+0x88>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_I2C_MspInit+0x88>)
 8001be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_I2C_MspInit+0x88>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40005800 	.word	0x40005800
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400

08001c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c12:	f001 f92d 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c16:	f000 f977 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1a:	f7ff feb3 	bl	8001984 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c1e:	f7ff fe81 	bl	8001924 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c22:	f7ff fa61 	bl	80010e8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001c26:	f001 f823 	bl	8002c70 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001c2a:	f7ff ff79 	bl	8001b20 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001c2e:	f000 fd97 	bl	8002760 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001c32:	f000 ff77 	bl	8002b24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
/* -------------------------------------------------------------------------------- */
/* -- TIMERS START -- */
/* -------------------------------------------------------------------------------- */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c36:	213c      	movs	r1, #60	; 0x3c
 8001c38:	48a2      	ldr	r0, [pc, #648]	; (8001ec4 <main+0x2b8>)
 8001c3a:	f003 fcf5 	bl	8005628 <HAL_TIM_Encoder_Start>
//  HAL_UART_Receive_DMA(&huart1, Received, 13);

/* -------------------------------------------------------------------------------- */
/* -- CREATE ENCODER -- */
/* -------------------------------------------------------------------------------- */
  encoder_struct_init(&encoder_1, &htim1);
 8001c3e:	49a1      	ldr	r1, [pc, #644]	; (8001ec4 <main+0x2b8>)
 8001c40:	48a1      	ldr	r0, [pc, #644]	; (8001ec8 <main+0x2bc>)
 8001c42:	f004 fd87 	bl	8006754 <encoder_struct_init>

/* -------------------------------------------------------------------------------- */
/* -- LCD ST7735 SCREEN INIT -- */
/* -------------------------------------------------------------------------------- */
  ST7735_Init(1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f004 fb16 	bl	8006278 <ST7735_Init>

/* -------------------------------------------------------------------------------- */
/* -- MENU INIT -- */
/* -------------------------------------------------------------------------------- */
  GUI_init();
 8001c4c:	f005 f89c 	bl	8006d88 <GUI_init>
  Menu_Show();
 8001c50:	f004 feba 	bl	80069c8 <Menu_Show>

/* -------------------------------------------------------------------------------- */
/* -- ADC1 START 9 channels -- */
/* -------------------------------------------------------------------------------- */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1read, 9);   // frequency > 10kHz( 0.1 ms/100us )
 8001c54:	2209      	movs	r2, #9
 8001c56:	499d      	ldr	r1, [pc, #628]	; (8001ecc <main+0x2c0>)
 8001c58:	489d      	ldr	r0, [pc, #628]	; (8001ed0 <main+0x2c4>)
 8001c5a:	f001 f9e3 	bl	8003024 <HAL_ADC_Start_DMA>


/* -------------------------------------------------------------------------------- */
/* -- Initialise channels  -- */
/* -------------------------------------------------------------------------------- */
  DAQ_channel_init(DAQ_CH1, CHANNEL_1_GPIO_TypeDef, CHANNEL_1_GPIO_Pin, &thermistor[0], &photodiode[0]);
 8001c5e:	4b9d      	ldr	r3, [pc, #628]	; (8001ed4 <main+0x2c8>)
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4b9d      	ldr	r3, [pc, #628]	; (8001ed8 <main+0x2cc>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	499d      	ldr	r1, [pc, #628]	; (8001edc <main+0x2d0>)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fb77 	bl	800135c <DAQ_channel_init>
  DAQ_channel_init(DAQ_CH2, CHANNEL_2_GPIO_TypeDef, CHANNEL_2_GPIO_Pin, &thermistor[1], &photodiode[1]);
 8001c6e:	4b9c      	ldr	r3, [pc, #624]	; (8001ee0 <main+0x2d4>)
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4b9c      	ldr	r3, [pc, #624]	; (8001ee4 <main+0x2d8>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	4999      	ldr	r1, [pc, #612]	; (8001edc <main+0x2d0>)
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fb6f 	bl	800135c <DAQ_channel_init>
  DAQ_channel_init(DAQ_CH3, CHANNEL_3_GPIO_TypeDef, CHANNEL_3_GPIO_Pin, &thermistor[2], &photodiode[2]);
 8001c7e:	4b9a      	ldr	r3, [pc, #616]	; (8001ee8 <main+0x2dc>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b9a      	ldr	r3, [pc, #616]	; (8001eec <main+0x2e0>)
 8001c84:	2204      	movs	r2, #4
 8001c86:	4995      	ldr	r1, [pc, #596]	; (8001edc <main+0x2d0>)
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff fb67 	bl	800135c <DAQ_channel_init>
  DAQ_channel_init(DAQ_CH4, CHANNEL_4_GPIO_TypeDef, CHANNEL_4_GPIO_Pin, &thermistor[3], &photodiode[3]);
 8001c8e:	4b98      	ldr	r3, [pc, #608]	; (8001ef0 <main+0x2e4>)
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4b98      	ldr	r3, [pc, #608]	; (8001ef4 <main+0x2e8>)
 8001c94:	2208      	movs	r2, #8
 8001c96:	4991      	ldr	r1, [pc, #580]	; (8001edc <main+0x2d0>)
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7ff fb5f 	bl	800135c <DAQ_channel_init>

  HAL_Delay(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca2:	f001 f957 	bl	8002f54 <HAL_Delay>

  DAQ_channel_set_th_limit(DAQ_CH1, 2500);
 8001ca6:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fc48 	bl	8001540 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH1, 50000);
 8001cb0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fcb1 	bl	800161c <DAQ_channel_set_ph_limit>

  DAQ_channel_set_th_limit(DAQ_CH2, 2500);
 8001cba:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff fc3e 	bl	8001540 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH2, 50000);
 8001cc4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff fca7 	bl	800161c <DAQ_channel_set_ph_limit>

  DAQ_channel_set_th_limit(DAQ_CH3, 2500);
 8001cce:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f7ff fc34 	bl	8001540 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH3, 50000);
 8001cd8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff fc9d 	bl	800161c <DAQ_channel_set_ph_limit>

  DAQ_channel_set_th_limit(DAQ_CH4, 2500);
 8001ce2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7ff fc2a 	bl	8001540 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH4, 50000);
 8001cec:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f7ff fc93 	bl	800161c <DAQ_channel_set_ph_limit>


  for(uint8_t i = 0; i < THERMISTORS_FIR_NUMBER; i++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	e00c      	b.n	8001d16 <main+0x10a>
	  FIRFilter_Init(&moving_average_thermistors[i]);
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	4a7c      	ldr	r2, [pc, #496]	; (8001ef8 <main+0x2ec>)
 8001d08:	4413      	add	r3, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f96e 	bl	8000fec <FIRFilter_Init>
  for(uint8_t i = 0; i < THERMISTORS_FIR_NUMBER; i++) {
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	3301      	adds	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d9ef      	bls.n	8001cfc <main+0xf0>
  }
  for(uint8_t i = 0; i < PHOTODIODES_FIR_NUMBER; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71bb      	strb	r3, [r7, #6]
 8001d20:	e00c      	b.n	8001d3c <main+0x130>
  	  FIRFilter_Init(&moving_average_photodiodes[i]);
 8001d22:	79ba      	ldrb	r2, [r7, #6]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4a73      	ldr	r2, [pc, #460]	; (8001efc <main+0x2f0>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f95b 	bl	8000fec <FIRFilter_Init>
  for(uint8_t i = 0; i < PHOTODIODES_FIR_NUMBER; i++) {
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	71bb      	strb	r3, [r7, #6]
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d9ef      	bls.n	8001d22 <main+0x116>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  menu_flags.flag_encoder_event = true;
 8001d42:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <main+0x2f4>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	if(!menu_flags.flag_function) {
 8001d48:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <main+0x2f4>)
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <main+0x14e>
		menu_encoder_event();
 8001d56:	f000 f941 	bl	8001fdc <menu_encoder_event>
	}

	if(menu_flags.flag_clear_screen) {
 8001d5a:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <main+0x2f4>)
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <main+0x162>
		ST7735_FillScreen(BLACK);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f004 fcc6 	bl	80066f4 <ST7735_FillScreen>
		menu_flags.flag_clear_screen = false;
 8001d68:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <main+0x2f4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	705a      	strb	r2, [r3, #1]
	}

	if(menu_flags.flag_show_menu) {
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <main+0x2f4>)
 8001d70:	789b      	ldrb	r3, [r3, #2]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <main+0x17a>
		ST7735_FillScreen(BLACK);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f004 fcbc 	bl	80066f4 <ST7735_FillScreen>
		Menu_Show();
 8001d7c:	f004 fe24 	bl	80069c8 <Menu_Show>
		menu_flags.flag_show_menu = false;
 8001d80:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <main+0x2f4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	709a      	strb	r2, [r3, #2]
	}

	if(menu_flags.flag_function) {
 8001d86:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <main+0x2f4>)
 8001d88:	78db      	ldrb	r3, [r3, #3]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d032      	beq.n	8001df4 <main+0x1e8>

		for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++) {
 8001d8e:	2300      	movs	r3, #0
 8001d90:	717b      	strb	r3, [r7, #5]
 8001d92:	e02c      	b.n	8001dee <main+0x1e2>
			if(DAQ_channel_get_flag_enable(i)) {
 8001d94:	797b      	ldrb	r3, [r7, #5]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fcc0 	bl	800171c <DAQ_channel_get_flag_enable>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <main+0x19e>
				DAQ_CHANGE_enable(i);
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fd4b 	bl	8001840 <DAQ_CHANGE_enable>
			}
			if(DAQ_channel_get_flag_th_limit(i)) {
 8001daa:	797b      	ldrb	r3, [r7, #5]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fce1 	bl	8001774 <DAQ_channel_get_flag_th_limit>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <main+0x1b2>
				menu_flags.flag_CHANGE_value = true;
 8001db8:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <main+0x2f4>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	711a      	strb	r2, [r3, #4]
			}
			if(DAQ_channel_get_flag_ph_limit(i)) {
 8001dbe:	797b      	ldrb	r3, [r7, #5]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fced 	bl	80017a0 <DAQ_channel_get_flag_ph_limit>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <main+0x1c6>
				menu_flags.flag_CHANGE_value = true;
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <main+0x2f4>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	711a      	strb	r2, [r3, #4]
			}
			if(DAQ_channel_get_flag_save(i)) {
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fcb7 	bl	8001748 <DAQ_channel_get_flag_save>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <main+0x1dc>
				DAQ_CHANGE_save(i);
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fd7e 	bl	80018e4 <DAQ_CHANGE_save>
		for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++) {
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	3301      	adds	r3, #1
 8001dec:	717b      	strb	r3, [r7, #5]
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d9cf      	bls.n	8001d94 <main+0x188>
			}
		}
	}

	if(menu_flags.flag_CHANGE_value){
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <main+0x2f4>)
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <main+0x218>
		for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++) {
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	713b      	strb	r3, [r7, #4]
 8001e00:	e00d      	b.n	8001e1e <main+0x212>
			if(DAQ_channel_get_flag_th_limit(i)) {
 8001e02:	793b      	ldrb	r3, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fcb5 	bl	8001774 <DAQ_channel_get_flag_th_limit>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <main+0x20c>
//				MENU_CHANGE_value(DAQ_channel[no].th_limit);
			}
			else if(DAQ_channel_get_flag_ph_limit(i)){
 8001e10:	793b      	ldrb	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fcc4 	bl	80017a0 <DAQ_channel_get_flag_ph_limit>
		for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++) {
 8001e18:	793b      	ldrb	r3, [r7, #4]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	713b      	strb	r3, [r7, #4]
 8001e1e:	793b      	ldrb	r3, [r7, #4]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d9ee      	bls.n	8001e02 <main+0x1f6>
			}
		}

	}

	if(menu_flags.flag_display_measurements) {
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <main+0x2f4>)
 8001e26:	79db      	ldrb	r3, [r3, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <main+0x242>
		display_values();
 8001e2c:	f000 f8f4 	bl	8002018 <display_values>
		if(encoder_enter(&encoder_1)) {
 8001e30:	4825      	ldr	r0, [pc, #148]	; (8001ec8 <main+0x2bc>)
 8001e32:	f004 fd65 	bl	8006900 <encoder_enter>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <main+0x242>
			menu_flags.flag_display_measurements = false;
 8001e3c:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <main+0x2f4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	71da      	strb	r2, [r3, #7]
			menu_flags.flag_show_menu = true;
 8001e42:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <main+0x2f4>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	709a      	strb	r2, [r3, #2]
			menu_flags.flag_function = false;
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <main+0x2f4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	70da      	strb	r2, [r3, #3]
		}
	}

	if(FIR_flag) {
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <main+0x2f8>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f43f af78 	beq.w	8001d48 <main+0x13c>
		for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	e02b      	b.n	8001eb6 <main+0x2aa>
			FIRFilter_Update(&moving_average_thermistors[channel_no], ADC1read[channel_no]);
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <main+0x2ec>)
 8001e6a:	441a      	add	r2, r3
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <main+0x2c0>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	4610      	mov	r0, r2
 8001e82:	f7ff f8d5 	bl	8001030 <FIRFilter_Update>
			FIRFilter_Update(&moving_average_photodiodes[channel_no], ADC1read[channel_no+4]);
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <main+0x2f0>)
 8001e92:	441a      	add	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	3304      	adds	r3, #4
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <main+0x2c0>)
 8001e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7ff f8c0 	bl	8001030 <FIRFilter_Update>
		for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	ddd0      	ble.n	8001e5e <main+0x252>
		}

		FIR_flag = false;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <main+0x2f8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
	if(!menu_flags.flag_function) {
 8001ec2:	e741      	b.n	8001d48 <main+0x13c>
 8001ec4:	200007e0 	.word	0x200007e0
 8001ec8:	200006b8 	.word	0x200006b8
 8001ecc:	2000036c 	.word	0x2000036c
 8001ed0:	20000390 	.word	0x20000390
 8001ed4:	20000444 	.word	0x20000444
 8001ed8:	20000514 	.word	0x20000514
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	20000450 	.word	0x20000450
 8001ee4:	20000520 	.word	0x20000520
 8001ee8:	2000045c 	.word	0x2000045c
 8001eec:	2000052c 	.word	0x2000052c
 8001ef0:	20000468 	.word	0x20000468
 8001ef4:	20000538 	.word	0x20000538
 8001ef8:	200005f8 	.word	0x200005f8
 8001efc:	200006c8 	.word	0x200006c8
 8001f00:	20000478 	.word	0x20000478
 8001f04:	20000354 	.word	0x20000354

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	; 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	2230      	movs	r2, #48	; 0x30
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fb94 	bl	8007644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <SystemClock_Config+0xcc>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <SystemClock_Config+0xcc>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <SystemClock_Config+0xcc>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <SystemClock_Config+0xd0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <SystemClock_Config+0xd0>)
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <SystemClock_Config+0xd0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f70:	2302      	movs	r3, #2
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f7c:	23a8      	movs	r3, #168	; 0xa8
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f84:	2304      	movs	r3, #4
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fba1 	bl	80046d4 <HAL_RCC_OscConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f98:	f000 f9b2 	bl	8002300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2105      	movs	r1, #5
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fe02 	bl	8004bc4 <HAL_RCC_ClockConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fc6:	f000 f99b 	bl	8002300 <Error_Handler>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3750      	adds	r7, #80	; 0x50
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000

08001fdc <menu_encoder_event>:

/* USER CODE BEGIN 4 */
void menu_encoder_event(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

	  if( encoder_step_clockwise(&encoder_1) == true) {
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <menu_encoder_event+0x38>)
 8001fe2:	f004 fc63 	bl	80068ac <encoder_step_clockwise>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <menu_encoder_event+0x14>
		Menu_SelectNext();
 8001fec:	f004 fdc6 	bl	8006b7c <Menu_SelectNext>
	  }
	  if(encoder_step_counterclockwise(&encoder_1) == true) {
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <menu_encoder_event+0x38>)
 8001ff2:	f004 fc70 	bl	80068d6 <encoder_step_counterclockwise>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <menu_encoder_event+0x24>
		Menu_SelectPrev();
 8001ffc:	f004 fe2c 	bl	8006c58 <Menu_SelectPrev>
	  }
	  if(encoder_enter(&encoder_1) == true) {
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <menu_encoder_event+0x38>)
 8002002:	f004 fc7d 	bl	8006900 <encoder_enter>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <menu_encoder_event+0x34>
	  		Menu_Click();
 800200c:	f004 fe8a 	bl	8006d24 <Menu_Click>
	  }
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200006b8 	.word	0x200006b8

08002018 <display_values>:

void display_values(void) {
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b0a1      	sub	sp, #132	; 0x84
 800201c:	af04      	add	r7, sp, #16

	for(int i = 0; i<4; i++) {
 800201e:	2300      	movs	r3, #0
 8002020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002022:	e020      	b.n	8002066 <display_values+0x4e>
		photodiode[i].power_value = photodiode_ADC_to_power(moving_average_photodiodes[i].out, ADC1read[8]);
 8002024:	4975      	ldr	r1, [pc, #468]	; (80021fc <display_values+0x1e4>)
 8002026:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	440b      	add	r3, r1
 8002032:	332c      	adds	r3, #44	; 0x2c
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203c:	4b70      	ldr	r3, [pc, #448]	; (8002200 <display_values+0x1e8>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4619      	mov	r1, r3
 8002042:	ee17 0a90 	vmov	r0, s15
 8002046:	f000 fb2b 	bl	80026a0 <photodiode_ADC_to_power>
 800204a:	eef0 7a40 	vmov.f32	s15, s0
 800204e:	496d      	ldr	r1, [pc, #436]	; (8002204 <display_values+0x1ec>)
 8002050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<4; i++) {
 8002060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002062:	3301      	adds	r3, #1
 8002064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002068:	2b03      	cmp	r3, #3
 800206a:	dddb      	ble.n	8002024 <display_values+0xc>
	}
	for(int i = 0; i<4; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002070:	e020      	b.n	80020b4 <display_values+0x9c>
		thermistor[i].temperature_value = ntc3950_ADC_to_Celcius(moving_average_thermistors[i].out, ADC1read[8]);
 8002072:	4965      	ldr	r1, [pc, #404]	; (8002208 <display_values+0x1f0>)
 8002074:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	440b      	add	r3, r1
 8002080:	332c      	adds	r3, #44	; 0x2c
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <display_values+0x1e8>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4619      	mov	r1, r3
 8002090:	ee17 0a90 	vmov	r0, s15
 8002094:	f000 fa08 	bl	80024a8 <ntc3950_ADC_to_Celcius>
 8002098:	eef0 7a40 	vmov.f32	s15, s0
 800209c:	495b      	ldr	r1, [pc, #364]	; (800220c <display_values+0x1f4>)
 800209e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<4; i++) {
 80020ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b0:	3301      	adds	r3, #1
 80020b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80020b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	dddb      	ble.n	8002072 <display_values+0x5a>
	}

	char text[8][12];
	for (int i = 0; i<4; i++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	667b      	str	r3, [r7, #100]	; 0x64
 80020be:	e094      	b.n	80021ea <display_values+0x1d2>
		sprintf(text[i], "T%d:%.1fC < %.1fC", i, thermistor[i].temperature_value, thermistor[i].temperature_max_value);
 80020c0:	1d39      	adds	r1, r7, #4
 80020c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	18ce      	adds	r6, r1, r3
 80020ce:	494f      	ldr	r1, [pc, #316]	; (800220c <display_values+0x1f4>)
 80020d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa32 	bl	8000548 <__aeabi_f2d>
 80020e4:	4604      	mov	r4, r0
 80020e6:	460d      	mov	r5, r1
 80020e8:	4948      	ldr	r1, [pc, #288]	; (800220c <display_values+0x1f4>)
 80020ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	3304      	adds	r3, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002108:	e9cd 4500 	strd	r4, r5, [sp]
 800210c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800210e:	4940      	ldr	r1, [pc, #256]	; (8002210 <display_values+0x1f8>)
 8002110:	4630      	mov	r0, r6
 8002112:	f006 f91f 	bl	8008354 <siprintf>
		ST7735_WriteString(2, 2+(30*i), text[i], Font_7x10, WHITE, BLACK);
 8002116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002118:	b29b      	uxth	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	b29b      	uxth	r3, r3
 8002124:	3302      	adds	r3, #2
 8002126:	b298      	uxth	r0, r3
 8002128:	1d39      	adds	r1, r7, #4
 800212a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4419      	add	r1, r3
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <display_values+0x1fc>)
 8002138:	2200      	movs	r2, #0
 800213a:	9202      	str	r2, [sp, #8]
 800213c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	9200      	str	r2, [sp, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	460a      	mov	r2, r1
 800214a:	4601      	mov	r1, r0
 800214c:	2002      	movs	r0, #2
 800214e:	f004 f9f5 	bl	800653c <ST7735_WriteString>

		sprintf(text[i], "P%d:%.1fmW < %.1fmW", i, photodiode[i].power_value, photodiode[i].power_max_value);
 8002152:	1d39      	adds	r1, r7, #4
 8002154:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	18ce      	adds	r6, r1, r3
 8002160:	4928      	ldr	r1, [pc, #160]	; (8002204 <display_values+0x1ec>)
 8002162:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f9e9 	bl	8000548 <__aeabi_f2d>
 8002176:	4604      	mov	r4, r0
 8002178:	460d      	mov	r5, r1
 800217a:	4922      	ldr	r1, [pc, #136]	; (8002204 <display_values+0x1ec>)
 800217c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3304      	adds	r3, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9db 	bl	8000548 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800219a:	e9cd 4500 	strd	r4, r5, [sp]
 800219e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021a0:	491d      	ldr	r1, [pc, #116]	; (8002218 <display_values+0x200>)
 80021a2:	4630      	mov	r0, r6
 80021a4:	f006 f8d6 	bl	8008354 <siprintf>
		ST7735_WriteString(2, 17+(30*i), text[i], Font_7x10, WHITE, BLACK);
 80021a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3311      	adds	r3, #17
 80021b8:	b298      	uxth	r0, r3
 80021ba:	1d39      	adds	r1, r7, #4
 80021bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4419      	add	r1, r3
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <display_values+0x1fc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	9202      	str	r2, [sp, #8]
 80021ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d2:	9201      	str	r2, [sp, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	9200      	str	r2, [sp, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	460a      	mov	r2, r1
 80021dc:	4601      	mov	r1, r0
 80021de:	2002      	movs	r0, #2
 80021e0:	f004 f9ac 	bl	800653c <ST7735_WriteString>
	for (int i = 0; i<4; i++) {
 80021e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e6:	3301      	adds	r3, #1
 80021e8:	667b      	str	r3, [r7, #100]	; 0x64
 80021ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	f77f af67 	ble.w	80020c0 <display_values+0xa8>
	}

}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	3774      	adds	r7, #116	; 0x74
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fc:	200006c8 	.word	0x200006c8
 8002200:	2000036c 	.word	0x2000036c
 8002204:	20000444 	.word	0x20000444
 8002208:	200005f8 	.word	0x200005f8
 800220c:	20000514 	.word	0x20000514
 8002210:	0800c4e4 	.word	0x0800c4e4
 8002214:	20000034 	.word	0x20000034
 8002218:	0800c4f8 	.word	0x0800c4f8

0800221c <Average_IsLimit>:

_Bool Average_IsLimit(DAQ_channel_no no) {
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	if (moving_average_photodiodes[no].out >= DAQ_channel[no].ph->ADC_max_value || moving_average_thermistors[no].out <= DAQ_channel[no].th->ADC_max_value) {
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	4920      	ldr	r1, [pc, #128]	; (80022ac <Average_IsLimit+0x90>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	332c      	adds	r3, #44	; 0x2c
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	491c      	ldr	r1, [pc, #112]	; (80022b0 <Average_IsLimit+0x94>)
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3310      	adds	r3, #16
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	da1c      	bge.n	800229a <Average_IsLimit+0x7e>
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	4914      	ldr	r1, [pc, #80]	; (80022b4 <Average_IsLimit+0x98>)
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	440b      	add	r3, r1
 800226e:	332c      	adds	r3, #44	; 0x2c
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	490e      	ldr	r1, [pc, #56]	; (80022b0 <Average_IsLimit+0x94>)
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	330c      	adds	r3, #12
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	d801      	bhi.n	800229e <Average_IsLimit+0x82>
		return true;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <Average_IsLimit+0x84>
	}
	else
	return false;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	200006c8 	.word	0x200006c8
 80022b0:	20000484 	.word	0x20000484
 80022b4:	200005f8 	.word	0x200005f8

080022b8 <HAL_ADC_ConvCpltCallback>:
{
//	 HAL_UART_Receive_DMA(&huart1, Received, 13); // Ponowne włączenie nasłuchiwania
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

	FIR_flag = true;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_ADC_ConvCpltCallback+0x44>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]

	for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e00f      	b.n	80022ec <HAL_ADC_ConvCpltCallback+0x34>

		if(Average_IsLimit(channel_no))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ffa3 	bl	800221c <Average_IsLimit>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_ADC_ConvCpltCallback+0x2e>
			 {
				DAQ_channel_off(channel_no);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa73 	bl	80017cc <DAQ_channel_off>
	for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	ddec      	ble.n	80022cc <HAL_ADC_ConvCpltCallback+0x14>
			 }
	}

}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000354 	.word	0x20000354

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <ntc3950_Celcius_to_ADC>:
void thermistor_init(struct thermistor *th, float temperature_max_value) {
	th->temperature_max_value = temperature_max_value;
	th->ADC_max_value = ntc3950_Celcius_to_ADC(temperature_max_value, ADC1read[8]);
}

uint32_t ntc3950_Celcius_to_ADC(float temperature_value, uint32_t ADC_VREFINT_value) {
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	ed87 0a01 	vstr	s0, [r7, #4]
 800231a:	6038      	str	r0, [r7, #0]

//	float vrefint = 0; 	//Reference internal voltage
//	float vrefext = 0; 	//External voltage calculated based on vrefint

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
	float vmeas = 0; 	//Measured voltage in volts [V]
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
	double Rntc = 0; 	//Resistance of the thermistor
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint32_t ADC_value = 0; // Calculated ADC value
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]


//	vrefint = VCAL * (*TEMP30_CAL_ADDR) / ADC_BUF_LEN;
//	vrefext = vrefint * ADC_BUF_LEN / ADC_VREFINT_value;

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 8002338:	4b57      	ldr	r3, [pc, #348]	; (8002498 <ntc3950_Celcius_to_ADC+0x188>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f8f1 	bl	8000524 <__aeabi_i2d>
 8002342:	a34b      	add	r3, pc, #300	; (adr r3, 8002470 <ntc3950_Celcius_to_ADC+0x160>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f956 	bl	80005f8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4614      	mov	r4, r2
 8002352:	461d      	mov	r5, r3
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f7fe f8d5 	bl	8000504 <__aeabi_ui2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe fa73 	bl	800084c <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc3b 	bl	8000be8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c

//	Rntc = ((float)_NTC_BETA) * ( (1/((float)_NTC_TEMP_NOMINAL) + 273.15f) - (1/temperature_value + 273.15f) );
//	Rntc = exp(Rntc);
//	Rntc = (float)_NTC_R_NOMINAL / Rntc;

	double T = temperature_value + 273.15;
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe f8e6 	bl	8000548 <__aeabi_f2d>
 800237c:	a33e      	add	r3, pc, #248	; (adr r3, 8002478 <ntc3950_Celcius_to_ADC+0x168>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fd ff83 	bl	800028c <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double To = _NTC_TEMP_NOMINAL + 273.15;
 800238e:	a33c      	add	r3, pc, #240	; (adr r3, 8002480 <ntc3950_Celcius_to_ADC+0x170>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	e9c7 2302 	strd	r2, r3, [r7, #8]


	Rntc = ( 1/T - 1 / To);
 8002398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800239c:	f04f 0000 	mov.w	r0, #0
 80023a0:	493e      	ldr	r1, [pc, #248]	; (800249c <ntc3950_Celcius_to_ADC+0x18c>)
 80023a2:	f7fe fa53 	bl	800084c <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	4939      	ldr	r1, [pc, #228]	; (800249c <ntc3950_Celcius_to_ADC+0x18c>)
 80023b8:	f7fe fa48 	bl	800084c <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fd ff60 	bl	8000288 <__aeabi_dsub>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Rntc = ((float)_NTC_BETA) * Rntc;
 80023d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002488 <ntc3950_Celcius_to_ADC+0x178>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023da:	f7fe f90d 	bl	80005f8 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Rntc = exp(Rntc);
 80023e6:	ed97 0b08 	vldr	d0, [r7, #32]
 80023ea:	f009 fd59 	bl	800bea0 <exp>
 80023ee:	ed87 0b08 	vstr	d0, [r7, #32]
	Rntc = (float)_NTC_R_NOMINAL * Rntc;
 80023f2:	a327      	add	r3, pc, #156	; (adr r3, 8002490 <ntc3950_Celcius_to_ADC+0x180>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023fc:	f7fe f8fc 	bl	80005f8 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	e9c7 2308 	strd	r2, r3, [r7, #32]

	vmeas = (Rntc * V_DDA) / (Rntc + (float)_NTC_R_NOMINAL);
 8002408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800240a:	f7fe f89d 	bl	8000548 <__aeabi_f2d>
 800240e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002412:	f7fe f8f1 	bl	80005f8 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	a31c      	add	r3, pc, #112	; (adr r3, 8002490 <ntc3950_Celcius_to_ADC+0x180>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002428:	f7fd ff30 	bl	800028c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fe fa0a 	bl	800084c <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fbd2 	bl	8000be8 <__aeabi_d2f>
 8002444:	4603      	mov	r3, r0
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

	ADC_value = (vmeas * ADC_BUF_LEN) / V_DDA;
 8002448:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800244c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024a0 <ntc3950_Celcius_to_ADC+0x190>
 8002450:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002454:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	ee17 3a90 	vmov	r3, s15
 8002464:	61fb      	str	r3, [r7, #28]

	return ADC_value;
 8002466:	69fb      	ldr	r3, [r7, #28]


}
 8002468:	4618      	mov	r0, r3
 800246a:	3730      	adds	r7, #48	; 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bdb0      	pop	{r4, r5, r7, pc}
 8002470:	66666666 	.word	0x66666666
 8002474:	400a6666 	.word	0x400a6666
 8002478:	66666666 	.word	0x66666666
 800247c:	40711266 	.word	0x40711266
 8002480:	66666666 	.word	0x66666666
 8002484:	4072a266 	.word	0x4072a266
 8002488:	00000000 	.word	0x00000000
 800248c:	40aedc00 	.word	0x40aedc00
 8002490:	00000000 	.word	0x00000000
 8002494:	40c38800 	.word	0x40c38800
 8002498:	1fff7a2a 	.word	0x1fff7a2a
 800249c:	3ff00000 	.word	0x3ff00000
 80024a0:	457ff000 	.word	0x457ff000
 80024a4:	00000000 	.word	0x00000000

080024a8 <ntc3950_ADC_to_Celcius>:

float ntc3950_ADC_to_Celcius(uint32_t ADC_value, uint32_t ADC_VREFINT_value)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
//	float vrefint = 0; 	//Reference internal voltage
//	float vrefext = 0; 	//External voltage calculated based on vrefint

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
	float vmeas = 0; 	//Measured voltage in volts [V]
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
	float Rntc = 0; 	//Resistance of the thermistor
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
	float temp_C = 0; 	//Calculated temperature in Celcius
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]

//	vrefint = VCAL * (*TEMP30_CAL_ADDR) / ADC_BUF_LEN;
//	vrefext = vrefint * ADC_BUF_LEN / ADC_VREFINT_value;

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <ntc3950_ADC_to_Celcius+0x118>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f828 	bl	8000524 <__aeabi_i2d>
 80024d4:	a338      	add	r3, pc, #224	; (adr r3, 80025b8 <ntc3950_ADC_to_Celcius+0x110>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f88d 	bl	80005f8 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4614      	mov	r4, r2
 80024e4:	461d      	mov	r5, r3
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f7fe f80c 	bl	8000504 <__aeabi_ui2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fe f9aa 	bl	800084c <__aeabi_ddiv>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe fb72 	bl	8000be8 <__aeabi_d2f>
 8002504:	4603      	mov	r3, r0
 8002506:	617b      	str	r3, [r7, #20]
	vmeas = (V_DDA / ADC_BUF_LEN) * ADC_value;
 8002508:	edd7 7a05 	vldr	s15, [r7, #20]
 800250c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80025c4 <ntc3950_ADC_to_Celcius+0x11c>
 8002510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculating Resistance of the NTC Vmeasured*10kOhms
	Rntc= (vmeas * (float)_NTC_R_NOMINAL) / (V_DDA - vmeas);
 8002526:	edd7 7a04 	vldr	s15, [r7, #16]
 800252a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80025c8 <ntc3950_ADC_to_Celcius+0x120>
 800252e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002532:	ed97 7a05 	vldr	s14, [r7, #20]
 8002536:	edd7 7a04 	vldr	s15, [r7, #16]
 800253a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800253e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002542:	edc7 7a03 	vstr	s15, [r7, #12]
	//	- R1 = resistance at 25C
	//	- R2 = measured resistance
	//	- T1 = nominal temperature 25C

	// Calculating Temperature
	temp_C = Rntc/(float)_NTC_R_NOMINAL;
 8002546:	ed97 7a03 	vldr	s14, [r7, #12]
 800254a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80025c8 <ntc3950_ADC_to_Celcius+0x120>
 800254e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002552:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C = logf(temp_C);
 8002556:	ed97 0a02 	vldr	s0, [r7, #8]
 800255a:	f009 fcef 	bl	800bf3c <logf>
 800255e:	ed87 0a02 	vstr	s0, [r7, #8]
	temp_C = temp_C/(float)_NTC_BETA;
 8002562:	ed97 7a02 	vldr	s14, [r7, #8]
 8002566:	eddf 6a19 	vldr	s13, [pc, #100]	; 80025cc <ntc3950_ADC_to_Celcius+0x124>
 800256a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256e:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C += 1.0f / ((float)_NTC_TEMP_NOMINAL + 273.15f);
 8002572:	edd7 7a02 	vldr	s15, [r7, #8]
 8002576:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80025d0 <ntc3950_ADC_to_Celcius+0x128>
 800257a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800257e:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C = 1.0f/temp_C;
 8002582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002586:	ed97 7a02 	vldr	s14, [r7, #8]
 800258a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258e:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C -= 273.15f;
 8002592:	edd7 7a02 	vldr	s15, [r7, #8]
 8002596:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80025d4 <ntc3950_ADC_to_Celcius+0x12c>
 800259a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800259e:	edc7 7a02 	vstr	s15, [r7, #8]

	return temp_C;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	ee07 3a90 	vmov	s15, r3
}
 80025a8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bdb0      	pop	{r4, r5, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	f3af 8000 	nop.w
 80025b8:	66666666 	.word	0x66666666
 80025bc:	400a6666 	.word	0x400a6666
 80025c0:	1fff7a2a 	.word	0x1fff7a2a
 80025c4:	457ff000 	.word	0x457ff000
 80025c8:	461c4000 	.word	0x461c4000
 80025cc:	4576e000 	.word	0x4576e000
 80025d0:	3b5bcf0f 	.word	0x3b5bcf0f
 80025d4:	43889333 	.word	0x43889333

080025d8 <photodiode_power_to_ADC>:
void photodiode_init(struct photodiode *ph, float power_max_value) {
	ph->power_max_value = power_max_value;
	ph->ADC_max_value = photodiode_power_to_ADC(power_max_value, ADC1read[8]);
}

uint32_t photodiode_power_to_ADC(float power_value, uint32_t ADC_VREFINT_value) {
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	ed87 0a01 	vstr	s0, [r7, #4]
 80025e2:	6038      	str	r0, [r7, #0]

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
	float vmeas = 0; 	//Measured voltage in volts [V]
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
	uint32_t ADC_value = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <photodiode_power_to_ADC+0xb8>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff93 	bl	8000524 <__aeabi_i2d>
 80025fe:	a322      	add	r3, pc, #136	; (adr r3, 8002688 <photodiode_power_to_ADC+0xb0>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd fff8 	bl	80005f8 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f7fd ff77 	bl	8000504 <__aeabi_ui2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fe f915 	bl	800084c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fadd 	bl	8000be8 <__aeabi_d2f>
 800262e:	4603      	mov	r3, r0
 8002630:	61fb      	str	r3, [r7, #28]

	//Coefficients based on linear regression
	const float a = 7.84;
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <photodiode_power_to_ADC+0xbc>)
 8002634:	613b      	str	r3, [r7, #16]
	const float b = 51.88;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <photodiode_power_to_ADC+0xc0>)
 8002638:	60fb      	str	r3, [r7, #12]

	vmeas = (uint32_t) (a * power_value - b);
 800263a:	ed97 7a04 	vldr	s14, [r7, #16]
 800263e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002646:	edd7 7a03 	vldr	s15, [r7, #12]
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	edc7 7a06 	vstr	s15, [r7, #24]
	ADC_value = (vmeas * ADC_BUF_LEN) / V_DDA;
 800265a:	edd7 7a06 	vldr	s15, [r7, #24]
 800265e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800269c <photodiode_power_to_ADC+0xc4>
 8002662:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002666:	ed97 7a07 	vldr	s14, [r7, #28]
 800266a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800266e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002672:	ee17 3a90 	vmov	r3, s15
 8002676:	617b      	str	r3, [r7, #20]
	return ADC_value;
 8002678:	697b      	ldr	r3, [r7, #20]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bdb0      	pop	{r4, r5, r7, pc}
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	66666666 	.word	0x66666666
 800268c:	400a6666 	.word	0x400a6666
 8002690:	1fff7a2a 	.word	0x1fff7a2a
 8002694:	40fae148 	.word	0x40fae148
 8002698:	424f851f 	.word	0x424f851f
 800269c:	457ff000 	.word	0x457ff000

080026a0 <photodiode_ADC_to_power>:

float photodiode_ADC_to_power(uint32_t ADC_value, uint32_t ADC_VREFINT_value){
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
	float vmeas = 0; 	//Measured voltage in volts [V]
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
	float power_value = 0;
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <photodiode_ADC_to_power+0xb0>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff2f 	bl	8000524 <__aeabi_i2d>
 80026c6:	a320      	add	r3, pc, #128	; (adr r3, 8002748 <photodiode_ADC_to_power+0xa8>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fd ff94 	bl	80005f8 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	6838      	ldr	r0, [r7, #0]
 80026da:	f7fd ff13 	bl	8000504 <__aeabi_ui2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fe f8b1 	bl	800084c <__aeabi_ddiv>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe fa79 	bl	8000be8 <__aeabi_d2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	61fb      	str	r3, [r7, #28]
	vmeas = (V_DDA / ADC_BUF_LEN) * ADC_value;
 80026fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80026fe:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002754 <photodiode_ADC_to_power+0xb4>
 8002702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	edc7 7a06 	vstr	s15, [r7, #24]

	//Coefficients based on linear regression
	const float a = 7.84;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <photodiode_ADC_to_power+0xb8>)
 800271a:	613b      	str	r3, [r7, #16]
	const float b = 51.88;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <photodiode_ADC_to_power+0xbc>)
 800271e:	60fb      	str	r3, [r7, #12]

	power_value = (vmeas + b) / a;
 8002720:	ed97 7a06 	vldr	s14, [r7, #24]
 8002724:	edd7 7a03 	vldr	s15, [r7, #12]
 8002728:	ee77 6a27 	vadd.f32	s13, s14, s15
 800272c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002734:	edc7 7a05 	vstr	s15, [r7, #20]

	return power_value;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	ee07 3a90 	vmov	s15, r3

}
 800273e:	eeb0 0a67 	vmov.f32	s0, s15
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bdb0      	pop	{r4, r5, r7, pc}
 8002748:	66666666 	.word	0x66666666
 800274c:	400a6666 	.word	0x400a6666
 8002750:	1fff7a2a 	.word	0x1fff7a2a
 8002754:	457ff000 	.word	0x457ff000
 8002758:	40fae148 	.word	0x40fae148
 800275c:	424f851f 	.word	0x424f851f

08002760 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_SPI3_Init+0x68>)
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <MX_SPI3_Init+0x6c>)
 8002768:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_SPI3_Init+0x68>)
 800276c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002770:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_SPI3_Init+0x68>)
 8002774:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002778:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_SPI3_Init+0x68>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_SPI3_Init+0x68>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_SPI3_Init+0x68>)
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_SPI3_Init+0x68>)
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <MX_SPI3_Init+0x68>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <MX_SPI3_Init+0x68>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_SPI3_Init+0x68>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <MX_SPI3_Init+0x68>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <MX_SPI3_Init+0x68>)
 80027ae:	220a      	movs	r2, #10
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_SPI3_Init+0x68>)
 80027b4:	f002 fc02 	bl	8004fbc <HAL_SPI_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80027be:	f7ff fd9f 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000788 	.word	0x20000788
 80027cc:	40003c00 	.word	0x40003c00

080027d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_SPI_MspInit+0x84>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12c      	bne.n	800284c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_SPI_MspInit+0x88>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_SPI_MspInit+0x88>)
 80027fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800282a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800283c:	2306      	movs	r3, #6
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_SPI_MspInit+0x8c>)
 8002848:	f001 fc32 	bl	80040b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	; 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40003c00 	.word	0x40003c00
 8002858:	40023800 	.word	0x40023800
 800285c:	40020800 	.word	0x40020800

08002860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_MspInit+0x4c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_MspInit+0x4c>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_MspInit+0x4c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_MspInit+0x4c>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_MspInit+0x4c>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_MspInit+0x4c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <MemManage_Handler+0x4>

080028ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <BusFault_Handler+0x4>

080028d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <UsageFault_Handler+0x4>

080028d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002904:	f000 fb06 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}

0800290c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002912:	f002 ff17 	bl	8005744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200007e0 	.word	0x200007e0

08002920 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002924:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002928:	f001 fd78 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <DMA2_Stream0_IRQHandler+0x10>)
 8002936:	f001 f951 	bl	8003bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200003d8 	.word	0x200003d8

08002944 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <DMA2_Stream5_IRQHandler+0x10>)
 800294a:	f001 f947 	bl	8003bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000888 	.word	0x20000888

08002958 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <DMA2_Stream7_IRQHandler+0x10>)
 800295e:	f001 f93d 	bl	8003bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000828 	.word	0x20000828

0800296c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
	return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_kill>:

int _kill(int pid, int sig)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002986:	f004 fe33 	bl	80075f0 <__errno>
 800298a:	4603      	mov	r3, r0
 800298c:	2216      	movs	r2, #22
 800298e:	601a      	str	r2, [r3, #0]
	return -1;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_exit>:

void _exit (int status)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ffe7 	bl	800297c <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ae:	e7fe      	b.n	80029ae <_exit+0x12>

080029b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e00a      	b.n	80029d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029c2:	f3af 8000 	nop.w
 80029c6:	4601      	mov	r1, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	60ba      	str	r2, [r7, #8]
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	dbf0      	blt.n	80029c2 <_read+0x12>
	}

return len;
 80029e0:	687b      	ldr	r3, [r7, #4]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e009      	b.n	8002a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	60ba      	str	r2, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	dbf1      	blt.n	80029fc <_write+0x12>
	}
	return len;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_close>:

int _close(int file)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
	return -1;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_isatty>:

int _isatty(int file)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	return 1;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <_sbrk+0x5c>)
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <_sbrk+0x60>)
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <_sbrk+0x64>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <_sbrk+0x64>)
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <_sbrk+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <_sbrk+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002abc:	f004 fd98 	bl	80075f0 <__errno>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e009      	b.n	8002ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <_sbrk+0x64>)
 8002adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20020000 	.word	0x20020000
 8002aec:	00000400 	.word	0x00000400
 8002af0:	20000358 	.word	0x20000358
 8002af4:	20000940 	.word	0x20000940

08002af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <SystemInit+0x28>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <SystemInit+0x28>)
 8002b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <SystemInit+0x28>)
 8002b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b12:	609a      	str	r2, [r3, #8]
#endif
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	; 0x30
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fd86 	bl	8007644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b42:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <MX_TIM1_Init+0xa8>)
 8002b44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b54:	2213      	movs	r2, #19
 8002b56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b82:	2301      	movs	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002b96:	f002 fca1 	bl	80054dc <HAL_TIM_Encoder_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002ba0:	f7ff fbae 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM1_Init+0xa4>)
 8002bb2:	f002 ffc7 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002bbc:	f7ff fba0 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200007e0 	.word	0x200007e0
 8002bcc:	40010000 	.word	0x40010000

08002bd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_TIM_Encoder_MspInit+0x94>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d134      	bne.n	8002c5c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x98>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x98>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c18:	f043 0310 	orr.w	r3, r3, #16
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c2a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x9c>)
 8002c48:	f001 fa32 	bl	80040b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2019      	movs	r0, #25
 8002c52:	f000 fe86 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c56:	2019      	movs	r0, #25
 8002c58:	f000 fe9f 	bl	800399a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40021000 	.word	0x40021000

08002c70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <MX_USART1_UART_Init+0x50>)
 8002c78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c96:	220c      	movs	r2, #12
 8002c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_USART1_UART_Init+0x4c>)
 8002ca8:	f002 ffdc 	bl	8005c64 <HAL_UART_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002cb2:	f7ff fb25 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200008e8 	.word	0x200008e8
 8002cc0:	40011000 	.word	0x40011000

08002cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a47      	ldr	r2, [pc, #284]	; (8002e00 <HAL_UART_MspInit+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f040 8088 	bne.w	8002df8 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_UART_MspInit+0x140>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	4a44      	ldr	r2, [pc, #272]	; (8002e04 <HAL_UART_MspInit+0x140>)
 8002cf2:	f043 0310 	orr.w	r3, r3, #16
 8002cf6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_UART_MspInit+0x140>)
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_UART_MspInit+0x140>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a3d      	ldr	r2, [pc, #244]	; (8002e04 <HAL_UART_MspInit+0x140>)
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_UART_MspInit+0x140>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d20:	23c0      	movs	r3, #192	; 0xc0
 8002d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d30:	2307      	movs	r3, #7
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4833      	ldr	r0, [pc, #204]	; (8002e08 <HAL_UART_MspInit+0x144>)
 8002d3c:	f001 f9b8 	bl	80040b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d42:	4a33      	ldr	r2, [pc, #204]	; (8002e10 <HAL_UART_MspInit+0x14c>)
 8002d44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d6e:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d80:	4822      	ldr	r0, [pc, #136]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d82:	f000 fe25 	bl	80039d0 <HAL_DMA_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d8c:	f7ff fab8 	bl	8002300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_UART_MspInit+0x148>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002da0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002da4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db0:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ddc:	480d      	ldr	r0, [pc, #52]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002dde:	f000 fdf7 	bl	80039d0 <HAL_DMA_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002de8:	f7ff fa8a 	bl	8002300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	20000888 	.word	0x20000888
 8002e10:	40026488 	.word	0x40026488
 8002e14:	20000828 	.word	0x20000828
 8002e18:	400264b8 	.word	0x400264b8

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e22:	490e      	ldr	r1, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e38:	4c0b      	ldr	r4, [pc, #44]	; (8002e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e46:	f7ff fe57 	bl	8002af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f004 fbd7 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7fe fedd 	bl	8001c0c <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8002e60:	0800ef50 	.word	0x0800ef50
  ldr r2, =_sbss
 8002e64:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8002e68:	20000940 	.word	0x20000940

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 fd57 	bl	800394c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f000 f808 	bl	8002eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fcdc 	bl	8002860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x54>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_InitTick+0x58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fd6f 	bl	80039b6 <HAL_SYSTICK_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d80a      	bhi.n	8002efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f000 fd37 	bl	8003962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_InitTick+0x5c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000028 	.word	0x20000028
 8002f0c:	20000030 	.word	0x20000030
 8002f10:	2000002c 	.word	0x2000002c

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000030 	.word	0x20000030
 8002f38:	2000092c 	.word	0x2000092c

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000092c 	.word	0x2000092c

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff ffee 	bl	8002f3c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_Delay+0x44>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7a:	bf00      	nop
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000030 	.word	0x20000030

08002f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e033      	b.n	800301a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe f956 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe2:	f023 0302 	bic.w	r3, r3, #2
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa5e 	bl	80034b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
 800300a:	e001      	b.n	8003010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Start_DMA+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0e9      	b.n	8003216 <HAL_ADC_Start_DMA+0x1f2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d018      	beq.n	800308a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003068:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_ADC_Start_DMA+0x1fc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6d      	ldr	r2, [pc, #436]	; (8003224 <HAL_ADC_Start_DMA+0x200>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9a      	lsrs	r2, r3, #18
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3b01      	subs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f9      	bne.n	800307e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d107      	bne.n	80030aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 80a1 	bne.w	80031fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d106      	bne.n	8003108 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f023 0206 	bic.w	r2, r3, #6
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
 8003106:	e002      	b.n	800310e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 8003118:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_ADC_Start_DMA+0x208>)
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a42      	ldr	r2, [pc, #264]	; (8003230 <HAL_ADC_Start_DMA+0x20c>)
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_ADC_Start_DMA+0x210>)
 8003130:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800313a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800314a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	334c      	adds	r3, #76	; 0x4c
 8003166:	4619      	mov	r1, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f000 fcde 	bl	8003b2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12a      	bne.n	80031d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_ADC_Start_DMA+0x214>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d015      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x18e>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <HAL_ADC_Start_DMA+0x218>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d105      	bne.n	800319c <HAL_ADC_Start_DMA+0x178>
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_ADC_Start_DMA+0x21c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d136      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d130      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d129      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e020      	b.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_ADC_Start_DMA+0x214>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d11b      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d114      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	e00b      	b.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000028 	.word	0x20000028
 8003224:	431bde83 	.word	0x431bde83
 8003228:	40012300 	.word	0x40012300
 800322c:	080036a9 	.word	0x080036a9
 8003230:	08003763 	.word	0x08003763
 8003234:	0800377f 	.word	0x0800377f
 8003238:	40012000 	.word	0x40012000
 800323c:	40012100 	.word	0x40012100
 8003240:	40012200 	.word	0x40012200

08003244 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x1c>
 8003284:	2302      	movs	r3, #2
 8003286:	e105      	b.n	8003494 <HAL_ADC_ConfigChannel+0x228>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b09      	cmp	r3, #9
 8003296:	d925      	bls.n	80032e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68d9      	ldr	r1, [r3, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	2207      	movs	r2, #7
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43da      	mvns	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	400a      	ands	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4403      	add	r3, r0
 80032d6:	3b1e      	subs	r3, #30
 80032d8:	409a      	lsls	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e022      	b.n	800332a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	4603      	mov	r3, r0
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4403      	add	r3, r0
 8003320:	409a      	lsls	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d824      	bhi.n	800337c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3b05      	subs	r3, #5
 8003344:	221f      	movs	r2, #31
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	400a      	ands	r2, r1
 8003352:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b05      	subs	r3, #5
 800336e:	fa00 f203 	lsl.w	r2, r0, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	635a      	str	r2, [r3, #52]	; 0x34
 800337a:	e04c      	b.n	8003416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d824      	bhi.n	80033ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b23      	subs	r3, #35	; 0x23
 8003396:	221f      	movs	r2, #31
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43da      	mvns	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	400a      	ands	r2, r1
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b23      	subs	r3, #35	; 0x23
 80033c0:	fa00 f203 	lsl.w	r2, r0, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
 80033cc:	e023      	b.n	8003416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	3b41      	subs	r3, #65	; 0x41
 80033e0:	221f      	movs	r2, #31
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	400a      	ands	r2, r1
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b41      	subs	r3, #65	; 0x41
 800340a:	fa00 f203 	lsl.w	r2, r0, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_ADC_ConfigChannel+0x234>)
 8003418:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_ADC_ConfigChannel+0x238>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x1cc>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b12      	cmp	r3, #18
 800342a:	d105      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_ADC_ConfigChannel+0x238>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d123      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d003      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x1e6>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b11      	cmp	r3, #17
 8003450:	d11b      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b10      	cmp	r3, #16
 8003464:	d111      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_ADC_ConfigChannel+0x23c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_ADC_ConfigChannel+0x240>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	0c9a      	lsrs	r2, r3, #18
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800347c:	e002      	b.n	8003484 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3b01      	subs	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f9      	bne.n	800347e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40012300 	.word	0x40012300
 80034a4:	40012000 	.word	0x40012000
 80034a8:	20000028 	.word	0x20000028
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b8:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <ADC_Init+0x1f0>)
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <ADC_Init+0x1f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e00f      	b.n	80035ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800359c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0202 	bic.w	r2, r2, #2
 80035bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1b      	ldrb	r3, [r3, #24]
 80035c8:	005a      	lsls	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	3b01      	subs	r3, #1
 8003608:	035a      	lsls	r2, r3, #13
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e007      	b.n	8003624 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003622:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	3b01      	subs	r3, #1
 8003640:	051a      	lsls	r2, r3, #20
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003666:	025a      	lsls	r2, r3, #9
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	029a      	lsls	r2, r3, #10
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	0f000001 	.word	0x0f000001

080036a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d13c      	bne.n	800373c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d12b      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d127      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d119      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0220 	bic.w	r2, r2, #32
 800370e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7fe fdbf 	bl	80022b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800373a:	e00e      	b.n	800375a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fd85 	bl	8003258 <HAL_ADC_ErrorCallback>
}
 800374e:	e004      	b.n	800375a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fd67 	bl	8003244 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fd5a 	bl	8003258 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	; (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f7ff ff8e 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff29 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003974:	f7ff ff3e 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	6978      	ldr	r0, [r7, #20]
 8003980:	f7ff ff8e 	bl	80038a0 <NVIC_EncodePriority>
 8003984:	4602      	mov	r2, r0
 8003986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff5d 	bl	800384c <__NVIC_SetPriority>
}
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ff31 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ffa2 	bl	8003908 <SysTick_Config>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff faae 	bl	8002f3c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e099      	b.n	8003b20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a0c:	e00f      	b.n	8003a2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a0e:	f7ff fa95 	bl	8002f3c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d908      	bls.n	8003a2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e078      	b.n	8003b20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e8      	bne.n	8003a0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <HAL_DMA_Init+0x158>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d107      	bne.n	8003a98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d117      	bne.n	8003af2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fa6f 	bl	8003fb8 <DMA_CheckFifoParam>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003aee:	2301      	movs	r3, #1
 8003af0:	e016      	b.n	8003b20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa26 	bl	8003f4c <DMA_CalcBaseAndBitshift>
 8003b00:	4603      	mov	r3, r0
 8003b02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	223f      	movs	r2, #63	; 0x3f
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	f010803f 	.word	0xf010803f

08003b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_DMA_Start_IT+0x26>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e040      	b.n	8003bd4 <HAL_DMA_Start_IT+0xa8>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d12f      	bne.n	8003bc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f9b8 	bl	8003ef0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	223f      	movs	r2, #63	; 0x3f
 8003b86:	409a      	lsls	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0216 	orr.w	r2, r2, #22
 8003b9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e005      	b.n	8003bd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003be8:	4b92      	ldr	r3, [pc, #584]	; (8003e34 <HAL_DMA_IRQHandler+0x258>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a92      	ldr	r2, [pc, #584]	; (8003e38 <HAL_DMA_IRQHandler+0x25c>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0a9b      	lsrs	r3, r3, #10
 8003bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	2208      	movs	r2, #8
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d013      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	2208      	movs	r2, #8
 8003c36:	409a      	lsls	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d012      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	2204      	movs	r2, #4
 8003c84:	409a      	lsls	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d012      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	2210      	movs	r2, #16
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d043      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d03c      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d024      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	e01f      	b.n	8003d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01b      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	e016      	b.n	8003d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0208 	bic.w	r2, r2, #8
 8003d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2220      	movs	r2, #32
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 808e 	beq.w	8003e7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8086 	beq.w	8003e7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	2220      	movs	r2, #32
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d136      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0216 	bic.w	r2, r2, #22
 8003d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x1da>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0208 	bic.w	r2, r2, #8
 8003dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	223f      	movs	r2, #63	; 0x3f
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d07d      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
        }
        return;
 8003df2:	e078      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01c      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d030      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
 8003e20:	e02b      	b.n	8003e7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
 8003e32:	e022      	b.n	8003e7a <HAL_DMA_IRQHandler+0x29e>
 8003e34:	20000028 	.word	0x20000028
 8003e38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0210 	bic.w	r2, r2, #16
 8003e58:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d032      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d022      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d307      	bcc.n	8003ec2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f2      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x2ca>
 8003ec0:	e000      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ec2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
 8003ee4:	e000      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ee6:	bf00      	nop
    }
  }
}
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d108      	bne.n	8003f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f2e:	e007      	b.n	8003f40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	3b10      	subs	r3, #16
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d909      	bls.n	8003f8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	1d1a      	adds	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f8c:	e007      	b.n	8003f9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	aaaaaaab 	.word	0xaaaaaaab
 8003fb4:	0800c528 	.word	0x0800c528

08003fb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11f      	bne.n	8004012 <DMA_CheckFifoParam+0x5a>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d856      	bhi.n	8004086 <DMA_CheckFifoParam+0xce>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <DMA_CheckFifoParam+0x28>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08004003 	.word	0x08004003
 8003fe8:	08003ff1 	.word	0x08003ff1
 8003fec:	08004087 	.word	0x08004087
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d046      	beq.n	800408a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004000:	e043      	b.n	800408a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800400a:	d140      	bne.n	800408e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004010:	e03d      	b.n	800408e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401a:	d121      	bne.n	8004060 <DMA_CheckFifoParam+0xa8>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d837      	bhi.n	8004092 <DMA_CheckFifoParam+0xda>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <DMA_CheckFifoParam+0x70>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004039 	.word	0x08004039
 800402c:	0800403f 	.word	0x0800403f
 8004030:	08004039 	.word	0x08004039
 8004034:	08004051 	.word	0x08004051
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e030      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d025      	beq.n	8004096 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800404e:	e022      	b.n	8004096 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004058:	d11f      	bne.n	800409a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800405e:	e01c      	b.n	800409a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d903      	bls.n	800406e <DMA_CheckFifoParam+0xb6>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d003      	beq.n	8004074 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800406c:	e018      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      break;
 8004072:	e015      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      break;
 8004084:	e00b      	b.n	800409e <DMA_CheckFifoParam+0xe6>
      break;
 8004086:	bf00      	nop
 8004088:	e00a      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e008      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      break;
 800408e:	bf00      	nop
 8004090:	e006      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
 8004094:	e004      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <DMA_CheckFifoParam+0xe8>
      break;
 800409e:	bf00      	nop
    }
  } 
  
  return status; 
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e16b      	b.n	80043a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040cc:	2201      	movs	r2, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	f040 815a 	bne.w	800439e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d005      	beq.n	8004102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d130      	bne.n	8004164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	2203      	movs	r2, #3
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004138:	2201      	movs	r2, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 0201 	and.w	r2, r3, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b03      	cmp	r3, #3
 800416e:	d017      	beq.n	80041a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d123      	bne.n	80041f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	08da      	lsrs	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3208      	adds	r2, #8
 80041b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	220f      	movs	r2, #15
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	69b9      	ldr	r1, [r7, #24]
 80041f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	2203      	movs	r2, #3
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0203 	and.w	r2, r3, #3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b4 	beq.w	800439e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	4b60      	ldr	r3, [pc, #384]	; (80043bc <HAL_GPIO_Init+0x30c>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	4a5f      	ldr	r2, [pc, #380]	; (80043bc <HAL_GPIO_Init+0x30c>)
 8004240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004244:	6453      	str	r3, [r2, #68]	; 0x44
 8004246:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <HAL_GPIO_Init+0x30c>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_GPIO_Init+0x310>)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	3302      	adds	r3, #2
 800425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	220f      	movs	r2, #15
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_GPIO_Init+0x314>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02b      	beq.n	80042d6 <HAL_GPIO_Init+0x226>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a51      	ldr	r2, [pc, #324]	; (80043c8 <HAL_GPIO_Init+0x318>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d025      	beq.n	80042d2 <HAL_GPIO_Init+0x222>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a50      	ldr	r2, [pc, #320]	; (80043cc <HAL_GPIO_Init+0x31c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <HAL_GPIO_Init+0x21e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <HAL_GPIO_Init+0x320>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d019      	beq.n	80042ca <HAL_GPIO_Init+0x21a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4e      	ldr	r2, [pc, #312]	; (80043d4 <HAL_GPIO_Init+0x324>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x216>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4d      	ldr	r2, [pc, #308]	; (80043d8 <HAL_GPIO_Init+0x328>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_Init+0x212>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4c      	ldr	r2, [pc, #304]	; (80043dc <HAL_GPIO_Init+0x32c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_Init+0x20e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <HAL_GPIO_Init+0x330>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_Init+0x20a>
 80042b6:	2307      	movs	r3, #7
 80042b8:	e00e      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042ba:	2308      	movs	r3, #8
 80042bc:	e00c      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042be:	2306      	movs	r3, #6
 80042c0:	e00a      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042c2:	2305      	movs	r3, #5
 80042c4:	e008      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042c6:	2304      	movs	r3, #4
 80042c8:	e006      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042ca:	2303      	movs	r3, #3
 80042cc:	e004      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e002      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_GPIO_Init+0x228>
 80042d6:	2300      	movs	r3, #0
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	f002 0203 	and.w	r2, r2, #3
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	4093      	lsls	r3, r2
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042e8:	4935      	ldr	r1, [pc, #212]	; (80043c0 <HAL_GPIO_Init+0x310>)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <HAL_GPIO_Init+0x334>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800431a:	4a32      	ldr	r2, [pc, #200]	; (80043e4 <HAL_GPIO_Init+0x334>)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_GPIO_Init+0x334>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <HAL_GPIO_Init+0x334>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800434a:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_GPIO_Init+0x334>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_GPIO_Init+0x334>)
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_GPIO_Init+0x334>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_GPIO_Init+0x334>)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b0f      	cmp	r3, #15
 80043a8:	f67f ae90 	bls.w	80040cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3724      	adds	r7, #36	; 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40013800 	.word	0x40013800
 80043c4:	40020000 	.word	0x40020000
 80043c8:	40020400 	.word	0x40020400
 80043cc:	40020800 	.word	0x40020800
 80043d0:	40020c00 	.word	0x40020c00
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40021400 	.word	0x40021400
 80043dc:	40021800 	.word	0x40021800
 80043e0:	40021c00 	.word	0x40021c00
 80043e4:	40013c00 	.word	0x40013c00

080043e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
 80043f4:	4613      	mov	r3, r2
 80043f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043f8:	787b      	ldrb	r3, [r7, #1]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004404:	e003      	b.n	800440e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	041a      	lsls	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	619a      	str	r2, [r3, #24]
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	4618      	mov	r0, r3
 800443c:	f002 f976 	bl	800672c <HAL_GPIO_EXTI_Callback>
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40013c00 	.word	0x40013c00

0800444c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e12b      	b.n	80046b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fb82 	bl	8001b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800449e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b0:	f000 fd5c 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4a81      	ldr	r2, [pc, #516]	; (80046c0 <HAL_I2C_Init+0x274>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d807      	bhi.n	80044d0 <HAL_I2C_Init+0x84>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a80      	ldr	r2, [pc, #512]	; (80046c4 <HAL_I2C_Init+0x278>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bf94      	ite	ls
 80044c8:	2301      	movls	r3, #1
 80044ca:	2300      	movhi	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e006      	b.n	80044de <HAL_I2C_Init+0x92>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a7d      	ldr	r2, [pc, #500]	; (80046c8 <HAL_I2C_Init+0x27c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf94      	ite	ls
 80044d8:	2301      	movls	r3, #1
 80044da:	2300      	movhi	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0e7      	b.n	80046b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a78      	ldr	r2, [pc, #480]	; (80046cc <HAL_I2C_Init+0x280>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	0c9b      	lsrs	r3, r3, #18
 80044f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a6a      	ldr	r2, [pc, #424]	; (80046c0 <HAL_I2C_Init+0x274>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <HAL_I2C_Init+0xd4>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3301      	adds	r3, #1
 800451e:	e009      	b.n	8004534 <HAL_I2C_Init+0xe8>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	4a69      	ldr	r2, [pc, #420]	; (80046d0 <HAL_I2C_Init+0x284>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	3301      	adds	r3, #1
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	430b      	orrs	r3, r1
 800453a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	495c      	ldr	r1, [pc, #368]	; (80046c0 <HAL_I2C_Init+0x274>)
 8004550:	428b      	cmp	r3, r1
 8004552:	d819      	bhi.n	8004588 <HAL_I2C_Init+0x13c>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1e59      	subs	r1, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004568:	400b      	ands	r3, r1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_I2C_Init+0x138>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e59      	subs	r1, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fbb1 f3f3 	udiv	r3, r1, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004582:	e051      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 8004584:	2304      	movs	r3, #4
 8004586:	e04f      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d111      	bne.n	80045b4 <HAL_I2C_Init+0x168>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e58      	subs	r0, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	440b      	add	r3, r1
 800459e:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e012      	b.n	80045da <HAL_I2C_Init+0x18e>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e58      	subs	r0, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	0099      	lsls	r1, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_I2C_Init+0x196>
 80045de:	2301      	movs	r3, #1
 80045e0:	e022      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10e      	bne.n	8004608 <HAL_I2C_Init+0x1bc>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1e58      	subs	r0, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	440b      	add	r3, r1
 80045f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fc:	3301      	adds	r3, #1
 80045fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	e00f      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1e58      	subs	r0, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	0099      	lsls	r1, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	fbb0 f3f3 	udiv	r3, r0, r3
 800461e:	3301      	adds	r3, #1
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	6809      	ldr	r1, [r1, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6911      	ldr	r1, [r2, #16]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68d2      	ldr	r2, [r2, #12]
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	000186a0 	.word	0x000186a0
 80046c4:	001e847f 	.word	0x001e847f
 80046c8:	003d08ff 	.word	0x003d08ff
 80046cc:	431bde83 	.word	0x431bde83
 80046d0:	10624dd3 	.word	0x10624dd3

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e264      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d075      	beq.n	80047de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f2:	4ba3      	ldr	r3, [pc, #652]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d00c      	beq.n	8004718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fe:	4ba0      	ldr	r3, [pc, #640]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004706:	2b08      	cmp	r3, #8
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470a:	4b9d      	ldr	r3, [pc, #628]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	4b99      	ldr	r3, [pc, #612]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05b      	beq.n	80047dc <HAL_RCC_OscConfig+0x108>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d157      	bne.n	80047dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e23f      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x74>
 800473a:	4b91      	ldr	r3, [pc, #580]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a90      	ldr	r2, [pc, #576]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xb0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a8a      	ldr	r2, [pc, #552]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a87      	ldr	r2, [pc, #540]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xb0>
 800476c:	4b84      	ldr	r3, [pc, #528]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a83      	ldr	r2, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a80      	ldr	r2, [pc, #512]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe fbd6 	bl	8002f3c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fbd2 	bl	8002f3c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e204      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xc0>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fbc2 	bl	8002f3c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe fbbe 	bl	8002f3c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	; 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1f0      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0xe8>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d063      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f6:	4b62      	ldr	r3, [pc, #392]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	4b5c      	ldr	r3, [pc, #368]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x152>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1c4      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b56      	ldr	r3, [pc, #344]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4952      	ldr	r1, [pc, #328]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	e03a      	b.n	80048b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <HAL_RCC_OscConfig+0x2b0>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fe fb77 	bl	8002f3c <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe fb73 	bl	8002f3c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1a5      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	4b46      	ldr	r3, [pc, #280]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4940      	ldr	r1, [pc, #256]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_OscConfig+0x2b0>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fe fb56 	bl	8002f3c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe fb52 	bl	8002f3c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e184      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d030      	beq.n	8004920 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b30      	ldr	r3, [pc, #192]	; (8004988 <HAL_RCC_OscConfig+0x2b4>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fe fb36 	bl	8002f3c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fe fb32 	bl	8002f3c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e164      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x200>
 80048f2:	e015      	b.n	8004920 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x2b4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fa:	f7fe fb1f 	bl	8002f3c <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004902:	f7fe fb1b 	bl	8002f3c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e14d      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80a0 	beq.w	8004a6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	6413      	str	r3, [r2, #64]	; 0x40
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_OscConfig+0x2b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d121      	bne.n	80049ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_RCC_OscConfig+0x2b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a07      	ldr	r2, [pc, #28]	; (800498c <HAL_RCC_OscConfig+0x2b8>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fe fae1 	bl	8002f3c <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	e011      	b.n	80049a2 <HAL_RCC_OscConfig+0x2ce>
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	42470000 	.word	0x42470000
 8004988:	42470e80 	.word	0x42470e80
 800498c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fe fad4 	bl	8002f3c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e106      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCC_OscConfig+0x4e4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
 80049b6:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a80      	ldr	r2, [pc, #512]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	e01c      	b.n	80049fe <HAL_RCC_OscConfig+0x32a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x312>
 80049cc:	4b7b      	ldr	r3, [pc, #492]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a7a      	ldr	r2, [pc, #488]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049d2:	f043 0304 	orr.w	r3, r3, #4
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b78      	ldr	r3, [pc, #480]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a77      	ldr	r2, [pc, #476]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
 80049e4:	e00b      	b.n	80049fe <HAL_RCC_OscConfig+0x32a>
 80049e6:	4b75      	ldr	r3, [pc, #468]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a74      	ldr	r2, [pc, #464]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	4b72      	ldr	r3, [pc, #456]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a71      	ldr	r2, [pc, #452]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d015      	beq.n	8004a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a06:	f7fe fa99 	bl	8002f3c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fe fa95 	bl	8002f3c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0c5      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ee      	beq.n	8004a0e <HAL_RCC_OscConfig+0x33a>
 8004a30:	e014      	b.n	8004a5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fe fa83 	bl	8002f3c <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fe fa7f 	bl	8002f3c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0af      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	4b5a      	ldr	r3, [pc, #360]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ee      	bne.n	8004a3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4b56      	ldr	r3, [pc, #344]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a55      	ldr	r2, [pc, #340]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 809b 	beq.w	8004bae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d05c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d141      	bne.n	8004b10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8c:	4b4c      	ldr	r3, [pc, #304]	; (8004bc0 <HAL_RCC_OscConfig+0x4ec>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fe fa53 	bl	8002f3c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fe fa4f 	bl	8002f3c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e081      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aac:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	019b      	lsls	r3, r3, #6
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	4937      	ldr	r1, [pc, #220]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_OscConfig+0x4ec>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fa28 	bl	8002f3c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fe fa24 	bl	8002f3c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e056      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x41c>
 8004b0e:	e04e      	b.n	8004bae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_OscConfig+0x4ec>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe fa11 	bl	8002f3c <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe fa0d 	bl	8002f3c <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e03f      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x44a>
 8004b3c:	e037      	b.n	8004bae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e032      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <HAL_RCC_OscConfig+0x4e8>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d028      	beq.n	8004baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d121      	bne.n	8004baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d11a      	bne.n	8004baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d111      	bne.n	8004baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40007000 	.word	0x40007000
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	42470060 	.word	0x42470060

08004bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0cc      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d90c      	bls.n	8004c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0b8      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c18:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4a58      	ldr	r2, [pc, #352]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c30:	4b53      	ldr	r3, [pc, #332]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a52      	ldr	r2, [pc, #328]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	494d      	ldr	r1, [pc, #308]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d044      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d119      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e07f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d003      	beq.n	8004c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c82:	4b3f      	ldr	r3, [pc, #252]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e06f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c92:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e067      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca2:	4b37      	ldr	r3, [pc, #220]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f023 0203 	bic.w	r2, r3, #3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4934      	ldr	r1, [pc, #208]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb4:	f7fe f942 	bl	8002f3c <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cbc:	f7fe f93e 	bl	8002f3c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e04f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	4b2b      	ldr	r3, [pc, #172]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 020c 	and.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1eb      	bne.n	8004cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d20c      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e032      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4916      	ldr	r1, [pc, #88]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	490e      	ldr	r1, [pc, #56]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d4a:	f000 f821 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	490a      	ldr	r1, [pc, #40]	; (8004d84 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	5ccb      	ldrb	r3, [r1, r3]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe f8a2 	bl	8002eb4 <HAL_InitTick>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023c00 	.word	0x40023c00
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800c510 	.word	0x0800c510
 8004d88:	20000028 	.word	0x20000028
 8004d8c:	2000002c 	.word	0x2000002c

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	2300      	movs	r3, #0
 8004da2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da8:	4b67      	ldr	r3, [pc, #412]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d00d      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	f200 80bd 	bhi.w	8004f34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0x3a>
 8004dc2:	e0b7      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dc6:	60bb      	str	r3, [r7, #8]
       break;
 8004dc8:	e0b7      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004dcc:	60bb      	str	r3, [r7, #8]
      break;
 8004dce:	e0b4      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd0:	4b5d      	ldr	r3, [pc, #372]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dda:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d04d      	beq.n	8004e82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de6:	4b58      	ldr	r3, [pc, #352]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	461a      	mov	r2, r3
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	ea02 0800 	and.w	r8, r2, r0
 8004dfe:	ea03 0901 	and.w	r9, r3, r1
 8004e02:	4640      	mov	r0, r8
 8004e04:	4649      	mov	r1, r9
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	014b      	lsls	r3, r1, #5
 8004e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e14:	0142      	lsls	r2, r0, #5
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	ebb0 0008 	subs.w	r0, r0, r8
 8004e1e:	eb61 0109 	sbc.w	r1, r1, r9
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	018b      	lsls	r3, r1, #6
 8004e2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e30:	0182      	lsls	r2, r0, #6
 8004e32:	1a12      	subs	r2, r2, r0
 8004e34:	eb63 0301 	sbc.w	r3, r3, r1
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	00d9      	lsls	r1, r3, #3
 8004e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e46:	00d0      	lsls	r0, r2, #3
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	eb12 0208 	adds.w	r2, r2, r8
 8004e50:	eb43 0309 	adc.w	r3, r3, r9
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	0259      	lsls	r1, r3, #9
 8004e5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e62:	0250      	lsls	r0, r2, #9
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	f7fb ff08 	bl	8000c88 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e04a      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	ea02 0400 	and.w	r4, r2, r0
 8004e9a:	ea03 0501 	and.w	r5, r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	014b      	lsls	r3, r1, #5
 8004eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eb0:	0142      	lsls	r2, r0, #5
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	1b00      	subs	r0, r0, r4
 8004eb8:	eb61 0105 	sbc.w	r1, r1, r5
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	018b      	lsls	r3, r1, #6
 8004ec6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eca:	0182      	lsls	r2, r0, #6
 8004ecc:	1a12      	subs	r2, r2, r0
 8004ece:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	00d9      	lsls	r1, r3, #3
 8004edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ee0:	00d0      	lsls	r0, r2, #3
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	1912      	adds	r2, r2, r4
 8004ee8:	eb45 0303 	adc.w	r3, r5, r3
 8004eec:	f04f 0000 	mov.w	r0, #0
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	0299      	lsls	r1, r3, #10
 8004ef6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004efa:	0290      	lsls	r0, r2, #10
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	f7fb febc 	bl	8000c88 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	3301      	adds	r3, #1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	60bb      	str	r3, [r7, #8]
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f36:	60bb      	str	r3, [r7, #8]
      break;
 8004f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000028 	.word	0x20000028

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f70:	f7ff fff0 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0a9b      	lsrs	r3, r3, #10
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	; (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	0800c520 	.word	0x0800c520

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f98:	f7ff ffdc 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0b5b      	lsrs	r3, r3, #13
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4903      	ldr	r1, [pc, #12]	; (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	0800c520 	.word	0x0800c520

08004fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e07b      	b.n	80050c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d108      	bne.n	8004fe8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fde:	d009      	beq.n	8004ff4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	61da      	str	r2, [r3, #28]
 8004fe6:	e005      	b.n	8004ff4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fd fbde 	bl	80027d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	ea42 0103 	orr.w	r1, r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0104 	and.w	r1, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f003 0210 	and.w	r2, r3, #16
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b088      	sub	sp, #32
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_SPI_Transmit+0x22>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e126      	b.n	800533e <HAL_SPI_Transmit+0x270>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f8:	f7fd ff20 	bl	8002f3c <HAL_GetTick>
 80050fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b01      	cmp	r3, #1
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005112:	e10b      	b.n	800532c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Transmit+0x52>
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005124:	e102      	b.n	800532c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2203      	movs	r2, #3
 800512a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516c:	d10f      	bne.n	800518e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800518c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d007      	beq.n	80051ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b4:	d14b      	bne.n	800524e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_SPI_Transmit+0xf6>
 80051be:	8afb      	ldrh	r3, [r7, #22]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d13e      	bne.n	8005242 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	881a      	ldrh	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	1c9a      	adds	r2, r3, #2
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051e8:	e02b      	b.n	8005242 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d112      	bne.n	800521e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	86da      	strh	r2, [r3, #54]	; 0x36
 800521c:	e011      	b.n	8005242 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521e:	f7fd fe8d 	bl	8002f3c <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d803      	bhi.n	8005236 <HAL_SPI_Transmit+0x168>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d102      	bne.n	800523c <HAL_SPI_Transmit+0x16e>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005240:	e074      	b.n	800532c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1ce      	bne.n	80051ea <HAL_SPI_Transmit+0x11c>
 800524c:	e04c      	b.n	80052e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_SPI_Transmit+0x18e>
 8005256:	8afb      	ldrh	r3, [r7, #22]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d140      	bne.n	80052de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	7812      	ldrb	r2, [r2, #0]
 8005268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005282:	e02c      	b.n	80052de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d113      	bne.n	80052ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80052b8:	e011      	b.n	80052de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ba:	f7fd fe3f 	bl	8002f3c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d803      	bhi.n	80052d2 <HAL_SPI_Transmit+0x204>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d102      	bne.n	80052d8 <HAL_SPI_Transmit+0x20a>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052dc:	e026      	b.n	800532c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1cd      	bne.n	8005284 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f8b3 	bl	8005458 <SPI_EndRxTxTransaction>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e000      	b.n	800532c <HAL_SPI_Transmit+0x25e>
  }

error:
 800532a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800533c:	7ffb      	ldrb	r3, [r7, #31]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005358:	f7fd fdf0 	bl	8002f3c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4413      	add	r3, r2
 8005366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005368:	f7fd fde8 	bl	8002f3c <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800536e:	4b39      	ldr	r3, [pc, #228]	; (8005454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	0d1b      	lsrs	r3, r3, #20
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537e:	e054      	b.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d050      	beq.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005388:	f7fd fdd8 	bl	8002f3c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	429a      	cmp	r2, r3
 8005396:	d902      	bls.n	800539e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d13d      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b6:	d111      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c0:	d004      	beq.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ca:	d107      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e4:	d10f      	bne.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e017      	b.n	800544a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3b01      	subs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	429a      	cmp	r2, r3
 8005446:	d19b      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000028 	.word	0x20000028

08005458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <SPI_EndRxTxTransaction+0x7c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <SPI_EndRxTxTransaction+0x80>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0d5b      	lsrs	r3, r3, #21
 8005470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005482:	d112      	bne.n	80054aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	2180      	movs	r1, #128	; 0x80
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7ff ff5a 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e00f      	b.n	80054ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d0f2      	beq.n	80054aa <SPI_EndRxTxTransaction+0x52>
 80054c4:	e000      	b.n	80054c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80054c6:	bf00      	nop
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000028 	.word	0x20000028
 80054d8:	165e9f81 	.word	0x165e9f81

080054dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e097      	b.n	8005620 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fd fb63 	bl	8002bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005520:	f023 0307 	bic.w	r3, r3, #7
 8005524:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 fa41 	bl	80059b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4313      	orrs	r3, r2
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800557c:	f023 030c 	bic.w	r3, r3, #12
 8005580:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	4313      	orrs	r3, r2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	011a      	lsls	r2, r3, #4
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	031b      	lsls	r3, r3, #12
 80055ac:	4313      	orrs	r3, r2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	4313      	orrs	r3, r2
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005638:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005640:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005648:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005650:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d110      	bne.n	800567a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d102      	bne.n	8005664 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800565e:	7b7b      	ldrb	r3, [r7, #13]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e069      	b.n	800573c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005678:	e031      	b.n	80056de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d110      	bne.n	80056a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d102      	bne.n	800568c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005686:	7b3b      	ldrb	r3, [r7, #12]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e055      	b.n	800573c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a0:	e01d      	b.n	80056de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d108      	bne.n	80056ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	7b7b      	ldrb	r3, [r7, #13]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b4:	7b3b      	ldrb	r3, [r7, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e03e      	b.n	800573c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_TIM_Encoder_Start+0xc4>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d008      	beq.n	80056fc <HAL_TIM_Encoder_Start+0xd4>
 80056ea:	e00f      	b.n	800570c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2201      	movs	r2, #1
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f9ff 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 80056fa:	e016      	b.n	800572a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	2104      	movs	r1, #4
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f9f7 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 800570a:	e00e      	b.n	800572a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f9ef 	bl	8005af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	2104      	movs	r1, #4
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f9e8 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8005728:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b02      	cmp	r3, #2
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b02      	cmp	r3, #2
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0202 	mvn.w	r2, #2
 8005770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8f8 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8ea 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8fb 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0204 	mvn.w	r2, #4
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8ce 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8c0 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8d1 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d122      	bne.n	8005848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b08      	cmp	r3, #8
 800580e:	d11b      	bne.n	8005848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0208 	mvn.w	r2, #8
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2204      	movs	r2, #4
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8a4 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f896 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f8a7 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b10      	cmp	r3, #16
 8005854:	d122      	bne.n	800589c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d11b      	bne.n	800589c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0210 	mvn.w	r2, #16
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2208      	movs	r2, #8
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f87a 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 8005888:	e005      	b.n	8005896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f86c 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f87d 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d10e      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0201 	mvn.w	r2, #1
 80058c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f846 	bl	8005954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	2b80      	cmp	r3, #128	; 0x80
 80058d4:	d10e      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d107      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9ae 	bl	8005c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d10e      	bne.n	8005920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d107      	bne.n	8005920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f842 	bl	80059a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d10e      	bne.n	800594c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b20      	cmp	r3, #32
 800593a:	d107      	bne.n	800594c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0220 	mvn.w	r2, #32
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f978 	bl	8005c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a40      	ldr	r2, [pc, #256]	; (8005acc <TIM_Base_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d013      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d00f      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3c      	ldr	r2, [pc, #240]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3b      	ldr	r2, [pc, #236]	; (8005ad8 <TIM_Base_SetConfig+0x120>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <TIM_Base_SetConfig+0x124>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d108      	bne.n	8005a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02b      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d027      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d023      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01f      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <TIM_Base_SetConfig+0x120>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01b      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a29      	ldr	r2, [pc, #164]	; (8005adc <TIM_Base_SetConfig+0x124>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d017      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <TIM_Base_SetConfig+0x128>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a27      	ldr	r2, [pc, #156]	; (8005ae4 <TIM_Base_SetConfig+0x12c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00f      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <TIM_Base_SetConfig+0x130>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00b      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <TIM_Base_SetConfig+0x134>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a24      	ldr	r2, [pc, #144]	; (8005af0 <TIM_Base_SetConfig+0x138>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a23      	ldr	r2, [pc, #140]	; (8005af4 <TIM_Base_SetConfig+0x13c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d108      	bne.n	8005a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0xf8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	615a      	str	r2, [r3, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40010400 	.word	0x40010400
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800
 8005aec:	40001800 	.word	0x40001800
 8005af0:	40001c00 	.word	0x40001c00
 8005af4:	40002000 	.word	0x40002000

08005af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e05a      	b.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d022      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d01d      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d018      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10c      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40010400 	.word	0x40010400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40001800 	.word	0x40001800

08005c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e03f      	b.n	8005cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fd f81a 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	; 0x24
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f829 	bl	8005d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b09f      	sub	sp, #124	; 0x7c
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	ea40 0301 	orr.w	r3, r0, r1
 8005d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d44:	f021 010c 	bic.w	r1, r1, #12
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	6999      	ldr	r1, [r3, #24]
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	ea40 0301 	orr.w	r3, r0, r1
 8005d68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4bc5      	ldr	r3, [pc, #788]	; (8006084 <UART_SetConfig+0x384>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d004      	beq.n	8005d7e <UART_SetConfig+0x7e>
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4bc3      	ldr	r3, [pc, #780]	; (8006088 <UART_SetConfig+0x388>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d103      	bne.n	8005d86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d7e:	f7ff f909 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8005d82:	6778      	str	r0, [r7, #116]	; 0x74
 8005d84:	e002      	b.n	8005d8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d86:	f7ff f8f1 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8005d8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d94:	f040 80b6 	bne.w	8005f04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	f04f 0500 	mov.w	r5, #0
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	1891      	adds	r1, r2, r2
 8005da6:	6439      	str	r1, [r7, #64]	; 0x40
 8005da8:	415b      	adcs	r3, r3
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
 8005dac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db0:	1912      	adds	r2, r2, r4
 8005db2:	eb45 0303 	adc.w	r3, r5, r3
 8005db6:	f04f 0000 	mov.w	r0, #0
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	00d9      	lsls	r1, r3, #3
 8005dc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dc4:	00d0      	lsls	r0, r2, #3
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	1911      	adds	r1, r2, r4
 8005dcc:	6639      	str	r1, [r7, #96]	; 0x60
 8005dce:	416b      	adcs	r3, r5
 8005dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	1891      	adds	r1, r2, r2
 8005dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8005de0:	415b      	adcs	r3, r3
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005de8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dec:	f7fa ff4c 	bl	8000c88 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4ba5      	ldr	r3, [pc, #660]	; (800608c <UART_SetConfig+0x38c>)
 8005df6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	011e      	lsls	r6, r3, #4
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e00:	461c      	mov	r4, r3
 8005e02:	f04f 0500 	mov.w	r5, #0
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
 8005e12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e16:	1912      	adds	r2, r2, r4
 8005e18:	eb45 0303 	adc.w	r3, r5, r3
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	00d9      	lsls	r1, r3, #3
 8005e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e2a:	00d0      	lsls	r0, r2, #3
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	1911      	adds	r1, r2, r4
 8005e32:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e34:	416b      	adcs	r3, r5
 8005e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	1891      	adds	r1, r2, r2
 8005e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e46:	415b      	adcs	r3, r3
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e52:	f7fa ff19 	bl	8000c88 <__aeabi_uldivmod>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4b8c      	ldr	r3, [pc, #560]	; (800608c <UART_SetConfig+0x38c>)
 8005e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a87      	ldr	r2, [pc, #540]	; (800608c <UART_SetConfig+0x38c>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e7c:	441e      	add	r6, r3
 8005e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e80:	4618      	mov	r0, r3
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	1894      	adds	r4, r2, r2
 8005e8c:	623c      	str	r4, [r7, #32]
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e96:	1812      	adds	r2, r2, r0
 8005e98:	eb41 0303 	adc.w	r3, r1, r3
 8005e9c:	f04f 0400 	mov.w	r4, #0
 8005ea0:	f04f 0500 	mov.w	r5, #0
 8005ea4:	00dd      	lsls	r5, r3, #3
 8005ea6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eaa:	00d4      	lsls	r4, r2, #3
 8005eac:	4622      	mov	r2, r4
 8005eae:	462b      	mov	r3, r5
 8005eb0:	1814      	adds	r4, r2, r0
 8005eb2:	653c      	str	r4, [r7, #80]	; 0x50
 8005eb4:	414b      	adcs	r3, r1
 8005eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	61b9      	str	r1, [r7, #24]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ece:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ed2:	f7fa fed9 	bl	8000c88 <__aeabi_uldivmod>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <UART_SetConfig+0x38c>)
 8005edc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	2164      	movs	r1, #100	; 0x64
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	3332      	adds	r3, #50	; 0x32
 8005eee:	4a67      	ldr	r2, [pc, #412]	; (800608c <UART_SetConfig+0x38c>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f003 0207 	and.w	r2, r3, #7
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4432      	add	r2, r6
 8005f00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f02:	e0b9      	b.n	8006078 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f06:	461c      	mov	r4, r3
 8005f08:	f04f 0500 	mov.w	r5, #0
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	1891      	adds	r1, r2, r2
 8005f12:	6139      	str	r1, [r7, #16]
 8005f14:	415b      	adcs	r3, r3
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f1c:	1912      	adds	r2, r2, r4
 8005f1e:	eb45 0303 	adc.w	r3, r5, r3
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	00d9      	lsls	r1, r3, #3
 8005f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f30:	00d0      	lsls	r0, r2, #3
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	eb12 0804 	adds.w	r8, r2, r4
 8005f3a:	eb43 0905 	adc.w	r9, r3, r5
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	008b      	lsls	r3, r1, #2
 8005f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f56:	0082      	lsls	r2, r0, #2
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa fe94 	bl	8000c88 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b49      	ldr	r3, [pc, #292]	; (800608c <UART_SetConfig+0x38c>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011e      	lsls	r6, r3, #4
 8005f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f70:	4618      	mov	r0, r3
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	1894      	adds	r4, r2, r2
 8005f7c:	60bc      	str	r4, [r7, #8]
 8005f7e:	415b      	adcs	r3, r3
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f86:	1812      	adds	r2, r2, r0
 8005f88:	eb41 0303 	adc.w	r3, r1, r3
 8005f8c:	f04f 0400 	mov.w	r4, #0
 8005f90:	f04f 0500 	mov.w	r5, #0
 8005f94:	00dd      	lsls	r5, r3, #3
 8005f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f9a:	00d4      	lsls	r4, r2, #3
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	1814      	adds	r4, r2, r0
 8005fa2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fa4:	414b      	adcs	r3, r1
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	008b      	lsls	r3, r1, #2
 8005fbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fc0:	0082      	lsls	r2, r0, #2
 8005fc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fc6:	f7fa fe5f 	bl	8000c88 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <UART_SetConfig+0x38c>)
 8005fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <UART_SetConfig+0x38c>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fee:	441e      	add	r6, r3
 8005ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f04f 0100 	mov.w	r1, #0
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	1894      	adds	r4, r2, r2
 8005ffe:	603c      	str	r4, [r7, #0]
 8006000:	415b      	adcs	r3, r3
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006008:	1812      	adds	r2, r2, r0
 800600a:	eb41 0303 	adc.w	r3, r1, r3
 800600e:	f04f 0400 	mov.w	r4, #0
 8006012:	f04f 0500 	mov.w	r5, #0
 8006016:	00dd      	lsls	r5, r3, #3
 8006018:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800601c:	00d4      	lsls	r4, r2, #3
 800601e:	4622      	mov	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	eb12 0a00 	adds.w	sl, r2, r0
 8006026:	eb43 0b01 	adc.w	fp, r3, r1
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	008b      	lsls	r3, r1, #2
 800603e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006042:	0082      	lsls	r2, r0, #2
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	f7fa fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4b0e      	ldr	r3, [pc, #56]	; (800608c <UART_SetConfig+0x38c>)
 8006052:	fba3 1302 	umull	r1, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	2164      	movs	r1, #100	; 0x64
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	3332      	adds	r3, #50	; 0x32
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <UART_SetConfig+0x38c>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4432      	add	r2, r6
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	bf00      	nop
 800607a:	377c      	adds	r7, #124	; 0x7c
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40011000 	.word	0x40011000
 8006088:	40011400 	.word	0x40011400
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8006094:	2200      	movs	r2, #0
 8006096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800609a:	4802      	ldr	r0, [pc, #8]	; (80060a4 <ST7735_Select+0x14>)
 800609c:	f7fe f9a4 	bl	80043e8 <HAL_GPIO_WritePin>
}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40020800 	.word	0x40020800

080060a8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80060ac:	2201      	movs	r2, #1
 80060ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060b2:	4802      	ldr	r0, [pc, #8]	; (80060bc <ST7735_Unselect+0x14>)
 80060b4:	f7fe f998 	bl	80043e8 <HAL_GPIO_WritePin>
}
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40020800 	.word	0x40020800

080060c0 <ST7735_Reset>:

void ST7735_Reset()
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060ca:	4807      	ldr	r0, [pc, #28]	; (80060e8 <ST7735_Reset+0x28>)
 80060cc:	f7fe f98c 	bl	80043e8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80060d0:	2005      	movs	r0, #5
 80060d2:	f7fc ff3f 	bl	8002f54 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80060d6:	2201      	movs	r2, #1
 80060d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060dc:	4802      	ldr	r0, [pc, #8]	; (80060e8 <ST7735_Reset+0x28>)
 80060de:	f7fe f983 	bl	80043e8 <HAL_GPIO_WritePin>
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40020000 	.word	0x40020000

080060ec <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80060f6:	2200      	movs	r2, #0
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	4807      	ldr	r0, [pc, #28]	; (8006118 <ST7735_WriteCommand+0x2c>)
 80060fc:	f7fe f974 	bl	80043e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006100:	1df9      	adds	r1, r7, #7
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	2201      	movs	r2, #1
 8006108:	4804      	ldr	r0, [pc, #16]	; (800611c <ST7735_WriteCommand+0x30>)
 800610a:	f7fe ffe0 	bl	80050ce <HAL_SPI_Transmit>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40020c00 	.word	0x40020c00
 800611c:	20000788 	.word	0x20000788

08006120 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800612a:	2201      	movs	r2, #1
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	4807      	ldr	r0, [pc, #28]	; (800614c <ST7735_WriteData+0x2c>)
 8006130:	f7fe f95a 	bl	80043e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	b29a      	uxth	r2, r3
 8006138:	f04f 33ff 	mov.w	r3, #4294967295
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4804      	ldr	r0, [pc, #16]	; (8006150 <ST7735_WriteData+0x30>)
 8006140:	f7fe ffc5 	bl	80050ce <HAL_SPI_Transmit>
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40020c00 	.word	0x40020c00
 8006150:	20000788 	.word	0x20000788

08006154 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	607a      	str	r2, [r7, #4]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8006166:	e034      	b.n	80061d2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ffb9 	bl	80060ec <ST7735_WriteCommand>

        numArgs = *addr++;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8006184:	7abb      	ldrb	r3, [r7, #10]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800618e:	7abb      	ldrb	r3, [r7, #10]
 8006190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006194:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8006196:	7abb      	ldrb	r3, [r7, #10]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800619c:	7abb      	ldrb	r3, [r7, #10]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ffbd 	bl	8006120 <ST7735_WriteData>
            addr += numArgs;
 80061a6:	7abb      	ldrb	r3, [r7, #10]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80061ae:	89bb      	ldrh	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <DisplayInit+0x7e>
            ms = *addr++;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80061be:	89bb      	ldrh	r3, [r7, #12]
 80061c0:	2bff      	cmp	r3, #255	; 0xff
 80061c2:	d102      	bne.n	80061ca <DisplayInit+0x76>
 80061c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80061c8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80061ca:	89bb      	ldrh	r3, [r7, #12]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fc fec1 	bl	8002f54 <HAL_Delay>
    while(numCommands--) {
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	1e5a      	subs	r2, r3, #1
 80061d6:	73fa      	strb	r2, [r7, #15]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1c5      	bne.n	8006168 <DisplayInit+0x14>
        }
    }
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	71fb      	strb	r3, [r7, #7]
 80061fa:	4603      	mov	r3, r0
 80061fc:	71bb      	strb	r3, [r7, #6]
 80061fe:	460b      	mov	r3, r1
 8006200:	717b      	strb	r3, [r7, #5]
 8006202:	4613      	mov	r3, r2
 8006204:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8006206:	202a      	movs	r0, #42	; 0x2a
 8006208:	f7ff ff70 	bl	80060ec <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800620c:	2300      	movs	r3, #0
 800620e:	733b      	strb	r3, [r7, #12]
 8006210:	4b17      	ldr	r3, [pc, #92]	; (8006270 <ST7735_SetAddressWindow+0x88>)
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	4413      	add	r3, r2
 8006218:	b2db      	uxtb	r3, r3
 800621a:	737b      	strb	r3, [r7, #13]
 800621c:	2300      	movs	r3, #0
 800621e:	73bb      	strb	r3, [r7, #14]
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <ST7735_SetAddressWindow+0x88>)
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	797b      	ldrb	r3, [r7, #5]
 8006226:	4413      	add	r3, r2
 8006228:	b2db      	uxtb	r3, r3
 800622a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800622c:	f107 030c 	add.w	r3, r7, #12
 8006230:	2104      	movs	r1, #4
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff ff74 	bl	8006120 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8006238:	202b      	movs	r0, #43	; 0x2b
 800623a:	f7ff ff57 	bl	80060ec <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <ST7735_SetAddressWindow+0x8c>)
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	79bb      	ldrb	r3, [r7, #6]
 8006244:	4413      	add	r3, r2
 8006246:	b2db      	uxtb	r3, r3
 8006248:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <ST7735_SetAddressWindow+0x8c>)
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	793b      	ldrb	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	b2db      	uxtb	r3, r3
 8006254:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8006256:	f107 030c 	add.w	r3, r7, #12
 800625a:	2104      	movs	r1, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ff5f 	bl	8006120 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8006262:	202c      	movs	r0, #44	; 0x2c
 8006264:	f7ff ff42 	bl	80060ec <ST7735_WriteCommand>
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}
 8006270:	20000438 	.word	0x20000438
 8006274:	2000043c 	.word	0x2000043c

08006278 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8006282:	f7ff ff05 	bl	8006090 <ST7735_Select>
    ST7735_Reset();
 8006286:	f7ff ff1b 	bl	80060c0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800628a:	480c      	ldr	r0, [pc, #48]	; (80062bc <ST7735_Init+0x44>)
 800628c:	f7ff ff62 	bl	8006154 <DisplayInit>
    DisplayInit(init_cmds2);
 8006290:	480b      	ldr	r0, [pc, #44]	; (80062c0 <ST7735_Init+0x48>)
 8006292:	f7ff ff5f 	bl	8006154 <DisplayInit>
    DisplayInit(init_cmds3);
 8006296:	480b      	ldr	r0, [pc, #44]	; (80062c4 <ST7735_Init+0x4c>)
 8006298:	f7ff ff5c 	bl	8006154 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <ST7735_Init+0x50>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <ST7735_Init+0x54>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f810 	bl	80062d0 <ST7735_SetRotation>
    ST7735_Unselect();
 80062b0:	f7ff fefa 	bl	80060a8 <ST7735_Unselect>

}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	0800c530 	.word	0x0800c530
 80062c0:	0800c568 	.word	0x0800c568
 80062c4:	0800c578 	.word	0x0800c578
 80062c8:	20000439 	.word	0x20000439
 80062cc:	2000043d 	.word	0x2000043d

080062d0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	4b33      	ldr	r3, [pc, #204]	; (80063b4 <ST7735_SetRotation+0xe4>)
 80062e8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80062ea:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <ST7735_SetRotation+0xe4>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d84e      	bhi.n	8006390 <ST7735_SetRotation+0xc0>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <ST7735_SetRotation+0x28>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	0800632b 	.word	0x0800632b
 8006300:	0800634d 	.word	0x0800634d
 8006304:	0800636f 	.word	0x0800636f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8006308:	23c0      	movs	r3, #192	; 0xc0
 800630a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800630c:	4b2a      	ldr	r3, [pc, #168]	; (80063b8 <ST7735_SetRotation+0xe8>)
 800630e:	22a1      	movs	r2, #161	; 0xa1
 8006310:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8006312:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <ST7735_SetRotation+0xec>)
 8006314:	2282      	movs	r2, #130	; 0x82
 8006316:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8006318:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <ST7735_SetRotation+0xf0>)
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <ST7735_SetRotation+0xf4>)
 800631e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8006320:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <ST7735_SetRotation+0xf8>)
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	4b29      	ldr	r3, [pc, #164]	; (80063cc <ST7735_SetRotation+0xfc>)
 8006326:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8006328:	e032      	b.n	8006390 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800632a:	23a0      	movs	r3, #160	; 0xa0
 800632c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800632e:	4b23      	ldr	r3, [pc, #140]	; (80063bc <ST7735_SetRotation+0xec>)
 8006330:	22a1      	movs	r2, #161	; 0xa1
 8006332:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8006334:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <ST7735_SetRotation+0xe8>)
 8006336:	2282      	movs	r2, #130	; 0x82
 8006338:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <ST7735_SetRotation+0xf0>)
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	4b23      	ldr	r3, [pc, #140]	; (80063cc <ST7735_SetRotation+0xfc>)
 8006340:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8006342:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <ST7735_SetRotation+0xf8>)
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <ST7735_SetRotation+0xf4>)
 8006348:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800634a:	e021      	b.n	8006390 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800634c:	2300      	movs	r3, #0
 800634e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <ST7735_SetRotation+0xe8>)
 8006352:	22a1      	movs	r2, #161	; 0xa1
 8006354:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8006356:	4b19      	ldr	r3, [pc, #100]	; (80063bc <ST7735_SetRotation+0xec>)
 8006358:	2282      	movs	r2, #130	; 0x82
 800635a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <ST7735_SetRotation+0xf0>)
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <ST7735_SetRotation+0xf4>)
 8006362:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8006364:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <ST7735_SetRotation+0xf8>)
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <ST7735_SetRotation+0xfc>)
 800636a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800636c:	e010      	b.n	8006390 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800636e:	2360      	movs	r3, #96	; 0x60
 8006370:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8006372:	4b12      	ldr	r3, [pc, #72]	; (80063bc <ST7735_SetRotation+0xec>)
 8006374:	22a1      	movs	r2, #161	; 0xa1
 8006376:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <ST7735_SetRotation+0xe8>)
 800637a:	2282      	movs	r2, #130	; 0x82
 800637c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <ST7735_SetRotation+0xf0>)
 8006380:	781a      	ldrb	r2, [r3, #0]
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <ST7735_SetRotation+0xfc>)
 8006384:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <ST7735_SetRotation+0xf8>)
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <ST7735_SetRotation+0xf4>)
 800638c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800638e:	bf00      	nop
  }
  ST7735_Select();
 8006390:	f7ff fe7e 	bl	8006090 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8006394:	2036      	movs	r0, #54	; 0x36
 8006396:	f7ff fea9 	bl	80060ec <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800639a:	f107 030f 	add.w	r3, r7, #15
 800639e:	2101      	movs	r1, #1
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff febd 	bl	8006120 <ST7735_WriteData>
  ST7735_Unselect();
 80063a6:	f7ff fe7f 	bl	80060a8 <ST7735_Unselect>
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000474 	.word	0x20000474
 80063b8:	20000482 	.word	0x20000482
 80063bc:	20000476 	.word	0x20000476
 80063c0:	20000439 	.word	0x20000439
 80063c4:	20000438 	.word	0x20000438
 80063c8:	2000043d 	.word	0x2000043d
 80063cc:	2000043c 	.word	0x2000043c

080063d0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	80fb      	strh	r3, [r7, #6]
 80063da:	460b      	mov	r3, r1
 80063dc:	80bb      	strh	r3, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	4a17      	ldr	r2, [pc, #92]	; (8006444 <ST7735_DrawPixel+0x74>)
 80063e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	da26      	bge.n	800643c <ST7735_DrawPixel+0x6c>
 80063ee:	88bb      	ldrh	r3, [r7, #4]
 80063f0:	4a15      	ldr	r2, [pc, #84]	; (8006448 <ST7735_DrawPixel+0x78>)
 80063f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80063f6:	4293      	cmp	r3, r2
 80063f8:	da20      	bge.n	800643c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80063fa:	f7ff fe49 	bl	8006090 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	b2d8      	uxtb	r0, r3
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	88bb      	ldrh	r3, [r7, #4]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	3301      	adds	r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f7ff fee7 	bl	80061e8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800641a:	887b      	ldrh	r3, [r7, #2]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	b29b      	uxth	r3, r3
 8006420:	b2db      	uxtb	r3, r3
 8006422:	733b      	strb	r3, [r7, #12]
 8006424:	887b      	ldrh	r3, [r7, #2]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800642a:	f107 030c 	add.w	r3, r7, #12
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fe75 	bl	8006120 <ST7735_WriteData>

    ST7735_Unselect();
 8006436:	f7ff fe37 	bl	80060a8 <ST7735_Unselect>
 800643a:	e000      	b.n	800643e <ST7735_DrawPixel+0x6e>
        return;
 800643c:	bf00      	nop
}
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000476 	.word	0x20000476
 8006448:	20000482 	.word	0x20000482

0800644c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800644c:	b082      	sub	sp, #8
 800644e:	b590      	push	{r4, r7, lr}
 8006450:	b089      	sub	sp, #36	; 0x24
 8006452:	af00      	add	r7, sp, #0
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
 8006456:	4603      	mov	r3, r0
 8006458:	80fb      	strh	r3, [r7, #6]
 800645a:	460b      	mov	r3, r1
 800645c:	80bb      	strh	r3, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	b2d8      	uxtb	r0, r3
 8006466:	88bb      	ldrh	r3, [r7, #4]
 8006468:	b2d9      	uxtb	r1, r3
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006472:	4413      	add	r3, r2
 8006474:	b2db      	uxtb	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b2dc      	uxtb	r4, r3
 800647a:	88bb      	ldrh	r3, [r7, #4]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006482:	4413      	add	r3, r2
 8006484:	b2db      	uxtb	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4622      	mov	r2, r4
 800648c:	f7ff feac 	bl	80061e8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e043      	b.n	800651e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8006496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	3b20      	subs	r3, #32
 800649c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4619      	mov	r1, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	440b      	add	r3, r1
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e029      	b.n	800650c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00e      	beq.n	80064e6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80064c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	743b      	strb	r3, [r7, #16]
 80064d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	2102      	movs	r1, #2
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fe1e 	bl	8006120 <ST7735_WriteData>
 80064e4:	e00f      	b.n	8006506 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80064e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	733b      	strb	r3, [r7, #12]
 80064f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fe0d 	bl	8006120 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	3301      	adds	r3, #1
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006510:	461a      	mov	r2, r3
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	4293      	cmp	r3, r2
 8006516:	d3cf      	bcc.n	80064b8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	3301      	adds	r3, #1
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006522:	461a      	mov	r2, r3
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4293      	cmp	r3, r2
 8006528:	d3b5      	bcc.n	8006496 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800652a:	bf00      	nop
 800652c:	bf00      	nop
 800652e:	3724      	adds	r7, #36	; 0x24
 8006530:	46bd      	mov	sp, r7
 8006532:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006536:	b002      	add	sp, #8
 8006538:	4770      	bx	lr
	...

0800653c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800653c:	b082      	sub	sp, #8
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af04      	add	r7, sp, #16
 8006544:	603a      	str	r2, [r7, #0]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	4603      	mov	r3, r0
 800654a:	80fb      	strh	r3, [r7, #6]
 800654c:	460b      	mov	r3, r1
 800654e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8006550:	f7ff fd9e 	bl	8006090 <ST7735_Select>

    while(*str) {
 8006554:	e033      	b.n	80065be <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	7d3a      	ldrb	r2, [r7, #20]
 800655a:	4413      	add	r3, r2
 800655c:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <ST7735_WriteString+0xa0>)
 800655e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006562:	4293      	cmp	r3, r2
 8006564:	db16      	blt.n	8006594 <ST7735_WriteString+0x58>
            x = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800656a:	7d7b      	ldrb	r3, [r7, #21]
 800656c:	b29a      	uxth	r2, r3
 800656e:	88bb      	ldrh	r3, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8006574:	88bb      	ldrh	r3, [r7, #4]
 8006576:	7d7a      	ldrb	r2, [r7, #21]
 8006578:	4413      	add	r3, r2
 800657a:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <ST7735_WriteString+0xa4>)
 800657c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006580:	4293      	cmp	r3, r2
 8006582:	da21      	bge.n	80065c8 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b20      	cmp	r3, #32
 800658a:	d103      	bne.n	8006594 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	3301      	adds	r3, #1
 8006590:	603b      	str	r3, [r7, #0]
                continue;
 8006592:	e014      	b.n	80065be <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	88b9      	ldrh	r1, [r7, #4]
 800659a:	88f8      	ldrh	r0, [r7, #6]
 800659c:	8c3b      	ldrh	r3, [r7, #32]
 800659e:	9302      	str	r3, [sp, #8]
 80065a0:	8bbb      	ldrh	r3, [r7, #28]
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f7ff ff4f 	bl	800644c <ST7735_WriteChar>
        x += font.width;
 80065ae:	7d3b      	ldrb	r3, [r7, #20]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	4413      	add	r3, r2
 80065b6:	80fb      	strh	r3, [r7, #6]
        str++;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1c7      	bne.n	8006556 <ST7735_WriteString+0x1a>
 80065c6:	e000      	b.n	80065ca <ST7735_WriteString+0x8e>
                break;
 80065c8:	bf00      	nop
    }

    ST7735_Unselect();
 80065ca:	f7ff fd6d 	bl	80060a8 <ST7735_Unselect>
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d8:	b002      	add	sp, #8
 80065da:	4770      	bx	lr
 80065dc:	20000476 	.word	0x20000476
 80065e0:	20000482 	.word	0x20000482

080065e4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	461a      	mov	r2, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	80fb      	strh	r3, [r7, #6]
 80065f6:	4603      	mov	r3, r0
 80065f8:	80bb      	strh	r3, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	807b      	strh	r3, [r7, #2]
 80065fe:	4613      	mov	r3, r2
 8006600:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	4a37      	ldr	r2, [pc, #220]	; (80066e4 <ST7735_FillRectangle+0x100>)
 8006606:	f9b2 2000 	ldrsh.w	r2, [r2]
 800660a:	4293      	cmp	r3, r2
 800660c:	da66      	bge.n	80066dc <ST7735_FillRectangle+0xf8>
 800660e:	88bb      	ldrh	r3, [r7, #4]
 8006610:	4a35      	ldr	r2, [pc, #212]	; (80066e8 <ST7735_FillRectangle+0x104>)
 8006612:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006616:	4293      	cmp	r3, r2
 8006618:	da60      	bge.n	80066dc <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	4413      	add	r3, r2
 8006620:	4a30      	ldr	r2, [pc, #192]	; (80066e4 <ST7735_FillRectangle+0x100>)
 8006622:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006626:	4293      	cmp	r3, r2
 8006628:	dd06      	ble.n	8006638 <ST7735_FillRectangle+0x54>
 800662a:	4b2e      	ldr	r3, [pc, #184]	; (80066e4 <ST7735_FillRectangle+0x100>)
 800662c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006630:	b29a      	uxth	r2, r3
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8006638:	88ba      	ldrh	r2, [r7, #4]
 800663a:	883b      	ldrh	r3, [r7, #0]
 800663c:	4413      	add	r3, r2
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <ST7735_FillRectangle+0x104>)
 8006640:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006644:	4293      	cmp	r3, r2
 8006646:	dd06      	ble.n	8006656 <ST7735_FillRectangle+0x72>
 8006648:	4b27      	ldr	r3, [pc, #156]	; (80066e8 <ST7735_FillRectangle+0x104>)
 800664a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800664e:	b29a      	uxth	r2, r3
 8006650:	88bb      	ldrh	r3, [r7, #4]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8006656:	f7ff fd1b 	bl	8006090 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	b2d8      	uxtb	r0, r3
 800665e:	88bb      	ldrh	r3, [r7, #4]
 8006660:	b2d9      	uxtb	r1, r3
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	887b      	ldrh	r3, [r7, #2]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	4413      	add	r3, r2
 800666c:	b2db      	uxtb	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b2dc      	uxtb	r4, r3
 8006672:	88bb      	ldrh	r3, [r7, #4]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	883b      	ldrh	r3, [r7, #0]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4413      	add	r3, r2
 800667c:	b2db      	uxtb	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b2db      	uxtb	r3, r3
 8006682:	4622      	mov	r2, r4
 8006684:	f7ff fdb0 	bl	80061e8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8006688:	8c3b      	ldrh	r3, [r7, #32]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b29b      	uxth	r3, r3
 800668e:	b2db      	uxtb	r3, r3
 8006690:	733b      	strb	r3, [r7, #12]
 8006692:	8c3b      	ldrh	r3, [r7, #32]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8006698:	2201      	movs	r2, #1
 800669a:	2180      	movs	r1, #128	; 0x80
 800669c:	4813      	ldr	r0, [pc, #76]	; (80066ec <ST7735_FillRectangle+0x108>)
 800669e:	f7fd fea3 	bl	80043e8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80066a2:	883b      	ldrh	r3, [r7, #0]
 80066a4:	80bb      	strh	r3, [r7, #4]
 80066a6:	e013      	b.n	80066d0 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80066a8:	887b      	ldrh	r3, [r7, #2]
 80066aa:	80fb      	strh	r3, [r7, #6]
 80066ac:	e00a      	b.n	80066c4 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80066ae:	f107 010c 	add.w	r1, r7, #12
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	2202      	movs	r2, #2
 80066b8:	480d      	ldr	r0, [pc, #52]	; (80066f0 <ST7735_FillRectangle+0x10c>)
 80066ba:	f7fe fd08 	bl	80050ce <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	80fb      	strh	r3, [r7, #6]
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f1      	bne.n	80066ae <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80066ca:	88bb      	ldrh	r3, [r7, #4]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	80bb      	strh	r3, [r7, #4]
 80066d0:	88bb      	ldrh	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e8      	bne.n	80066a8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80066d6:	f7ff fce7 	bl	80060a8 <ST7735_Unselect>
 80066da:	e000      	b.n	80066de <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80066dc:	bf00      	nop
}
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd90      	pop	{r4, r7, pc}
 80066e4:	20000476 	.word	0x20000476
 80066e8:	20000482 	.word	0x20000482
 80066ec:	40020c00 	.word	0x40020c00
 80066f0:	20000788 	.word	0x20000788

080066f4 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	4603      	mov	r3, r0
 80066fc:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, _width, _height, color);
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <ST7735_FillScreen+0x30>)
 8006700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006704:	b29a      	uxth	r2, r3
 8006706:	4b08      	ldr	r3, [pc, #32]	; (8006728 <ST7735_FillScreen+0x34>)
 8006708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800670c:	b299      	uxth	r1, r3
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	460b      	mov	r3, r1
 8006714:	2100      	movs	r1, #0
 8006716:	2000      	movs	r0, #0
 8006718:	f7ff ff64 	bl	80065e4 <ST7735_FillRectangle>
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000476 	.word	0x20000476
 8006728:	20000482 	.word	0x20000482

0800672c <HAL_GPIO_EXTI_Callback>:
#include "stm32f4xx_hal.h"
#include "stdbool.h"
#include "tim.h"

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == ENCODER_1_BTN ) {
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673c:	d103      	bne.n	8006746 <HAL_GPIO_EXTI_Callback+0x1a>
		encoder_toggle_button (&encoder_1);
 800673e:	4804      	ldr	r0, [pc, #16]	; (8006750 <HAL_GPIO_EXTI_Callback+0x24>)
 8006740:	f000 f83d 	bl	80067be <encoder_toggle_button>
 8006744:	e000      	b.n	8006748 <HAL_GPIO_EXTI_Callback+0x1c>
	}
	else {
		return;
 8006746:	bf00      	nop
	}
}
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200006b8 	.word	0x200006b8

08006754 <encoder_struct_init>:

void encoder_struct_init(struct encoder *enc, TIM_HandleTypeDef *htim) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
	encoder_reset_flags(enc);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f80a 	bl	8006778 <encoder_reset_flags>
	enc->ptr = htim;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	60da      	str	r2, [r3, #12]
	encoder_check_counter (enc);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f817 	bl	800679e <encoder_check_counter>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <encoder_reset_flags>:

void encoder_reset_flags(struct encoder *enc) {
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	enc->step_clockwise = false;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	721a      	strb	r2, [r3, #8]
	enc->step_counterclockwise = false;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	725a      	strb	r2, [r3, #9]
	enc->enter = false;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	729a      	strb	r2, [r3, #10]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <encoder_check_counter>:

void encoder_check_counter (struct encoder *enc) {
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]

	enc->encoderState = __HAL_TIM_GET_COUNTER( enc->ptr );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <encoder_toggle_button>:

void encoder_toggle_button (struct encoder *enc) {
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]

	if ( enc->enter == true) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7a9b      	ldrb	r3, [r3, #10]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <encoder_toggle_button+0x18>
		enc->enter = false;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	729a      	strb	r2, [r3, #10]
	else {
		enc->enter = true;
	}


}
 80067d4:	e002      	b.n	80067dc <encoder_toggle_button+0x1e>
		enc->enter = true;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	729a      	strb	r2, [r3, #10]
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <encoder_check_direction>:

void encoder_check_direction(struct encoder *enc) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

	encoder_check_counter (enc);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ffd4 	bl	800679e <encoder_check_counter>

	int8_t state = (enc->lastEncoderState - enc->encoderState);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	b2db      	uxtb	r3, r3
 8006806:	73fb      	strb	r3, [r7, #15]

	if( state == 1 ) {
 8006808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <encoder_check_direction+0x38>
		enc->lastEncoderState = enc->encoderState;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	721a      	strb	r2, [r3, #8]
	}
	else {
		enc->lastEncoderState = enc->encoderState;

	}
}
 800681e:	e03f      	b.n	80068a0 <encoder_check_direction+0xb8>
	else if (state == -1){
 8006820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d107      	bne.n	800683a <encoder_check_direction+0x52>
		enc->lastEncoderState = enc->encoderState;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	725a      	strb	r2, [r3, #9]
}
 8006838:	e032      	b.n	80068a0 <encoder_check_direction+0xb8>
	else if ( (state == enc->lastEncoderState) && (enc->lastEncoderState == htim1.Init.Period) && (enc->encoderState == 0) ) {
 800683a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d111      	bne.n	800686a <encoder_check_direction+0x82>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <encoder_check_direction+0xc0>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	429a      	cmp	r2, r3
 8006850:	d10b      	bne.n	800686a <encoder_check_direction+0x82>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <encoder_check_direction+0x82>
		enc->lastEncoderState = enc->encoderState;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	725a      	strb	r2, [r3, #9]
 8006868:	e01a      	b.n	80068a0 <encoder_check_direction+0xb8>
	else if ( (state < 0) && (enc->lastEncoderState == 0) && (enc->encoderState == htim1.Init.Period)) {
 800686a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	da11      	bge.n	8006896 <encoder_check_direction+0xae>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <encoder_check_direction+0xae>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <encoder_check_direction+0xc0>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	429a      	cmp	r2, r3
 8006884:	d107      	bne.n	8006896 <encoder_check_direction+0xae>
		enc->lastEncoderState = enc->encoderState;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	721a      	strb	r2, [r3, #8]
 8006894:	e004      	b.n	80068a0 <encoder_check_direction+0xb8>
		enc->lastEncoderState = enc->encoderState;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
}
 800689e:	e7ff      	b.n	80068a0 <encoder_check_direction+0xb8>
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200007e0 	.word	0x200007e0

080068ac <encoder_step_clockwise>:

_Bool encoder_step_clockwise(struct encoder *enc) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff97 	bl	80067e8 <encoder_check_direction>
	if(enc->step_clockwise == true) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7a1b      	ldrb	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <encoder_step_clockwise+0x20>
		encoder_reset_flags(enc);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ff58 	bl	8006778 <encoder_reset_flags>
		return true;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <encoder_step_clockwise+0x22>
	}
	else {
		return false;
 80068cc:	2300      	movs	r3, #0
	}

}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <encoder_step_counterclockwise>:

_Bool encoder_step_counterclockwise(struct encoder *enc) {
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff82 	bl	80067e8 <encoder_check_direction>
	if(enc->step_counterclockwise == true) {
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	7a5b      	ldrb	r3, [r3, #9]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <encoder_step_counterclockwise+0x20>
		encoder_reset_flags(enc);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff ff43 	bl	8006778 <encoder_reset_flags>
		return true;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <encoder_step_counterclockwise+0x22>
	}
	else {
		return false;
 80068f6:	2300      	movs	r3, #0
	}
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <encoder_enter>:

_Bool encoder_enter(struct encoder *enc) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	if(enc->enter == true) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7a9b      	ldrb	r3, [r3, #10]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <encoder_enter+0x20>
		HAL_Delay(50);
 8006910:	2032      	movs	r0, #50	; 0x32
 8006912:	f7fc fb1f 	bl	8002f54 <HAL_Delay>
		encoder_reset_flags(enc);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff ff2e 	bl	8006778 <encoder_reset_flags>
		return true;
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <encoder_enter+0x22>
	}
	else {
		return false;
 8006920:	2300      	movs	r3, #0
	}
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <Menu_GetMenuItemsNo>:

static const  struct menuitem *currMenuPtr = &menu_link;    //Current menu position
static int8_t menuindex;                                    //Index of current menu position
static int8_t menufirstpos;                                 //Index of menu position displayed at the top

uint8_t Menu_GetMenuItemsNo() {
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
	const struct menuitem *tmpmenuitem = currMenuPtr;
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <Menu_GetMenuItemsNo+0x34>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	607b      	str	r3, [r7, #4]
	uint8_t index=0;
 8006938:	2300      	movs	r3, #0
 800693a:	70fb      	strb	r3, [r7, #3]

	while(tmpmenuitem) {
 800693c:	e005      	b.n	800694a <Menu_GetMenuItemsNo+0x1e>
		tmpmenuitem=tmpmenuitem->next;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	607b      	str	r3, [r7, #4]
		index++;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	3301      	adds	r3, #1
 8006948:	70fb      	strb	r3, [r7, #3]
	while(tmpmenuitem) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f6      	bne.n	800693e <Menu_GetMenuItemsNo+0x12>
	}

	return index;
 8006950:	78fb      	ldrb	r3, [r7, #3]
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000044 	.word	0x20000044

08006964 <Menu_GetMenuItem>:

const struct menuitem *Menu_GetMenuItem(uint8_t index) {
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
	const struct menuitem *tmpmenuitem=currMenuPtr;
 800696e:	4b0b      	ldr	r3, [pc, #44]	; (800699c <Menu_GetMenuItem+0x38>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]

	while((tmpmenuitem) && (index>0)) {
 8006974:	e005      	b.n	8006982 <Menu_GetMenuItem+0x1e>
	 tmpmenuitem=tmpmenuitem->next;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	60fb      	str	r3, [r7, #12]
	 index--;
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	3b01      	subs	r3, #1
 8006980:	71fb      	strb	r3, [r7, #7]
	while((tmpmenuitem) && (index>0)) {
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <Menu_GetMenuItem+0x2a>
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f3      	bne.n	8006976 <Menu_GetMenuItem+0x12>
	}

	return tmpmenuitem;
 800698e:	68fb      	ldr	r3, [r7, #12]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000044 	.word	0x20000044

080069a0 <Menu_GetMenuRows>:

uint8_t Menu_GetMenuRows() {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
	uint8_t menuRows = UG_GetYDim() / (gui1.font.font_height);
 80069a6:	f000 fe15 	bl	80075d4 <UG_GetYDim>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <Menu_GetMenuRows+0x24>)
 80069b0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80069b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80069b8:	71fb      	strb	r3, [r7, #7]
	return menuRows;
 80069ba:	79fb      	ldrb	r3, [r7, #7]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000598 	.word	0x20000598

080069c8 <Menu_Show>:

void Menu_Show() {
 80069c8:	b5b0      	push	{r4, r5, r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af02      	add	r7, sp, #8
	const struct menuitem *tmpmenuitem=Menu_GetMenuItem(menufirstpos);
 80069ce:	4b66      	ldr	r3, [pc, #408]	; (8006b68 <Menu_Show+0x1a0>)
 80069d0:	f993 3000 	ldrsb.w	r3, [r3]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ffc4 	bl	8006964 <Menu_GetMenuItem>
 80069dc:	6078      	str	r0, [r7, #4]
	uint8_t menuitemsno=Menu_GetMenuItemsNo();
 80069de:	f7ff ffa5 	bl	800692c <Menu_GetMenuItemsNo>
 80069e2:	4603      	mov	r3, r0
 80069e4:	70bb      	strb	r3, [r7, #2]

	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 80069e6:	2300      	movs	r3, #0
 80069e8:	70fb      	strb	r3, [r7, #3]
 80069ea:	e0af      	b.n	8006b4c <Menu_Show+0x184>
		uint8_t xbox = 0, ybox = 26;
 80069ec:	2300      	movs	r3, #0
 80069ee:	707b      	strb	r3, [r7, #1]
 80069f0:	231a      	movs	r3, #26
 80069f2:	703b      	strb	r3, [r7, #0]

		if(menuindex == ((menufirstpos + i) % menuitemsno)) {
 80069f4:	4b5d      	ldr	r3, [pc, #372]	; (8006b6c <Menu_Show+0x1a4>)
 80069f6:	f993 3000 	ldrsb.w	r3, [r3]
 80069fa:	4618      	mov	r0, r3
 80069fc:	4b5a      	ldr	r3, [pc, #360]	; (8006b68 <Menu_Show+0x1a0>)
 80069fe:	f993 3000 	ldrsb.w	r3, [r3]
 8006a02:	461a      	mov	r2, r3
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	4413      	add	r3, r2
 8006a08:	78ba      	ldrb	r2, [r7, #2]
 8006a0a:	fb93 f1f2 	sdiv	r1, r3, r2
 8006a0e:	fb02 f201 	mul.w	r2, r2, r1
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	4298      	cmp	r0, r3
 8006a16:	d138      	bne.n	8006a8a <Menu_Show+0xc2>

			UG_SetBackcolor( C_BLUE );
 8006a18:	20ff      	movs	r0, #255	; 0xff
 8006a1a:	f000 fdbd 	bl	8007598 <UG_SetBackcolor>
			UG_FillFrame(xbox, 2+(i*ybox), UG_GetXDim(), (gui1.font.char_height)+(0+(i*ybox)), C_BLUE);
 8006a1e:	787b      	ldrb	r3, [r7, #1]
 8006a20:	b21c      	sxth	r4, r3
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	783b      	ldrb	r3, [r7, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	fb12 f303 	smulbb	r3, r2, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3302      	adds	r3, #2
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	b21d      	sxth	r5, r3
 8006a36:	f000 fdbf 	bl	80075b8 <UG_GetXDim>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	4b4c      	ldr	r3, [pc, #304]	; (8006b70 <Menu_Show+0x1a8>)
 8006a40:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	b299      	uxth	r1, r3
 8006a4a:	783b      	ldrb	r3, [r7, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	fb11 f303 	smulbb	r3, r1, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	22ff      	movs	r2, #255	; 0xff
 8006a5c:	9200      	str	r2, [sp, #0]
 8006a5e:	4602      	mov	r2, r0
 8006a60:	4629      	mov	r1, r5
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 fba4 	bl	80071b0 <UG_FillFrame>
			UG_PutString( 0, 2+(i*ybox), tmpmenuitem->text);
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	783b      	ldrb	r3, [r7, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	fb12 f303 	smulbb	r3, r2, r3
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3302      	adds	r3, #2
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	b219      	sxth	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	2000      	movs	r0, #0
 8006a84:	f000 fc04 	bl	8007290 <UG_PutString>
 8006a88:	e037      	b.n	8006afa <Menu_Show+0x132>
		}
		else {
			UG_SetBackcolor( C_BLACK );
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f000 fd84 	bl	8007598 <UG_SetBackcolor>
			UG_FillFrame(xbox, 2+(i*ybox), UG_GetXDim(), (gui1.font.char_height)+(0+(i*ybox)), C_BLACK);
 8006a90:	787b      	ldrb	r3, [r7, #1]
 8006a92:	b21c      	sxth	r4, r3
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	783b      	ldrb	r3, [r7, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	fb12 f303 	smulbb	r3, r2, r3
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	b21d      	sxth	r5, r3
 8006aa8:	f000 fd86 	bl	80075b8 <UG_GetXDim>
 8006aac:	4603      	mov	r3, r0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	4b2f      	ldr	r3, [pc, #188]	; (8006b70 <Menu_Show+0x1a8>)
 8006ab2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	b299      	uxth	r1, r3
 8006abc:	783b      	ldrb	r3, [r7, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	fb11 f303 	smulbb	r3, r1, r3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	2200      	movs	r2, #0
 8006ace:	9200      	str	r2, [sp, #0]
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fb6b 	bl	80071b0 <UG_FillFrame>
			UG_PutString( 0, 2+(i*ybox), tmpmenuitem->text);
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	783b      	ldrb	r3, [r7, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	fb12 f303 	smulbb	r3, r2, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3302      	adds	r3, #2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	b219      	sxth	r1, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	2000      	movs	r0, #0
 8006af6:	f000 fbcb 	bl	8007290 <UG_PutString>
		}

		if(tmpmenuitem->submenu) {
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <Menu_Show+0x15a>
			UG_PutString( xbox, 2+(i*ybox), "");
 8006b02:	787b      	ldrb	r3, [r7, #1]
 8006b04:	b218      	sxth	r0, r3
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	783b      	ldrb	r3, [r7, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	fb12 f303 	smulbb	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3302      	adds	r3, #2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	b21b      	sxth	r3, r3
 8006b1a:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <Menu_Show+0x1ac>)
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f000 fbb7 	bl	8007290 <UG_PutString>
		}

		tmpmenuitem = tmpmenuitem->next;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	607b      	str	r3, [r7, #4]

		if(tmpmenuitem == NULL)  //End of list
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <Menu_Show+0x17e>
		{
			if(Menu_GetMenuItemsNo() > Menu_GetMenuRows()){
 8006b2e:	f7ff fefd 	bl	800692c <Menu_GetMenuItemsNo>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461c      	mov	r4, r3
 8006b36:	f7ff ff33 	bl	80069a0 <Menu_GetMenuRows>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	d90e      	bls.n	8006b5e <Menu_Show+0x196>
				tmpmenuitem=currMenuPtr;
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <Menu_Show+0x1b0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	70fb      	strb	r3, [r7, #3]
 8006b4c:	f7ff ff28 	bl	80069a0 <Menu_GetMenuRows>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	f4ff af48 	bcc.w	80069ec <Menu_Show+0x24>
			else {
				break;   //Finish to avoid repeating elements
			}
		}
	}
}
 8006b5c:	e000      	b.n	8006b60 <Menu_Show+0x198>
				break;   //Finish to avoid repeating elements
 8006b5e:	bf00      	nop
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bdb0      	pop	{r4, r5, r7, pc}
 8006b68:	2000035d 	.word	0x2000035d
 8006b6c:	2000035c 	.word	0x2000035c
 8006b70:	20000598 	.word	0x20000598
 8006b74:	0800c50c 	.word	0x0800c50c
 8006b78:	20000044 	.word	0x20000044

08006b7c <Menu_SelectNext>:

void Menu_SelectNext() {
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
	uint8_t no = Menu_GetMenuItemsNo();
 8006b82:	f7ff fed3 	bl	800692c <Menu_GetMenuItemsNo>
 8006b86:	4603      	mov	r3, r0
 8006b88:	71bb      	strb	r3, [r7, #6]
	menuindex++;
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	3301      	adds	r3, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	b25a      	sxtb	r2, r3
 8006b98:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006b9a:	701a      	strb	r2, [r3, #0]

	if(no > Menu_GetMenuRows()){
 8006b9c:	f7ff ff00 	bl	80069a0 <Menu_GetMenuRows>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	79bb      	ldrb	r3, [r7, #6]
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d931      	bls.n	8006c0e <Menu_SelectNext+0x92>
		int8_t dist;	//Distance between first and highlighted position

		if(menuindex < menufirstpos) {
 8006baa:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006bac:	f993 2000 	ldrsb.w	r2, [r3]
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	da0e      	bge.n	8006bd8 <Menu_SelectNext+0x5c>
			dist = no - menufirstpos + menuindex;
 8006bba:	4b26      	ldr	r3, [pc, #152]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	79ba      	ldrb	r2, [r7, #6]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	4b21      	ldr	r3, [pc, #132]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006bca:	f993 3000 	ldrsb.w	r3, [r3]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	71fb      	strb	r3, [r7, #7]
 8006bd6:	e00a      	b.n	8006bee <Menu_SelectNext+0x72>
		}
		else {
			dist=menuindex-menufirstpos;
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006bda:	f993 3000 	ldrsb.w	r3, [r3]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006be2:	f993 3000 	ldrsb.w	r3, [r3]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	71fb      	strb	r3, [r7, #7]
		}

		if(dist >= Menu_GetMenuRows()) {
 8006bee:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8006bf2:	f7ff fed5 	bl	80069a0 <Menu_GetMenuRows>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	db08      	blt.n	8006c0e <Menu_SelectNext+0x92>
			menufirstpos++;  //End of screen, scroll
 8006bfc:	4b15      	ldr	r3, [pc, #84]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	3301      	adds	r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	b25a      	sxtb	r2, r3
 8006c0a:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006c0c:	701a      	strb	r2, [r3, #0]
		}
	}

	menuindex %= no;
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006c10:	f993 3000 	ldrsb.w	r3, [r3]
 8006c14:	461a      	mov	r2, r3
 8006c16:	79bb      	ldrb	r3, [r7, #6]
 8006c18:	fb92 f1f3 	sdiv	r1, r2, r3
 8006c1c:	fb03 f301 	mul.w	r3, r3, r1
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	b25a      	sxtb	r2, r3
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <Menu_SelectNext+0xd4>)
 8006c26:	701a      	strb	r2, [r3, #0]
	menufirstpos %= no;
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	79bb      	ldrb	r3, [r7, #6]
 8006c32:	fb92 f1f3 	sdiv	r1, r2, r3
 8006c36:	fb03 f301 	mul.w	r3, r3, r1
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	b25a      	sxtb	r2, r3
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <Menu_SelectNext+0xd8>)
 8006c40:	701a      	strb	r2, [r3, #0]
	Menu_Show();
 8006c42:	f7ff fec1 	bl	80069c8 <Menu_Show>
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	2000035c 	.word	0x2000035c
 8006c54:	2000035d 	.word	0x2000035d

08006c58 <Menu_SelectPrev>:

void Menu_SelectPrev() {
 8006c58:	b598      	push	{r3, r4, r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
	if(menuindex > 0)
 8006c5c:	4b23      	ldr	r3, [pc, #140]	; (8006cec <Menu_SelectPrev+0x94>)
 8006c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dd1a      	ble.n	8006c9c <Menu_SelectPrev+0x44>
	{
		if(menuindex == menufirstpos) menufirstpos--;
 8006c66:	4b21      	ldr	r3, [pc, #132]	; (8006cec <Menu_SelectPrev+0x94>)
 8006c68:	f993 2000 	ldrsb.w	r2, [r3]
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <Menu_SelectPrev+0x98>)
 8006c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d108      	bne.n	8006c88 <Menu_SelectPrev+0x30>
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <Menu_SelectPrev+0x98>)
 8006c78:	f993 3000 	ldrsb.w	r3, [r3]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	b25a      	sxtb	r2, r3
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <Menu_SelectPrev+0x98>)
 8006c86:	701a      	strb	r2, [r3, #0]
		menuindex--;
 8006c88:	4b18      	ldr	r3, [pc, #96]	; (8006cec <Menu_SelectPrev+0x94>)
 8006c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	b25a      	sxtb	r2, r3
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <Menu_SelectPrev+0x94>)
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e023      	b.n	8006ce4 <Menu_SelectPrev+0x8c>
	}
	 else
	{
		if(menufirstpos == 0)
 8006c9c:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <Menu_SelectPrev+0x98>)
 8006c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d116      	bne.n	8006cd4 <Menu_SelectPrev+0x7c>
		{
			menuindex=Menu_GetMenuItemsNo()-1;
 8006ca6:	f7ff fe41 	bl	800692c <Menu_GetMenuItemsNo>
 8006caa:	4603      	mov	r3, r0
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	b25a      	sxtb	r2, r3
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <Menu_SelectPrev+0x94>)
 8006cb4:	701a      	strb	r2, [r3, #0]
			if(Menu_GetMenuItemsNo()>Menu_GetMenuRows()) menufirstpos = menuindex;
 8006cb6:	f7ff fe39 	bl	800692c <Menu_GetMenuItemsNo>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461c      	mov	r4, r3
 8006cbe:	f7ff fe6f 	bl	80069a0 <Menu_GetMenuRows>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	d90d      	bls.n	8006ce4 <Menu_SelectPrev+0x8c>
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <Menu_SelectPrev+0x94>)
 8006cca:	f993 2000 	ldrsb.w	r2, [r3]
 8006cce:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <Menu_SelectPrev+0x98>)
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e007      	b.n	8006ce4 <Menu_SelectPrev+0x8c>
		} else menuindex = Menu_GetMenuItemsNo()-1;
 8006cd4:	f7ff fe2a 	bl	800692c <Menu_GetMenuItemsNo>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	b25a      	sxtb	r2, r3
 8006ce0:	4b02      	ldr	r3, [pc, #8]	; (8006cec <Menu_SelectPrev+0x94>)
 8006ce2:	701a      	strb	r2, [r3, #0]
	}
	Menu_Show();
 8006ce4:	f7ff fe70 	bl	80069c8 <Menu_Show>
}
 8006ce8:	bf00      	nop
 8006cea:	bd98      	pop	{r3, r4, r7, pc}
 8006cec:	2000035c 	.word	0x2000035c
 8006cf0:	2000035d 	.word	0x2000035d

08006cf4 <Menu_Back>:

void Menu_Back() {
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
	menufirstpos = 0;
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <Menu_Back+0x24>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
	menuindex = 0;
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <Menu_Back+0x28>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
	currMenuPtr = currMenuPtr->parent;
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <Menu_Back+0x2c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4a05      	ldr	r2, [pc, #20]	; (8006d20 <Menu_Back+0x2c>)
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	2000035d 	.word	0x2000035d
 8006d1c:	2000035c 	.word	0x2000035c
 8006d20:	20000044 	.word	0x20000044

08006d24 <Menu_Click>:

void Menu_Click() {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
  const struct menuitem *tmpmenuitem = Menu_GetMenuItem(menuindex);
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <Menu_Click+0x58>)
 8006d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fe16 	bl	8006964 <Menu_GetMenuItem>
 8006d38:	60f8      	str	r0, [r7, #12]
  const struct menuitem *submenu = tmpmenuitem->submenu;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	60bb      	str	r3, [r7, #8]

  menuitemfuncptr mfptr = tmpmenuitem->menuitemfunc;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	607b      	str	r3, [r7, #4]

  if(mfptr) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <Menu_Click+0x2c>
	  (*mfptr)();
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4798      	blx	r3
  }
  if(submenu) {
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <Menu_Click+0x44>
	  currMenuPtr = submenu;
 8006d56:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <Menu_Click+0x5c>)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6013      	str	r3, [r2, #0]
	  menuindex = 0;
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <Menu_Click+0x58>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
	  menufirstpos = 0;
 8006d62:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <Menu_Click+0x60>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
   }
  UG_FillScreen( C_BLACK );
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f000 f9ff 	bl	800716c <UG_FillScreen>
  Menu_Show();
 8006d6e:	f7ff fe2b 	bl	80069c8 <Menu_Show>
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	2000035c 	.word	0x2000035c
 8006d80:	20000044 	.word	0x20000044
 8006d84:	2000035d 	.word	0x2000035d

08006d88 <GUI_init>:

void GUI_init(void) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0

  /* -------------------------------------------------------------------------------- */
  /* Define µGUI structure (ST7735 128x160)                              			  */
  /* -------------------------------------------------------------------------------- */
  UG_Init(&gui1,(void(*)(UG_S16,UG_S16,UG_COLOR))ST7735_DrawPixel,ST7735_HEIGHT,ST7735_WIDTH);
 8006d8c:	2382      	movs	r3, #130	; 0x82
 8006d8e:	22a1      	movs	r2, #161	; 0xa1
 8006d90:	4909      	ldr	r1, [pc, #36]	; (8006db8 <GUI_init+0x30>)
 8006d92:	480a      	ldr	r0, [pc, #40]	; (8006dbc <GUI_init+0x34>)
 8006d94:	f000 f928 	bl	8006fe8 <UG_Init>

  /* Clear Screen */
  UG_FillScreen( C_BLACK );
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f000 f9e7 	bl	800716c <UG_FillScreen>
  UG_FontSelect ( &FONT_6X8 ) ;
 8006d9e:	4808      	ldr	r0, [pc, #32]	; (8006dc0 <GUI_init+0x38>)
 8006da0:	f000 f9a6 	bl	80070f0 <UG_FontSelect>
  UG_SetBackcolor ( C_BLACK ) ;
 8006da4:	2000      	movs	r0, #0
 8006da6:	f000 fbf7 	bl	8007598 <UG_SetBackcolor>
  UG_SetForecolor ( C_CYAN ) ;
 8006daa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006dae:	f000 fbe3 	bl	8007578 <UG_SetForecolor>
}
 8006db2:	bf00      	nop
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	080063d1 	.word	0x080063d1
 8006dbc:	20000598 	.word	0x20000598
 8006dc0:	0800ea50 	.word	0x0800ea50

08006dc4 <func_A1>:
//
/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 1 -- */
/* -------------------------------------------------------------------------------- */

void func_A1() {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <func_A1+0x1c>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006dce:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <func_A1+0x1c>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH1, true);
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f7fa fb34 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8006ddc:	bf00      	nop
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000478 	.word	0x20000478

08006de4 <func_A2>:
void func_A2() {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <func_A2+0x1c>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <func_A2+0x1c>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH1, true);
 8006df4:	2101      	movs	r1, #1
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7fa fb88 	bl	800150c <DAQ_channel_set_flag_th_limit>
}
 8006dfc:	bf00      	nop
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000478 	.word	0x20000478

08006e04 <func_A3>:

void func_A3() {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <func_A3+0x1c>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <func_A3+0x1c>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH1, true);
 8006e14:	2101      	movs	r1, #1
 8006e16:	2000      	movs	r0, #0
 8006e18:	f7fa fbe6 	bl	80015e8 <DAQ_channel_set_flag_ph_limit>
}
 8006e1c:	bf00      	nop
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20000478 	.word	0x20000478

08006e24 <func_A4>:

void func_A4() {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <func_A4+0x1c>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <func_A4+0x1c>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH1, true);
 8006e34:	2101      	movs	r1, #1
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7fa fb4e 	bl	80014d8 <DAQ_channel_set_flag_save>
}
 8006e3c:	bf00      	nop
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000478 	.word	0x20000478

08006e44 <func_B1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 2 -- */
/* -------------------------------------------------------------------------------- */
void func_B1(){
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <func_B1+0x1c>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006e4e:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <func_B1+0x1c>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH2, true);
 8006e54:	2101      	movs	r1, #1
 8006e56:	2001      	movs	r0, #1
 8006e58:	f7fa faf4 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8006e5c:	bf00      	nop
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000478 	.word	0x20000478

08006e64 <func_B2>:

void func_B2() {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <func_B2+0x1c>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <func_B2+0x1c>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH2, true);
 8006e74:	2101      	movs	r1, #1
 8006e76:	2001      	movs	r0, #1
 8006e78:	f7fa fb48 	bl	800150c <DAQ_channel_set_flag_th_limit>
}
 8006e7c:	bf00      	nop
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20000478 	.word	0x20000478

08006e84 <func_B3>:

void func_B3() {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <func_B3+0x1c>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006e8e:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <func_B3+0x1c>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH2, true);
 8006e94:	2101      	movs	r1, #1
 8006e96:	2001      	movs	r0, #1
 8006e98:	f7fa fba6 	bl	80015e8 <DAQ_channel_set_flag_ph_limit>
}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000478 	.word	0x20000478

08006ea4 <func_B4>:

void func_B4() {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <func_B4+0x1c>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <func_B4+0x1c>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH2, true);
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f7fa fb0e 	bl	80014d8 <DAQ_channel_set_flag_save>
}
 8006ebc:	bf00      	nop
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000478 	.word	0x20000478

08006ec4 <func_C1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 3 -- */
/* -------------------------------------------------------------------------------- */
void func_C1() {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <func_C1+0x1c>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006ece:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <func_C1+0x1c>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH3, true);
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	2002      	movs	r0, #2
 8006ed8:	f7fa fab4 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8006edc:	bf00      	nop
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000478 	.word	0x20000478

08006ee4 <func_C2>:
void func_C2() {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <func_C2+0x1c>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006eee:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <func_C2+0x1c>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH3, true);
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	2002      	movs	r0, #2
 8006ef8:	f7fa fb08 	bl	800150c <DAQ_channel_set_flag_th_limit>
}
 8006efc:	bf00      	nop
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000478 	.word	0x20000478

08006f04 <func_C3>:

void func_C3() {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <func_C3+0x1c>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <func_C3+0x1c>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH3, true);
 8006f14:	2101      	movs	r1, #1
 8006f16:	2002      	movs	r0, #2
 8006f18:	f7fa fb66 	bl	80015e8 <DAQ_channel_set_flag_ph_limit>
}
 8006f1c:	bf00      	nop
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000478 	.word	0x20000478

08006f24 <func_C4>:

void func_C4() {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <func_C4+0x1c>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <func_C4+0x1c>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH3, true);
 8006f34:	2101      	movs	r1, #1
 8006f36:	2002      	movs	r0, #2
 8006f38:	f7fa face 	bl	80014d8 <DAQ_channel_set_flag_save>
}
 8006f3c:	bf00      	nop
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000478 	.word	0x20000478

08006f44 <func_D1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 4 -- */
/* -------------------------------------------------------------------------------- */
void func_D1(){
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <func_D1+0x1c>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f4e:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <func_D1+0x1c>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH4, true);
 8006f54:	2101      	movs	r1, #1
 8006f56:	2003      	movs	r0, #3
 8006f58:	f7fa fa74 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8006f5c:	bf00      	nop
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000478 	.word	0x20000478

08006f64 <func_D2>:

void func_D2() {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <func_D2+0x1c>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <func_D2+0x1c>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH4, true);
 8006f74:	2101      	movs	r1, #1
 8006f76:	2003      	movs	r0, #3
 8006f78:	f7fa fac8 	bl	800150c <DAQ_channel_set_flag_th_limit>
}
 8006f7c:	bf00      	nop
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000478 	.word	0x20000478

08006f84 <func_D3>:

void func_D3() {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <func_D3+0x1c>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f8e:	4b04      	ldr	r3, [pc, #16]	; (8006fa0 <func_D3+0x1c>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH4, true);
 8006f94:	2101      	movs	r1, #1
 8006f96:	2003      	movs	r0, #3
 8006f98:	f7fa fb26 	bl	80015e8 <DAQ_channel_set_flag_ph_limit>
}
 8006f9c:	bf00      	nop
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000478 	.word	0x20000478

08006fa4 <func_D4>:

void func_D4() {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <func_D4+0x1c>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <func_D4+0x1c>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH4, true);
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	2003      	movs	r0, #3
 8006fb8:	f7fa fa8e 	bl	80014d8 <DAQ_channel_set_flag_save>
}
 8006fbc:	bf00      	nop
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000478 	.word	0x20000478

08006fc4 <func_display>:

/* -------------------------------------------------------------------------------- */
/* -- DISPLAY VALUES -- */
/* -------------------------------------------------------------------------------- */
void func_display(void) {
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <func_display+0x20>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <func_display+0x20>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	70da      	strb	r2, [r3, #3]
	menu_flags.flag_display_measurements = true;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <func_display+0x20>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	71da      	strb	r2, [r3, #7]
}
 8006fda:	bf00      	nop
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20000478 	.word	0x20000478

08006fe8 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	80fb      	strh	r3, [r7, #6]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	88ba      	ldrh	r2, [r7, #4]
 800700e:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2204      	movs	r2, #4
 8007014:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2204      	movs	r2, #4
 800701a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800702a:	b29b      	uxth	r3, r3
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29b      	uxth	r3, r3
 8007034:	b21a      	sxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007048:	b29b      	uxth	r3, r3
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29b      	uxth	r3, r3
 8007052:	b21a      	sxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	83da      	strh	r2, [r3, #30]
   g->font.char_h_space = 1;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   g->font.char_v_space = 1;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   g->font.p = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
   g->desktop_color = C_DARK_GRAY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <UG_Init+0x100>)
 8007086:	649a      	str	r2, [r3, #72]	; 0x48
   g->fore_color = C_WHITE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800708e:	641a      	str	r2, [r3, #64]	; 0x40
   g->back_color = C_BLACK;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	645a      	str	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80070a8:	2300      	movs	r3, #0
 80070aa:	75fb      	strb	r3, [r7, #23]
 80070ac:	e00f      	b.n	80070ce <UG_Init+0xe6>
   {
      g->driver[i].driver = NULL;
 80070ae:	7dfa      	ldrb	r2, [r7, #23]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	320a      	adds	r2, #10
 80070b4:	2100      	movs	r1, #0
 80070b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      g->driver[i].state = 0;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	330a      	adds	r3, #10
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	4413      	add	r3, r2
 80070c4:	2200      	movs	r2, #0
 80070c6:	711a      	strb	r2, [r3, #4]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	3301      	adds	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d9ec      	bls.n	80070ae <UG_Init+0xc6>
   }
   // assignment of gui structrue passed to the function to the pointer gui, declared at the top of ugui.c
   gui = g;
 80070d4:	4a05      	ldr	r2, [pc, #20]	; (80070ec <UG_Init+0x104>)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6013      	str	r3, [r2, #0]
   return 1;
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	00a9a9a9 	.word	0x00a9a9a9
 80070ec:	20000360 	.word	0x20000360

080070f0 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
   gui->font.p = font->p;
 80070f8:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <UG_FontSelect+0x78>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
   gui->font.char_width = font->char_width;
 8007102:	4b19      	ldr	r3, [pc, #100]	; (8007168 <UG_FontSelect+0x78>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800710c:	871a      	strh	r2, [r3, #56]	; 0x38
   gui->font.char_height = font->char_height;
 800710e:	4b16      	ldr	r3, [pc, #88]	; (8007168 <UG_FontSelect+0x78>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8007118:	875a      	strh	r2, [r3, #58]	; 0x3a
   gui->font.font_width = (gui->font.char_width + gui->font.char_h_space);
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <UG_FontSelect+0x78>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007122:	b29a      	uxth	r2, r3
 8007124:	4b10      	ldr	r3, [pc, #64]	; (8007168 <UG_FontSelect+0x78>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800712c:	b29b      	uxth	r3, r3
 800712e:	4413      	add	r3, r2
 8007130:	b29a      	uxth	r2, r3
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <UG_FontSelect+0x78>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	b212      	sxth	r2, r2
 8007138:	86da      	strh	r2, [r3, #54]	; 0x36
   gui->font.font_height = (gui->font.char_height + gui->font.char_v_space);
 800713a:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <UG_FontSelect+0x78>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8007142:	b29a      	uxth	r2, r3
 8007144:	4b08      	ldr	r3, [pc, #32]	; (8007168 <UG_FontSelect+0x78>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 800714c:	b29b      	uxth	r3, r3
 800714e:	4413      	add	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <UG_FontSelect+0x78>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	b212      	sxth	r2, r2
 8007158:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000360 	.word	0x20000360

0800716c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8007174:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <UG_FillScreen+0x40>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	b21a      	sxth	r2, r3
 8007184:	4b09      	ldr	r3, [pc, #36]	; (80071ac <UG_FillScreen+0x40>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29b      	uxth	r3, r3
 8007192:	b219      	sxth	r1, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	460b      	mov	r3, r1
 800719a:	2100      	movs	r1, #0
 800719c:	2000      	movs	r0, #0
 800719e:	f000 f807 	bl	80071b0 <UG_FillFrame>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000360 	.word	0x20000360

080071b0 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80071b0:	b5b0      	push	{r4, r5, r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4623      	mov	r3, r4
 80071c0:	80fb      	strh	r3, [r7, #6]
 80071c2:	4603      	mov	r3, r0
 80071c4:	80bb      	strh	r3, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	807b      	strh	r3, [r7, #2]
 80071ca:	4613      	mov	r3, r2
 80071cc:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80071ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80071d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	da05      	bge.n	80071e6 <UG_FillFrame+0x36>
   {
      n = x2;
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80071e2:	89fb      	ldrh	r3, [r7, #14]
 80071e4:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80071e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80071ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	da05      	bge.n	80071fe <UG_FillFrame+0x4e>
   {
      n = y2;
 80071f2:	883b      	ldrh	r3, [r7, #0]
 80071f4:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80071f6:	88bb      	ldrh	r3, [r7, #4]
 80071f8:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80071fa:	89fb      	ldrh	r3, [r7, #14]
 80071fc:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80071fe:	4b23      	ldr	r3, [pc, #140]	; (800728c <UG_FillFrame+0xdc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d012      	beq.n	8007234 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800720e:	4b1f      	ldr	r3, [pc, #124]	; (800728c <UG_FillFrame+0xdc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	461d      	mov	r5, r3
 8007216:	f9b7 4000 	ldrsh.w	r4, [r7]
 800721a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800721e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007222:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4623      	mov	r3, r4
 800722c:	47a8      	blx	r5
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d027      	beq.n	8007284 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8007234:	88bb      	ldrh	r3, [r7, #4]
 8007236:	81bb      	strh	r3, [r7, #12]
 8007238:	e01d      	b.n	8007276 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	81fb      	strh	r3, [r7, #14]
 800723e:	e00e      	b.n	800725e <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8007240:	4b12      	ldr	r3, [pc, #72]	; (800728c <UG_FillFrame+0xdc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800724a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8007252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007256:	b29b      	uxth	r3, r3
 8007258:	3301      	adds	r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	81fb      	strh	r3, [r7, #14]
 800725e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007266:	429a      	cmp	r2, r3
 8007268:	ddea      	ble.n	8007240 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800726a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800726e:	b29b      	uxth	r3, r3
 8007270:	3301      	adds	r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	81bb      	strh	r3, [r7, #12]
 8007276:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800727a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800727e:	429a      	cmp	r2, r3
 8007280:	dddb      	ble.n	800723a <UG_FillFrame+0x8a>
 8007282:	e000      	b.n	8007286 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007284:	bf00      	nop
      }
   }
}
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bdb0      	pop	{r4, r5, r7, pc}
 800728c:	20000360 	.word	0x20000360

08007290 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b087      	sub	sp, #28
 8007294:	af02      	add	r7, sp, #8
 8007296:	4603      	mov	r3, r0
 8007298:	603a      	str	r2, [r7, #0]
 800729a:	80fb      	strh	r3, [r7, #6]
 800729c:	460b      	mov	r3, r1
 800729e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   char chr;

   xp=x;
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80072a4:	88bb      	ldrh	r3, [r7, #4]
 80072a6:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 80072a8:	e04f      	b.n	800734a <UG_PutString+0xba>
   {
      chr = *str;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	72fb      	strb	r3, [r7, #11]
      if ( chr == '\n' )
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	2b0a      	cmp	r3, #10
 80072b4:	d107      	bne.n	80072c6 <UG_PutString+0x36>
      {
         xp = gui->x_dim;
 80072b6:	4b29      	ldr	r3, [pc, #164]	; (800735c <UG_PutString+0xcc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	889b      	ldrh	r3, [r3, #4]
 80072bc:	81fb      	strh	r3, [r7, #14]
         str++;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	603b      	str	r3, [r7, #0]
         continue;
 80072c4:	e041      	b.n	800734a <UG_PutString+0xba>
      }

      if ( xp+gui->font.char_width > gui->x_dim - 1 )
 80072c6:	4b25      	ldr	r3, [pc, #148]	; (800735c <UG_PutString+0xcc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80072ce:	4619      	mov	r1, r3
 80072d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072d4:	4a21      	ldr	r2, [pc, #132]	; (800735c <UG_PutString+0xcc>)
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 80072dc:	4413      	add	r3, r2
 80072de:	4299      	cmp	r1, r3
 80072e0:	dc11      	bgt.n	8007306 <UG_PutString+0x76>
      {
         xp = x;
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->font.char_v_space;
 80072e6:	4b1d      	ldr	r3, [pc, #116]	; (800735c <UG_PutString+0xcc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	4b1a      	ldr	r3, [pc, #104]	; (800735c <UG_PutString+0xcc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	89bb      	ldrh	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	b29b      	uxth	r3, r3
 8007304:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8007306:	4b15      	ldr	r3, [pc, #84]	; (800735c <UG_PutString+0xcc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <UG_PutString+0xcc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007316:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800731a:	7af8      	ldrb	r0, [r7, #11]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4623      	mov	r3, r4
 8007320:	f000 f81e 	bl	8007360 <UG_PutChar>

      xp += gui->font.char_width+gui->font.char_h_space;
 8007324:	4b0d      	ldr	r3, [pc, #52]	; (800735c <UG_PutString+0xcc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800732c:	b29a      	uxth	r2, r3
 800732e:	4b0b      	ldr	r3, [pc, #44]	; (800735c <UG_PutString+0xcc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 8007336:	b29b      	uxth	r3, r3
 8007338:	4413      	add	r3, r2
 800733a:	b29a      	uxth	r2, r3
 800733c:	89fb      	ldrh	r3, [r7, #14]
 800733e:	4413      	add	r3, r2
 8007340:	b29b      	uxth	r3, r3
 8007342:	81fb      	strh	r3, [r7, #14]
      str++;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	603b      	str	r3, [r7, #0]
   while ( *str != 0 )
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1ab      	bne.n	80072aa <UG_PutString+0x1a>
   }
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	bd90      	pop	{r4, r7, pc}
 800735c:	20000360 	.word	0x20000360

08007360 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	460b      	mov	r3, r1
 800736e:	81bb      	strh	r3, [r7, #12]
 8007370:	4613      	mov	r3, r2
 8007372:	817b      	strh	r3, [r7, #10]
   UG_U16 i,j,k,xo,yo,c,bn;
   UG_U8 b,bt;
   unsigned char* p;

   bt = (UG_U8)chr;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8007378:	7e3b      	ldrb	r3, [r7, #24]
 800737a:	2bfc      	cmp	r3, #252	; 0xfc
 800737c:	dc76      	bgt.n	800746c <UG_PutChar+0x10c>
 800737e:	2bd6      	cmp	r3, #214	; 0xd6
 8007380:	da08      	bge.n	8007394 <UG_PutChar+0x34>
 8007382:	2bc4      	cmp	r3, #196	; 0xc4
 8007384:	d069      	beq.n	800745a <UG_PutChar+0xfa>
 8007386:	2bc4      	cmp	r3, #196	; 0xc4
 8007388:	dc70      	bgt.n	800746c <UG_PutChar+0x10c>
 800738a:	2bb0      	cmp	r3, #176	; 0xb0
 800738c:	d06b      	beq.n	8007466 <UG_PutChar+0x106>
 800738e:	2bb5      	cmp	r3, #181	; 0xb5
 8007390:	d066      	beq.n	8007460 <UG_PutChar+0x100>
 8007392:	e06b      	b.n	800746c <UG_PutChar+0x10c>
 8007394:	3bd6      	subs	r3, #214	; 0xd6
 8007396:	2b26      	cmp	r3, #38	; 0x26
 8007398:	d868      	bhi.n	800746c <UG_PutChar+0x10c>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <UG_PutChar+0x40>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	08007443 	.word	0x08007443
 80073a4:	0800746d 	.word	0x0800746d
 80073a8:	0800746d 	.word	0x0800746d
 80073ac:	0800746d 	.word	0x0800746d
 80073b0:	0800746d 	.word	0x0800746d
 80073b4:	0800746d 	.word	0x0800746d
 80073b8:	0800744f 	.word	0x0800744f
 80073bc:	0800746d 	.word	0x0800746d
 80073c0:	0800746d 	.word	0x0800746d
 80073c4:	0800746d 	.word	0x0800746d
 80073c8:	0800746d 	.word	0x0800746d
 80073cc:	0800746d 	.word	0x0800746d
 80073d0:	0800746d 	.word	0x0800746d
 80073d4:	0800746d 	.word	0x0800746d
 80073d8:	08007455 	.word	0x08007455
 80073dc:	0800746d 	.word	0x0800746d
 80073e0:	0800746d 	.word	0x0800746d
 80073e4:	0800746d 	.word	0x0800746d
 80073e8:	0800746d 	.word	0x0800746d
 80073ec:	0800746d 	.word	0x0800746d
 80073f0:	0800746d 	.word	0x0800746d
 80073f4:	0800746d 	.word	0x0800746d
 80073f8:	0800746d 	.word	0x0800746d
 80073fc:	0800746d 	.word	0x0800746d
 8007400:	0800746d 	.word	0x0800746d
 8007404:	0800746d 	.word	0x0800746d
 8007408:	0800746d 	.word	0x0800746d
 800740c:	0800746d 	.word	0x0800746d
 8007410:	0800746d 	.word	0x0800746d
 8007414:	0800746d 	.word	0x0800746d
 8007418:	0800746d 	.word	0x0800746d
 800741c:	0800746d 	.word	0x0800746d
 8007420:	0800743d 	.word	0x0800743d
 8007424:	0800746d 	.word	0x0800746d
 8007428:	0800746d 	.word	0x0800746d
 800742c:	0800746d 	.word	0x0800746d
 8007430:	0800746d 	.word	0x0800746d
 8007434:	0800746d 	.word	0x0800746d
 8007438:	08007449 	.word	0x08007449
   {
      case 0xF6: bt = 0x94; break; // �
 800743c:	2394      	movs	r3, #148	; 0x94
 800743e:	763b      	strb	r3, [r7, #24]
 8007440:	e014      	b.n	800746c <UG_PutChar+0x10c>
      case 0xD6: bt = 0x99; break; // �
 8007442:	2399      	movs	r3, #153	; 0x99
 8007444:	763b      	strb	r3, [r7, #24]
 8007446:	e011      	b.n	800746c <UG_PutChar+0x10c>
      case 0xFC: bt = 0x81; break; // �
 8007448:	2381      	movs	r3, #129	; 0x81
 800744a:	763b      	strb	r3, [r7, #24]
 800744c:	e00e      	b.n	800746c <UG_PutChar+0x10c>
      case 0xDC: bt = 0x9A; break; // �
 800744e:	239a      	movs	r3, #154	; 0x9a
 8007450:	763b      	strb	r3, [r7, #24]
 8007452:	e00b      	b.n	800746c <UG_PutChar+0x10c>
      case 0xE4: bt = 0x84; break; // �
 8007454:	2384      	movs	r3, #132	; 0x84
 8007456:	763b      	strb	r3, [r7, #24]
 8007458:	e008      	b.n	800746c <UG_PutChar+0x10c>
      case 0xC4: bt = 0x8E; break; // �
 800745a:	238e      	movs	r3, #142	; 0x8e
 800745c:	763b      	strb	r3, [r7, #24]
 800745e:	e005      	b.n	800746c <UG_PutChar+0x10c>
      case 0xB5: bt = 0xE6; break; // �
 8007460:	23e6      	movs	r3, #230	; 0xe6
 8007462:	763b      	strb	r3, [r7, #24]
 8007464:	e002      	b.n	800746c <UG_PutChar+0x10c>
      case 0xB0: bt = 0xF8; break; // �
 8007466:	23f8      	movs	r3, #248	; 0xf8
 8007468:	763b      	strb	r3, [r7, #24]
 800746a:	bf00      	nop
   }

   yo = y;
 800746c:	897b      	ldrh	r3, [r7, #10]
 800746e:	83fb      	strh	r3, [r7, #30]
   bn = gui->font.char_width;
 8007470:	4b40      	ldr	r3, [pc, #256]	; (8007574 <UG_PutChar+0x214>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007478:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 800747a:	8b7b      	ldrh	r3, [r7, #26]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d075      	beq.n	800756c <UG_PutChar+0x20c>
   bn >>= 3;
 8007480:	8b7b      	ldrh	r3, [r7, #26]
 8007482:	08db      	lsrs	r3, r3, #3
 8007484:	837b      	strh	r3, [r7, #26]
   if ( gui->font.char_width % 8 ) bn++;
 8007486:	4b3b      	ldr	r3, [pc, #236]	; (8007574 <UG_PutChar+0x214>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800748e:	b29b      	uxth	r3, r3
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UG_PutChar+0x140>
 800749a:	8b7b      	ldrh	r3, [r7, #26]
 800749c:	3301      	adds	r3, #1
 800749e:	837b      	strh	r3, [r7, #26]
   p = gui->font.p;
 80074a0:	4b34      	ldr	r3, [pc, #208]	; (8007574 <UG_PutChar+0x214>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	617b      	str	r3, [r7, #20]
   p+= bt * gui->font.char_height * bn;
 80074a8:	7e3b      	ldrb	r3, [r7, #24]
 80074aa:	4a32      	ldr	r2, [pc, #200]	; (8007574 <UG_PutChar+0x214>)
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	8b7a      	ldrh	r2, [r7, #26]
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	4413      	add	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]

   for( j=0;j<gui->font.char_height;j++ )
 80074c4:	2300      	movs	r3, #0
 80074c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074c8:	e048      	b.n	800755c <UG_PutChar+0x1fc>
   {
      xo = x;
 80074ca:	89bb      	ldrh	r3, [r7, #12]
 80074cc:	843b      	strh	r3, [r7, #32]
      c=gui->font.char_width;
 80074ce:	4b29      	ldr	r3, [pc, #164]	; (8007574 <UG_PutChar+0x214>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80074d6:	83bb      	strh	r3, [r7, #28]
      for( i=0;i<bn;i++ )
 80074d8:	2300      	movs	r3, #0
 80074da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074dc:	e034      	b.n	8007548 <UG_PutChar+0x1e8>
      {
         b = *p++;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	617a      	str	r2, [r7, #20]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	767b      	strb	r3, [r7, #25]
         for( k=0;(k<8) && c;k++ )
 80074e8:	2300      	movs	r3, #0
 80074ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80074ec:	e023      	b.n	8007536 <UG_PutChar+0x1d6>
         {
            if( b & 0x01 )
 80074ee:	7e7b      	ldrb	r3, [r7, #25]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <UG_PutChar+0x1ac>
            {
               gui->pset(xo,yo,fc);
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <UG_PutChar+0x214>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8007502:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4798      	blx	r3
 800750a:	e008      	b.n	800751e <UG_PutChar+0x1be>
            }
            else
            {
               gui->pset(xo,yo,bc);
 800750c:	4b19      	ldr	r3, [pc, #100]	; (8007574 <UG_PutChar+0x214>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8007516:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800751a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751c:	4798      	blx	r3
            }
            b >>= 1;
 800751e:	7e7b      	ldrb	r3, [r7, #25]
 8007520:	085b      	lsrs	r3, r3, #1
 8007522:	767b      	strb	r3, [r7, #25]
            xo++;
 8007524:	8c3b      	ldrh	r3, [r7, #32]
 8007526:	3301      	adds	r3, #1
 8007528:	843b      	strh	r3, [r7, #32]
            c--;
 800752a:	8bbb      	ldrh	r3, [r7, #28]
 800752c:	3b01      	subs	r3, #1
 800752e:	83bb      	strh	r3, [r7, #28]
         for( k=0;(k<8) && c;k++ )
 8007530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007532:	3301      	adds	r3, #1
 8007534:	847b      	strh	r3, [r7, #34]	; 0x22
 8007536:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007538:	2b07      	cmp	r3, #7
 800753a:	d802      	bhi.n	8007542 <UG_PutChar+0x1e2>
 800753c:	8bbb      	ldrh	r3, [r7, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d5      	bne.n	80074ee <UG_PutChar+0x18e>
      for( i=0;i<bn;i++ )
 8007542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007544:	3301      	adds	r3, #1
 8007546:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007548:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800754a:	8b7b      	ldrh	r3, [r7, #26]
 800754c:	429a      	cmp	r2, r3
 800754e:	d3c6      	bcc.n	80074de <UG_PutChar+0x17e>
         }
      }
      yo++;
 8007550:	8bfb      	ldrh	r3, [r7, #30]
 8007552:	3301      	adds	r3, #1
 8007554:	83fb      	strh	r3, [r7, #30]
   for( j=0;j<gui->font.char_height;j++ )
 8007556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007558:	3301      	adds	r3, #1
 800755a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800755c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800755e:	4a05      	ldr	r2, [pc, #20]	; (8007574 <UG_PutChar+0x214>)
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 8007566:	4293      	cmp	r3, r2
 8007568:	dbaf      	blt.n	80074ca <UG_PutChar+0x16a>
 800756a:	e000      	b.n	800756e <UG_PutChar+0x20e>
   if ( !bn ) return;
 800756c:	bf00      	nop
   }
}
 800756e:	3728      	adds	r7, #40	; 0x28
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000360 	.word	0x20000360

08007578 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
   gui->fore_color = c;
 8007580:	4b04      	ldr	r3, [pc, #16]	; (8007594 <UG_SetForecolor+0x1c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	20000360 	.word	0x20000360

08007598 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
   gui->back_color = c;
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <UG_SetBackcolor+0x1c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000360 	.word	0x20000360

080075b8 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
   return gui->x_dim;
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <UG_GetXDim+0x18>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000360 	.word	0x20000360

080075d4 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
   return gui->y_dim;
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <UG_GetYDim+0x18>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	20000360 	.word	0x20000360

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	; (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000160 	.word	0x20000160

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4d0d      	ldr	r5, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1b64      	subs	r4, r4, r5
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2600      	movs	r6, #0
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4d0b      	ldr	r5, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f004 ff40 	bl	800c494 <_init>
 8007614:	1b64      	subs	r4, r4, r5
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2600      	movs	r6, #0
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800ef48 	.word	0x0800ef48
 8007638:	0800ef48 	.word	0x0800ef48
 800763c:	0800ef48 	.word	0x0800ef48
 8007640:	0800ef4c 	.word	0x0800ef4c

08007644 <memset>:
 8007644:	4402      	add	r2, r0
 8007646:	4603      	mov	r3, r0
 8007648:	4293      	cmp	r3, r2
 800764a:	d100      	bne.n	800764e <memset+0xa>
 800764c:	4770      	bx	lr
 800764e:	f803 1b01 	strb.w	r1, [r3], #1
 8007652:	e7f9      	b.n	8007648 <memset+0x4>

08007654 <__cvt>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	ec55 4b10 	vmov	r4, r5, d0
 800765c:	2d00      	cmp	r5, #0
 800765e:	460e      	mov	r6, r1
 8007660:	4619      	mov	r1, r3
 8007662:	462b      	mov	r3, r5
 8007664:	bfbb      	ittet	lt
 8007666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800766a:	461d      	movlt	r5, r3
 800766c:	2300      	movge	r3, #0
 800766e:	232d      	movlt	r3, #45	; 0x2d
 8007670:	700b      	strb	r3, [r1, #0]
 8007672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007678:	4691      	mov	r9, r2
 800767a:	f023 0820 	bic.w	r8, r3, #32
 800767e:	bfbc      	itt	lt
 8007680:	4622      	movlt	r2, r4
 8007682:	4614      	movlt	r4, r2
 8007684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007688:	d005      	beq.n	8007696 <__cvt+0x42>
 800768a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800768e:	d100      	bne.n	8007692 <__cvt+0x3e>
 8007690:	3601      	adds	r6, #1
 8007692:	2102      	movs	r1, #2
 8007694:	e000      	b.n	8007698 <__cvt+0x44>
 8007696:	2103      	movs	r1, #3
 8007698:	ab03      	add	r3, sp, #12
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	ab02      	add	r3, sp, #8
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	ec45 4b10 	vmov	d0, r4, r5
 80076a4:	4653      	mov	r3, sl
 80076a6:	4632      	mov	r2, r6
 80076a8:	f001 fdb6 	bl	8009218 <_dtoa_r>
 80076ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076b0:	4607      	mov	r7, r0
 80076b2:	d102      	bne.n	80076ba <__cvt+0x66>
 80076b4:	f019 0f01 	tst.w	r9, #1
 80076b8:	d022      	beq.n	8007700 <__cvt+0xac>
 80076ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076be:	eb07 0906 	add.w	r9, r7, r6
 80076c2:	d110      	bne.n	80076e6 <__cvt+0x92>
 80076c4:	783b      	ldrb	r3, [r7, #0]
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	d10a      	bne.n	80076e0 <__cvt+0x8c>
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	4620      	mov	r0, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f9 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80076d6:	b918      	cbnz	r0, 80076e0 <__cvt+0x8c>
 80076d8:	f1c6 0601 	rsb	r6, r6, #1
 80076dc:	f8ca 6000 	str.w	r6, [sl]
 80076e0:	f8da 3000 	ldr.w	r3, [sl]
 80076e4:	4499      	add	r9, r3
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f9 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f2:	b108      	cbz	r0, 80076f8 <__cvt+0xa4>
 80076f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80076f8:	2230      	movs	r2, #48	; 0x30
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	454b      	cmp	r3, r9
 80076fe:	d307      	bcc.n	8007710 <__cvt+0xbc>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007704:	1bdb      	subs	r3, r3, r7
 8007706:	4638      	mov	r0, r7
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	b004      	add	sp, #16
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	1c59      	adds	r1, r3, #1
 8007712:	9103      	str	r1, [sp, #12]
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e7f0      	b.n	80076fa <__cvt+0xa6>

08007718 <__exponent>:
 8007718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771a:	4603      	mov	r3, r0
 800771c:	2900      	cmp	r1, #0
 800771e:	bfb8      	it	lt
 8007720:	4249      	neglt	r1, r1
 8007722:	f803 2b02 	strb.w	r2, [r3], #2
 8007726:	bfb4      	ite	lt
 8007728:	222d      	movlt	r2, #45	; 0x2d
 800772a:	222b      	movge	r2, #43	; 0x2b
 800772c:	2909      	cmp	r1, #9
 800772e:	7042      	strb	r2, [r0, #1]
 8007730:	dd2a      	ble.n	8007788 <__exponent+0x70>
 8007732:	f10d 0407 	add.w	r4, sp, #7
 8007736:	46a4      	mov	ip, r4
 8007738:	270a      	movs	r7, #10
 800773a:	46a6      	mov	lr, r4
 800773c:	460a      	mov	r2, r1
 800773e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007742:	fb07 1516 	mls	r5, r7, r6, r1
 8007746:	3530      	adds	r5, #48	; 0x30
 8007748:	2a63      	cmp	r2, #99	; 0x63
 800774a:	f104 34ff 	add.w	r4, r4, #4294967295
 800774e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007752:	4631      	mov	r1, r6
 8007754:	dcf1      	bgt.n	800773a <__exponent+0x22>
 8007756:	3130      	adds	r1, #48	; 0x30
 8007758:	f1ae 0502 	sub.w	r5, lr, #2
 800775c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007760:	1c44      	adds	r4, r0, #1
 8007762:	4629      	mov	r1, r5
 8007764:	4561      	cmp	r1, ip
 8007766:	d30a      	bcc.n	800777e <__exponent+0x66>
 8007768:	f10d 0209 	add.w	r2, sp, #9
 800776c:	eba2 020e 	sub.w	r2, r2, lr
 8007770:	4565      	cmp	r5, ip
 8007772:	bf88      	it	hi
 8007774:	2200      	movhi	r2, #0
 8007776:	4413      	add	r3, r2
 8007778:	1a18      	subs	r0, r3, r0
 800777a:	b003      	add	sp, #12
 800777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007782:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007786:	e7ed      	b.n	8007764 <__exponent+0x4c>
 8007788:	2330      	movs	r3, #48	; 0x30
 800778a:	3130      	adds	r1, #48	; 0x30
 800778c:	7083      	strb	r3, [r0, #2]
 800778e:	70c1      	strb	r1, [r0, #3]
 8007790:	1d03      	adds	r3, r0, #4
 8007792:	e7f1      	b.n	8007778 <__exponent+0x60>

08007794 <_printf_float>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	ed2d 8b02 	vpush	{d8}
 800779c:	b08d      	sub	sp, #52	; 0x34
 800779e:	460c      	mov	r4, r1
 80077a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077a4:	4616      	mov	r6, r2
 80077a6:	461f      	mov	r7, r3
 80077a8:	4605      	mov	r5, r0
 80077aa:	f002 fe91 	bl	800a4d0 <_localeconv_r>
 80077ae:	f8d0 a000 	ldr.w	sl, [r0]
 80077b2:	4650      	mov	r0, sl
 80077b4:	f7f8 fd0c 	bl	80001d0 <strlen>
 80077b8:	2300      	movs	r3, #0
 80077ba:	930a      	str	r3, [sp, #40]	; 0x28
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	9305      	str	r3, [sp, #20]
 80077c0:	f8d8 3000 	ldr.w	r3, [r8]
 80077c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077c8:	3307      	adds	r3, #7
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	f103 0208 	add.w	r2, r3, #8
 80077d2:	f8c8 2000 	str.w	r2, [r8]
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80077ec:	ee08 0a10 	vmov	s16, r0
 80077f0:	4b9f      	ldr	r3, [pc, #636]	; (8007a70 <_printf_float+0x2dc>)
 80077f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295
 80077fa:	f7f9 f997 	bl	8000b2c <__aeabi_dcmpun>
 80077fe:	bb88      	cbnz	r0, 8007864 <_printf_float+0xd0>
 8007800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007804:	4b9a      	ldr	r3, [pc, #616]	; (8007a70 <_printf_float+0x2dc>)
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	f7f9 f971 	bl	8000af0 <__aeabi_dcmple>
 800780e:	bb48      	cbnz	r0, 8007864 <_printf_float+0xd0>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f9 f960 	bl	8000adc <__aeabi_dcmplt>
 800781c:	b110      	cbz	r0, 8007824 <_printf_float+0x90>
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	4b93      	ldr	r3, [pc, #588]	; (8007a74 <_printf_float+0x2e0>)
 8007826:	4894      	ldr	r0, [pc, #592]	; (8007a78 <_printf_float+0x2e4>)
 8007828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800782c:	bf94      	ite	ls
 800782e:	4698      	movls	r8, r3
 8007830:	4680      	movhi	r8, r0
 8007832:	2303      	movs	r3, #3
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	9b05      	ldr	r3, [sp, #20]
 8007838:	f023 0204 	bic.w	r2, r3, #4
 800783c:	6022      	str	r2, [r4, #0]
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	9700      	str	r7, [sp, #0]
 8007844:	4633      	mov	r3, r6
 8007846:	aa0b      	add	r2, sp, #44	; 0x2c
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f9d8 	bl	8007c00 <_printf_common>
 8007850:	3001      	adds	r0, #1
 8007852:	f040 8090 	bne.w	8007976 <_printf_float+0x1e2>
 8007856:	f04f 30ff 	mov.w	r0, #4294967295
 800785a:	b00d      	add	sp, #52	; 0x34
 800785c:	ecbd 8b02 	vpop	{d8}
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f9 f95e 	bl	8000b2c <__aeabi_dcmpun>
 8007870:	b140      	cbz	r0, 8007884 <_printf_float+0xf0>
 8007872:	464b      	mov	r3, r9
 8007874:	2b00      	cmp	r3, #0
 8007876:	bfbc      	itt	lt
 8007878:	232d      	movlt	r3, #45	; 0x2d
 800787a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800787e:	487f      	ldr	r0, [pc, #508]	; (8007a7c <_printf_float+0x2e8>)
 8007880:	4b7f      	ldr	r3, [pc, #508]	; (8007a80 <_printf_float+0x2ec>)
 8007882:	e7d1      	b.n	8007828 <_printf_float+0x94>
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800788a:	9206      	str	r2, [sp, #24]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	d13f      	bne.n	8007910 <_printf_float+0x17c>
 8007890:	2306      	movs	r3, #6
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	6861      	ldr	r1, [r4, #4]
 8007898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800789c:	2300      	movs	r3, #0
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	ab0a      	add	r3, sp, #40	; 0x28
 80078a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078a6:	ab09      	add	r3, sp, #36	; 0x24
 80078a8:	ec49 8b10 	vmov	d0, r8, r9
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	6022      	str	r2, [r4, #0]
 80078b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fecd 	bl	8007654 <__cvt>
 80078ba:	9b06      	ldr	r3, [sp, #24]
 80078bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078be:	2b47      	cmp	r3, #71	; 0x47
 80078c0:	4680      	mov	r8, r0
 80078c2:	d108      	bne.n	80078d6 <_printf_float+0x142>
 80078c4:	1cc8      	adds	r0, r1, #3
 80078c6:	db02      	blt.n	80078ce <_printf_float+0x13a>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	4299      	cmp	r1, r3
 80078cc:	dd41      	ble.n	8007952 <_printf_float+0x1be>
 80078ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80078d2:	fa5f fb8b 	uxtb.w	fp, fp
 80078d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078da:	d820      	bhi.n	800791e <_printf_float+0x18a>
 80078dc:	3901      	subs	r1, #1
 80078de:	465a      	mov	r2, fp
 80078e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078e4:	9109      	str	r1, [sp, #36]	; 0x24
 80078e6:	f7ff ff17 	bl	8007718 <__exponent>
 80078ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ec:	1813      	adds	r3, r2, r0
 80078ee:	2a01      	cmp	r2, #1
 80078f0:	4681      	mov	r9, r0
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	dc02      	bgt.n	80078fc <_printf_float+0x168>
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	07d2      	lsls	r2, r2, #31
 80078fa:	d501      	bpl.n	8007900 <_printf_float+0x16c>
 80078fc:	3301      	adds	r3, #1
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007904:	2b00      	cmp	r3, #0
 8007906:	d09c      	beq.n	8007842 <_printf_float+0xae>
 8007908:	232d      	movs	r3, #45	; 0x2d
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790e:	e798      	b.n	8007842 <_printf_float+0xae>
 8007910:	9a06      	ldr	r2, [sp, #24]
 8007912:	2a47      	cmp	r2, #71	; 0x47
 8007914:	d1be      	bne.n	8007894 <_printf_float+0x100>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1bc      	bne.n	8007894 <_printf_float+0x100>
 800791a:	2301      	movs	r3, #1
 800791c:	e7b9      	b.n	8007892 <_printf_float+0xfe>
 800791e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007922:	d118      	bne.n	8007956 <_printf_float+0x1c2>
 8007924:	2900      	cmp	r1, #0
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	dd0b      	ble.n	8007942 <_printf_float+0x1ae>
 800792a:	6121      	str	r1, [r4, #16]
 800792c:	b913      	cbnz	r3, 8007934 <_printf_float+0x1a0>
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d502      	bpl.n	800793a <_printf_float+0x1a6>
 8007934:	3301      	adds	r3, #1
 8007936:	440b      	add	r3, r1
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	65a1      	str	r1, [r4, #88]	; 0x58
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	e7de      	b.n	8007900 <_printf_float+0x16c>
 8007942:	b913      	cbnz	r3, 800794a <_printf_float+0x1b6>
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	07d2      	lsls	r2, r2, #31
 8007948:	d501      	bpl.n	800794e <_printf_float+0x1ba>
 800794a:	3302      	adds	r3, #2
 800794c:	e7f4      	b.n	8007938 <_printf_float+0x1a4>
 800794e:	2301      	movs	r3, #1
 8007950:	e7f2      	b.n	8007938 <_printf_float+0x1a4>
 8007952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	4299      	cmp	r1, r3
 800795a:	db05      	blt.n	8007968 <_printf_float+0x1d4>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	6121      	str	r1, [r4, #16]
 8007960:	07d8      	lsls	r0, r3, #31
 8007962:	d5ea      	bpl.n	800793a <_printf_float+0x1a6>
 8007964:	1c4b      	adds	r3, r1, #1
 8007966:	e7e7      	b.n	8007938 <_printf_float+0x1a4>
 8007968:	2900      	cmp	r1, #0
 800796a:	bfd4      	ite	le
 800796c:	f1c1 0202 	rsble	r2, r1, #2
 8007970:	2201      	movgt	r2, #1
 8007972:	4413      	add	r3, r2
 8007974:	e7e0      	b.n	8007938 <_printf_float+0x1a4>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	055a      	lsls	r2, r3, #21
 800797a:	d407      	bmi.n	800798c <_printf_float+0x1f8>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	4642      	mov	r2, r8
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	d12c      	bne.n	80079e4 <_printf_float+0x250>
 800798a:	e764      	b.n	8007856 <_printf_float+0xc2>
 800798c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007990:	f240 80e0 	bls.w	8007b54 <_printf_float+0x3c0>
 8007994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	f7f9 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d034      	beq.n	8007a0e <_printf_float+0x27a>
 80079a4:	4a37      	ldr	r2, [pc, #220]	; (8007a84 <_printf_float+0x2f0>)
 80079a6:	2301      	movs	r3, #1
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b8      	blx	r7
 80079ae:	3001      	adds	r0, #1
 80079b0:	f43f af51 	beq.w	8007856 <_printf_float+0xc2>
 80079b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b8:	429a      	cmp	r2, r3
 80079ba:	db02      	blt.n	80079c2 <_printf_float+0x22e>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	07d8      	lsls	r0, r3, #31
 80079c0:	d510      	bpl.n	80079e4 <_printf_float+0x250>
 80079c2:	ee18 3a10 	vmov	r3, s16
 80079c6:	4652      	mov	r2, sl
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f af41 	beq.w	8007856 <_printf_float+0xc2>
 80079d4:	f04f 0800 	mov.w	r8, #0
 80079d8:	f104 091a 	add.w	r9, r4, #26
 80079dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079de:	3b01      	subs	r3, #1
 80079e0:	4543      	cmp	r3, r8
 80079e2:	dc09      	bgt.n	80079f8 <_printf_float+0x264>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	079b      	lsls	r3, r3, #30
 80079e8:	f100 8105 	bmi.w	8007bf6 <_printf_float+0x462>
 80079ec:	68e0      	ldr	r0, [r4, #12]
 80079ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f0:	4298      	cmp	r0, r3
 80079f2:	bfb8      	it	lt
 80079f4:	4618      	movlt	r0, r3
 80079f6:	e730      	b.n	800785a <_printf_float+0xc6>
 80079f8:	2301      	movs	r3, #1
 80079fa:	464a      	mov	r2, r9
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f af27 	beq.w	8007856 <_printf_float+0xc2>
 8007a08:	f108 0801 	add.w	r8, r8, #1
 8007a0c:	e7e6      	b.n	80079dc <_printf_float+0x248>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dc39      	bgt.n	8007a88 <_printf_float+0x2f4>
 8007a14:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <_printf_float+0x2f0>)
 8007a16:	2301      	movs	r3, #1
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af19 	beq.w	8007856 <_printf_float+0xc2>
 8007a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d102      	bne.n	8007a32 <_printf_float+0x29e>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d5d8      	bpl.n	80079e4 <_printf_float+0x250>
 8007a32:	ee18 3a10 	vmov	r3, s16
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f af09 	beq.w	8007856 <_printf_float+0xc2>
 8007a44:	f04f 0900 	mov.w	r9, #0
 8007a48:	f104 0a1a 	add.w	sl, r4, #26
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	425b      	negs	r3, r3
 8007a50:	454b      	cmp	r3, r9
 8007a52:	dc01      	bgt.n	8007a58 <_printf_float+0x2c4>
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	e792      	b.n	800797e <_printf_float+0x1ea>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f aef7 	beq.w	8007856 <_printf_float+0xc2>
 8007a68:	f109 0901 	add.w	r9, r9, #1
 8007a6c:	e7ee      	b.n	8007a4c <_printf_float+0x2b8>
 8007a6e:	bf00      	nop
 8007a70:	7fefffff 	.word	0x7fefffff
 8007a74:	0800ea5c 	.word	0x0800ea5c
 8007a78:	0800ea60 	.word	0x0800ea60
 8007a7c:	0800ea68 	.word	0x0800ea68
 8007a80:	0800ea64 	.word	0x0800ea64
 8007a84:	0800ea6c 	.word	0x0800ea6c
 8007a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	bfa8      	it	ge
 8007a90:	461a      	movge	r2, r3
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	4691      	mov	r9, r2
 8007a96:	dc37      	bgt.n	8007b08 <_printf_float+0x374>
 8007a98:	f04f 0b00 	mov.w	fp, #0
 8007a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aa0:	f104 021a 	add.w	r2, r4, #26
 8007aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aa6:	9305      	str	r3, [sp, #20]
 8007aa8:	eba3 0309 	sub.w	r3, r3, r9
 8007aac:	455b      	cmp	r3, fp
 8007aae:	dc33      	bgt.n	8007b18 <_printf_float+0x384>
 8007ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	db3b      	blt.n	8007b30 <_printf_float+0x39c>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	07da      	lsls	r2, r3, #31
 8007abc:	d438      	bmi.n	8007b30 <_printf_float+0x39c>
 8007abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ac0:	9b05      	ldr	r3, [sp, #20]
 8007ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	eba2 0901 	sub.w	r9, r2, r1
 8007aca:	4599      	cmp	r9, r3
 8007acc:	bfa8      	it	ge
 8007ace:	4699      	movge	r9, r3
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	dc35      	bgt.n	8007b42 <_printf_float+0x3ae>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ade:	f104 0a1a 	add.w	sl, r4, #26
 8007ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	eba3 0309 	sub.w	r3, r3, r9
 8007aec:	4543      	cmp	r3, r8
 8007aee:	f77f af79 	ble.w	80079e4 <_printf_float+0x250>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4652      	mov	r2, sl
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	f43f aeaa 	beq.w	8007856 <_printf_float+0xc2>
 8007b02:	f108 0801 	add.w	r8, r8, #1
 8007b06:	e7ec      	b.n	8007ae2 <_printf_float+0x34e>
 8007b08:	4613      	mov	r3, r2
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	d1c0      	bne.n	8007a98 <_printf_float+0x304>
 8007b16:	e69e      	b.n	8007856 <_printf_float+0xc2>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	9205      	str	r2, [sp, #20]
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f ae97 	beq.w	8007856 <_printf_float+0xc2>
 8007b28:	9a05      	ldr	r2, [sp, #20]
 8007b2a:	f10b 0b01 	add.w	fp, fp, #1
 8007b2e:	e7b9      	b.n	8007aa4 <_printf_float+0x310>
 8007b30:	ee18 3a10 	vmov	r3, s16
 8007b34:	4652      	mov	r2, sl
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d1be      	bne.n	8007abe <_printf_float+0x32a>
 8007b40:	e689      	b.n	8007856 <_printf_float+0xc2>
 8007b42:	9a05      	ldr	r2, [sp, #20]
 8007b44:	464b      	mov	r3, r9
 8007b46:	4442      	add	r2, r8
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d1c1      	bne.n	8007ad6 <_printf_float+0x342>
 8007b52:	e680      	b.n	8007856 <_printf_float+0xc2>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b56:	2a01      	cmp	r2, #1
 8007b58:	dc01      	bgt.n	8007b5e <_printf_float+0x3ca>
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d538      	bpl.n	8007bd0 <_printf_float+0x43c>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4642      	mov	r2, r8
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f ae74 	beq.w	8007856 <_printf_float+0xc2>
 8007b6e:	ee18 3a10 	vmov	r3, s16
 8007b72:	4652      	mov	r2, sl
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f ae6b 	beq.w	8007856 <_printf_float+0xc2>
 8007b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	f7f8 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b8c:	b9d8      	cbnz	r0, 8007bc6 <_printf_float+0x432>
 8007b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b90:	f108 0201 	add.w	r2, r8, #1
 8007b94:	3b01      	subs	r3, #1
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d10e      	bne.n	8007bbe <_printf_float+0x42a>
 8007ba0:	e659      	b.n	8007856 <_printf_float+0xc2>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4652      	mov	r2, sl
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae52 	beq.w	8007856 <_printf_float+0xc2>
 8007bb2:	f108 0801 	add.w	r8, r8, #1
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4543      	cmp	r3, r8
 8007bbc:	dcf1      	bgt.n	8007ba2 <_printf_float+0x40e>
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bc4:	e6dc      	b.n	8007980 <_printf_float+0x1ec>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	f104 0a1a 	add.w	sl, r4, #26
 8007bce:	e7f2      	b.n	8007bb6 <_printf_float+0x422>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4642      	mov	r2, r8
 8007bd4:	e7df      	b.n	8007b96 <_printf_float+0x402>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	464a      	mov	r2, r9
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f ae38 	beq.w	8007856 <_printf_float+0xc2>
 8007be6:	f108 0801 	add.w	r8, r8, #1
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bee:	1a5b      	subs	r3, r3, r1
 8007bf0:	4543      	cmp	r3, r8
 8007bf2:	dcf0      	bgt.n	8007bd6 <_printf_float+0x442>
 8007bf4:	e6fa      	b.n	80079ec <_printf_float+0x258>
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	f104 0919 	add.w	r9, r4, #25
 8007bfe:	e7f4      	b.n	8007bea <_printf_float+0x456>

08007c00 <_printf_common>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	4616      	mov	r6, r2
 8007c06:	4699      	mov	r9, r3
 8007c08:	688a      	ldr	r2, [r1, #8]
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	bfb8      	it	lt
 8007c14:	4613      	movlt	r3, r2
 8007c16:	6033      	str	r3, [r6, #0]
 8007c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b10a      	cbz	r2, 8007c26 <_printf_common+0x26>
 8007c22:	3301      	adds	r3, #1
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	0699      	lsls	r1, r3, #26
 8007c2a:	bf42      	ittt	mi
 8007c2c:	6833      	ldrmi	r3, [r6, #0]
 8007c2e:	3302      	addmi	r3, #2
 8007c30:	6033      	strmi	r3, [r6, #0]
 8007c32:	6825      	ldr	r5, [r4, #0]
 8007c34:	f015 0506 	ands.w	r5, r5, #6
 8007c38:	d106      	bne.n	8007c48 <_printf_common+0x48>
 8007c3a:	f104 0a19 	add.w	sl, r4, #25
 8007c3e:	68e3      	ldr	r3, [r4, #12]
 8007c40:	6832      	ldr	r2, [r6, #0]
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	42ab      	cmp	r3, r5
 8007c46:	dc26      	bgt.n	8007c96 <_printf_common+0x96>
 8007c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c4c:	1e13      	subs	r3, r2, #0
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	bf18      	it	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	0692      	lsls	r2, r2, #26
 8007c56:	d42b      	bmi.n	8007cb0 <_printf_common+0xb0>
 8007c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4638      	mov	r0, r7
 8007c60:	47c0      	blx	r8
 8007c62:	3001      	adds	r0, #1
 8007c64:	d01e      	beq.n	8007ca4 <_printf_common+0xa4>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	68e5      	ldr	r5, [r4, #12]
 8007c6a:	6832      	ldr	r2, [r6, #0]
 8007c6c:	f003 0306 	and.w	r3, r3, #6
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	bf08      	it	eq
 8007c74:	1aad      	subeq	r5, r5, r2
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	bf0c      	ite	eq
 8007c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c80:	2500      	movne	r5, #0
 8007c82:	4293      	cmp	r3, r2
 8007c84:	bfc4      	itt	gt
 8007c86:	1a9b      	subgt	r3, r3, r2
 8007c88:	18ed      	addgt	r5, r5, r3
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	341a      	adds	r4, #26
 8007c8e:	42b5      	cmp	r5, r6
 8007c90:	d11a      	bne.n	8007cc8 <_printf_common+0xc8>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e008      	b.n	8007ca8 <_printf_common+0xa8>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	47c0      	blx	r8
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d103      	bne.n	8007cac <_printf_common+0xac>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	3501      	adds	r5, #1
 8007cae:	e7c6      	b.n	8007c3e <_printf_common+0x3e>
 8007cb0:	18e1      	adds	r1, r4, r3
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	2030      	movs	r0, #48	; 0x30
 8007cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cba:	4422      	add	r2, r4
 8007cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	e7c7      	b.n	8007c58 <_printf_common+0x58>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4622      	mov	r2, r4
 8007ccc:	4649      	mov	r1, r9
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c0      	blx	r8
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d0e6      	beq.n	8007ca4 <_printf_common+0xa4>
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7d9      	b.n	8007c8e <_printf_common+0x8e>
	...

08007cdc <_printf_i>:
 8007cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	4691      	mov	r9, r2
 8007ce4:	7e27      	ldrb	r7, [r4, #24]
 8007ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ce8:	2f78      	cmp	r7, #120	; 0x78
 8007cea:	4680      	mov	r8, r0
 8007cec:	469a      	mov	sl, r3
 8007cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf2:	d807      	bhi.n	8007d04 <_printf_i+0x28>
 8007cf4:	2f62      	cmp	r7, #98	; 0x62
 8007cf6:	d80a      	bhi.n	8007d0e <_printf_i+0x32>
 8007cf8:	2f00      	cmp	r7, #0
 8007cfa:	f000 80d8 	beq.w	8007eae <_printf_i+0x1d2>
 8007cfe:	2f58      	cmp	r7, #88	; 0x58
 8007d00:	f000 80a3 	beq.w	8007e4a <_printf_i+0x16e>
 8007d04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d0c:	e03a      	b.n	8007d84 <_printf_i+0xa8>
 8007d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d12:	2b15      	cmp	r3, #21
 8007d14:	d8f6      	bhi.n	8007d04 <_printf_i+0x28>
 8007d16:	a001      	add	r0, pc, #4	; (adr r0, 8007d1c <_printf_i+0x40>)
 8007d18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d1c:	08007d75 	.word	0x08007d75
 8007d20:	08007d89 	.word	0x08007d89
 8007d24:	08007d05 	.word	0x08007d05
 8007d28:	08007d05 	.word	0x08007d05
 8007d2c:	08007d05 	.word	0x08007d05
 8007d30:	08007d05 	.word	0x08007d05
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007d05 	.word	0x08007d05
 8007d3c:	08007d05 	.word	0x08007d05
 8007d40:	08007d05 	.word	0x08007d05
 8007d44:	08007d05 	.word	0x08007d05
 8007d48:	08007e95 	.word	0x08007e95
 8007d4c:	08007db9 	.word	0x08007db9
 8007d50:	08007e77 	.word	0x08007e77
 8007d54:	08007d05 	.word	0x08007d05
 8007d58:	08007d05 	.word	0x08007d05
 8007d5c:	08007eb7 	.word	0x08007eb7
 8007d60:	08007d05 	.word	0x08007d05
 8007d64:	08007db9 	.word	0x08007db9
 8007d68:	08007d05 	.word	0x08007d05
 8007d6c:	08007d05 	.word	0x08007d05
 8007d70:	08007e7f 	.word	0x08007e7f
 8007d74:	680b      	ldr	r3, [r1, #0]
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	600a      	str	r2, [r1, #0]
 8007d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d84:	2301      	movs	r3, #1
 8007d86:	e0a3      	b.n	8007ed0 <_printf_i+0x1f4>
 8007d88:	6825      	ldr	r5, [r4, #0]
 8007d8a:	6808      	ldr	r0, [r1, #0]
 8007d8c:	062e      	lsls	r6, r5, #24
 8007d8e:	f100 0304 	add.w	r3, r0, #4
 8007d92:	d50a      	bpl.n	8007daa <_printf_i+0xce>
 8007d94:	6805      	ldr	r5, [r0, #0]
 8007d96:	600b      	str	r3, [r1, #0]
 8007d98:	2d00      	cmp	r5, #0
 8007d9a:	da03      	bge.n	8007da4 <_printf_i+0xc8>
 8007d9c:	232d      	movs	r3, #45	; 0x2d
 8007d9e:	426d      	negs	r5, r5
 8007da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da4:	485e      	ldr	r0, [pc, #376]	; (8007f20 <_printf_i+0x244>)
 8007da6:	230a      	movs	r3, #10
 8007da8:	e019      	b.n	8007dde <_printf_i+0x102>
 8007daa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dae:	6805      	ldr	r5, [r0, #0]
 8007db0:	600b      	str	r3, [r1, #0]
 8007db2:	bf18      	it	ne
 8007db4:	b22d      	sxthne	r5, r5
 8007db6:	e7ef      	b.n	8007d98 <_printf_i+0xbc>
 8007db8:	680b      	ldr	r3, [r1, #0]
 8007dba:	6825      	ldr	r5, [r4, #0]
 8007dbc:	1d18      	adds	r0, r3, #4
 8007dbe:	6008      	str	r0, [r1, #0]
 8007dc0:	0628      	lsls	r0, r5, #24
 8007dc2:	d501      	bpl.n	8007dc8 <_printf_i+0xec>
 8007dc4:	681d      	ldr	r5, [r3, #0]
 8007dc6:	e002      	b.n	8007dce <_printf_i+0xf2>
 8007dc8:	0669      	lsls	r1, r5, #25
 8007dca:	d5fb      	bpl.n	8007dc4 <_printf_i+0xe8>
 8007dcc:	881d      	ldrh	r5, [r3, #0]
 8007dce:	4854      	ldr	r0, [pc, #336]	; (8007f20 <_printf_i+0x244>)
 8007dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2308      	moveq	r3, #8
 8007dd6:	230a      	movne	r3, #10
 8007dd8:	2100      	movs	r1, #0
 8007dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dde:	6866      	ldr	r6, [r4, #4]
 8007de0:	60a6      	str	r6, [r4, #8]
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	bfa2      	ittt	ge
 8007de6:	6821      	ldrge	r1, [r4, #0]
 8007de8:	f021 0104 	bicge.w	r1, r1, #4
 8007dec:	6021      	strge	r1, [r4, #0]
 8007dee:	b90d      	cbnz	r5, 8007df4 <_printf_i+0x118>
 8007df0:	2e00      	cmp	r6, #0
 8007df2:	d04d      	beq.n	8007e90 <_printf_i+0x1b4>
 8007df4:	4616      	mov	r6, r2
 8007df6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dfa:	fb03 5711 	mls	r7, r3, r1, r5
 8007dfe:	5dc7      	ldrb	r7, [r0, r7]
 8007e00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e04:	462f      	mov	r7, r5
 8007e06:	42bb      	cmp	r3, r7
 8007e08:	460d      	mov	r5, r1
 8007e0a:	d9f4      	bls.n	8007df6 <_printf_i+0x11a>
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d10b      	bne.n	8007e28 <_printf_i+0x14c>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07df      	lsls	r7, r3, #31
 8007e14:	d508      	bpl.n	8007e28 <_printf_i+0x14c>
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	6861      	ldr	r1, [r4, #4]
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	bfde      	ittt	le
 8007e1e:	2330      	movle	r3, #48	; 0x30
 8007e20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e28:	1b92      	subs	r2, r2, r6
 8007e2a:	6122      	str	r2, [r4, #16]
 8007e2c:	f8cd a000 	str.w	sl, [sp]
 8007e30:	464b      	mov	r3, r9
 8007e32:	aa03      	add	r2, sp, #12
 8007e34:	4621      	mov	r1, r4
 8007e36:	4640      	mov	r0, r8
 8007e38:	f7ff fee2 	bl	8007c00 <_printf_common>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d14c      	bne.n	8007eda <_printf_i+0x1fe>
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	b004      	add	sp, #16
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	4835      	ldr	r0, [pc, #212]	; (8007f20 <_printf_i+0x244>)
 8007e4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	680e      	ldr	r6, [r1, #0]
 8007e54:	061f      	lsls	r7, r3, #24
 8007e56:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e5a:	600e      	str	r6, [r1, #0]
 8007e5c:	d514      	bpl.n	8007e88 <_printf_i+0x1ac>
 8007e5e:	07d9      	lsls	r1, r3, #31
 8007e60:	bf44      	itt	mi
 8007e62:	f043 0320 	orrmi.w	r3, r3, #32
 8007e66:	6023      	strmi	r3, [r4, #0]
 8007e68:	b91d      	cbnz	r5, 8007e72 <_printf_i+0x196>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f023 0320 	bic.w	r3, r3, #32
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	2310      	movs	r3, #16
 8007e74:	e7b0      	b.n	8007dd8 <_printf_i+0xfc>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	2378      	movs	r3, #120	; 0x78
 8007e80:	4828      	ldr	r0, [pc, #160]	; (8007f24 <_printf_i+0x248>)
 8007e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e86:	e7e3      	b.n	8007e50 <_printf_i+0x174>
 8007e88:	065e      	lsls	r6, r3, #25
 8007e8a:	bf48      	it	mi
 8007e8c:	b2ad      	uxthmi	r5, r5
 8007e8e:	e7e6      	b.n	8007e5e <_printf_i+0x182>
 8007e90:	4616      	mov	r6, r2
 8007e92:	e7bb      	b.n	8007e0c <_printf_i+0x130>
 8007e94:	680b      	ldr	r3, [r1, #0]
 8007e96:	6826      	ldr	r6, [r4, #0]
 8007e98:	6960      	ldr	r0, [r4, #20]
 8007e9a:	1d1d      	adds	r5, r3, #4
 8007e9c:	600d      	str	r5, [r1, #0]
 8007e9e:	0635      	lsls	r5, r6, #24
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	d501      	bpl.n	8007ea8 <_printf_i+0x1cc>
 8007ea4:	6018      	str	r0, [r3, #0]
 8007ea6:	e002      	b.n	8007eae <_printf_i+0x1d2>
 8007ea8:	0671      	lsls	r1, r6, #25
 8007eaa:	d5fb      	bpl.n	8007ea4 <_printf_i+0x1c8>
 8007eac:	8018      	strh	r0, [r3, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6123      	str	r3, [r4, #16]
 8007eb2:	4616      	mov	r6, r2
 8007eb4:	e7ba      	b.n	8007e2c <_printf_i+0x150>
 8007eb6:	680b      	ldr	r3, [r1, #0]
 8007eb8:	1d1a      	adds	r2, r3, #4
 8007eba:	600a      	str	r2, [r1, #0]
 8007ebc:	681e      	ldr	r6, [r3, #0]
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7f8 f98c 	bl	80001e0 <memchr>
 8007ec8:	b108      	cbz	r0, 8007ece <_printf_i+0x1f2>
 8007eca:	1b80      	subs	r0, r0, r6
 8007ecc:	6060      	str	r0, [r4, #4]
 8007ece:	6863      	ldr	r3, [r4, #4]
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed8:	e7a8      	b.n	8007e2c <_printf_i+0x150>
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	4632      	mov	r2, r6
 8007ede:	4649      	mov	r1, r9
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	47d0      	blx	sl
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d0ab      	beq.n	8007e40 <_printf_i+0x164>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	079b      	lsls	r3, r3, #30
 8007eec:	d413      	bmi.n	8007f16 <_printf_i+0x23a>
 8007eee:	68e0      	ldr	r0, [r4, #12]
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	4298      	cmp	r0, r3
 8007ef4:	bfb8      	it	lt
 8007ef6:	4618      	movlt	r0, r3
 8007ef8:	e7a4      	b.n	8007e44 <_printf_i+0x168>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4632      	mov	r2, r6
 8007efe:	4649      	mov	r1, r9
 8007f00:	4640      	mov	r0, r8
 8007f02:	47d0      	blx	sl
 8007f04:	3001      	adds	r0, #1
 8007f06:	d09b      	beq.n	8007e40 <_printf_i+0x164>
 8007f08:	3501      	adds	r5, #1
 8007f0a:	68e3      	ldr	r3, [r4, #12]
 8007f0c:	9903      	ldr	r1, [sp, #12]
 8007f0e:	1a5b      	subs	r3, r3, r1
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	dcf2      	bgt.n	8007efa <_printf_i+0x21e>
 8007f14:	e7eb      	b.n	8007eee <_printf_i+0x212>
 8007f16:	2500      	movs	r5, #0
 8007f18:	f104 0619 	add.w	r6, r4, #25
 8007f1c:	e7f5      	b.n	8007f0a <_printf_i+0x22e>
 8007f1e:	bf00      	nop
 8007f20:	0800ea6e 	.word	0x0800ea6e
 8007f24:	0800ea7f 	.word	0x0800ea7f

08007f28 <_scanf_float>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	4617      	mov	r7, r2
 8007f30:	9303      	str	r3, [sp, #12]
 8007f32:	688b      	ldr	r3, [r1, #8]
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f3a:	bf83      	ittte	hi
 8007f3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f40:	195b      	addhi	r3, r3, r5
 8007f42:	9302      	strhi	r3, [sp, #8]
 8007f44:	2300      	movls	r3, #0
 8007f46:	bf86      	itte	hi
 8007f48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f4c:	608b      	strhi	r3, [r1, #8]
 8007f4e:	9302      	strls	r3, [sp, #8]
 8007f50:	680b      	ldr	r3, [r1, #0]
 8007f52:	468b      	mov	fp, r1
 8007f54:	2500      	movs	r5, #0
 8007f56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f62:	4680      	mov	r8, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	465e      	mov	r6, fp
 8007f68:	46aa      	mov	sl, r5
 8007f6a:	46a9      	mov	r9, r5
 8007f6c:	9501      	str	r5, [sp, #4]
 8007f6e:	68a2      	ldr	r2, [r4, #8]
 8007f70:	b152      	cbz	r2, 8007f88 <_scanf_float+0x60>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b4e      	cmp	r3, #78	; 0x4e
 8007f78:	d864      	bhi.n	8008044 <_scanf_float+0x11c>
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d83c      	bhi.n	8007ff8 <_scanf_float+0xd0>
 8007f7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007f82:	b2c8      	uxtb	r0, r1
 8007f84:	280e      	cmp	r0, #14
 8007f86:	d93a      	bls.n	8007ffe <_scanf_float+0xd6>
 8007f88:	f1b9 0f00 	cmp.w	r9, #0
 8007f8c:	d003      	beq.n	8007f96 <_scanf_float+0x6e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f9a:	f1ba 0f01 	cmp.w	sl, #1
 8007f9e:	f200 8113 	bhi.w	80081c8 <_scanf_float+0x2a0>
 8007fa2:	455e      	cmp	r6, fp
 8007fa4:	f200 8105 	bhi.w	80081b2 <_scanf_float+0x28a>
 8007fa8:	2501      	movs	r5, #1
 8007faa:	4628      	mov	r0, r5
 8007fac:	b007      	add	sp, #28
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007fb6:	2a0d      	cmp	r2, #13
 8007fb8:	d8e6      	bhi.n	8007f88 <_scanf_float+0x60>
 8007fba:	a101      	add	r1, pc, #4	; (adr r1, 8007fc0 <_scanf_float+0x98>)
 8007fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fc0:	080080ff 	.word	0x080080ff
 8007fc4:	08007f89 	.word	0x08007f89
 8007fc8:	08007f89 	.word	0x08007f89
 8007fcc:	08007f89 	.word	0x08007f89
 8007fd0:	0800815f 	.word	0x0800815f
 8007fd4:	08008137 	.word	0x08008137
 8007fd8:	08007f89 	.word	0x08007f89
 8007fdc:	08007f89 	.word	0x08007f89
 8007fe0:	0800810d 	.word	0x0800810d
 8007fe4:	08007f89 	.word	0x08007f89
 8007fe8:	08007f89 	.word	0x08007f89
 8007fec:	08007f89 	.word	0x08007f89
 8007ff0:	08007f89 	.word	0x08007f89
 8007ff4:	080080c5 	.word	0x080080c5
 8007ff8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ffc:	e7db      	b.n	8007fb6 <_scanf_float+0x8e>
 8007ffe:	290e      	cmp	r1, #14
 8008000:	d8c2      	bhi.n	8007f88 <_scanf_float+0x60>
 8008002:	a001      	add	r0, pc, #4	; (adr r0, 8008008 <_scanf_float+0xe0>)
 8008004:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008008:	080080b7 	.word	0x080080b7
 800800c:	08007f89 	.word	0x08007f89
 8008010:	080080b7 	.word	0x080080b7
 8008014:	0800814b 	.word	0x0800814b
 8008018:	08007f89 	.word	0x08007f89
 800801c:	08008065 	.word	0x08008065
 8008020:	080080a1 	.word	0x080080a1
 8008024:	080080a1 	.word	0x080080a1
 8008028:	080080a1 	.word	0x080080a1
 800802c:	080080a1 	.word	0x080080a1
 8008030:	080080a1 	.word	0x080080a1
 8008034:	080080a1 	.word	0x080080a1
 8008038:	080080a1 	.word	0x080080a1
 800803c:	080080a1 	.word	0x080080a1
 8008040:	080080a1 	.word	0x080080a1
 8008044:	2b6e      	cmp	r3, #110	; 0x6e
 8008046:	d809      	bhi.n	800805c <_scanf_float+0x134>
 8008048:	2b60      	cmp	r3, #96	; 0x60
 800804a:	d8b2      	bhi.n	8007fb2 <_scanf_float+0x8a>
 800804c:	2b54      	cmp	r3, #84	; 0x54
 800804e:	d077      	beq.n	8008140 <_scanf_float+0x218>
 8008050:	2b59      	cmp	r3, #89	; 0x59
 8008052:	d199      	bne.n	8007f88 <_scanf_float+0x60>
 8008054:	2d07      	cmp	r5, #7
 8008056:	d197      	bne.n	8007f88 <_scanf_float+0x60>
 8008058:	2508      	movs	r5, #8
 800805a:	e029      	b.n	80080b0 <_scanf_float+0x188>
 800805c:	2b74      	cmp	r3, #116	; 0x74
 800805e:	d06f      	beq.n	8008140 <_scanf_float+0x218>
 8008060:	2b79      	cmp	r3, #121	; 0x79
 8008062:	e7f6      	b.n	8008052 <_scanf_float+0x12a>
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	05c8      	lsls	r0, r1, #23
 8008068:	d51a      	bpl.n	80080a0 <_scanf_float+0x178>
 800806a:	9b02      	ldr	r3, [sp, #8]
 800806c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008070:	6021      	str	r1, [r4, #0]
 8008072:	f109 0901 	add.w	r9, r9, #1
 8008076:	b11b      	cbz	r3, 8008080 <_scanf_float+0x158>
 8008078:	3b01      	subs	r3, #1
 800807a:	3201      	adds	r2, #1
 800807c:	9302      	str	r3, [sp, #8]
 800807e:	60a2      	str	r2, [r4, #8]
 8008080:	68a3      	ldr	r3, [r4, #8]
 8008082:	3b01      	subs	r3, #1
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	3301      	adds	r3, #1
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3b01      	subs	r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	f340 8084 	ble.w	80081a0 <_scanf_float+0x278>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	e766      	b.n	8007f6e <_scanf_float+0x46>
 80080a0:	eb1a 0f05 	cmn.w	sl, r5
 80080a4:	f47f af70 	bne.w	8007f88 <_scanf_float+0x60>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80080ae:	6022      	str	r2, [r4, #0]
 80080b0:	f806 3b01 	strb.w	r3, [r6], #1
 80080b4:	e7e4      	b.n	8008080 <_scanf_float+0x158>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	0610      	lsls	r0, r2, #24
 80080ba:	f57f af65 	bpl.w	8007f88 <_scanf_float+0x60>
 80080be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c2:	e7f4      	b.n	80080ae <_scanf_float+0x186>
 80080c4:	f1ba 0f00 	cmp.w	sl, #0
 80080c8:	d10e      	bne.n	80080e8 <_scanf_float+0x1c0>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	d10e      	bne.n	80080ee <_scanf_float+0x1c6>
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80080d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80080da:	d108      	bne.n	80080ee <_scanf_float+0x1c6>
 80080dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	f04f 0a01 	mov.w	sl, #1
 80080e6:	e7e3      	b.n	80080b0 <_scanf_float+0x188>
 80080e8:	f1ba 0f02 	cmp.w	sl, #2
 80080ec:	d055      	beq.n	800819a <_scanf_float+0x272>
 80080ee:	2d01      	cmp	r5, #1
 80080f0:	d002      	beq.n	80080f8 <_scanf_float+0x1d0>
 80080f2:	2d04      	cmp	r5, #4
 80080f4:	f47f af48 	bne.w	8007f88 <_scanf_float+0x60>
 80080f8:	3501      	adds	r5, #1
 80080fa:	b2ed      	uxtb	r5, r5
 80080fc:	e7d8      	b.n	80080b0 <_scanf_float+0x188>
 80080fe:	f1ba 0f01 	cmp.w	sl, #1
 8008102:	f47f af41 	bne.w	8007f88 <_scanf_float+0x60>
 8008106:	f04f 0a02 	mov.w	sl, #2
 800810a:	e7d1      	b.n	80080b0 <_scanf_float+0x188>
 800810c:	b97d      	cbnz	r5, 800812e <_scanf_float+0x206>
 800810e:	f1b9 0f00 	cmp.w	r9, #0
 8008112:	f47f af3c 	bne.w	8007f8e <_scanf_float+0x66>
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800811c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008120:	f47f af39 	bne.w	8007f96 <_scanf_float+0x6e>
 8008124:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008128:	6022      	str	r2, [r4, #0]
 800812a:	2501      	movs	r5, #1
 800812c:	e7c0      	b.n	80080b0 <_scanf_float+0x188>
 800812e:	2d03      	cmp	r5, #3
 8008130:	d0e2      	beq.n	80080f8 <_scanf_float+0x1d0>
 8008132:	2d05      	cmp	r5, #5
 8008134:	e7de      	b.n	80080f4 <_scanf_float+0x1cc>
 8008136:	2d02      	cmp	r5, #2
 8008138:	f47f af26 	bne.w	8007f88 <_scanf_float+0x60>
 800813c:	2503      	movs	r5, #3
 800813e:	e7b7      	b.n	80080b0 <_scanf_float+0x188>
 8008140:	2d06      	cmp	r5, #6
 8008142:	f47f af21 	bne.w	8007f88 <_scanf_float+0x60>
 8008146:	2507      	movs	r5, #7
 8008148:	e7b2      	b.n	80080b0 <_scanf_float+0x188>
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	0591      	lsls	r1, r2, #22
 800814e:	f57f af1b 	bpl.w	8007f88 <_scanf_float+0x60>
 8008152:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008156:	6022      	str	r2, [r4, #0]
 8008158:	f8cd 9004 	str.w	r9, [sp, #4]
 800815c:	e7a8      	b.n	80080b0 <_scanf_float+0x188>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008164:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008168:	d006      	beq.n	8008178 <_scanf_float+0x250>
 800816a:	0550      	lsls	r0, r2, #21
 800816c:	f57f af0c 	bpl.w	8007f88 <_scanf_float+0x60>
 8008170:	f1b9 0f00 	cmp.w	r9, #0
 8008174:	f43f af0f 	beq.w	8007f96 <_scanf_float+0x6e>
 8008178:	0591      	lsls	r1, r2, #22
 800817a:	bf58      	it	pl
 800817c:	9901      	ldrpl	r1, [sp, #4]
 800817e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008182:	bf58      	it	pl
 8008184:	eba9 0101 	subpl.w	r1, r9, r1
 8008188:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800818c:	bf58      	it	pl
 800818e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008192:	6022      	str	r2, [r4, #0]
 8008194:	f04f 0900 	mov.w	r9, #0
 8008198:	e78a      	b.n	80080b0 <_scanf_float+0x188>
 800819a:	f04f 0a03 	mov.w	sl, #3
 800819e:	e787      	b.n	80080b0 <_scanf_float+0x188>
 80081a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081a4:	4639      	mov	r1, r7
 80081a6:	4640      	mov	r0, r8
 80081a8:	4798      	blx	r3
 80081aa:	2800      	cmp	r0, #0
 80081ac:	f43f aedf 	beq.w	8007f6e <_scanf_float+0x46>
 80081b0:	e6ea      	b.n	8007f88 <_scanf_float+0x60>
 80081b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081ba:	463a      	mov	r2, r7
 80081bc:	4640      	mov	r0, r8
 80081be:	4798      	blx	r3
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	e6ec      	b.n	8007fa2 <_scanf_float+0x7a>
 80081c8:	1e6b      	subs	r3, r5, #1
 80081ca:	2b06      	cmp	r3, #6
 80081cc:	d825      	bhi.n	800821a <_scanf_float+0x2f2>
 80081ce:	2d02      	cmp	r5, #2
 80081d0:	d836      	bhi.n	8008240 <_scanf_float+0x318>
 80081d2:	455e      	cmp	r6, fp
 80081d4:	f67f aee8 	bls.w	8007fa8 <_scanf_float+0x80>
 80081d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081e0:	463a      	mov	r2, r7
 80081e2:	4640      	mov	r0, r8
 80081e4:	4798      	blx	r3
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	6123      	str	r3, [r4, #16]
 80081ec:	e7f1      	b.n	80081d2 <_scanf_float+0x2aa>
 80081ee:	9802      	ldr	r0, [sp, #8]
 80081f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80081f8:	9002      	str	r0, [sp, #8]
 80081fa:	463a      	mov	r2, r7
 80081fc:	4640      	mov	r0, r8
 80081fe:	4798      	blx	r3
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	3b01      	subs	r3, #1
 8008204:	6123      	str	r3, [r4, #16]
 8008206:	f10a 3aff 	add.w	sl, sl, #4294967295
 800820a:	fa5f fa8a 	uxtb.w	sl, sl
 800820e:	f1ba 0f02 	cmp.w	sl, #2
 8008212:	d1ec      	bne.n	80081ee <_scanf_float+0x2c6>
 8008214:	3d03      	subs	r5, #3
 8008216:	b2ed      	uxtb	r5, r5
 8008218:	1b76      	subs	r6, r6, r5
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	05da      	lsls	r2, r3, #23
 800821e:	d52f      	bpl.n	8008280 <_scanf_float+0x358>
 8008220:	055b      	lsls	r3, r3, #21
 8008222:	d510      	bpl.n	8008246 <_scanf_float+0x31e>
 8008224:	455e      	cmp	r6, fp
 8008226:	f67f aebf 	bls.w	8007fa8 <_scanf_float+0x80>
 800822a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800822e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008232:	463a      	mov	r2, r7
 8008234:	4640      	mov	r0, r8
 8008236:	4798      	blx	r3
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	3b01      	subs	r3, #1
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	e7f1      	b.n	8008224 <_scanf_float+0x2fc>
 8008240:	46aa      	mov	sl, r5
 8008242:	9602      	str	r6, [sp, #8]
 8008244:	e7df      	b.n	8008206 <_scanf_float+0x2de>
 8008246:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	2965      	cmp	r1, #101	; 0x65
 800824e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008252:	f106 35ff 	add.w	r5, r6, #4294967295
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	d00c      	beq.n	8008274 <_scanf_float+0x34c>
 800825a:	2945      	cmp	r1, #69	; 0x45
 800825c:	d00a      	beq.n	8008274 <_scanf_float+0x34c>
 800825e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008262:	463a      	mov	r2, r7
 8008264:	4640      	mov	r0, r8
 8008266:	4798      	blx	r3
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800826e:	3b01      	subs	r3, #1
 8008270:	1eb5      	subs	r5, r6, #2
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008278:	463a      	mov	r2, r7
 800827a:	4640      	mov	r0, r8
 800827c:	4798      	blx	r3
 800827e:	462e      	mov	r6, r5
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	f015 0510 	ands.w	r5, r5, #16
 8008286:	d158      	bne.n	800833a <_scanf_float+0x412>
 8008288:	7035      	strb	r5, [r6, #0]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008294:	d11c      	bne.n	80082d0 <_scanf_float+0x3a8>
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	454b      	cmp	r3, r9
 800829a:	eba3 0209 	sub.w	r2, r3, r9
 800829e:	d124      	bne.n	80082ea <_scanf_float+0x3c2>
 80082a0:	2200      	movs	r2, #0
 80082a2:	4659      	mov	r1, fp
 80082a4:	4640      	mov	r0, r8
 80082a6:	f000 fe9d 	bl	8008fe4 <_strtod_r>
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	6821      	ldr	r1, [r4, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f011 0f02 	tst.w	r1, #2
 80082b4:	ec57 6b10 	vmov	r6, r7, d0
 80082b8:	f103 0204 	add.w	r2, r3, #4
 80082bc:	d020      	beq.n	8008300 <_scanf_float+0x3d8>
 80082be:	9903      	ldr	r1, [sp, #12]
 80082c0:	600a      	str	r2, [r1, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	e9c3 6700 	strd	r6, r7, [r3]
 80082c8:	68e3      	ldr	r3, [r4, #12]
 80082ca:	3301      	adds	r3, #1
 80082cc:	60e3      	str	r3, [r4, #12]
 80082ce:	e66c      	b.n	8007faa <_scanf_float+0x82>
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0e4      	beq.n	80082a0 <_scanf_float+0x378>
 80082d6:	9905      	ldr	r1, [sp, #20]
 80082d8:	230a      	movs	r3, #10
 80082da:	462a      	mov	r2, r5
 80082dc:	3101      	adds	r1, #1
 80082de:	4640      	mov	r0, r8
 80082e0:	f000 ff0a 	bl	80090f8 <_strtol_r>
 80082e4:	9b04      	ldr	r3, [sp, #16]
 80082e6:	9e05      	ldr	r6, [sp, #20]
 80082e8:	1ac2      	subs	r2, r0, r3
 80082ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80082ee:	429e      	cmp	r6, r3
 80082f0:	bf28      	it	cs
 80082f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80082f6:	4912      	ldr	r1, [pc, #72]	; (8008340 <_scanf_float+0x418>)
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f82b 	bl	8008354 <siprintf>
 80082fe:	e7cf      	b.n	80082a0 <_scanf_float+0x378>
 8008300:	f011 0f04 	tst.w	r1, #4
 8008304:	9903      	ldr	r1, [sp, #12]
 8008306:	600a      	str	r2, [r1, #0]
 8008308:	d1db      	bne.n	80082c2 <_scanf_float+0x39a>
 800830a:	f8d3 8000 	ldr.w	r8, [r3]
 800830e:	ee10 2a10 	vmov	r2, s0
 8008312:	ee10 0a10 	vmov	r0, s0
 8008316:	463b      	mov	r3, r7
 8008318:	4639      	mov	r1, r7
 800831a:	f7f8 fc07 	bl	8000b2c <__aeabi_dcmpun>
 800831e:	b128      	cbz	r0, 800832c <_scanf_float+0x404>
 8008320:	4808      	ldr	r0, [pc, #32]	; (8008344 <_scanf_float+0x41c>)
 8008322:	f000 f811 	bl	8008348 <nanf>
 8008326:	ed88 0a00 	vstr	s0, [r8]
 800832a:	e7cd      	b.n	80082c8 <_scanf_float+0x3a0>
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	f7f8 fc5a 	bl	8000be8 <__aeabi_d2f>
 8008334:	f8c8 0000 	str.w	r0, [r8]
 8008338:	e7c6      	b.n	80082c8 <_scanf_float+0x3a0>
 800833a:	2500      	movs	r5, #0
 800833c:	e635      	b.n	8007faa <_scanf_float+0x82>
 800833e:	bf00      	nop
 8008340:	0800ea90 	.word	0x0800ea90
 8008344:	0800eea8 	.word	0x0800eea8

08008348 <nanf>:
 8008348:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008350 <nanf+0x8>
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	7fc00000 	.word	0x7fc00000

08008354 <siprintf>:
 8008354:	b40e      	push	{r1, r2, r3}
 8008356:	b500      	push	{lr}
 8008358:	b09c      	sub	sp, #112	; 0x70
 800835a:	ab1d      	add	r3, sp, #116	; 0x74
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	9006      	str	r0, [sp, #24]
 8008360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <siprintf+0x38>)
 8008366:	9107      	str	r1, [sp, #28]
 8008368:	9104      	str	r1, [sp, #16]
 800836a:	4909      	ldr	r1, [pc, #36]	; (8008390 <siprintf+0x3c>)
 800836c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	a902      	add	r1, sp, #8
 8008378:	f002 fea6 	bl	800b0c8 <_svfiprintf_r>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	b01c      	add	sp, #112	; 0x70
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	20000160 	.word	0x20000160
 8008390:	ffff0208 	.word	0xffff0208

08008394 <sulp>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	ec45 4b10 	vmov	d0, r4, r5
 800839e:	4616      	mov	r6, r2
 80083a0:	f002 fc2e 	bl	800ac00 <__ulp>
 80083a4:	ec51 0b10 	vmov	r0, r1, d0
 80083a8:	b17e      	cbz	r6, 80083ca <sulp+0x36>
 80083aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd09      	ble.n	80083ca <sulp+0x36>
 80083b6:	051b      	lsls	r3, r3, #20
 80083b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80083bc:	2400      	movs	r4, #0
 80083be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80083c2:	4622      	mov	r2, r4
 80083c4:	462b      	mov	r3, r5
 80083c6:	f7f8 f917 	bl	80005f8 <__aeabi_dmul>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	0000      	movs	r0, r0
	...

080083d0 <_strtod_l>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	b0a3      	sub	sp, #140	; 0x8c
 80083d6:	461f      	mov	r7, r3
 80083d8:	2300      	movs	r3, #0
 80083da:	931e      	str	r3, [sp, #120]	; 0x78
 80083dc:	4ba4      	ldr	r3, [pc, #656]	; (8008670 <_strtod_l+0x2a0>)
 80083de:	9219      	str	r2, [sp, #100]	; 0x64
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	4604      	mov	r4, r0
 80083e6:	4618      	mov	r0, r3
 80083e8:	4688      	mov	r8, r1
 80083ea:	f7f7 fef1 	bl	80001d0 <strlen>
 80083ee:	f04f 0a00 	mov.w	sl, #0
 80083f2:	4605      	mov	r5, r0
 80083f4:	f04f 0b00 	mov.w	fp, #0
 80083f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80083fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083fe:	781a      	ldrb	r2, [r3, #0]
 8008400:	2a2b      	cmp	r2, #43	; 0x2b
 8008402:	d04c      	beq.n	800849e <_strtod_l+0xce>
 8008404:	d839      	bhi.n	800847a <_strtod_l+0xaa>
 8008406:	2a0d      	cmp	r2, #13
 8008408:	d832      	bhi.n	8008470 <_strtod_l+0xa0>
 800840a:	2a08      	cmp	r2, #8
 800840c:	d832      	bhi.n	8008474 <_strtod_l+0xa4>
 800840e:	2a00      	cmp	r2, #0
 8008410:	d03c      	beq.n	800848c <_strtod_l+0xbc>
 8008412:	2300      	movs	r3, #0
 8008414:	930e      	str	r3, [sp, #56]	; 0x38
 8008416:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008418:	7833      	ldrb	r3, [r6, #0]
 800841a:	2b30      	cmp	r3, #48	; 0x30
 800841c:	f040 80b4 	bne.w	8008588 <_strtod_l+0x1b8>
 8008420:	7873      	ldrb	r3, [r6, #1]
 8008422:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008426:	2b58      	cmp	r3, #88	; 0x58
 8008428:	d16c      	bne.n	8008504 <_strtod_l+0x134>
 800842a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	ab1e      	add	r3, sp, #120	; 0x78
 8008430:	9702      	str	r7, [sp, #8]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4a8f      	ldr	r2, [pc, #572]	; (8008674 <_strtod_l+0x2a4>)
 8008436:	ab1f      	add	r3, sp, #124	; 0x7c
 8008438:	a91d      	add	r1, sp, #116	; 0x74
 800843a:	4620      	mov	r0, r4
 800843c:	f001 fd40 	bl	8009ec0 <__gethex>
 8008440:	f010 0707 	ands.w	r7, r0, #7
 8008444:	4605      	mov	r5, r0
 8008446:	d005      	beq.n	8008454 <_strtod_l+0x84>
 8008448:	2f06      	cmp	r7, #6
 800844a:	d12a      	bne.n	80084a2 <_strtod_l+0xd2>
 800844c:	3601      	adds	r6, #1
 800844e:	2300      	movs	r3, #0
 8008450:	961d      	str	r6, [sp, #116]	; 0x74
 8008452:	930e      	str	r3, [sp, #56]	; 0x38
 8008454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 8596 	bne.w	8008f88 <_strtod_l+0xbb8>
 800845c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800845e:	b1db      	cbz	r3, 8008498 <_strtod_l+0xc8>
 8008460:	4652      	mov	r2, sl
 8008462:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008466:	ec43 2b10 	vmov	d0, r2, r3
 800846a:	b023      	add	sp, #140	; 0x8c
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	2a20      	cmp	r2, #32
 8008472:	d1ce      	bne.n	8008412 <_strtod_l+0x42>
 8008474:	3301      	adds	r3, #1
 8008476:	931d      	str	r3, [sp, #116]	; 0x74
 8008478:	e7c0      	b.n	80083fc <_strtod_l+0x2c>
 800847a:	2a2d      	cmp	r2, #45	; 0x2d
 800847c:	d1c9      	bne.n	8008412 <_strtod_l+0x42>
 800847e:	2201      	movs	r2, #1
 8008480:	920e      	str	r2, [sp, #56]	; 0x38
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	921d      	str	r2, [sp, #116]	; 0x74
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1c4      	bne.n	8008416 <_strtod_l+0x46>
 800848c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800848e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 8576 	bne.w	8008f84 <_strtod_l+0xbb4>
 8008498:	4652      	mov	r2, sl
 800849a:	465b      	mov	r3, fp
 800849c:	e7e3      	b.n	8008466 <_strtod_l+0x96>
 800849e:	2200      	movs	r2, #0
 80084a0:	e7ee      	b.n	8008480 <_strtod_l+0xb0>
 80084a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084a4:	b13a      	cbz	r2, 80084b6 <_strtod_l+0xe6>
 80084a6:	2135      	movs	r1, #53	; 0x35
 80084a8:	a820      	add	r0, sp, #128	; 0x80
 80084aa:	f002 fcb4 	bl	800ae16 <__copybits>
 80084ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084b0:	4620      	mov	r0, r4
 80084b2:	f002 f879 	bl	800a5a8 <_Bfree>
 80084b6:	3f01      	subs	r7, #1
 80084b8:	2f05      	cmp	r7, #5
 80084ba:	d807      	bhi.n	80084cc <_strtod_l+0xfc>
 80084bc:	e8df f007 	tbb	[pc, r7]
 80084c0:	1d180b0e 	.word	0x1d180b0e
 80084c4:	030e      	.short	0x030e
 80084c6:	f04f 0b00 	mov.w	fp, #0
 80084ca:	46da      	mov	sl, fp
 80084cc:	0728      	lsls	r0, r5, #28
 80084ce:	d5c1      	bpl.n	8008454 <_strtod_l+0x84>
 80084d0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80084d4:	e7be      	b.n	8008454 <_strtod_l+0x84>
 80084d6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80084da:	e7f7      	b.n	80084cc <_strtod_l+0xfc>
 80084dc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80084e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80084e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084ee:	e7ed      	b.n	80084cc <_strtod_l+0xfc>
 80084f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008678 <_strtod_l+0x2a8>
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	e7e8      	b.n	80084cc <_strtod_l+0xfc>
 80084fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80084fe:	f04f 3aff 	mov.w	sl, #4294967295
 8008502:	e7e3      	b.n	80084cc <_strtod_l+0xfc>
 8008504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	921d      	str	r2, [sp, #116]	; 0x74
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b30      	cmp	r3, #48	; 0x30
 800850e:	d0f9      	beq.n	8008504 <_strtod_l+0x134>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d09f      	beq.n	8008454 <_strtod_l+0x84>
 8008514:	2301      	movs	r3, #1
 8008516:	f04f 0900 	mov.w	r9, #0
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008524:	464f      	mov	r7, r9
 8008526:	220a      	movs	r2, #10
 8008528:	981d      	ldr	r0, [sp, #116]	; 0x74
 800852a:	7806      	ldrb	r6, [r0, #0]
 800852c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008530:	b2d9      	uxtb	r1, r3
 8008532:	2909      	cmp	r1, #9
 8008534:	d92a      	bls.n	800858c <_strtod_l+0x1bc>
 8008536:	9907      	ldr	r1, [sp, #28]
 8008538:	462a      	mov	r2, r5
 800853a:	f002 fedd 	bl	800b2f8 <strncmp>
 800853e:	b398      	cbz	r0, 80085a8 <_strtod_l+0x1d8>
 8008540:	2000      	movs	r0, #0
 8008542:	4633      	mov	r3, r6
 8008544:	463d      	mov	r5, r7
 8008546:	9007      	str	r0, [sp, #28]
 8008548:	4602      	mov	r2, r0
 800854a:	2b65      	cmp	r3, #101	; 0x65
 800854c:	d001      	beq.n	8008552 <_strtod_l+0x182>
 800854e:	2b45      	cmp	r3, #69	; 0x45
 8008550:	d118      	bne.n	8008584 <_strtod_l+0x1b4>
 8008552:	b91d      	cbnz	r5, 800855c <_strtod_l+0x18c>
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	4303      	orrs	r3, r0
 8008558:	d098      	beq.n	800848c <_strtod_l+0xbc>
 800855a:	2500      	movs	r5, #0
 800855c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008560:	f108 0301 	add.w	r3, r8, #1
 8008564:	931d      	str	r3, [sp, #116]	; 0x74
 8008566:	f898 3001 	ldrb.w	r3, [r8, #1]
 800856a:	2b2b      	cmp	r3, #43	; 0x2b
 800856c:	d075      	beq.n	800865a <_strtod_l+0x28a>
 800856e:	2b2d      	cmp	r3, #45	; 0x2d
 8008570:	d07b      	beq.n	800866a <_strtod_l+0x29a>
 8008572:	f04f 0c00 	mov.w	ip, #0
 8008576:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800857a:	2909      	cmp	r1, #9
 800857c:	f240 8082 	bls.w	8008684 <_strtod_l+0x2b4>
 8008580:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008584:	2600      	movs	r6, #0
 8008586:	e09d      	b.n	80086c4 <_strtod_l+0x2f4>
 8008588:	2300      	movs	r3, #0
 800858a:	e7c4      	b.n	8008516 <_strtod_l+0x146>
 800858c:	2f08      	cmp	r7, #8
 800858e:	bfd8      	it	le
 8008590:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008592:	f100 0001 	add.w	r0, r0, #1
 8008596:	bfda      	itte	le
 8008598:	fb02 3301 	mlale	r3, r2, r1, r3
 800859c:	9309      	strle	r3, [sp, #36]	; 0x24
 800859e:	fb02 3909 	mlagt	r9, r2, r9, r3
 80085a2:	3701      	adds	r7, #1
 80085a4:	901d      	str	r0, [sp, #116]	; 0x74
 80085a6:	e7bf      	b.n	8008528 <_strtod_l+0x158>
 80085a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085aa:	195a      	adds	r2, r3, r5
 80085ac:	921d      	str	r2, [sp, #116]	; 0x74
 80085ae:	5d5b      	ldrb	r3, [r3, r5]
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	d037      	beq.n	8008624 <_strtod_l+0x254>
 80085b4:	9007      	str	r0, [sp, #28]
 80085b6:	463d      	mov	r5, r7
 80085b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80085bc:	2a09      	cmp	r2, #9
 80085be:	d912      	bls.n	80085e6 <_strtod_l+0x216>
 80085c0:	2201      	movs	r2, #1
 80085c2:	e7c2      	b.n	800854a <_strtod_l+0x17a>
 80085c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	921d      	str	r2, [sp, #116]	; 0x74
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	3001      	adds	r0, #1
 80085ce:	2b30      	cmp	r3, #48	; 0x30
 80085d0:	d0f8      	beq.n	80085c4 <_strtod_l+0x1f4>
 80085d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80085d6:	2a08      	cmp	r2, #8
 80085d8:	f200 84db 	bhi.w	8008f92 <_strtod_l+0xbc2>
 80085dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085de:	9007      	str	r0, [sp, #28]
 80085e0:	2000      	movs	r0, #0
 80085e2:	920a      	str	r2, [sp, #40]	; 0x28
 80085e4:	4605      	mov	r5, r0
 80085e6:	3b30      	subs	r3, #48	; 0x30
 80085e8:	f100 0201 	add.w	r2, r0, #1
 80085ec:	d014      	beq.n	8008618 <_strtod_l+0x248>
 80085ee:	9907      	ldr	r1, [sp, #28]
 80085f0:	4411      	add	r1, r2
 80085f2:	9107      	str	r1, [sp, #28]
 80085f4:	462a      	mov	r2, r5
 80085f6:	eb00 0e05 	add.w	lr, r0, r5
 80085fa:	210a      	movs	r1, #10
 80085fc:	4572      	cmp	r2, lr
 80085fe:	d113      	bne.n	8008628 <_strtod_l+0x258>
 8008600:	182a      	adds	r2, r5, r0
 8008602:	2a08      	cmp	r2, #8
 8008604:	f105 0501 	add.w	r5, r5, #1
 8008608:	4405      	add	r5, r0
 800860a:	dc1c      	bgt.n	8008646 <_strtod_l+0x276>
 800860c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800860e:	220a      	movs	r2, #10
 8008610:	fb02 3301 	mla	r3, r2, r1, r3
 8008614:	9309      	str	r3, [sp, #36]	; 0x24
 8008616:	2200      	movs	r2, #0
 8008618:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800861a:	1c59      	adds	r1, r3, #1
 800861c:	911d      	str	r1, [sp, #116]	; 0x74
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	4610      	mov	r0, r2
 8008622:	e7c9      	b.n	80085b8 <_strtod_l+0x1e8>
 8008624:	4638      	mov	r0, r7
 8008626:	e7d2      	b.n	80085ce <_strtod_l+0x1fe>
 8008628:	2a08      	cmp	r2, #8
 800862a:	dc04      	bgt.n	8008636 <_strtod_l+0x266>
 800862c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800862e:	434e      	muls	r6, r1
 8008630:	9609      	str	r6, [sp, #36]	; 0x24
 8008632:	3201      	adds	r2, #1
 8008634:	e7e2      	b.n	80085fc <_strtod_l+0x22c>
 8008636:	f102 0c01 	add.w	ip, r2, #1
 800863a:	f1bc 0f10 	cmp.w	ip, #16
 800863e:	bfd8      	it	le
 8008640:	fb01 f909 	mulle.w	r9, r1, r9
 8008644:	e7f5      	b.n	8008632 <_strtod_l+0x262>
 8008646:	2d10      	cmp	r5, #16
 8008648:	bfdc      	itt	le
 800864a:	220a      	movle	r2, #10
 800864c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008650:	e7e1      	b.n	8008616 <_strtod_l+0x246>
 8008652:	2300      	movs	r3, #0
 8008654:	9307      	str	r3, [sp, #28]
 8008656:	2201      	movs	r2, #1
 8008658:	e77c      	b.n	8008554 <_strtod_l+0x184>
 800865a:	f04f 0c00 	mov.w	ip, #0
 800865e:	f108 0302 	add.w	r3, r8, #2
 8008662:	931d      	str	r3, [sp, #116]	; 0x74
 8008664:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008668:	e785      	b.n	8008576 <_strtod_l+0x1a6>
 800866a:	f04f 0c01 	mov.w	ip, #1
 800866e:	e7f6      	b.n	800865e <_strtod_l+0x28e>
 8008670:	0800ece8 	.word	0x0800ece8
 8008674:	0800ea98 	.word	0x0800ea98
 8008678:	7ff00000 	.word	0x7ff00000
 800867c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	911d      	str	r1, [sp, #116]	; 0x74
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b30      	cmp	r3, #48	; 0x30
 8008686:	d0f9      	beq.n	800867c <_strtod_l+0x2ac>
 8008688:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800868c:	2908      	cmp	r1, #8
 800868e:	f63f af79 	bhi.w	8008584 <_strtod_l+0x1b4>
 8008692:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008696:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008698:	9308      	str	r3, [sp, #32]
 800869a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800869c:	1c59      	adds	r1, r3, #1
 800869e:	911d      	str	r1, [sp, #116]	; 0x74
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80086a6:	2e09      	cmp	r6, #9
 80086a8:	d937      	bls.n	800871a <_strtod_l+0x34a>
 80086aa:	9e08      	ldr	r6, [sp, #32]
 80086ac:	1b89      	subs	r1, r1, r6
 80086ae:	2908      	cmp	r1, #8
 80086b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80086b4:	dc02      	bgt.n	80086bc <_strtod_l+0x2ec>
 80086b6:	4576      	cmp	r6, lr
 80086b8:	bfa8      	it	ge
 80086ba:	4676      	movge	r6, lr
 80086bc:	f1bc 0f00 	cmp.w	ip, #0
 80086c0:	d000      	beq.n	80086c4 <_strtod_l+0x2f4>
 80086c2:	4276      	negs	r6, r6
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d14f      	bne.n	8008768 <_strtod_l+0x398>
 80086c8:	9904      	ldr	r1, [sp, #16]
 80086ca:	4301      	orrs	r1, r0
 80086cc:	f47f aec2 	bne.w	8008454 <_strtod_l+0x84>
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	f47f aedb 	bne.w	800848c <_strtod_l+0xbc>
 80086d6:	2b69      	cmp	r3, #105	; 0x69
 80086d8:	d027      	beq.n	800872a <_strtod_l+0x35a>
 80086da:	dc24      	bgt.n	8008726 <_strtod_l+0x356>
 80086dc:	2b49      	cmp	r3, #73	; 0x49
 80086de:	d024      	beq.n	800872a <_strtod_l+0x35a>
 80086e0:	2b4e      	cmp	r3, #78	; 0x4e
 80086e2:	f47f aed3 	bne.w	800848c <_strtod_l+0xbc>
 80086e6:	499e      	ldr	r1, [pc, #632]	; (8008960 <_strtod_l+0x590>)
 80086e8:	a81d      	add	r0, sp, #116	; 0x74
 80086ea:	f001 fe41 	bl	800a370 <__match>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f43f aecc 	beq.w	800848c <_strtod_l+0xbc>
 80086f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b28      	cmp	r3, #40	; 0x28
 80086fa:	d12d      	bne.n	8008758 <_strtod_l+0x388>
 80086fc:	4999      	ldr	r1, [pc, #612]	; (8008964 <_strtod_l+0x594>)
 80086fe:	aa20      	add	r2, sp, #128	; 0x80
 8008700:	a81d      	add	r0, sp, #116	; 0x74
 8008702:	f001 fe49 	bl	800a398 <__hexnan>
 8008706:	2805      	cmp	r0, #5
 8008708:	d126      	bne.n	8008758 <_strtod_l+0x388>
 800870a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800870c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008710:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008714:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008718:	e69c      	b.n	8008454 <_strtod_l+0x84>
 800871a:	210a      	movs	r1, #10
 800871c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008720:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008724:	e7b9      	b.n	800869a <_strtod_l+0x2ca>
 8008726:	2b6e      	cmp	r3, #110	; 0x6e
 8008728:	e7db      	b.n	80086e2 <_strtod_l+0x312>
 800872a:	498f      	ldr	r1, [pc, #572]	; (8008968 <_strtod_l+0x598>)
 800872c:	a81d      	add	r0, sp, #116	; 0x74
 800872e:	f001 fe1f 	bl	800a370 <__match>
 8008732:	2800      	cmp	r0, #0
 8008734:	f43f aeaa 	beq.w	800848c <_strtod_l+0xbc>
 8008738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800873a:	498c      	ldr	r1, [pc, #560]	; (800896c <_strtod_l+0x59c>)
 800873c:	3b01      	subs	r3, #1
 800873e:	a81d      	add	r0, sp, #116	; 0x74
 8008740:	931d      	str	r3, [sp, #116]	; 0x74
 8008742:	f001 fe15 	bl	800a370 <__match>
 8008746:	b910      	cbnz	r0, 800874e <_strtod_l+0x37e>
 8008748:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800874a:	3301      	adds	r3, #1
 800874c:	931d      	str	r3, [sp, #116]	; 0x74
 800874e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800897c <_strtod_l+0x5ac>
 8008752:	f04f 0a00 	mov.w	sl, #0
 8008756:	e67d      	b.n	8008454 <_strtod_l+0x84>
 8008758:	4885      	ldr	r0, [pc, #532]	; (8008970 <_strtod_l+0x5a0>)
 800875a:	f002 fdb5 	bl	800b2c8 <nan>
 800875e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008762:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008766:	e675      	b.n	8008454 <_strtod_l+0x84>
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800876c:	1af3      	subs	r3, r6, r3
 800876e:	2f00      	cmp	r7, #0
 8008770:	bf08      	it	eq
 8008772:	462f      	moveq	r7, r5
 8008774:	2d10      	cmp	r5, #16
 8008776:	9308      	str	r3, [sp, #32]
 8008778:	46a8      	mov	r8, r5
 800877a:	bfa8      	it	ge
 800877c:	f04f 0810 	movge.w	r8, #16
 8008780:	f7f7 fec0 	bl	8000504 <__aeabi_ui2d>
 8008784:	2d09      	cmp	r5, #9
 8008786:	4682      	mov	sl, r0
 8008788:	468b      	mov	fp, r1
 800878a:	dd13      	ble.n	80087b4 <_strtod_l+0x3e4>
 800878c:	4b79      	ldr	r3, [pc, #484]	; (8008974 <_strtod_l+0x5a4>)
 800878e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008792:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008796:	f7f7 ff2f 	bl	80005f8 <__aeabi_dmul>
 800879a:	4682      	mov	sl, r0
 800879c:	4648      	mov	r0, r9
 800879e:	468b      	mov	fp, r1
 80087a0:	f7f7 feb0 	bl	8000504 <__aeabi_ui2d>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4650      	mov	r0, sl
 80087aa:	4659      	mov	r1, fp
 80087ac:	f7f7 fd6e 	bl	800028c <__adddf3>
 80087b0:	4682      	mov	sl, r0
 80087b2:	468b      	mov	fp, r1
 80087b4:	2d0f      	cmp	r5, #15
 80087b6:	dc38      	bgt.n	800882a <_strtod_l+0x45a>
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f43f ae4a 	beq.w	8008454 <_strtod_l+0x84>
 80087c0:	dd24      	ble.n	800880c <_strtod_l+0x43c>
 80087c2:	2b16      	cmp	r3, #22
 80087c4:	dc0b      	bgt.n	80087de <_strtod_l+0x40e>
 80087c6:	4d6b      	ldr	r5, [pc, #428]	; (8008974 <_strtod_l+0x5a4>)
 80087c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80087cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80087d0:	4652      	mov	r2, sl
 80087d2:	465b      	mov	r3, fp
 80087d4:	f7f7 ff10 	bl	80005f8 <__aeabi_dmul>
 80087d8:	4682      	mov	sl, r0
 80087da:	468b      	mov	fp, r1
 80087dc:	e63a      	b.n	8008454 <_strtod_l+0x84>
 80087de:	9a08      	ldr	r2, [sp, #32]
 80087e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80087e4:	4293      	cmp	r3, r2
 80087e6:	db20      	blt.n	800882a <_strtod_l+0x45a>
 80087e8:	4c62      	ldr	r4, [pc, #392]	; (8008974 <_strtod_l+0x5a4>)
 80087ea:	f1c5 050f 	rsb	r5, r5, #15
 80087ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087fa:	f7f7 fefd 	bl	80005f8 <__aeabi_dmul>
 80087fe:	9b08      	ldr	r3, [sp, #32]
 8008800:	1b5d      	subs	r5, r3, r5
 8008802:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008806:	e9d4 2300 	ldrd	r2, r3, [r4]
 800880a:	e7e3      	b.n	80087d4 <_strtod_l+0x404>
 800880c:	9b08      	ldr	r3, [sp, #32]
 800880e:	3316      	adds	r3, #22
 8008810:	db0b      	blt.n	800882a <_strtod_l+0x45a>
 8008812:	9b07      	ldr	r3, [sp, #28]
 8008814:	4a57      	ldr	r2, [pc, #348]	; (8008974 <_strtod_l+0x5a4>)
 8008816:	1b9e      	subs	r6, r3, r6
 8008818:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800881c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008820:	4650      	mov	r0, sl
 8008822:	4659      	mov	r1, fp
 8008824:	f7f8 f812 	bl	800084c <__aeabi_ddiv>
 8008828:	e7d6      	b.n	80087d8 <_strtod_l+0x408>
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	eba5 0808 	sub.w	r8, r5, r8
 8008830:	4498      	add	r8, r3
 8008832:	f1b8 0f00 	cmp.w	r8, #0
 8008836:	dd71      	ble.n	800891c <_strtod_l+0x54c>
 8008838:	f018 030f 	ands.w	r3, r8, #15
 800883c:	d00a      	beq.n	8008854 <_strtod_l+0x484>
 800883e:	494d      	ldr	r1, [pc, #308]	; (8008974 <_strtod_l+0x5a4>)
 8008840:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008844:	4652      	mov	r2, sl
 8008846:	465b      	mov	r3, fp
 8008848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	4682      	mov	sl, r0
 8008852:	468b      	mov	fp, r1
 8008854:	f038 080f 	bics.w	r8, r8, #15
 8008858:	d04d      	beq.n	80088f6 <_strtod_l+0x526>
 800885a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800885e:	dd22      	ble.n	80088a6 <_strtod_l+0x4d6>
 8008860:	2500      	movs	r5, #0
 8008862:	462e      	mov	r6, r5
 8008864:	9509      	str	r5, [sp, #36]	; 0x24
 8008866:	9507      	str	r5, [sp, #28]
 8008868:	2322      	movs	r3, #34	; 0x22
 800886a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800897c <_strtod_l+0x5ac>
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	f04f 0a00 	mov.w	sl, #0
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	2b00      	cmp	r3, #0
 8008878:	f43f adec 	beq.w	8008454 <_strtod_l+0x84>
 800887c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800887e:	4620      	mov	r0, r4
 8008880:	f001 fe92 	bl	800a5a8 <_Bfree>
 8008884:	9907      	ldr	r1, [sp, #28]
 8008886:	4620      	mov	r0, r4
 8008888:	f001 fe8e 	bl	800a5a8 <_Bfree>
 800888c:	4631      	mov	r1, r6
 800888e:	4620      	mov	r0, r4
 8008890:	f001 fe8a 	bl	800a5a8 <_Bfree>
 8008894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008896:	4620      	mov	r0, r4
 8008898:	f001 fe86 	bl	800a5a8 <_Bfree>
 800889c:	4629      	mov	r1, r5
 800889e:	4620      	mov	r0, r4
 80088a0:	f001 fe82 	bl	800a5a8 <_Bfree>
 80088a4:	e5d6      	b.n	8008454 <_strtod_l+0x84>
 80088a6:	2300      	movs	r3, #0
 80088a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80088ac:	4650      	mov	r0, sl
 80088ae:	4659      	mov	r1, fp
 80088b0:	4699      	mov	r9, r3
 80088b2:	f1b8 0f01 	cmp.w	r8, #1
 80088b6:	dc21      	bgt.n	80088fc <_strtod_l+0x52c>
 80088b8:	b10b      	cbz	r3, 80088be <_strtod_l+0x4ee>
 80088ba:	4682      	mov	sl, r0
 80088bc:	468b      	mov	fp, r1
 80088be:	4b2e      	ldr	r3, [pc, #184]	; (8008978 <_strtod_l+0x5a8>)
 80088c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80088c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80088c8:	4652      	mov	r2, sl
 80088ca:	465b      	mov	r3, fp
 80088cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80088d0:	f7f7 fe92 	bl	80005f8 <__aeabi_dmul>
 80088d4:	4b29      	ldr	r3, [pc, #164]	; (800897c <_strtod_l+0x5ac>)
 80088d6:	460a      	mov	r2, r1
 80088d8:	400b      	ands	r3, r1
 80088da:	4929      	ldr	r1, [pc, #164]	; (8008980 <_strtod_l+0x5b0>)
 80088dc:	428b      	cmp	r3, r1
 80088de:	4682      	mov	sl, r0
 80088e0:	d8be      	bhi.n	8008860 <_strtod_l+0x490>
 80088e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088e6:	428b      	cmp	r3, r1
 80088e8:	bf86      	itte	hi
 80088ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008984 <_strtod_l+0x5b4>
 80088ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80088f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80088f6:	2300      	movs	r3, #0
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	e081      	b.n	8008a00 <_strtod_l+0x630>
 80088fc:	f018 0f01 	tst.w	r8, #1
 8008900:	d007      	beq.n	8008912 <_strtod_l+0x542>
 8008902:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <_strtod_l+0x5a8>)
 8008904:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f7f7 fe74 	bl	80005f8 <__aeabi_dmul>
 8008910:	2301      	movs	r3, #1
 8008912:	f109 0901 	add.w	r9, r9, #1
 8008916:	ea4f 0868 	mov.w	r8, r8, asr #1
 800891a:	e7ca      	b.n	80088b2 <_strtod_l+0x4e2>
 800891c:	d0eb      	beq.n	80088f6 <_strtod_l+0x526>
 800891e:	f1c8 0800 	rsb	r8, r8, #0
 8008922:	f018 020f 	ands.w	r2, r8, #15
 8008926:	d00a      	beq.n	800893e <_strtod_l+0x56e>
 8008928:	4b12      	ldr	r3, [pc, #72]	; (8008974 <_strtod_l+0x5a4>)
 800892a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800892e:	4650      	mov	r0, sl
 8008930:	4659      	mov	r1, fp
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 ff89 	bl	800084c <__aeabi_ddiv>
 800893a:	4682      	mov	sl, r0
 800893c:	468b      	mov	fp, r1
 800893e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008942:	d0d8      	beq.n	80088f6 <_strtod_l+0x526>
 8008944:	f1b8 0f1f 	cmp.w	r8, #31
 8008948:	dd1e      	ble.n	8008988 <_strtod_l+0x5b8>
 800894a:	2500      	movs	r5, #0
 800894c:	462e      	mov	r6, r5
 800894e:	9509      	str	r5, [sp, #36]	; 0x24
 8008950:	9507      	str	r5, [sp, #28]
 8008952:	2322      	movs	r3, #34	; 0x22
 8008954:	f04f 0a00 	mov.w	sl, #0
 8008958:	f04f 0b00 	mov.w	fp, #0
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	e789      	b.n	8008874 <_strtod_l+0x4a4>
 8008960:	0800ea69 	.word	0x0800ea69
 8008964:	0800eaac 	.word	0x0800eaac
 8008968:	0800ea61 	.word	0x0800ea61
 800896c:	0800ebec 	.word	0x0800ebec
 8008970:	0800eea8 	.word	0x0800eea8
 8008974:	0800ed88 	.word	0x0800ed88
 8008978:	0800ed60 	.word	0x0800ed60
 800897c:	7ff00000 	.word	0x7ff00000
 8008980:	7ca00000 	.word	0x7ca00000
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	f018 0310 	ands.w	r3, r8, #16
 800898c:	bf18      	it	ne
 800898e:	236a      	movne	r3, #106	; 0x6a
 8008990:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008d48 <_strtod_l+0x978>
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4650      	mov	r0, sl
 8008998:	4659      	mov	r1, fp
 800899a:	2300      	movs	r3, #0
 800899c:	f018 0f01 	tst.w	r8, #1
 80089a0:	d004      	beq.n	80089ac <_strtod_l+0x5dc>
 80089a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	2301      	movs	r3, #1
 80089ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80089b0:	f109 0908 	add.w	r9, r9, #8
 80089b4:	d1f2      	bne.n	800899c <_strtod_l+0x5cc>
 80089b6:	b10b      	cbz	r3, 80089bc <_strtod_l+0x5ec>
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	b1bb      	cbz	r3, 80089f0 <_strtod_l+0x620>
 80089c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80089c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	4659      	mov	r1, fp
 80089cc:	dd10      	ble.n	80089f0 <_strtod_l+0x620>
 80089ce:	2b1f      	cmp	r3, #31
 80089d0:	f340 8128 	ble.w	8008c24 <_strtod_l+0x854>
 80089d4:	2b34      	cmp	r3, #52	; 0x34
 80089d6:	bfde      	ittt	le
 80089d8:	3b20      	suble	r3, #32
 80089da:	f04f 32ff 	movle.w	r2, #4294967295
 80089de:	fa02 f303 	lslle.w	r3, r2, r3
 80089e2:	f04f 0a00 	mov.w	sl, #0
 80089e6:	bfcc      	ite	gt
 80089e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80089ec:	ea03 0b01 	andle.w	fp, r3, r1
 80089f0:	2200      	movs	r2, #0
 80089f2:	2300      	movs	r3, #0
 80089f4:	4650      	mov	r0, sl
 80089f6:	4659      	mov	r1, fp
 80089f8:	f7f8 f866 	bl	8000ac8 <__aeabi_dcmpeq>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d1a4      	bne.n	800894a <_strtod_l+0x57a>
 8008a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a06:	462b      	mov	r3, r5
 8008a08:	463a      	mov	r2, r7
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f001 fe38 	bl	800a680 <__s2b>
 8008a10:	9009      	str	r0, [sp, #36]	; 0x24
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f43f af24 	beq.w	8008860 <_strtod_l+0x490>
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	1b9e      	subs	r6, r3, r6
 8008a1c:	9b08      	ldr	r3, [sp, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfb4      	ite	lt
 8008a22:	4633      	movlt	r3, r6
 8008a24:	2300      	movge	r3, #0
 8008a26:	9310      	str	r3, [sp, #64]	; 0x40
 8008a28:	9b08      	ldr	r3, [sp, #32]
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a30:	9318      	str	r3, [sp, #96]	; 0x60
 8008a32:	462e      	mov	r6, r5
 8008a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a36:	4620      	mov	r0, r4
 8008a38:	6859      	ldr	r1, [r3, #4]
 8008a3a:	f001 fd75 	bl	800a528 <_Balloc>
 8008a3e:	9007      	str	r0, [sp, #28]
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f43f af11 	beq.w	8008868 <_strtod_l+0x498>
 8008a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	3202      	adds	r2, #2
 8008a4c:	f103 010c 	add.w	r1, r3, #12
 8008a50:	0092      	lsls	r2, r2, #2
 8008a52:	300c      	adds	r0, #12
 8008a54:	f001 fd5a 	bl	800a50c <memcpy>
 8008a58:	ec4b ab10 	vmov	d0, sl, fp
 8008a5c:	aa20      	add	r2, sp, #128	; 0x80
 8008a5e:	a91f      	add	r1, sp, #124	; 0x7c
 8008a60:	4620      	mov	r0, r4
 8008a62:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008a66:	f002 f947 	bl	800acf8 <__d2b>
 8008a6a:	901e      	str	r0, [sp, #120]	; 0x78
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f43f aefb 	beq.w	8008868 <_strtod_l+0x498>
 8008a72:	2101      	movs	r1, #1
 8008a74:	4620      	mov	r0, r4
 8008a76:	f001 fe9d 	bl	800a7b4 <__i2b>
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f43f aef3 	beq.w	8008868 <_strtod_l+0x498>
 8008a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a84:	9904      	ldr	r1, [sp, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfab      	itete	ge
 8008a8a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008a8c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008a8e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008a90:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008a94:	bfac      	ite	ge
 8008a96:	eb03 0902 	addge.w	r9, r3, r2
 8008a9a:	1ad7      	sublt	r7, r2, r3
 8008a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a9e:	eba3 0801 	sub.w	r8, r3, r1
 8008aa2:	4490      	add	r8, r2
 8008aa4:	4ba3      	ldr	r3, [pc, #652]	; (8008d34 <_strtod_l+0x964>)
 8008aa6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008aaa:	4598      	cmp	r8, r3
 8008aac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ab0:	f280 80cc 	bge.w	8008c4c <_strtod_l+0x87c>
 8008ab4:	eba3 0308 	sub.w	r3, r3, r8
 8008ab8:	2b1f      	cmp	r3, #31
 8008aba:	eba2 0203 	sub.w	r2, r2, r3
 8008abe:	f04f 0101 	mov.w	r1, #1
 8008ac2:	f300 80b6 	bgt.w	8008c32 <_strtod_l+0x862>
 8008ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aca:	9311      	str	r3, [sp, #68]	; 0x44
 8008acc:	2300      	movs	r3, #0
 8008ace:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad0:	eb09 0802 	add.w	r8, r9, r2
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	45c1      	cmp	r9, r8
 8008ad8:	4417      	add	r7, r2
 8008ada:	441f      	add	r7, r3
 8008adc:	464b      	mov	r3, r9
 8008ade:	bfa8      	it	ge
 8008ae0:	4643      	movge	r3, r8
 8008ae2:	42bb      	cmp	r3, r7
 8008ae4:	bfa8      	it	ge
 8008ae6:	463b      	movge	r3, r7
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bfc2      	ittt	gt
 8008aec:	eba8 0803 	subgt.w	r8, r8, r3
 8008af0:	1aff      	subgt	r7, r7, r3
 8008af2:	eba9 0903 	subgt.w	r9, r9, r3
 8008af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dd17      	ble.n	8008b2c <_strtod_l+0x75c>
 8008afc:	4631      	mov	r1, r6
 8008afe:	461a      	mov	r2, r3
 8008b00:	4620      	mov	r0, r4
 8008b02:	f001 ff13 	bl	800a92c <__pow5mult>
 8008b06:	4606      	mov	r6, r0
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	f43f aead 	beq.w	8008868 <_strtod_l+0x498>
 8008b0e:	4601      	mov	r1, r0
 8008b10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b12:	4620      	mov	r0, r4
 8008b14:	f001 fe64 	bl	800a7e0 <__multiply>
 8008b18:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f43f aea4 	beq.w	8008868 <_strtod_l+0x498>
 8008b20:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b22:	4620      	mov	r0, r4
 8008b24:	f001 fd40 	bl	800a5a8 <_Bfree>
 8008b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b2a:	931e      	str	r3, [sp, #120]	; 0x78
 8008b2c:	f1b8 0f00 	cmp.w	r8, #0
 8008b30:	f300 8091 	bgt.w	8008c56 <_strtod_l+0x886>
 8008b34:	9b08      	ldr	r3, [sp, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd08      	ble.n	8008b4c <_strtod_l+0x77c>
 8008b3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b3c:	9907      	ldr	r1, [sp, #28]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 fef4 	bl	800a92c <__pow5mult>
 8008b44:	9007      	str	r0, [sp, #28]
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f43f ae8e 	beq.w	8008868 <_strtod_l+0x498>
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	dd08      	ble.n	8008b62 <_strtod_l+0x792>
 8008b50:	9907      	ldr	r1, [sp, #28]
 8008b52:	463a      	mov	r2, r7
 8008b54:	4620      	mov	r0, r4
 8008b56:	f001 ff43 	bl	800a9e0 <__lshift>
 8008b5a:	9007      	str	r0, [sp, #28]
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f43f ae83 	beq.w	8008868 <_strtod_l+0x498>
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	dd08      	ble.n	8008b7a <_strtod_l+0x7aa>
 8008b68:	4631      	mov	r1, r6
 8008b6a:	464a      	mov	r2, r9
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f001 ff37 	bl	800a9e0 <__lshift>
 8008b72:	4606      	mov	r6, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f43f ae77 	beq.w	8008868 <_strtod_l+0x498>
 8008b7a:	9a07      	ldr	r2, [sp, #28]
 8008b7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f001 ffb6 	bl	800aaf0 <__mdiff>
 8008b84:	4605      	mov	r5, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f43f ae6e 	beq.w	8008868 <_strtod_l+0x498>
 8008b8c:	68c3      	ldr	r3, [r0, #12]
 8008b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b90:	2300      	movs	r3, #0
 8008b92:	60c3      	str	r3, [r0, #12]
 8008b94:	4631      	mov	r1, r6
 8008b96:	f001 ff8f 	bl	800aab8 <__mcmp>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	da65      	bge.n	8008c6a <_strtod_l+0x89a>
 8008b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ba0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ba4:	f040 8087 	bne.w	8008cb6 <_strtod_l+0x8e6>
 8008ba8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f040 8082 	bne.w	8008cb6 <_strtod_l+0x8e6>
 8008bb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb6:	0d1b      	lsrs	r3, r3, #20
 8008bb8:	051b      	lsls	r3, r3, #20
 8008bba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bbe:	d97a      	bls.n	8008cb6 <_strtod_l+0x8e6>
 8008bc0:	696b      	ldr	r3, [r5, #20]
 8008bc2:	b913      	cbnz	r3, 8008bca <_strtod_l+0x7fa>
 8008bc4:	692b      	ldr	r3, [r5, #16]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	dd75      	ble.n	8008cb6 <_strtod_l+0x8e6>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	2201      	movs	r2, #1
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 ff06 	bl	800a9e0 <__lshift>
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	f001 ff6e 	bl	800aab8 <__mcmp>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	dd6a      	ble.n	8008cb6 <_strtod_l+0x8e6>
 8008be0:	9904      	ldr	r1, [sp, #16]
 8008be2:	4a55      	ldr	r2, [pc, #340]	; (8008d38 <_strtod_l+0x968>)
 8008be4:	465b      	mov	r3, fp
 8008be6:	2900      	cmp	r1, #0
 8008be8:	f000 8085 	beq.w	8008cf6 <_strtod_l+0x926>
 8008bec:	ea02 010b 	and.w	r1, r2, fp
 8008bf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bf4:	dc7f      	bgt.n	8008cf6 <_strtod_l+0x926>
 8008bf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bfa:	f77f aeaa 	ble.w	8008952 <_strtod_l+0x582>
 8008bfe:	4a4f      	ldr	r2, [pc, #316]	; (8008d3c <_strtod_l+0x96c>)
 8008c00:	2300      	movs	r3, #0
 8008c02:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008c06:	4650      	mov	r0, sl
 8008c08:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	460b      	mov	r3, r1
 8008c14:	4303      	orrs	r3, r0
 8008c16:	bf08      	it	eq
 8008c18:	2322      	moveq	r3, #34	; 0x22
 8008c1a:	4682      	mov	sl, r0
 8008c1c:	468b      	mov	fp, r1
 8008c1e:	bf08      	it	eq
 8008c20:	6023      	streq	r3, [r4, #0]
 8008c22:	e62b      	b.n	800887c <_strtod_l+0x4ac>
 8008c24:	f04f 32ff 	mov.w	r2, #4294967295
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	ea03 0a0a 	and.w	sl, r3, sl
 8008c30:	e6de      	b.n	80089f0 <_strtod_l+0x620>
 8008c32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c42:	fa01 f308 	lsl.w	r3, r1, r8
 8008c46:	930c      	str	r3, [sp, #48]	; 0x30
 8008c48:	9111      	str	r1, [sp, #68]	; 0x44
 8008c4a:	e741      	b.n	8008ad0 <_strtod_l+0x700>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c50:	2301      	movs	r3, #1
 8008c52:	9311      	str	r3, [sp, #68]	; 0x44
 8008c54:	e73c      	b.n	8008ad0 <_strtod_l+0x700>
 8008c56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c58:	4642      	mov	r2, r8
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f001 fec0 	bl	800a9e0 <__lshift>
 8008c60:	901e      	str	r0, [sp, #120]	; 0x78
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f47f af66 	bne.w	8008b34 <_strtod_l+0x764>
 8008c68:	e5fe      	b.n	8008868 <_strtod_l+0x498>
 8008c6a:	465f      	mov	r7, fp
 8008c6c:	d16e      	bne.n	8008d4c <_strtod_l+0x97c>
 8008c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c74:	b342      	cbz	r2, 8008cc8 <_strtod_l+0x8f8>
 8008c76:	4a32      	ldr	r2, [pc, #200]	; (8008d40 <_strtod_l+0x970>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d128      	bne.n	8008cce <_strtod_l+0x8fe>
 8008c7c:	9b04      	ldr	r3, [sp, #16]
 8008c7e:	4650      	mov	r0, sl
 8008c80:	b1eb      	cbz	r3, 8008cbe <_strtod_l+0x8ee>
 8008c82:	4a2d      	ldr	r2, [pc, #180]	; (8008d38 <_strtod_l+0x968>)
 8008c84:	403a      	ands	r2, r7
 8008c86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c8e:	d819      	bhi.n	8008cc4 <_strtod_l+0x8f4>
 8008c90:	0d12      	lsrs	r2, r2, #20
 8008c92:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c96:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	d117      	bne.n	8008cce <_strtod_l+0x8fe>
 8008c9e:	4b29      	ldr	r3, [pc, #164]	; (8008d44 <_strtod_l+0x974>)
 8008ca0:	429f      	cmp	r7, r3
 8008ca2:	d102      	bne.n	8008caa <_strtod_l+0x8da>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f43f addf 	beq.w	8008868 <_strtod_l+0x498>
 8008caa:	4b23      	ldr	r3, [pc, #140]	; (8008d38 <_strtod_l+0x968>)
 8008cac:	403b      	ands	r3, r7
 8008cae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008cb2:	f04f 0a00 	mov.w	sl, #0
 8008cb6:	9b04      	ldr	r3, [sp, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1a0      	bne.n	8008bfe <_strtod_l+0x82e>
 8008cbc:	e5de      	b.n	800887c <_strtod_l+0x4ac>
 8008cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc2:	e7ea      	b.n	8008c9a <_strtod_l+0x8ca>
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	e7e8      	b.n	8008c9a <_strtod_l+0x8ca>
 8008cc8:	ea53 030a 	orrs.w	r3, r3, sl
 8008ccc:	d088      	beq.n	8008be0 <_strtod_l+0x810>
 8008cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd0:	b1db      	cbz	r3, 8008d0a <_strtod_l+0x93a>
 8008cd2:	423b      	tst	r3, r7
 8008cd4:	d0ef      	beq.n	8008cb6 <_strtod_l+0x8e6>
 8008cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cd8:	9a04      	ldr	r2, [sp, #16]
 8008cda:	4650      	mov	r0, sl
 8008cdc:	4659      	mov	r1, fp
 8008cde:	b1c3      	cbz	r3, 8008d12 <_strtod_l+0x942>
 8008ce0:	f7ff fb58 	bl	8008394 <sulp>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cec:	f7f7 face 	bl	800028c <__adddf3>
 8008cf0:	4682      	mov	sl, r0
 8008cf2:	468b      	mov	fp, r1
 8008cf4:	e7df      	b.n	8008cb6 <_strtod_l+0x8e6>
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008cfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d04:	f04f 3aff 	mov.w	sl, #4294967295
 8008d08:	e7d5      	b.n	8008cb6 <_strtod_l+0x8e6>
 8008d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d0c:	ea13 0f0a 	tst.w	r3, sl
 8008d10:	e7e0      	b.n	8008cd4 <_strtod_l+0x904>
 8008d12:	f7ff fb3f 	bl	8008394 <sulp>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d1e:	f7f7 fab3 	bl	8000288 <__aeabi_dsub>
 8008d22:	2200      	movs	r2, #0
 8008d24:	2300      	movs	r3, #0
 8008d26:	4682      	mov	sl, r0
 8008d28:	468b      	mov	fp, r1
 8008d2a:	f7f7 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d0c1      	beq.n	8008cb6 <_strtod_l+0x8e6>
 8008d32:	e60e      	b.n	8008952 <_strtod_l+0x582>
 8008d34:	fffffc02 	.word	0xfffffc02
 8008d38:	7ff00000 	.word	0x7ff00000
 8008d3c:	39500000 	.word	0x39500000
 8008d40:	000fffff 	.word	0x000fffff
 8008d44:	7fefffff 	.word	0x7fefffff
 8008d48:	0800eac0 	.word	0x0800eac0
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f002 f82e 	bl	800adb0 <__ratio>
 8008d54:	ec59 8b10 	vmov	r8, r9, d0
 8008d58:	ee10 0a10 	vmov	r0, s0
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 fec4 	bl	8000af0 <__aeabi_dcmple>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d07c      	beq.n	8008e66 <_strtod_l+0xa96>
 8008d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d04c      	beq.n	8008e0c <_strtod_l+0xa3c>
 8008d72:	4b95      	ldr	r3, [pc, #596]	; (8008fc8 <_strtod_l+0xbf8>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008fc8 <_strtod_l+0xbf8>
 8008d7e:	f04f 0800 	mov.w	r8, #0
 8008d82:	4b92      	ldr	r3, [pc, #584]	; (8008fcc <_strtod_l+0xbfc>)
 8008d84:	403b      	ands	r3, r7
 8008d86:	9311      	str	r3, [sp, #68]	; 0x44
 8008d88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d8a:	4b91      	ldr	r3, [pc, #580]	; (8008fd0 <_strtod_l+0xc00>)
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f040 80b2 	bne.w	8008ef6 <_strtod_l+0xb26>
 8008d92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d9a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008d9e:	ec4b ab10 	vmov	d0, sl, fp
 8008da2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008da6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008daa:	f001 ff29 	bl	800ac00 <__ulp>
 8008dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008db2:	ec53 2b10 	vmov	r2, r3, d0
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	4652      	mov	r2, sl
 8008dbc:	465b      	mov	r3, fp
 8008dbe:	f7f7 fa65 	bl	800028c <__adddf3>
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4981      	ldr	r1, [pc, #516]	; (8008fcc <_strtod_l+0xbfc>)
 8008dc6:	4a83      	ldr	r2, [pc, #524]	; (8008fd4 <_strtod_l+0xc04>)
 8008dc8:	4019      	ands	r1, r3
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	4682      	mov	sl, r0
 8008dce:	d95e      	bls.n	8008e8e <_strtod_l+0xabe>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d103      	bne.n	8008de2 <_strtod_l+0xa12>
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	3301      	adds	r3, #1
 8008dde:	f43f ad43 	beq.w	8008868 <_strtod_l+0x498>
 8008de2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008fe0 <_strtod_l+0xc10>
 8008de6:	f04f 3aff 	mov.w	sl, #4294967295
 8008dea:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008dec:	4620      	mov	r0, r4
 8008dee:	f001 fbdb 	bl	800a5a8 <_Bfree>
 8008df2:	9907      	ldr	r1, [sp, #28]
 8008df4:	4620      	mov	r0, r4
 8008df6:	f001 fbd7 	bl	800a5a8 <_Bfree>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f001 fbd3 	bl	800a5a8 <_Bfree>
 8008e02:	4629      	mov	r1, r5
 8008e04:	4620      	mov	r0, r4
 8008e06:	f001 fbcf 	bl	800a5a8 <_Bfree>
 8008e0a:	e613      	b.n	8008a34 <_strtod_l+0x664>
 8008e0c:	f1ba 0f00 	cmp.w	sl, #0
 8008e10:	d11b      	bne.n	8008e4a <_strtod_l+0xa7a>
 8008e12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e16:	b9f3      	cbnz	r3, 8008e56 <_strtod_l+0xa86>
 8008e18:	4b6b      	ldr	r3, [pc, #428]	; (8008fc8 <_strtod_l+0xbf8>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	4649      	mov	r1, r9
 8008e20:	f7f7 fe5c 	bl	8000adc <__aeabi_dcmplt>
 8008e24:	b9d0      	cbnz	r0, 8008e5c <_strtod_l+0xa8c>
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4b6b      	ldr	r3, [pc, #428]	; (8008fd8 <_strtod_l+0xc08>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	4680      	mov	r8, r0
 8008e34:	4689      	mov	r9, r1
 8008e36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e3a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008e3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e40:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008e44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008e48:	e79b      	b.n	8008d82 <_strtod_l+0x9b2>
 8008e4a:	f1ba 0f01 	cmp.w	sl, #1
 8008e4e:	d102      	bne.n	8008e56 <_strtod_l+0xa86>
 8008e50:	2f00      	cmp	r7, #0
 8008e52:	f43f ad7e 	beq.w	8008952 <_strtod_l+0x582>
 8008e56:	4b61      	ldr	r3, [pc, #388]	; (8008fdc <_strtod_l+0xc0c>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	e78c      	b.n	8008d76 <_strtod_l+0x9a6>
 8008e5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008fd8 <_strtod_l+0xc08>
 8008e60:	f04f 0800 	mov.w	r8, #0
 8008e64:	e7e7      	b.n	8008e36 <_strtod_l+0xa66>
 8008e66:	4b5c      	ldr	r3, [pc, #368]	; (8008fd8 <_strtod_l+0xc08>)
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f7f7 fbc3 	bl	80005f8 <__aeabi_dmul>
 8008e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e74:	4680      	mov	r8, r0
 8008e76:	4689      	mov	r9, r1
 8008e78:	b933      	cbnz	r3, 8008e88 <_strtod_l+0xab8>
 8008e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e7e:	9012      	str	r0, [sp, #72]	; 0x48
 8008e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008e86:	e7dd      	b.n	8008e44 <_strtod_l+0xa74>
 8008e88:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008e8c:	e7f9      	b.n	8008e82 <_strtod_l+0xab2>
 8008e8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1a8      	bne.n	8008dea <_strtod_l+0xa1a>
 8008e98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e9e:	0d1b      	lsrs	r3, r3, #20
 8008ea0:	051b      	lsls	r3, r3, #20
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d1a1      	bne.n	8008dea <_strtod_l+0xa1a>
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 ff05 	bl	8000cb8 <__aeabi_d2lz>
 8008eae:	f7f7 fb75 	bl	800059c <__aeabi_l2d>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 f9e5 	bl	8000288 <__aeabi_dsub>
 8008ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ec4:	ea43 030a 	orr.w	r3, r3, sl
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	4680      	mov	r8, r0
 8008ecc:	4689      	mov	r9, r1
 8008ece:	d053      	beq.n	8008f78 <_strtod_l+0xba8>
 8008ed0:	a335      	add	r3, pc, #212	; (adr r3, 8008fa8 <_strtod_l+0xbd8>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fe01 	bl	8000adc <__aeabi_dcmplt>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	f47f acce 	bne.w	800887c <_strtod_l+0x4ac>
 8008ee0:	a333      	add	r3, pc, #204	; (adr r3, 8008fb0 <_strtod_l+0xbe0>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4649      	mov	r1, r9
 8008eea:	f7f7 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f af7b 	beq.w	8008dea <_strtod_l+0xa1a>
 8008ef4:	e4c2      	b.n	800887c <_strtod_l+0x4ac>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	b333      	cbz	r3, 8008f48 <_strtod_l+0xb78>
 8008efa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008efc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f00:	d822      	bhi.n	8008f48 <_strtod_l+0xb78>
 8008f02:	a32d      	add	r3, pc, #180	; (adr r3, 8008fb8 <_strtod_l+0xbe8>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fdf0 	bl	8000af0 <__aeabi_dcmple>
 8008f10:	b1a0      	cbz	r0, 8008f3c <_strtod_l+0xb6c>
 8008f12:	4649      	mov	r1, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	f7f7 fe47 	bl	8000ba8 <__aeabi_d2uiz>
 8008f1a:	2801      	cmp	r0, #1
 8008f1c:	bf38      	it	cc
 8008f1e:	2001      	movcc	r0, #1
 8008f20:	f7f7 faf0 	bl	8000504 <__aeabi_ui2d>
 8008f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f26:	4680      	mov	r8, r0
 8008f28:	4689      	mov	r9, r1
 8008f2a:	bb13      	cbnz	r3, 8008f72 <_strtod_l+0xba2>
 8008f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f30:	9014      	str	r0, [sp, #80]	; 0x50
 8008f32:	9315      	str	r3, [sp, #84]	; 0x54
 8008f34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008f38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f44:	1a9b      	subs	r3, r3, r2
 8008f46:	930d      	str	r3, [sp, #52]	; 0x34
 8008f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008f50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f54:	f001 fe54 	bl	800ac00 <__ulp>
 8008f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f5c:	ec53 2b10 	vmov	r2, r3, d0
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f68:	f7f7 f990 	bl	800028c <__adddf3>
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	468b      	mov	fp, r1
 8008f70:	e78f      	b.n	8008e92 <_strtod_l+0xac2>
 8008f72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008f76:	e7dd      	b.n	8008f34 <_strtod_l+0xb64>
 8008f78:	a311      	add	r3, pc, #68	; (adr r3, 8008fc0 <_strtod_l+0xbf0>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f7f7 fdad 	bl	8000adc <__aeabi_dcmplt>
 8008f82:	e7b4      	b.n	8008eee <_strtod_l+0xb1e>
 8008f84:	2300      	movs	r3, #0
 8008f86:	930e      	str	r3, [sp, #56]	; 0x38
 8008f88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	f7ff ba65 	b.w	800845c <_strtod_l+0x8c>
 8008f92:	2b65      	cmp	r3, #101	; 0x65
 8008f94:	f43f ab5d 	beq.w	8008652 <_strtod_l+0x282>
 8008f98:	2b45      	cmp	r3, #69	; 0x45
 8008f9a:	f43f ab5a 	beq.w	8008652 <_strtod_l+0x282>
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f7ff bb92 	b.w	80086c8 <_strtod_l+0x2f8>
 8008fa4:	f3af 8000 	nop.w
 8008fa8:	94a03595 	.word	0x94a03595
 8008fac:	3fdfffff 	.word	0x3fdfffff
 8008fb0:	35afe535 	.word	0x35afe535
 8008fb4:	3fe00000 	.word	0x3fe00000
 8008fb8:	ffc00000 	.word	0xffc00000
 8008fbc:	41dfffff 	.word	0x41dfffff
 8008fc0:	94a03595 	.word	0x94a03595
 8008fc4:	3fcfffff 	.word	0x3fcfffff
 8008fc8:	3ff00000 	.word	0x3ff00000
 8008fcc:	7ff00000 	.word	0x7ff00000
 8008fd0:	7fe00000 	.word	0x7fe00000
 8008fd4:	7c9fffff 	.word	0x7c9fffff
 8008fd8:	3fe00000 	.word	0x3fe00000
 8008fdc:	bff00000 	.word	0xbff00000
 8008fe0:	7fefffff 	.word	0x7fefffff

08008fe4 <_strtod_r>:
 8008fe4:	4b01      	ldr	r3, [pc, #4]	; (8008fec <_strtod_r+0x8>)
 8008fe6:	f7ff b9f3 	b.w	80083d0 <_strtod_l>
 8008fea:	bf00      	nop
 8008fec:	200001c8 	.word	0x200001c8

08008ff0 <_strtol_l.isra.0>:
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff6:	d001      	beq.n	8008ffc <_strtol_l.isra.0+0xc>
 8008ff8:	2b24      	cmp	r3, #36	; 0x24
 8008ffa:	d906      	bls.n	800900a <_strtol_l.isra.0+0x1a>
 8008ffc:	f7fe faf8 	bl	80075f0 <__errno>
 8009000:	2316      	movs	r3, #22
 8009002:	6003      	str	r3, [r0, #0]
 8009004:	2000      	movs	r0, #0
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900a:	4f3a      	ldr	r7, [pc, #232]	; (80090f4 <_strtol_l.isra.0+0x104>)
 800900c:	468e      	mov	lr, r1
 800900e:	4676      	mov	r6, lr
 8009010:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009014:	5de5      	ldrb	r5, [r4, r7]
 8009016:	f015 0508 	ands.w	r5, r5, #8
 800901a:	d1f8      	bne.n	800900e <_strtol_l.isra.0+0x1e>
 800901c:	2c2d      	cmp	r4, #45	; 0x2d
 800901e:	d134      	bne.n	800908a <_strtol_l.isra.0+0x9a>
 8009020:	f89e 4000 	ldrb.w	r4, [lr]
 8009024:	f04f 0801 	mov.w	r8, #1
 8009028:	f106 0e02 	add.w	lr, r6, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d05c      	beq.n	80090ea <_strtol_l.isra.0+0xfa>
 8009030:	2b10      	cmp	r3, #16
 8009032:	d10c      	bne.n	800904e <_strtol_l.isra.0+0x5e>
 8009034:	2c30      	cmp	r4, #48	; 0x30
 8009036:	d10a      	bne.n	800904e <_strtol_l.isra.0+0x5e>
 8009038:	f89e 4000 	ldrb.w	r4, [lr]
 800903c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009040:	2c58      	cmp	r4, #88	; 0x58
 8009042:	d14d      	bne.n	80090e0 <_strtol_l.isra.0+0xf0>
 8009044:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009048:	2310      	movs	r3, #16
 800904a:	f10e 0e02 	add.w	lr, lr, #2
 800904e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009052:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009056:	2600      	movs	r6, #0
 8009058:	fbbc f9f3 	udiv	r9, ip, r3
 800905c:	4635      	mov	r5, r6
 800905e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009062:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009066:	2f09      	cmp	r7, #9
 8009068:	d818      	bhi.n	800909c <_strtol_l.isra.0+0xac>
 800906a:	463c      	mov	r4, r7
 800906c:	42a3      	cmp	r3, r4
 800906e:	dd24      	ble.n	80090ba <_strtol_l.isra.0+0xca>
 8009070:	2e00      	cmp	r6, #0
 8009072:	db1f      	blt.n	80090b4 <_strtol_l.isra.0+0xc4>
 8009074:	45a9      	cmp	r9, r5
 8009076:	d31d      	bcc.n	80090b4 <_strtol_l.isra.0+0xc4>
 8009078:	d101      	bne.n	800907e <_strtol_l.isra.0+0x8e>
 800907a:	45a2      	cmp	sl, r4
 800907c:	db1a      	blt.n	80090b4 <_strtol_l.isra.0+0xc4>
 800907e:	fb05 4503 	mla	r5, r5, r3, r4
 8009082:	2601      	movs	r6, #1
 8009084:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009088:	e7eb      	b.n	8009062 <_strtol_l.isra.0+0x72>
 800908a:	2c2b      	cmp	r4, #43	; 0x2b
 800908c:	bf08      	it	eq
 800908e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009092:	46a8      	mov	r8, r5
 8009094:	bf08      	it	eq
 8009096:	f106 0e02 	addeq.w	lr, r6, #2
 800909a:	e7c7      	b.n	800902c <_strtol_l.isra.0+0x3c>
 800909c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80090a0:	2f19      	cmp	r7, #25
 80090a2:	d801      	bhi.n	80090a8 <_strtol_l.isra.0+0xb8>
 80090a4:	3c37      	subs	r4, #55	; 0x37
 80090a6:	e7e1      	b.n	800906c <_strtol_l.isra.0+0x7c>
 80090a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80090ac:	2f19      	cmp	r7, #25
 80090ae:	d804      	bhi.n	80090ba <_strtol_l.isra.0+0xca>
 80090b0:	3c57      	subs	r4, #87	; 0x57
 80090b2:	e7db      	b.n	800906c <_strtol_l.isra.0+0x7c>
 80090b4:	f04f 36ff 	mov.w	r6, #4294967295
 80090b8:	e7e4      	b.n	8009084 <_strtol_l.isra.0+0x94>
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	da05      	bge.n	80090ca <_strtol_l.isra.0+0xda>
 80090be:	2322      	movs	r3, #34	; 0x22
 80090c0:	6003      	str	r3, [r0, #0]
 80090c2:	4665      	mov	r5, ip
 80090c4:	b942      	cbnz	r2, 80090d8 <_strtol_l.isra.0+0xe8>
 80090c6:	4628      	mov	r0, r5
 80090c8:	e79d      	b.n	8009006 <_strtol_l.isra.0+0x16>
 80090ca:	f1b8 0f00 	cmp.w	r8, #0
 80090ce:	d000      	beq.n	80090d2 <_strtol_l.isra.0+0xe2>
 80090d0:	426d      	negs	r5, r5
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	d0f7      	beq.n	80090c6 <_strtol_l.isra.0+0xd6>
 80090d6:	b10e      	cbz	r6, 80090dc <_strtol_l.isra.0+0xec>
 80090d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80090dc:	6011      	str	r1, [r2, #0]
 80090de:	e7f2      	b.n	80090c6 <_strtol_l.isra.0+0xd6>
 80090e0:	2430      	movs	r4, #48	; 0x30
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1b3      	bne.n	800904e <_strtol_l.isra.0+0x5e>
 80090e6:	2308      	movs	r3, #8
 80090e8:	e7b1      	b.n	800904e <_strtol_l.isra.0+0x5e>
 80090ea:	2c30      	cmp	r4, #48	; 0x30
 80090ec:	d0a4      	beq.n	8009038 <_strtol_l.isra.0+0x48>
 80090ee:	230a      	movs	r3, #10
 80090f0:	e7ad      	b.n	800904e <_strtol_l.isra.0+0x5e>
 80090f2:	bf00      	nop
 80090f4:	0800eae9 	.word	0x0800eae9

080090f8 <_strtol_r>:
 80090f8:	f7ff bf7a 	b.w	8008ff0 <_strtol_l.isra.0>

080090fc <quorem>:
 80090fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	6903      	ldr	r3, [r0, #16]
 8009102:	690c      	ldr	r4, [r1, #16]
 8009104:	42a3      	cmp	r3, r4
 8009106:	4607      	mov	r7, r0
 8009108:	f2c0 8081 	blt.w	800920e <quorem+0x112>
 800910c:	3c01      	subs	r4, #1
 800910e:	f101 0814 	add.w	r8, r1, #20
 8009112:	f100 0514 	add.w	r5, r0, #20
 8009116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009124:	3301      	adds	r3, #1
 8009126:	429a      	cmp	r2, r3
 8009128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800912c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009130:	fbb2 f6f3 	udiv	r6, r2, r3
 8009134:	d331      	bcc.n	800919a <quorem+0x9e>
 8009136:	f04f 0e00 	mov.w	lr, #0
 800913a:	4640      	mov	r0, r8
 800913c:	46ac      	mov	ip, r5
 800913e:	46f2      	mov	sl, lr
 8009140:	f850 2b04 	ldr.w	r2, [r0], #4
 8009144:	b293      	uxth	r3, r2
 8009146:	fb06 e303 	mla	r3, r6, r3, lr
 800914a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800914e:	b29b      	uxth	r3, r3
 8009150:	ebaa 0303 	sub.w	r3, sl, r3
 8009154:	0c12      	lsrs	r2, r2, #16
 8009156:	f8dc a000 	ldr.w	sl, [ip]
 800915a:	fb06 e202 	mla	r2, r6, r2, lr
 800915e:	fa13 f38a 	uxtah	r3, r3, sl
 8009162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009166:	fa1f fa82 	uxth.w	sl, r2
 800916a:	f8dc 2000 	ldr.w	r2, [ip]
 800916e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009176:	b29b      	uxth	r3, r3
 8009178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800917c:	4581      	cmp	r9, r0
 800917e:	f84c 3b04 	str.w	r3, [ip], #4
 8009182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009186:	d2db      	bcs.n	8009140 <quorem+0x44>
 8009188:	f855 300b 	ldr.w	r3, [r5, fp]
 800918c:	b92b      	cbnz	r3, 800919a <quorem+0x9e>
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	3b04      	subs	r3, #4
 8009192:	429d      	cmp	r5, r3
 8009194:	461a      	mov	r2, r3
 8009196:	d32e      	bcc.n	80091f6 <quorem+0xfa>
 8009198:	613c      	str	r4, [r7, #16]
 800919a:	4638      	mov	r0, r7
 800919c:	f001 fc8c 	bl	800aab8 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	db24      	blt.n	80091ee <quorem+0xf2>
 80091a4:	3601      	adds	r6, #1
 80091a6:	4628      	mov	r0, r5
 80091a8:	f04f 0c00 	mov.w	ip, #0
 80091ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80091b0:	f8d0 e000 	ldr.w	lr, [r0]
 80091b4:	b293      	uxth	r3, r2
 80091b6:	ebac 0303 	sub.w	r3, ip, r3
 80091ba:	0c12      	lsrs	r2, r2, #16
 80091bc:	fa13 f38e 	uxtah	r3, r3, lr
 80091c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ce:	45c1      	cmp	r9, r8
 80091d0:	f840 3b04 	str.w	r3, [r0], #4
 80091d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091d8:	d2e8      	bcs.n	80091ac <quorem+0xb0>
 80091da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091e2:	b922      	cbnz	r2, 80091ee <quorem+0xf2>
 80091e4:	3b04      	subs	r3, #4
 80091e6:	429d      	cmp	r5, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	d30a      	bcc.n	8009202 <quorem+0x106>
 80091ec:	613c      	str	r4, [r7, #16]
 80091ee:	4630      	mov	r0, r6
 80091f0:	b003      	add	sp, #12
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	d1cc      	bne.n	8009198 <quorem+0x9c>
 80091fe:	3c01      	subs	r4, #1
 8009200:	e7c7      	b.n	8009192 <quorem+0x96>
 8009202:	6812      	ldr	r2, [r2, #0]
 8009204:	3b04      	subs	r3, #4
 8009206:	2a00      	cmp	r2, #0
 8009208:	d1f0      	bne.n	80091ec <quorem+0xf0>
 800920a:	3c01      	subs	r4, #1
 800920c:	e7eb      	b.n	80091e6 <quorem+0xea>
 800920e:	2000      	movs	r0, #0
 8009210:	e7ee      	b.n	80091f0 <quorem+0xf4>
 8009212:	0000      	movs	r0, r0
 8009214:	0000      	movs	r0, r0
	...

08009218 <_dtoa_r>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	ed2d 8b02 	vpush	{d8}
 8009220:	ec57 6b10 	vmov	r6, r7, d0
 8009224:	b095      	sub	sp, #84	; 0x54
 8009226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800922c:	9105      	str	r1, [sp, #20]
 800922e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009232:	4604      	mov	r4, r0
 8009234:	9209      	str	r2, [sp, #36]	; 0x24
 8009236:	930f      	str	r3, [sp, #60]	; 0x3c
 8009238:	b975      	cbnz	r5, 8009258 <_dtoa_r+0x40>
 800923a:	2010      	movs	r0, #16
 800923c:	f001 f94c 	bl	800a4d8 <malloc>
 8009240:	4602      	mov	r2, r0
 8009242:	6260      	str	r0, [r4, #36]	; 0x24
 8009244:	b920      	cbnz	r0, 8009250 <_dtoa_r+0x38>
 8009246:	4bb2      	ldr	r3, [pc, #712]	; (8009510 <_dtoa_r+0x2f8>)
 8009248:	21ea      	movs	r1, #234	; 0xea
 800924a:	48b2      	ldr	r0, [pc, #712]	; (8009514 <_dtoa_r+0x2fc>)
 800924c:	f002 f874 	bl	800b338 <__assert_func>
 8009250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009254:	6005      	str	r5, [r0, #0]
 8009256:	60c5      	str	r5, [r0, #12]
 8009258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800925a:	6819      	ldr	r1, [r3, #0]
 800925c:	b151      	cbz	r1, 8009274 <_dtoa_r+0x5c>
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	604a      	str	r2, [r1, #4]
 8009262:	2301      	movs	r3, #1
 8009264:	4093      	lsls	r3, r2
 8009266:	608b      	str	r3, [r1, #8]
 8009268:	4620      	mov	r0, r4
 800926a:	f001 f99d 	bl	800a5a8 <_Bfree>
 800926e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	1e3b      	subs	r3, r7, #0
 8009276:	bfb9      	ittee	lt
 8009278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800927c:	9303      	strlt	r3, [sp, #12]
 800927e:	2300      	movge	r3, #0
 8009280:	f8c8 3000 	strge.w	r3, [r8]
 8009284:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009288:	4ba3      	ldr	r3, [pc, #652]	; (8009518 <_dtoa_r+0x300>)
 800928a:	bfbc      	itt	lt
 800928c:	2201      	movlt	r2, #1
 800928e:	f8c8 2000 	strlt.w	r2, [r8]
 8009292:	ea33 0309 	bics.w	r3, r3, r9
 8009296:	d11b      	bne.n	80092d0 <_dtoa_r+0xb8>
 8009298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800929a:	f242 730f 	movw	r3, #9999	; 0x270f
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092a4:	4333      	orrs	r3, r6
 80092a6:	f000 857a 	beq.w	8009d9e <_dtoa_r+0xb86>
 80092aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ac:	b963      	cbnz	r3, 80092c8 <_dtoa_r+0xb0>
 80092ae:	4b9b      	ldr	r3, [pc, #620]	; (800951c <_dtoa_r+0x304>)
 80092b0:	e024      	b.n	80092fc <_dtoa_r+0xe4>
 80092b2:	4b9b      	ldr	r3, [pc, #620]	; (8009520 <_dtoa_r+0x308>)
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	3308      	adds	r3, #8
 80092b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	9800      	ldr	r0, [sp, #0]
 80092be:	b015      	add	sp, #84	; 0x54
 80092c0:	ecbd 8b02 	vpop	{d8}
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	4b94      	ldr	r3, [pc, #592]	; (800951c <_dtoa_r+0x304>)
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	3303      	adds	r3, #3
 80092ce:	e7f3      	b.n	80092b8 <_dtoa_r+0xa0>
 80092d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092d4:	2200      	movs	r2, #0
 80092d6:	ec51 0b17 	vmov	r0, r1, d7
 80092da:	2300      	movs	r3, #0
 80092dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80092e0:	f7f7 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e4:	4680      	mov	r8, r0
 80092e6:	b158      	cbz	r0, 8009300 <_dtoa_r+0xe8>
 80092e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092ea:	2301      	movs	r3, #1
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8551 	beq.w	8009d98 <_dtoa_r+0xb80>
 80092f6:	488b      	ldr	r0, [pc, #556]	; (8009524 <_dtoa_r+0x30c>)
 80092f8:	6018      	str	r0, [r3, #0]
 80092fa:	1e43      	subs	r3, r0, #1
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	e7dd      	b.n	80092bc <_dtoa_r+0xa4>
 8009300:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009304:	aa12      	add	r2, sp, #72	; 0x48
 8009306:	a913      	add	r1, sp, #76	; 0x4c
 8009308:	4620      	mov	r0, r4
 800930a:	f001 fcf5 	bl	800acf8 <__d2b>
 800930e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009312:	4683      	mov	fp, r0
 8009314:	2d00      	cmp	r5, #0
 8009316:	d07c      	beq.n	8009412 <_dtoa_r+0x1fa>
 8009318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800931a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800931e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009322:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009326:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800932a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800932e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009332:	4b7d      	ldr	r3, [pc, #500]	; (8009528 <_dtoa_r+0x310>)
 8009334:	2200      	movs	r2, #0
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	a36e      	add	r3, pc, #440	; (adr r3, 80094f8 <_dtoa_r+0x2e0>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	a36d      	add	r3, pc, #436	; (adr r3, 8009500 <_dtoa_r+0x2e8>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f6 ff9d 	bl	800028c <__adddf3>
 8009352:	4606      	mov	r6, r0
 8009354:	4628      	mov	r0, r5
 8009356:	460f      	mov	r7, r1
 8009358:	f7f7 f8e4 	bl	8000524 <__aeabi_i2d>
 800935c:	a36a      	add	r3, pc, #424	; (adr r3, 8009508 <_dtoa_r+0x2f0>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4630      	mov	r0, r6
 800936c:	4639      	mov	r1, r7
 800936e:	f7f6 ff8d 	bl	800028c <__adddf3>
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	f7f7 fbef 	bl	8000b58 <__aeabi_d2iz>
 800937a:	2200      	movs	r2, #0
 800937c:	4682      	mov	sl, r0
 800937e:	2300      	movs	r3, #0
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f7 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8009388:	b148      	cbz	r0, 800939e <_dtoa_r+0x186>
 800938a:	4650      	mov	r0, sl
 800938c:	f7f7 f8ca 	bl	8000524 <__aeabi_i2d>
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	f7f7 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8009398:	b908      	cbnz	r0, 800939e <_dtoa_r+0x186>
 800939a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800939e:	f1ba 0f16 	cmp.w	sl, #22
 80093a2:	d854      	bhi.n	800944e <_dtoa_r+0x236>
 80093a4:	4b61      	ldr	r3, [pc, #388]	; (800952c <_dtoa_r+0x314>)
 80093a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093b2:	f7f7 fb93 	bl	8000adc <__aeabi_dcmplt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d04b      	beq.n	8009452 <_dtoa_r+0x23a>
 80093ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093be:	2300      	movs	r3, #0
 80093c0:	930e      	str	r3, [sp, #56]	; 0x38
 80093c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093c4:	1b5d      	subs	r5, r3, r5
 80093c6:	1e6b      	subs	r3, r5, #1
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	bf43      	ittte	mi
 80093cc:	2300      	movmi	r3, #0
 80093ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80093d2:	9304      	strmi	r3, [sp, #16]
 80093d4:	f04f 0800 	movpl.w	r8, #0
 80093d8:	f1ba 0f00 	cmp.w	sl, #0
 80093dc:	db3b      	blt.n	8009456 <_dtoa_r+0x23e>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80093e4:	4453      	add	r3, sl
 80093e6:	9304      	str	r3, [sp, #16]
 80093e8:	2300      	movs	r3, #0
 80093ea:	9306      	str	r3, [sp, #24]
 80093ec:	9b05      	ldr	r3, [sp, #20]
 80093ee:	2b09      	cmp	r3, #9
 80093f0:	d869      	bhi.n	80094c6 <_dtoa_r+0x2ae>
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	bfc4      	itt	gt
 80093f6:	3b04      	subgt	r3, #4
 80093f8:	9305      	strgt	r3, [sp, #20]
 80093fa:	9b05      	ldr	r3, [sp, #20]
 80093fc:	f1a3 0302 	sub.w	r3, r3, #2
 8009400:	bfcc      	ite	gt
 8009402:	2500      	movgt	r5, #0
 8009404:	2501      	movle	r5, #1
 8009406:	2b03      	cmp	r3, #3
 8009408:	d869      	bhi.n	80094de <_dtoa_r+0x2c6>
 800940a:	e8df f003 	tbb	[pc, r3]
 800940e:	4e2c      	.short	0x4e2c
 8009410:	5a4c      	.short	0x5a4c
 8009412:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009416:	441d      	add	r5, r3
 8009418:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800941c:	2b20      	cmp	r3, #32
 800941e:	bfc1      	itttt	gt
 8009420:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009424:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009428:	fa09 f303 	lslgt.w	r3, r9, r3
 800942c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009430:	bfda      	itte	le
 8009432:	f1c3 0320 	rsble	r3, r3, #32
 8009436:	fa06 f003 	lslle.w	r0, r6, r3
 800943a:	4318      	orrgt	r0, r3
 800943c:	f7f7 f862 	bl	8000504 <__aeabi_ui2d>
 8009440:	2301      	movs	r3, #1
 8009442:	4606      	mov	r6, r0
 8009444:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009448:	3d01      	subs	r5, #1
 800944a:	9310      	str	r3, [sp, #64]	; 0x40
 800944c:	e771      	b.n	8009332 <_dtoa_r+0x11a>
 800944e:	2301      	movs	r3, #1
 8009450:	e7b6      	b.n	80093c0 <_dtoa_r+0x1a8>
 8009452:	900e      	str	r0, [sp, #56]	; 0x38
 8009454:	e7b5      	b.n	80093c2 <_dtoa_r+0x1aa>
 8009456:	f1ca 0300 	rsb	r3, sl, #0
 800945a:	9306      	str	r3, [sp, #24]
 800945c:	2300      	movs	r3, #0
 800945e:	eba8 080a 	sub.w	r8, r8, sl
 8009462:	930d      	str	r3, [sp, #52]	; 0x34
 8009464:	e7c2      	b.n	80093ec <_dtoa_r+0x1d4>
 8009466:	2300      	movs	r3, #0
 8009468:	9308      	str	r3, [sp, #32]
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	dc39      	bgt.n	80094e4 <_dtoa_r+0x2cc>
 8009470:	f04f 0901 	mov.w	r9, #1
 8009474:	f8cd 9004 	str.w	r9, [sp, #4]
 8009478:	464b      	mov	r3, r9
 800947a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800947e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009480:	2200      	movs	r2, #0
 8009482:	6042      	str	r2, [r0, #4]
 8009484:	2204      	movs	r2, #4
 8009486:	f102 0614 	add.w	r6, r2, #20
 800948a:	429e      	cmp	r6, r3
 800948c:	6841      	ldr	r1, [r0, #4]
 800948e:	d92f      	bls.n	80094f0 <_dtoa_r+0x2d8>
 8009490:	4620      	mov	r0, r4
 8009492:	f001 f849 	bl	800a528 <_Balloc>
 8009496:	9000      	str	r0, [sp, #0]
 8009498:	2800      	cmp	r0, #0
 800949a:	d14b      	bne.n	8009534 <_dtoa_r+0x31c>
 800949c:	4b24      	ldr	r3, [pc, #144]	; (8009530 <_dtoa_r+0x318>)
 800949e:	4602      	mov	r2, r0
 80094a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094a4:	e6d1      	b.n	800924a <_dtoa_r+0x32>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e7de      	b.n	8009468 <_dtoa_r+0x250>
 80094aa:	2300      	movs	r3, #0
 80094ac:	9308      	str	r3, [sp, #32]
 80094ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b0:	eb0a 0903 	add.w	r9, sl, r3
 80094b4:	f109 0301 	add.w	r3, r9, #1
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	bfb8      	it	lt
 80094be:	2301      	movlt	r3, #1
 80094c0:	e7dd      	b.n	800947e <_dtoa_r+0x266>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e7f2      	b.n	80094ac <_dtoa_r+0x294>
 80094c6:	2501      	movs	r5, #1
 80094c8:	2300      	movs	r3, #0
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	9508      	str	r5, [sp, #32]
 80094ce:	f04f 39ff 	mov.w	r9, #4294967295
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80094d8:	2312      	movs	r3, #18
 80094da:	9209      	str	r2, [sp, #36]	; 0x24
 80094dc:	e7cf      	b.n	800947e <_dtoa_r+0x266>
 80094de:	2301      	movs	r3, #1
 80094e0:	9308      	str	r3, [sp, #32]
 80094e2:	e7f4      	b.n	80094ce <_dtoa_r+0x2b6>
 80094e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80094e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80094ec:	464b      	mov	r3, r9
 80094ee:	e7c6      	b.n	800947e <_dtoa_r+0x266>
 80094f0:	3101      	adds	r1, #1
 80094f2:	6041      	str	r1, [r0, #4]
 80094f4:	0052      	lsls	r2, r2, #1
 80094f6:	e7c6      	b.n	8009486 <_dtoa_r+0x26e>
 80094f8:	636f4361 	.word	0x636f4361
 80094fc:	3fd287a7 	.word	0x3fd287a7
 8009500:	8b60c8b3 	.word	0x8b60c8b3
 8009504:	3fc68a28 	.word	0x3fc68a28
 8009508:	509f79fb 	.word	0x509f79fb
 800950c:	3fd34413 	.word	0x3fd34413
 8009510:	0800ebf6 	.word	0x0800ebf6
 8009514:	0800ec0d 	.word	0x0800ec0d
 8009518:	7ff00000 	.word	0x7ff00000
 800951c:	0800ebf2 	.word	0x0800ebf2
 8009520:	0800ebe9 	.word	0x0800ebe9
 8009524:	0800ea6d 	.word	0x0800ea6d
 8009528:	3ff80000 	.word	0x3ff80000
 800952c:	0800ed88 	.word	0x0800ed88
 8009530:	0800ec6c 	.word	0x0800ec6c
 8009534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009536:	9a00      	ldr	r2, [sp, #0]
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	9b01      	ldr	r3, [sp, #4]
 800953c:	2b0e      	cmp	r3, #14
 800953e:	f200 80ad 	bhi.w	800969c <_dtoa_r+0x484>
 8009542:	2d00      	cmp	r5, #0
 8009544:	f000 80aa 	beq.w	800969c <_dtoa_r+0x484>
 8009548:	f1ba 0f00 	cmp.w	sl, #0
 800954c:	dd36      	ble.n	80095bc <_dtoa_r+0x3a4>
 800954e:	4ac3      	ldr	r2, [pc, #780]	; (800985c <_dtoa_r+0x644>)
 8009550:	f00a 030f 	and.w	r3, sl, #15
 8009554:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009558:	ed93 7b00 	vldr	d7, [r3]
 800955c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009560:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009564:	eeb0 8a47 	vmov.f32	s16, s14
 8009568:	eef0 8a67 	vmov.f32	s17, s15
 800956c:	d016      	beq.n	800959c <_dtoa_r+0x384>
 800956e:	4bbc      	ldr	r3, [pc, #752]	; (8009860 <_dtoa_r+0x648>)
 8009570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009578:	f7f7 f968 	bl	800084c <__aeabi_ddiv>
 800957c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009580:	f007 070f 	and.w	r7, r7, #15
 8009584:	2503      	movs	r5, #3
 8009586:	4eb6      	ldr	r6, [pc, #728]	; (8009860 <_dtoa_r+0x648>)
 8009588:	b957      	cbnz	r7, 80095a0 <_dtoa_r+0x388>
 800958a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800958e:	ec53 2b18 	vmov	r2, r3, d8
 8009592:	f7f7 f95b 	bl	800084c <__aeabi_ddiv>
 8009596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800959a:	e029      	b.n	80095f0 <_dtoa_r+0x3d8>
 800959c:	2502      	movs	r5, #2
 800959e:	e7f2      	b.n	8009586 <_dtoa_r+0x36e>
 80095a0:	07f9      	lsls	r1, r7, #31
 80095a2:	d508      	bpl.n	80095b6 <_dtoa_r+0x39e>
 80095a4:	ec51 0b18 	vmov	r0, r1, d8
 80095a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	ec41 0b18 	vmov	d8, r0, r1
 80095b4:	3501      	adds	r5, #1
 80095b6:	107f      	asrs	r7, r7, #1
 80095b8:	3608      	adds	r6, #8
 80095ba:	e7e5      	b.n	8009588 <_dtoa_r+0x370>
 80095bc:	f000 80a6 	beq.w	800970c <_dtoa_r+0x4f4>
 80095c0:	f1ca 0600 	rsb	r6, sl, #0
 80095c4:	4ba5      	ldr	r3, [pc, #660]	; (800985c <_dtoa_r+0x644>)
 80095c6:	4fa6      	ldr	r7, [pc, #664]	; (8009860 <_dtoa_r+0x648>)
 80095c8:	f006 020f 	and.w	r2, r6, #15
 80095cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095d8:	f7f7 f80e 	bl	80005f8 <__aeabi_dmul>
 80095dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e0:	1136      	asrs	r6, r6, #4
 80095e2:	2300      	movs	r3, #0
 80095e4:	2502      	movs	r5, #2
 80095e6:	2e00      	cmp	r6, #0
 80095e8:	f040 8085 	bne.w	80096f6 <_dtoa_r+0x4de>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1d2      	bne.n	8009596 <_dtoa_r+0x37e>
 80095f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 808c 	beq.w	8009710 <_dtoa_r+0x4f8>
 80095f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095fc:	4b99      	ldr	r3, [pc, #612]	; (8009864 <_dtoa_r+0x64c>)
 80095fe:	2200      	movs	r2, #0
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f7 fa6a 	bl	8000adc <__aeabi_dcmplt>
 8009608:	2800      	cmp	r0, #0
 800960a:	f000 8081 	beq.w	8009710 <_dtoa_r+0x4f8>
 800960e:	9b01      	ldr	r3, [sp, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d07d      	beq.n	8009710 <_dtoa_r+0x4f8>
 8009614:	f1b9 0f00 	cmp.w	r9, #0
 8009618:	dd3c      	ble.n	8009694 <_dtoa_r+0x47c>
 800961a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800961e:	9307      	str	r3, [sp, #28]
 8009620:	2200      	movs	r2, #0
 8009622:	4b91      	ldr	r3, [pc, #580]	; (8009868 <_dtoa_r+0x650>)
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009630:	3501      	adds	r5, #1
 8009632:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009636:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800963a:	4628      	mov	r0, r5
 800963c:	f7f6 ff72 	bl	8000524 <__aeabi_i2d>
 8009640:	4632      	mov	r2, r6
 8009642:	463b      	mov	r3, r7
 8009644:	f7f6 ffd8 	bl	80005f8 <__aeabi_dmul>
 8009648:	4b88      	ldr	r3, [pc, #544]	; (800986c <_dtoa_r+0x654>)
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 fe1e 	bl	800028c <__adddf3>
 8009650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800965c:	2b00      	cmp	r3, #0
 800965e:	d15c      	bne.n	800971a <_dtoa_r+0x502>
 8009660:	4b83      	ldr	r3, [pc, #524]	; (8009870 <_dtoa_r+0x658>)
 8009662:	2200      	movs	r2, #0
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f6 fe0e 	bl	8000288 <__aeabi_dsub>
 800966c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009670:	4606      	mov	r6, r0
 8009672:	460f      	mov	r7, r1
 8009674:	f7f7 fa50 	bl	8000b18 <__aeabi_dcmpgt>
 8009678:	2800      	cmp	r0, #0
 800967a:	f040 8296 	bne.w	8009baa <_dtoa_r+0x992>
 800967e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009682:	4630      	mov	r0, r6
 8009684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009688:	4639      	mov	r1, r7
 800968a:	f7f7 fa27 	bl	8000adc <__aeabi_dcmplt>
 800968e:	2800      	cmp	r0, #0
 8009690:	f040 8288 	bne.w	8009ba4 <_dtoa_r+0x98c>
 8009694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800969c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f2c0 8158 	blt.w	8009954 <_dtoa_r+0x73c>
 80096a4:	f1ba 0f0e 	cmp.w	sl, #14
 80096a8:	f300 8154 	bgt.w	8009954 <_dtoa_r+0x73c>
 80096ac:	4b6b      	ldr	r3, [pc, #428]	; (800985c <_dtoa_r+0x644>)
 80096ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f280 80e3 	bge.w	8009884 <_dtoa_r+0x66c>
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f300 80df 	bgt.w	8009884 <_dtoa_r+0x66c>
 80096c6:	f040 826d 	bne.w	8009ba4 <_dtoa_r+0x98c>
 80096ca:	4b69      	ldr	r3, [pc, #420]	; (8009870 <_dtoa_r+0x658>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	4640      	mov	r0, r8
 80096d0:	4649      	mov	r1, r9
 80096d2:	f7f6 ff91 	bl	80005f8 <__aeabi_dmul>
 80096d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096da:	f7f7 fa13 	bl	8000b04 <__aeabi_dcmpge>
 80096de:	9e01      	ldr	r6, [sp, #4]
 80096e0:	4637      	mov	r7, r6
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f040 8243 	bne.w	8009b6e <_dtoa_r+0x956>
 80096e8:	9d00      	ldr	r5, [sp, #0]
 80096ea:	2331      	movs	r3, #49	; 0x31
 80096ec:	f805 3b01 	strb.w	r3, [r5], #1
 80096f0:	f10a 0a01 	add.w	sl, sl, #1
 80096f4:	e23f      	b.n	8009b76 <_dtoa_r+0x95e>
 80096f6:	07f2      	lsls	r2, r6, #31
 80096f8:	d505      	bpl.n	8009706 <_dtoa_r+0x4ee>
 80096fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	3501      	adds	r5, #1
 8009704:	2301      	movs	r3, #1
 8009706:	1076      	asrs	r6, r6, #1
 8009708:	3708      	adds	r7, #8
 800970a:	e76c      	b.n	80095e6 <_dtoa_r+0x3ce>
 800970c:	2502      	movs	r5, #2
 800970e:	e76f      	b.n	80095f0 <_dtoa_r+0x3d8>
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	f8cd a01c 	str.w	sl, [sp, #28]
 8009716:	930c      	str	r3, [sp, #48]	; 0x30
 8009718:	e78d      	b.n	8009636 <_dtoa_r+0x41e>
 800971a:	9900      	ldr	r1, [sp, #0]
 800971c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800971e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009720:	4b4e      	ldr	r3, [pc, #312]	; (800985c <_dtoa_r+0x644>)
 8009722:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009726:	4401      	add	r1, r0
 8009728:	9102      	str	r1, [sp, #8]
 800972a:	9908      	ldr	r1, [sp, #32]
 800972c:	eeb0 8a47 	vmov.f32	s16, s14
 8009730:	eef0 8a67 	vmov.f32	s17, s15
 8009734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800973c:	2900      	cmp	r1, #0
 800973e:	d045      	beq.n	80097cc <_dtoa_r+0x5b4>
 8009740:	494c      	ldr	r1, [pc, #304]	; (8009874 <_dtoa_r+0x65c>)
 8009742:	2000      	movs	r0, #0
 8009744:	f7f7 f882 	bl	800084c <__aeabi_ddiv>
 8009748:	ec53 2b18 	vmov	r2, r3, d8
 800974c:	f7f6 fd9c 	bl	8000288 <__aeabi_dsub>
 8009750:	9d00      	ldr	r5, [sp, #0]
 8009752:	ec41 0b18 	vmov	d8, r0, r1
 8009756:	4639      	mov	r1, r7
 8009758:	4630      	mov	r0, r6
 800975a:	f7f7 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800975e:	900c      	str	r0, [sp, #48]	; 0x30
 8009760:	f7f6 fee0 	bl	8000524 <__aeabi_i2d>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4630      	mov	r0, r6
 800976a:	4639      	mov	r1, r7
 800976c:	f7f6 fd8c 	bl	8000288 <__aeabi_dsub>
 8009770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009772:	3330      	adds	r3, #48	; 0x30
 8009774:	f805 3b01 	strb.w	r3, [r5], #1
 8009778:	ec53 2b18 	vmov	r2, r3, d8
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	f7f7 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8009784:	2800      	cmp	r0, #0
 8009786:	d165      	bne.n	8009854 <_dtoa_r+0x63c>
 8009788:	4632      	mov	r2, r6
 800978a:	463b      	mov	r3, r7
 800978c:	4935      	ldr	r1, [pc, #212]	; (8009864 <_dtoa_r+0x64c>)
 800978e:	2000      	movs	r0, #0
 8009790:	f7f6 fd7a 	bl	8000288 <__aeabi_dsub>
 8009794:	ec53 2b18 	vmov	r2, r3, d8
 8009798:	f7f7 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800979c:	2800      	cmp	r0, #0
 800979e:	f040 80b9 	bne.w	8009914 <_dtoa_r+0x6fc>
 80097a2:	9b02      	ldr	r3, [sp, #8]
 80097a4:	429d      	cmp	r5, r3
 80097a6:	f43f af75 	beq.w	8009694 <_dtoa_r+0x47c>
 80097aa:	4b2f      	ldr	r3, [pc, #188]	; (8009868 <_dtoa_r+0x650>)
 80097ac:	ec51 0b18 	vmov	r0, r1, d8
 80097b0:	2200      	movs	r2, #0
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	4b2c      	ldr	r3, [pc, #176]	; (8009868 <_dtoa_r+0x650>)
 80097b8:	ec41 0b18 	vmov	d8, r0, r1
 80097bc:	2200      	movs	r2, #0
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f6 ff19 	bl	80005f8 <__aeabi_dmul>
 80097c6:	4606      	mov	r6, r0
 80097c8:	460f      	mov	r7, r1
 80097ca:	e7c4      	b.n	8009756 <_dtoa_r+0x53e>
 80097cc:	ec51 0b17 	vmov	r0, r1, d7
 80097d0:	f7f6 ff12 	bl	80005f8 <__aeabi_dmul>
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	9d00      	ldr	r5, [sp, #0]
 80097d8:	930c      	str	r3, [sp, #48]	; 0x30
 80097da:	ec41 0b18 	vmov	d8, r0, r1
 80097de:	4639      	mov	r1, r7
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7f7 f9b9 	bl	8000b58 <__aeabi_d2iz>
 80097e6:	9011      	str	r0, [sp, #68]	; 0x44
 80097e8:	f7f6 fe9c 	bl	8000524 <__aeabi_i2d>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4630      	mov	r0, r6
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7f6 fd48 	bl	8000288 <__aeabi_dsub>
 80097f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097fa:	3330      	adds	r3, #48	; 0x30
 80097fc:	f805 3b01 	strb.w	r3, [r5], #1
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	429d      	cmp	r5, r3
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	d134      	bne.n	8009878 <_dtoa_r+0x660>
 800980e:	4b19      	ldr	r3, [pc, #100]	; (8009874 <_dtoa_r+0x65c>)
 8009810:	ec51 0b18 	vmov	r0, r1, d8
 8009814:	f7f6 fd3a 	bl	800028c <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f7 f97a 	bl	8000b18 <__aeabi_dcmpgt>
 8009824:	2800      	cmp	r0, #0
 8009826:	d175      	bne.n	8009914 <_dtoa_r+0x6fc>
 8009828:	ec53 2b18 	vmov	r2, r3, d8
 800982c:	4911      	ldr	r1, [pc, #68]	; (8009874 <_dtoa_r+0x65c>)
 800982e:	2000      	movs	r0, #0
 8009830:	f7f6 fd2a 	bl	8000288 <__aeabi_dsub>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	4630      	mov	r0, r6
 800983a:	4639      	mov	r1, r7
 800983c:	f7f7 f94e 	bl	8000adc <__aeabi_dcmplt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f43f af27 	beq.w	8009694 <_dtoa_r+0x47c>
 8009846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009848:	1e6b      	subs	r3, r5, #1
 800984a:	930c      	str	r3, [sp, #48]	; 0x30
 800984c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009850:	2b30      	cmp	r3, #48	; 0x30
 8009852:	d0f8      	beq.n	8009846 <_dtoa_r+0x62e>
 8009854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009858:	e04a      	b.n	80098f0 <_dtoa_r+0x6d8>
 800985a:	bf00      	nop
 800985c:	0800ed88 	.word	0x0800ed88
 8009860:	0800ed60 	.word	0x0800ed60
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	40240000 	.word	0x40240000
 800986c:	401c0000 	.word	0x401c0000
 8009870:	40140000 	.word	0x40140000
 8009874:	3fe00000 	.word	0x3fe00000
 8009878:	4baf      	ldr	r3, [pc, #700]	; (8009b38 <_dtoa_r+0x920>)
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	e7ac      	b.n	80097de <_dtoa_r+0x5c6>
 8009884:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009888:	9d00      	ldr	r5, [sp, #0]
 800988a:	4642      	mov	r2, r8
 800988c:	464b      	mov	r3, r9
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	f7f6 ffdb 	bl	800084c <__aeabi_ddiv>
 8009896:	f7f7 f95f 	bl	8000b58 <__aeabi_d2iz>
 800989a:	9002      	str	r0, [sp, #8]
 800989c:	f7f6 fe42 	bl	8000524 <__aeabi_i2d>
 80098a0:	4642      	mov	r2, r8
 80098a2:	464b      	mov	r3, r9
 80098a4:	f7f6 fea8 	bl	80005f8 <__aeabi_dmul>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4630      	mov	r0, r6
 80098ae:	4639      	mov	r1, r7
 80098b0:	f7f6 fcea 	bl	8000288 <__aeabi_dsub>
 80098b4:	9e02      	ldr	r6, [sp, #8]
 80098b6:	9f01      	ldr	r7, [sp, #4]
 80098b8:	3630      	adds	r6, #48	; 0x30
 80098ba:	f805 6b01 	strb.w	r6, [r5], #1
 80098be:	9e00      	ldr	r6, [sp, #0]
 80098c0:	1bae      	subs	r6, r5, r6
 80098c2:	42b7      	cmp	r7, r6
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	d137      	bne.n	800993a <_dtoa_r+0x722>
 80098ca:	f7f6 fcdf 	bl	800028c <__adddf3>
 80098ce:	4642      	mov	r2, r8
 80098d0:	464b      	mov	r3, r9
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	f7f7 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80098da:	b9c8      	cbnz	r0, 8009910 <_dtoa_r+0x6f8>
 80098dc:	4642      	mov	r2, r8
 80098de:	464b      	mov	r3, r9
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f7 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80098e8:	b110      	cbz	r0, 80098f0 <_dtoa_r+0x6d8>
 80098ea:	9b02      	ldr	r3, [sp, #8]
 80098ec:	07d9      	lsls	r1, r3, #31
 80098ee:	d40f      	bmi.n	8009910 <_dtoa_r+0x6f8>
 80098f0:	4620      	mov	r0, r4
 80098f2:	4659      	mov	r1, fp
 80098f4:	f000 fe58 	bl	800a5a8 <_Bfree>
 80098f8:	2300      	movs	r3, #0
 80098fa:	702b      	strb	r3, [r5, #0]
 80098fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098fe:	f10a 0001 	add.w	r0, sl, #1
 8009902:	6018      	str	r0, [r3, #0]
 8009904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009906:	2b00      	cmp	r3, #0
 8009908:	f43f acd8 	beq.w	80092bc <_dtoa_r+0xa4>
 800990c:	601d      	str	r5, [r3, #0]
 800990e:	e4d5      	b.n	80092bc <_dtoa_r+0xa4>
 8009910:	f8cd a01c 	str.w	sl, [sp, #28]
 8009914:	462b      	mov	r3, r5
 8009916:	461d      	mov	r5, r3
 8009918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800991c:	2a39      	cmp	r2, #57	; 0x39
 800991e:	d108      	bne.n	8009932 <_dtoa_r+0x71a>
 8009920:	9a00      	ldr	r2, [sp, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d1f7      	bne.n	8009916 <_dtoa_r+0x6fe>
 8009926:	9a07      	ldr	r2, [sp, #28]
 8009928:	9900      	ldr	r1, [sp, #0]
 800992a:	3201      	adds	r2, #1
 800992c:	9207      	str	r2, [sp, #28]
 800992e:	2230      	movs	r2, #48	; 0x30
 8009930:	700a      	strb	r2, [r1, #0]
 8009932:	781a      	ldrb	r2, [r3, #0]
 8009934:	3201      	adds	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e78c      	b.n	8009854 <_dtoa_r+0x63c>
 800993a:	4b7f      	ldr	r3, [pc, #508]	; (8009b38 <_dtoa_r+0x920>)
 800993c:	2200      	movs	r2, #0
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	2200      	movs	r2, #0
 8009944:	2300      	movs	r3, #0
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	f7f7 f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800994e:	2800      	cmp	r0, #0
 8009950:	d09b      	beq.n	800988a <_dtoa_r+0x672>
 8009952:	e7cd      	b.n	80098f0 <_dtoa_r+0x6d8>
 8009954:	9a08      	ldr	r2, [sp, #32]
 8009956:	2a00      	cmp	r2, #0
 8009958:	f000 80c4 	beq.w	8009ae4 <_dtoa_r+0x8cc>
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	2a01      	cmp	r2, #1
 8009960:	f300 80a8 	bgt.w	8009ab4 <_dtoa_r+0x89c>
 8009964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009966:	2a00      	cmp	r2, #0
 8009968:	f000 80a0 	beq.w	8009aac <_dtoa_r+0x894>
 800996c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009970:	9e06      	ldr	r6, [sp, #24]
 8009972:	4645      	mov	r5, r8
 8009974:	9a04      	ldr	r2, [sp, #16]
 8009976:	2101      	movs	r1, #1
 8009978:	441a      	add	r2, r3
 800997a:	4620      	mov	r0, r4
 800997c:	4498      	add	r8, r3
 800997e:	9204      	str	r2, [sp, #16]
 8009980:	f000 ff18 	bl	800a7b4 <__i2b>
 8009984:	4607      	mov	r7, r0
 8009986:	2d00      	cmp	r5, #0
 8009988:	dd0b      	ble.n	80099a2 <_dtoa_r+0x78a>
 800998a:	9b04      	ldr	r3, [sp, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	dd08      	ble.n	80099a2 <_dtoa_r+0x78a>
 8009990:	42ab      	cmp	r3, r5
 8009992:	9a04      	ldr	r2, [sp, #16]
 8009994:	bfa8      	it	ge
 8009996:	462b      	movge	r3, r5
 8009998:	eba8 0803 	sub.w	r8, r8, r3
 800999c:	1aed      	subs	r5, r5, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	9304      	str	r3, [sp, #16]
 80099a2:	9b06      	ldr	r3, [sp, #24]
 80099a4:	b1fb      	cbz	r3, 80099e6 <_dtoa_r+0x7ce>
 80099a6:	9b08      	ldr	r3, [sp, #32]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 809f 	beq.w	8009aec <_dtoa_r+0x8d4>
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	dd11      	ble.n	80099d6 <_dtoa_r+0x7be>
 80099b2:	4639      	mov	r1, r7
 80099b4:	4632      	mov	r2, r6
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 ffb8 	bl	800a92c <__pow5mult>
 80099bc:	465a      	mov	r2, fp
 80099be:	4601      	mov	r1, r0
 80099c0:	4607      	mov	r7, r0
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 ff0c 	bl	800a7e0 <__multiply>
 80099c8:	4659      	mov	r1, fp
 80099ca:	9007      	str	r0, [sp, #28]
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fdeb 	bl	800a5a8 <_Bfree>
 80099d2:	9b07      	ldr	r3, [sp, #28]
 80099d4:	469b      	mov	fp, r3
 80099d6:	9b06      	ldr	r3, [sp, #24]
 80099d8:	1b9a      	subs	r2, r3, r6
 80099da:	d004      	beq.n	80099e6 <_dtoa_r+0x7ce>
 80099dc:	4659      	mov	r1, fp
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 ffa4 	bl	800a92c <__pow5mult>
 80099e4:	4683      	mov	fp, r0
 80099e6:	2101      	movs	r1, #1
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fee3 	bl	800a7b4 <__i2b>
 80099ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	4606      	mov	r6, r0
 80099f4:	dd7c      	ble.n	8009af0 <_dtoa_r+0x8d8>
 80099f6:	461a      	mov	r2, r3
 80099f8:	4601      	mov	r1, r0
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 ff96 	bl	800a92c <__pow5mult>
 8009a00:	9b05      	ldr	r3, [sp, #20]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	4606      	mov	r6, r0
 8009a06:	dd76      	ble.n	8009af6 <_dtoa_r+0x8de>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9306      	str	r3, [sp, #24]
 8009a0c:	6933      	ldr	r3, [r6, #16]
 8009a0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a12:	6918      	ldr	r0, [r3, #16]
 8009a14:	f000 fe7e 	bl	800a714 <__hi0bits>
 8009a18:	f1c0 0020 	rsb	r0, r0, #32
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	4418      	add	r0, r3
 8009a20:	f010 001f 	ands.w	r0, r0, #31
 8009a24:	f000 8086 	beq.w	8009b34 <_dtoa_r+0x91c>
 8009a28:	f1c0 0320 	rsb	r3, r0, #32
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	dd7f      	ble.n	8009b30 <_dtoa_r+0x918>
 8009a30:	f1c0 001c 	rsb	r0, r0, #28
 8009a34:	9b04      	ldr	r3, [sp, #16]
 8009a36:	4403      	add	r3, r0
 8009a38:	4480      	add	r8, r0
 8009a3a:	4405      	add	r5, r0
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	dd05      	ble.n	8009a50 <_dtoa_r+0x838>
 8009a44:	4659      	mov	r1, fp
 8009a46:	4642      	mov	r2, r8
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 ffc9 	bl	800a9e0 <__lshift>
 8009a4e:	4683      	mov	fp, r0
 8009a50:	9b04      	ldr	r3, [sp, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dd05      	ble.n	8009a62 <_dtoa_r+0x84a>
 8009a56:	4631      	mov	r1, r6
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 ffc0 	bl	800a9e0 <__lshift>
 8009a60:	4606      	mov	r6, r0
 8009a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d069      	beq.n	8009b3c <_dtoa_r+0x924>
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4658      	mov	r0, fp
 8009a6c:	f001 f824 	bl	800aab8 <__mcmp>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	da63      	bge.n	8009b3c <_dtoa_r+0x924>
 8009a74:	2300      	movs	r3, #0
 8009a76:	4659      	mov	r1, fp
 8009a78:	220a      	movs	r2, #10
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fdb6 	bl	800a5ec <__multadd>
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a86:	4683      	mov	fp, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 818f 	beq.w	8009dac <_dtoa_r+0xb94>
 8009a8e:	4639      	mov	r1, r7
 8009a90:	2300      	movs	r3, #0
 8009a92:	220a      	movs	r2, #10
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fda9 	bl	800a5ec <__multadd>
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	f300 808e 	bgt.w	8009bc0 <_dtoa_r+0x9a8>
 8009aa4:	9b05      	ldr	r3, [sp, #20]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	dc50      	bgt.n	8009b4c <_dtoa_r+0x934>
 8009aaa:	e089      	b.n	8009bc0 <_dtoa_r+0x9a8>
 8009aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ab2:	e75d      	b.n	8009970 <_dtoa_r+0x758>
 8009ab4:	9b01      	ldr	r3, [sp, #4]
 8009ab6:	1e5e      	subs	r6, r3, #1
 8009ab8:	9b06      	ldr	r3, [sp, #24]
 8009aba:	42b3      	cmp	r3, r6
 8009abc:	bfbf      	itttt	lt
 8009abe:	9b06      	ldrlt	r3, [sp, #24]
 8009ac0:	9606      	strlt	r6, [sp, #24]
 8009ac2:	1af2      	sublt	r2, r6, r3
 8009ac4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009ac6:	bfb6      	itet	lt
 8009ac8:	189b      	addlt	r3, r3, r2
 8009aca:	1b9e      	subge	r6, r3, r6
 8009acc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	bfb8      	it	lt
 8009ad2:	2600      	movlt	r6, #0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfb5      	itete	lt
 8009ad8:	eba8 0503 	sublt.w	r5, r8, r3
 8009adc:	9b01      	ldrge	r3, [sp, #4]
 8009ade:	2300      	movlt	r3, #0
 8009ae0:	4645      	movge	r5, r8
 8009ae2:	e747      	b.n	8009974 <_dtoa_r+0x75c>
 8009ae4:	9e06      	ldr	r6, [sp, #24]
 8009ae6:	9f08      	ldr	r7, [sp, #32]
 8009ae8:	4645      	mov	r5, r8
 8009aea:	e74c      	b.n	8009986 <_dtoa_r+0x76e>
 8009aec:	9a06      	ldr	r2, [sp, #24]
 8009aee:	e775      	b.n	80099dc <_dtoa_r+0x7c4>
 8009af0:	9b05      	ldr	r3, [sp, #20]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	dc18      	bgt.n	8009b28 <_dtoa_r+0x910>
 8009af6:	9b02      	ldr	r3, [sp, #8]
 8009af8:	b9b3      	cbnz	r3, 8009b28 <_dtoa_r+0x910>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b00:	b9a3      	cbnz	r3, 8009b2c <_dtoa_r+0x914>
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b08:	0d1b      	lsrs	r3, r3, #20
 8009b0a:	051b      	lsls	r3, r3, #20
 8009b0c:	b12b      	cbz	r3, 8009b1a <_dtoa_r+0x902>
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	3301      	adds	r3, #1
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	f108 0801 	add.w	r8, r8, #1
 8009b18:	2301      	movs	r3, #1
 8009b1a:	9306      	str	r3, [sp, #24]
 8009b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f47f af74 	bne.w	8009a0c <_dtoa_r+0x7f4>
 8009b24:	2001      	movs	r0, #1
 8009b26:	e779      	b.n	8009a1c <_dtoa_r+0x804>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e7f6      	b.n	8009b1a <_dtoa_r+0x902>
 8009b2c:	9b02      	ldr	r3, [sp, #8]
 8009b2e:	e7f4      	b.n	8009b1a <_dtoa_r+0x902>
 8009b30:	d085      	beq.n	8009a3e <_dtoa_r+0x826>
 8009b32:	4618      	mov	r0, r3
 8009b34:	301c      	adds	r0, #28
 8009b36:	e77d      	b.n	8009a34 <_dtoa_r+0x81c>
 8009b38:	40240000 	.word	0x40240000
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dc38      	bgt.n	8009bb4 <_dtoa_r+0x99c>
 8009b42:	9b05      	ldr	r3, [sp, #20]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	dd35      	ble.n	8009bb4 <_dtoa_r+0x99c>
 8009b48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	d10d      	bne.n	8009b6e <_dtoa_r+0x956>
 8009b52:	4631      	mov	r1, r6
 8009b54:	464b      	mov	r3, r9
 8009b56:	2205      	movs	r2, #5
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fd47 	bl	800a5ec <__multadd>
 8009b5e:	4601      	mov	r1, r0
 8009b60:	4606      	mov	r6, r0
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 ffa8 	bl	800aab8 <__mcmp>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f73f adbd 	bgt.w	80096e8 <_dtoa_r+0x4d0>
 8009b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b70:	9d00      	ldr	r5, [sp, #0]
 8009b72:	ea6f 0a03 	mvn.w	sl, r3
 8009b76:	f04f 0800 	mov.w	r8, #0
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fd13 	bl	800a5a8 <_Bfree>
 8009b82:	2f00      	cmp	r7, #0
 8009b84:	f43f aeb4 	beq.w	80098f0 <_dtoa_r+0x6d8>
 8009b88:	f1b8 0f00 	cmp.w	r8, #0
 8009b8c:	d005      	beq.n	8009b9a <_dtoa_r+0x982>
 8009b8e:	45b8      	cmp	r8, r7
 8009b90:	d003      	beq.n	8009b9a <_dtoa_r+0x982>
 8009b92:	4641      	mov	r1, r8
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 fd07 	bl	800a5a8 <_Bfree>
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fd03 	bl	800a5a8 <_Bfree>
 8009ba2:	e6a5      	b.n	80098f0 <_dtoa_r+0x6d8>
 8009ba4:	2600      	movs	r6, #0
 8009ba6:	4637      	mov	r7, r6
 8009ba8:	e7e1      	b.n	8009b6e <_dtoa_r+0x956>
 8009baa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009bac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009bb0:	4637      	mov	r7, r6
 8009bb2:	e599      	b.n	80096e8 <_dtoa_r+0x4d0>
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 80fd 	beq.w	8009dba <_dtoa_r+0xba2>
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	dd05      	ble.n	8009bd0 <_dtoa_r+0x9b8>
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 ff09 	bl	800a9e0 <__lshift>
 8009bce:	4607      	mov	r7, r0
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d05c      	beq.n	8009c90 <_dtoa_r+0xa78>
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 fca5 	bl	800a528 <_Balloc>
 8009bde:	4605      	mov	r5, r0
 8009be0:	b928      	cbnz	r0, 8009bee <_dtoa_r+0x9d6>
 8009be2:	4b80      	ldr	r3, [pc, #512]	; (8009de4 <_dtoa_r+0xbcc>)
 8009be4:	4602      	mov	r2, r0
 8009be6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009bea:	f7ff bb2e 	b.w	800924a <_dtoa_r+0x32>
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	3202      	adds	r2, #2
 8009bf2:	0092      	lsls	r2, r2, #2
 8009bf4:	f107 010c 	add.w	r1, r7, #12
 8009bf8:	300c      	adds	r0, #12
 8009bfa:	f000 fc87 	bl	800a50c <memcpy>
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4629      	mov	r1, r5
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 feec 	bl	800a9e0 <__lshift>
 8009c08:	9b00      	ldr	r3, [sp, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	444b      	add	r3, r9
 8009c12:	9307      	str	r3, [sp, #28]
 8009c14:	9b02      	ldr	r3, [sp, #8]
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	46b8      	mov	r8, r7
 8009c1c:	9306      	str	r3, [sp, #24]
 8009c1e:	4607      	mov	r7, r0
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	4631      	mov	r1, r6
 8009c24:	3b01      	subs	r3, #1
 8009c26:	4658      	mov	r0, fp
 8009c28:	9302      	str	r3, [sp, #8]
 8009c2a:	f7ff fa67 	bl	80090fc <quorem>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	3330      	adds	r3, #48	; 0x30
 8009c32:	9004      	str	r0, [sp, #16]
 8009c34:	4641      	mov	r1, r8
 8009c36:	4658      	mov	r0, fp
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	f000 ff3d 	bl	800aab8 <__mcmp>
 8009c3e:	463a      	mov	r2, r7
 8009c40:	4681      	mov	r9, r0
 8009c42:	4631      	mov	r1, r6
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 ff53 	bl	800aaf0 <__mdiff>
 8009c4a:	68c2      	ldr	r2, [r0, #12]
 8009c4c:	9b08      	ldr	r3, [sp, #32]
 8009c4e:	4605      	mov	r5, r0
 8009c50:	bb02      	cbnz	r2, 8009c94 <_dtoa_r+0xa7c>
 8009c52:	4601      	mov	r1, r0
 8009c54:	4658      	mov	r0, fp
 8009c56:	f000 ff2f 	bl	800aab8 <__mcmp>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4620      	mov	r0, r4
 8009c62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009c66:	f000 fc9f 	bl	800a5a8 <_Bfree>
 8009c6a:	9b05      	ldr	r3, [sp, #20]
 8009c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c6e:	9d01      	ldr	r5, [sp, #4]
 8009c70:	ea43 0102 	orr.w	r1, r3, r2
 8009c74:	9b06      	ldr	r3, [sp, #24]
 8009c76:	430b      	orrs	r3, r1
 8009c78:	9b08      	ldr	r3, [sp, #32]
 8009c7a:	d10d      	bne.n	8009c98 <_dtoa_r+0xa80>
 8009c7c:	2b39      	cmp	r3, #57	; 0x39
 8009c7e:	d029      	beq.n	8009cd4 <_dtoa_r+0xabc>
 8009c80:	f1b9 0f00 	cmp.w	r9, #0
 8009c84:	dd01      	ble.n	8009c8a <_dtoa_r+0xa72>
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	3331      	adds	r3, #49	; 0x31
 8009c8a:	9a02      	ldr	r2, [sp, #8]
 8009c8c:	7013      	strb	r3, [r2, #0]
 8009c8e:	e774      	b.n	8009b7a <_dtoa_r+0x962>
 8009c90:	4638      	mov	r0, r7
 8009c92:	e7b9      	b.n	8009c08 <_dtoa_r+0x9f0>
 8009c94:	2201      	movs	r2, #1
 8009c96:	e7e2      	b.n	8009c5e <_dtoa_r+0xa46>
 8009c98:	f1b9 0f00 	cmp.w	r9, #0
 8009c9c:	db06      	blt.n	8009cac <_dtoa_r+0xa94>
 8009c9e:	9905      	ldr	r1, [sp, #20]
 8009ca0:	ea41 0909 	orr.w	r9, r1, r9
 8009ca4:	9906      	ldr	r1, [sp, #24]
 8009ca6:	ea59 0101 	orrs.w	r1, r9, r1
 8009caa:	d120      	bne.n	8009cee <_dtoa_r+0xad6>
 8009cac:	2a00      	cmp	r2, #0
 8009cae:	ddec      	ble.n	8009c8a <_dtoa_r+0xa72>
 8009cb0:	4659      	mov	r1, fp
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f000 fe92 	bl	800a9e0 <__lshift>
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4683      	mov	fp, r0
 8009cc0:	f000 fefa 	bl	800aab8 <__mcmp>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	dc02      	bgt.n	8009cd0 <_dtoa_r+0xab8>
 8009cca:	d1de      	bne.n	8009c8a <_dtoa_r+0xa72>
 8009ccc:	07da      	lsls	r2, r3, #31
 8009cce:	d5dc      	bpl.n	8009c8a <_dtoa_r+0xa72>
 8009cd0:	2b39      	cmp	r3, #57	; 0x39
 8009cd2:	d1d8      	bne.n	8009c86 <_dtoa_r+0xa6e>
 8009cd4:	9a02      	ldr	r2, [sp, #8]
 8009cd6:	2339      	movs	r3, #57	; 0x39
 8009cd8:	7013      	strb	r3, [r2, #0]
 8009cda:	462b      	mov	r3, r5
 8009cdc:	461d      	mov	r5, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ce4:	2a39      	cmp	r2, #57	; 0x39
 8009ce6:	d050      	beq.n	8009d8a <_dtoa_r+0xb72>
 8009ce8:	3201      	adds	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e745      	b.n	8009b7a <_dtoa_r+0x962>
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	dd03      	ble.n	8009cfa <_dtoa_r+0xae2>
 8009cf2:	2b39      	cmp	r3, #57	; 0x39
 8009cf4:	d0ee      	beq.n	8009cd4 <_dtoa_r+0xabc>
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	e7c7      	b.n	8009c8a <_dtoa_r+0xa72>
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	9907      	ldr	r1, [sp, #28]
 8009cfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d02:	428a      	cmp	r2, r1
 8009d04:	d02a      	beq.n	8009d5c <_dtoa_r+0xb44>
 8009d06:	4659      	mov	r1, fp
 8009d08:	2300      	movs	r3, #0
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 fc6d 	bl	800a5ec <__multadd>
 8009d12:	45b8      	cmp	r8, r7
 8009d14:	4683      	mov	fp, r0
 8009d16:	f04f 0300 	mov.w	r3, #0
 8009d1a:	f04f 020a 	mov.w	r2, #10
 8009d1e:	4641      	mov	r1, r8
 8009d20:	4620      	mov	r0, r4
 8009d22:	d107      	bne.n	8009d34 <_dtoa_r+0xb1c>
 8009d24:	f000 fc62 	bl	800a5ec <__multadd>
 8009d28:	4680      	mov	r8, r0
 8009d2a:	4607      	mov	r7, r0
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	e775      	b.n	8009c20 <_dtoa_r+0xa08>
 8009d34:	f000 fc5a 	bl	800a5ec <__multadd>
 8009d38:	4639      	mov	r1, r7
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	220a      	movs	r2, #10
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fc53 	bl	800a5ec <__multadd>
 8009d46:	4607      	mov	r7, r0
 8009d48:	e7f0      	b.n	8009d2c <_dtoa_r+0xb14>
 8009d4a:	f1b9 0f00 	cmp.w	r9, #0
 8009d4e:	9a00      	ldr	r2, [sp, #0]
 8009d50:	bfcc      	ite	gt
 8009d52:	464d      	movgt	r5, r9
 8009d54:	2501      	movle	r5, #1
 8009d56:	4415      	add	r5, r2
 8009d58:	f04f 0800 	mov.w	r8, #0
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4620      	mov	r0, r4
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	f000 fe3c 	bl	800a9e0 <__lshift>
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4683      	mov	fp, r0
 8009d6c:	f000 fea4 	bl	800aab8 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	dcb2      	bgt.n	8009cda <_dtoa_r+0xac2>
 8009d74:	d102      	bne.n	8009d7c <_dtoa_r+0xb64>
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	07db      	lsls	r3, r3, #31
 8009d7a:	d4ae      	bmi.n	8009cda <_dtoa_r+0xac2>
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	461d      	mov	r5, r3
 8009d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d84:	2a30      	cmp	r2, #48	; 0x30
 8009d86:	d0fa      	beq.n	8009d7e <_dtoa_r+0xb66>
 8009d88:	e6f7      	b.n	8009b7a <_dtoa_r+0x962>
 8009d8a:	9a00      	ldr	r2, [sp, #0]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d1a5      	bne.n	8009cdc <_dtoa_r+0xac4>
 8009d90:	f10a 0a01 	add.w	sl, sl, #1
 8009d94:	2331      	movs	r3, #49	; 0x31
 8009d96:	e779      	b.n	8009c8c <_dtoa_r+0xa74>
 8009d98:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <_dtoa_r+0xbd0>)
 8009d9a:	f7ff baaf 	b.w	80092fc <_dtoa_r+0xe4>
 8009d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f47f aa86 	bne.w	80092b2 <_dtoa_r+0x9a>
 8009da6:	4b11      	ldr	r3, [pc, #68]	; (8009dec <_dtoa_r+0xbd4>)
 8009da8:	f7ff baa8 	b.w	80092fc <_dtoa_r+0xe4>
 8009dac:	f1b9 0f00 	cmp.w	r9, #0
 8009db0:	dc03      	bgt.n	8009dba <_dtoa_r+0xba2>
 8009db2:	9b05      	ldr	r3, [sp, #20]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	f73f aec9 	bgt.w	8009b4c <_dtoa_r+0x934>
 8009dba:	9d00      	ldr	r5, [sp, #0]
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f7ff f99c 	bl	80090fc <quorem>
 8009dc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009dc8:	f805 3b01 	strb.w	r3, [r5], #1
 8009dcc:	9a00      	ldr	r2, [sp, #0]
 8009dce:	1aaa      	subs	r2, r5, r2
 8009dd0:	4591      	cmp	r9, r2
 8009dd2:	ddba      	ble.n	8009d4a <_dtoa_r+0xb32>
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	220a      	movs	r2, #10
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 fc06 	bl	800a5ec <__multadd>
 8009de0:	4683      	mov	fp, r0
 8009de2:	e7eb      	b.n	8009dbc <_dtoa_r+0xba4>
 8009de4:	0800ec6c 	.word	0x0800ec6c
 8009de8:	0800ea6c 	.word	0x0800ea6c
 8009dec:	0800ebe9 	.word	0x0800ebe9

08009df0 <rshift>:
 8009df0:	6903      	ldr	r3, [r0, #16]
 8009df2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dfa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dfe:	f100 0414 	add.w	r4, r0, #20
 8009e02:	dd45      	ble.n	8009e90 <rshift+0xa0>
 8009e04:	f011 011f 	ands.w	r1, r1, #31
 8009e08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e10:	d10c      	bne.n	8009e2c <rshift+0x3c>
 8009e12:	f100 0710 	add.w	r7, r0, #16
 8009e16:	4629      	mov	r1, r5
 8009e18:	42b1      	cmp	r1, r6
 8009e1a:	d334      	bcc.n	8009e86 <rshift+0x96>
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	1eea      	subs	r2, r5, #3
 8009e22:	4296      	cmp	r6, r2
 8009e24:	bf38      	it	cc
 8009e26:	2300      	movcc	r3, #0
 8009e28:	4423      	add	r3, r4
 8009e2a:	e015      	b.n	8009e58 <rshift+0x68>
 8009e2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e30:	f1c1 0820 	rsb	r8, r1, #32
 8009e34:	40cf      	lsrs	r7, r1
 8009e36:	f105 0e04 	add.w	lr, r5, #4
 8009e3a:	46a1      	mov	r9, r4
 8009e3c:	4576      	cmp	r6, lr
 8009e3e:	46f4      	mov	ip, lr
 8009e40:	d815      	bhi.n	8009e6e <rshift+0x7e>
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	009a      	lsls	r2, r3, #2
 8009e46:	3a04      	subs	r2, #4
 8009e48:	3501      	adds	r5, #1
 8009e4a:	42ae      	cmp	r6, r5
 8009e4c:	bf38      	it	cc
 8009e4e:	2200      	movcc	r2, #0
 8009e50:	18a3      	adds	r3, r4, r2
 8009e52:	50a7      	str	r7, [r4, r2]
 8009e54:	b107      	cbz	r7, 8009e58 <rshift+0x68>
 8009e56:	3304      	adds	r3, #4
 8009e58:	1b1a      	subs	r2, r3, r4
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e60:	bf08      	it	eq
 8009e62:	2300      	moveq	r3, #0
 8009e64:	6102      	str	r2, [r0, #16]
 8009e66:	bf08      	it	eq
 8009e68:	6143      	streq	r3, [r0, #20]
 8009e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e6e:	f8dc c000 	ldr.w	ip, [ip]
 8009e72:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e76:	ea4c 0707 	orr.w	r7, ip, r7
 8009e7a:	f849 7b04 	str.w	r7, [r9], #4
 8009e7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e82:	40cf      	lsrs	r7, r1
 8009e84:	e7da      	b.n	8009e3c <rshift+0x4c>
 8009e86:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e8e:	e7c3      	b.n	8009e18 <rshift+0x28>
 8009e90:	4623      	mov	r3, r4
 8009e92:	e7e1      	b.n	8009e58 <rshift+0x68>

08009e94 <__hexdig_fun>:
 8009e94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e98:	2b09      	cmp	r3, #9
 8009e9a:	d802      	bhi.n	8009ea2 <__hexdig_fun+0xe>
 8009e9c:	3820      	subs	r0, #32
 8009e9e:	b2c0      	uxtb	r0, r0
 8009ea0:	4770      	bx	lr
 8009ea2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ea6:	2b05      	cmp	r3, #5
 8009ea8:	d801      	bhi.n	8009eae <__hexdig_fun+0x1a>
 8009eaa:	3847      	subs	r0, #71	; 0x47
 8009eac:	e7f7      	b.n	8009e9e <__hexdig_fun+0xa>
 8009eae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	d801      	bhi.n	8009eba <__hexdig_fun+0x26>
 8009eb6:	3827      	subs	r0, #39	; 0x27
 8009eb8:	e7f1      	b.n	8009e9e <__hexdig_fun+0xa>
 8009eba:	2000      	movs	r0, #0
 8009ebc:	4770      	bx	lr
	...

08009ec0 <__gethex>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	ed2d 8b02 	vpush	{d8}
 8009ec8:	b089      	sub	sp, #36	; 0x24
 8009eca:	ee08 0a10 	vmov	s16, r0
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	4bbc      	ldr	r3, [pc, #752]	; (800a1c4 <__gethex+0x304>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	468b      	mov	fp, r1
 8009eda:	4690      	mov	r8, r2
 8009edc:	f7f6 f978 	bl	80001d0 <strlen>
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	f8db 2000 	ldr.w	r2, [fp]
 8009ee6:	4403      	add	r3, r0
 8009ee8:	4682      	mov	sl, r0
 8009eea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	1c93      	adds	r3, r2, #2
 8009ef2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ef6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009efa:	32fe      	adds	r2, #254	; 0xfe
 8009efc:	18d1      	adds	r1, r2, r3
 8009efe:	461f      	mov	r7, r3
 8009f00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f04:	9100      	str	r1, [sp, #0]
 8009f06:	2830      	cmp	r0, #48	; 0x30
 8009f08:	d0f8      	beq.n	8009efc <__gethex+0x3c>
 8009f0a:	f7ff ffc3 	bl	8009e94 <__hexdig_fun>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d13a      	bne.n	8009f8a <__gethex+0xca>
 8009f14:	9901      	ldr	r1, [sp, #4]
 8009f16:	4652      	mov	r2, sl
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f001 f9ed 	bl	800b2f8 <strncmp>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d168      	bne.n	8009ff6 <__gethex+0x136>
 8009f24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f28:	eb07 060a 	add.w	r6, r7, sl
 8009f2c:	f7ff ffb2 	bl	8009e94 <__hexdig_fun>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d062      	beq.n	8009ffa <__gethex+0x13a>
 8009f34:	4633      	mov	r3, r6
 8009f36:	7818      	ldrb	r0, [r3, #0]
 8009f38:	2830      	cmp	r0, #48	; 0x30
 8009f3a:	461f      	mov	r7, r3
 8009f3c:	f103 0301 	add.w	r3, r3, #1
 8009f40:	d0f9      	beq.n	8009f36 <__gethex+0x76>
 8009f42:	f7ff ffa7 	bl	8009e94 <__hexdig_fun>
 8009f46:	2301      	movs	r3, #1
 8009f48:	fab0 f480 	clz	r4, r0
 8009f4c:	0964      	lsrs	r4, r4, #5
 8009f4e:	4635      	mov	r5, r6
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	463a      	mov	r2, r7
 8009f54:	4616      	mov	r6, r2
 8009f56:	3201      	adds	r2, #1
 8009f58:	7830      	ldrb	r0, [r6, #0]
 8009f5a:	f7ff ff9b 	bl	8009e94 <__hexdig_fun>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d1f8      	bne.n	8009f54 <__gethex+0x94>
 8009f62:	9901      	ldr	r1, [sp, #4]
 8009f64:	4652      	mov	r2, sl
 8009f66:	4630      	mov	r0, r6
 8009f68:	f001 f9c6 	bl	800b2f8 <strncmp>
 8009f6c:	b980      	cbnz	r0, 8009f90 <__gethex+0xd0>
 8009f6e:	b94d      	cbnz	r5, 8009f84 <__gethex+0xc4>
 8009f70:	eb06 050a 	add.w	r5, r6, sl
 8009f74:	462a      	mov	r2, r5
 8009f76:	4616      	mov	r6, r2
 8009f78:	3201      	adds	r2, #1
 8009f7a:	7830      	ldrb	r0, [r6, #0]
 8009f7c:	f7ff ff8a 	bl	8009e94 <__hexdig_fun>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1f8      	bne.n	8009f76 <__gethex+0xb6>
 8009f84:	1bad      	subs	r5, r5, r6
 8009f86:	00ad      	lsls	r5, r5, #2
 8009f88:	e004      	b.n	8009f94 <__gethex+0xd4>
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	4625      	mov	r5, r4
 8009f8e:	e7e0      	b.n	8009f52 <__gethex+0x92>
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	d1f7      	bne.n	8009f84 <__gethex+0xc4>
 8009f94:	7833      	ldrb	r3, [r6, #0]
 8009f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f9a:	2b50      	cmp	r3, #80	; 0x50
 8009f9c:	d13b      	bne.n	800a016 <__gethex+0x156>
 8009f9e:	7873      	ldrb	r3, [r6, #1]
 8009fa0:	2b2b      	cmp	r3, #43	; 0x2b
 8009fa2:	d02c      	beq.n	8009ffe <__gethex+0x13e>
 8009fa4:	2b2d      	cmp	r3, #45	; 0x2d
 8009fa6:	d02e      	beq.n	800a006 <__gethex+0x146>
 8009fa8:	1c71      	adds	r1, r6, #1
 8009faa:	f04f 0900 	mov.w	r9, #0
 8009fae:	7808      	ldrb	r0, [r1, #0]
 8009fb0:	f7ff ff70 	bl	8009e94 <__hexdig_fun>
 8009fb4:	1e43      	subs	r3, r0, #1
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b18      	cmp	r3, #24
 8009fba:	d82c      	bhi.n	800a016 <__gethex+0x156>
 8009fbc:	f1a0 0210 	sub.w	r2, r0, #16
 8009fc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fc4:	f7ff ff66 	bl	8009e94 <__hexdig_fun>
 8009fc8:	1e43      	subs	r3, r0, #1
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b18      	cmp	r3, #24
 8009fce:	d91d      	bls.n	800a00c <__gethex+0x14c>
 8009fd0:	f1b9 0f00 	cmp.w	r9, #0
 8009fd4:	d000      	beq.n	8009fd8 <__gethex+0x118>
 8009fd6:	4252      	negs	r2, r2
 8009fd8:	4415      	add	r5, r2
 8009fda:	f8cb 1000 	str.w	r1, [fp]
 8009fde:	b1e4      	cbz	r4, 800a01a <__gethex+0x15a>
 8009fe0:	9b00      	ldr	r3, [sp, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bf14      	ite	ne
 8009fe6:	2700      	movne	r7, #0
 8009fe8:	2706      	moveq	r7, #6
 8009fea:	4638      	mov	r0, r7
 8009fec:	b009      	add	sp, #36	; 0x24
 8009fee:	ecbd 8b02 	vpop	{d8}
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	463e      	mov	r6, r7
 8009ff8:	4625      	mov	r5, r4
 8009ffa:	2401      	movs	r4, #1
 8009ffc:	e7ca      	b.n	8009f94 <__gethex+0xd4>
 8009ffe:	f04f 0900 	mov.w	r9, #0
 800a002:	1cb1      	adds	r1, r6, #2
 800a004:	e7d3      	b.n	8009fae <__gethex+0xee>
 800a006:	f04f 0901 	mov.w	r9, #1
 800a00a:	e7fa      	b.n	800a002 <__gethex+0x142>
 800a00c:	230a      	movs	r3, #10
 800a00e:	fb03 0202 	mla	r2, r3, r2, r0
 800a012:	3a10      	subs	r2, #16
 800a014:	e7d4      	b.n	8009fc0 <__gethex+0x100>
 800a016:	4631      	mov	r1, r6
 800a018:	e7df      	b.n	8009fda <__gethex+0x11a>
 800a01a:	1bf3      	subs	r3, r6, r7
 800a01c:	3b01      	subs	r3, #1
 800a01e:	4621      	mov	r1, r4
 800a020:	2b07      	cmp	r3, #7
 800a022:	dc0b      	bgt.n	800a03c <__gethex+0x17c>
 800a024:	ee18 0a10 	vmov	r0, s16
 800a028:	f000 fa7e 	bl	800a528 <_Balloc>
 800a02c:	4604      	mov	r4, r0
 800a02e:	b940      	cbnz	r0, 800a042 <__gethex+0x182>
 800a030:	4b65      	ldr	r3, [pc, #404]	; (800a1c8 <__gethex+0x308>)
 800a032:	4602      	mov	r2, r0
 800a034:	21de      	movs	r1, #222	; 0xde
 800a036:	4865      	ldr	r0, [pc, #404]	; (800a1cc <__gethex+0x30c>)
 800a038:	f001 f97e 	bl	800b338 <__assert_func>
 800a03c:	3101      	adds	r1, #1
 800a03e:	105b      	asrs	r3, r3, #1
 800a040:	e7ee      	b.n	800a020 <__gethex+0x160>
 800a042:	f100 0914 	add.w	r9, r0, #20
 800a046:	f04f 0b00 	mov.w	fp, #0
 800a04a:	f1ca 0301 	rsb	r3, sl, #1
 800a04e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a052:	f8cd b000 	str.w	fp, [sp]
 800a056:	9306      	str	r3, [sp, #24]
 800a058:	42b7      	cmp	r7, r6
 800a05a:	d340      	bcc.n	800a0de <__gethex+0x21e>
 800a05c:	9802      	ldr	r0, [sp, #8]
 800a05e:	9b00      	ldr	r3, [sp, #0]
 800a060:	f840 3b04 	str.w	r3, [r0], #4
 800a064:	eba0 0009 	sub.w	r0, r0, r9
 800a068:	1080      	asrs	r0, r0, #2
 800a06a:	0146      	lsls	r6, r0, #5
 800a06c:	6120      	str	r0, [r4, #16]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fb50 	bl	800a714 <__hi0bits>
 800a074:	1a30      	subs	r0, r6, r0
 800a076:	f8d8 6000 	ldr.w	r6, [r8]
 800a07a:	42b0      	cmp	r0, r6
 800a07c:	dd63      	ble.n	800a146 <__gethex+0x286>
 800a07e:	1b87      	subs	r7, r0, r6
 800a080:	4639      	mov	r1, r7
 800a082:	4620      	mov	r0, r4
 800a084:	f000 feea 	bl	800ae5c <__any_on>
 800a088:	4682      	mov	sl, r0
 800a08a:	b1a8      	cbz	r0, 800a0b8 <__gethex+0x1f8>
 800a08c:	1e7b      	subs	r3, r7, #1
 800a08e:	1159      	asrs	r1, r3, #5
 800a090:	f003 021f 	and.w	r2, r3, #31
 800a094:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a098:	f04f 0a01 	mov.w	sl, #1
 800a09c:	fa0a f202 	lsl.w	r2, sl, r2
 800a0a0:	420a      	tst	r2, r1
 800a0a2:	d009      	beq.n	800a0b8 <__gethex+0x1f8>
 800a0a4:	4553      	cmp	r3, sl
 800a0a6:	dd05      	ble.n	800a0b4 <__gethex+0x1f4>
 800a0a8:	1eb9      	subs	r1, r7, #2
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 fed6 	bl	800ae5c <__any_on>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d145      	bne.n	800a140 <__gethex+0x280>
 800a0b4:	f04f 0a02 	mov.w	sl, #2
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff fe98 	bl	8009df0 <rshift>
 800a0c0:	443d      	add	r5, r7
 800a0c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0c6:	42ab      	cmp	r3, r5
 800a0c8:	da4c      	bge.n	800a164 <__gethex+0x2a4>
 800a0ca:	ee18 0a10 	vmov	r0, s16
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	f000 fa6a 	bl	800a5a8 <_Bfree>
 800a0d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	27a3      	movs	r7, #163	; 0xa3
 800a0dc:	e785      	b.n	8009fea <__gethex+0x12a>
 800a0de:	1e73      	subs	r3, r6, #1
 800a0e0:	9a05      	ldr	r2, [sp, #20]
 800a0e2:	9303      	str	r3, [sp, #12]
 800a0e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d019      	beq.n	800a120 <__gethex+0x260>
 800a0ec:	f1bb 0f20 	cmp.w	fp, #32
 800a0f0:	d107      	bne.n	800a102 <__gethex+0x242>
 800a0f2:	9b02      	ldr	r3, [sp, #8]
 800a0f4:	9a00      	ldr	r2, [sp, #0]
 800a0f6:	f843 2b04 	str.w	r2, [r3], #4
 800a0fa:	9302      	str	r3, [sp, #8]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	469b      	mov	fp, r3
 800a102:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a106:	f7ff fec5 	bl	8009e94 <__hexdig_fun>
 800a10a:	9b00      	ldr	r3, [sp, #0]
 800a10c:	f000 000f 	and.w	r0, r0, #15
 800a110:	fa00 f00b 	lsl.w	r0, r0, fp
 800a114:	4303      	orrs	r3, r0
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	f10b 0b04 	add.w	fp, fp, #4
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	e00d      	b.n	800a13c <__gethex+0x27c>
 800a120:	9b03      	ldr	r3, [sp, #12]
 800a122:	9a06      	ldr	r2, [sp, #24]
 800a124:	4413      	add	r3, r2
 800a126:	42bb      	cmp	r3, r7
 800a128:	d3e0      	bcc.n	800a0ec <__gethex+0x22c>
 800a12a:	4618      	mov	r0, r3
 800a12c:	9901      	ldr	r1, [sp, #4]
 800a12e:	9307      	str	r3, [sp, #28]
 800a130:	4652      	mov	r2, sl
 800a132:	f001 f8e1 	bl	800b2f8 <strncmp>
 800a136:	9b07      	ldr	r3, [sp, #28]
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1d7      	bne.n	800a0ec <__gethex+0x22c>
 800a13c:	461e      	mov	r6, r3
 800a13e:	e78b      	b.n	800a058 <__gethex+0x198>
 800a140:	f04f 0a03 	mov.w	sl, #3
 800a144:	e7b8      	b.n	800a0b8 <__gethex+0x1f8>
 800a146:	da0a      	bge.n	800a15e <__gethex+0x29e>
 800a148:	1a37      	subs	r7, r6, r0
 800a14a:	4621      	mov	r1, r4
 800a14c:	ee18 0a10 	vmov	r0, s16
 800a150:	463a      	mov	r2, r7
 800a152:	f000 fc45 	bl	800a9e0 <__lshift>
 800a156:	1bed      	subs	r5, r5, r7
 800a158:	4604      	mov	r4, r0
 800a15a:	f100 0914 	add.w	r9, r0, #20
 800a15e:	f04f 0a00 	mov.w	sl, #0
 800a162:	e7ae      	b.n	800a0c2 <__gethex+0x202>
 800a164:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a168:	42a8      	cmp	r0, r5
 800a16a:	dd72      	ble.n	800a252 <__gethex+0x392>
 800a16c:	1b45      	subs	r5, r0, r5
 800a16e:	42ae      	cmp	r6, r5
 800a170:	dc36      	bgt.n	800a1e0 <__gethex+0x320>
 800a172:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d02a      	beq.n	800a1d0 <__gethex+0x310>
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d02c      	beq.n	800a1d8 <__gethex+0x318>
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d115      	bne.n	800a1ae <__gethex+0x2ee>
 800a182:	42ae      	cmp	r6, r5
 800a184:	d113      	bne.n	800a1ae <__gethex+0x2ee>
 800a186:	2e01      	cmp	r6, #1
 800a188:	d10b      	bne.n	800a1a2 <__gethex+0x2e2>
 800a18a:	9a04      	ldr	r2, [sp, #16]
 800a18c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	2301      	movs	r3, #1
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	f8c9 3000 	str.w	r3, [r9]
 800a19a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a19c:	2762      	movs	r7, #98	; 0x62
 800a19e:	601c      	str	r4, [r3, #0]
 800a1a0:	e723      	b.n	8009fea <__gethex+0x12a>
 800a1a2:	1e71      	subs	r1, r6, #1
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fe59 	bl	800ae5c <__any_on>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d1ed      	bne.n	800a18a <__gethex+0x2ca>
 800a1ae:	ee18 0a10 	vmov	r0, s16
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	f000 f9f8 	bl	800a5a8 <_Bfree>
 800a1b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	2750      	movs	r7, #80	; 0x50
 800a1c0:	e713      	b.n	8009fea <__gethex+0x12a>
 800a1c2:	bf00      	nop
 800a1c4:	0800ece8 	.word	0x0800ece8
 800a1c8:	0800ec6c 	.word	0x0800ec6c
 800a1cc:	0800ec7d 	.word	0x0800ec7d
 800a1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1eb      	bne.n	800a1ae <__gethex+0x2ee>
 800a1d6:	e7d8      	b.n	800a18a <__gethex+0x2ca>
 800a1d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1d5      	bne.n	800a18a <__gethex+0x2ca>
 800a1de:	e7e6      	b.n	800a1ae <__gethex+0x2ee>
 800a1e0:	1e6f      	subs	r7, r5, #1
 800a1e2:	f1ba 0f00 	cmp.w	sl, #0
 800a1e6:	d131      	bne.n	800a24c <__gethex+0x38c>
 800a1e8:	b127      	cbz	r7, 800a1f4 <__gethex+0x334>
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fe35 	bl	800ae5c <__any_on>
 800a1f2:	4682      	mov	sl, r0
 800a1f4:	117b      	asrs	r3, r7, #5
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a1fc:	f007 071f 	and.w	r7, r7, #31
 800a200:	fa01 f707 	lsl.w	r7, r1, r7
 800a204:	421f      	tst	r7, r3
 800a206:	4629      	mov	r1, r5
 800a208:	4620      	mov	r0, r4
 800a20a:	bf18      	it	ne
 800a20c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a210:	1b76      	subs	r6, r6, r5
 800a212:	f7ff fded 	bl	8009df0 <rshift>
 800a216:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a21a:	2702      	movs	r7, #2
 800a21c:	f1ba 0f00 	cmp.w	sl, #0
 800a220:	d048      	beq.n	800a2b4 <__gethex+0x3f4>
 800a222:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a226:	2b02      	cmp	r3, #2
 800a228:	d015      	beq.n	800a256 <__gethex+0x396>
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d017      	beq.n	800a25e <__gethex+0x39e>
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d109      	bne.n	800a246 <__gethex+0x386>
 800a232:	f01a 0f02 	tst.w	sl, #2
 800a236:	d006      	beq.n	800a246 <__gethex+0x386>
 800a238:	f8d9 0000 	ldr.w	r0, [r9]
 800a23c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a240:	f01a 0f01 	tst.w	sl, #1
 800a244:	d10e      	bne.n	800a264 <__gethex+0x3a4>
 800a246:	f047 0710 	orr.w	r7, r7, #16
 800a24a:	e033      	b.n	800a2b4 <__gethex+0x3f4>
 800a24c:	f04f 0a01 	mov.w	sl, #1
 800a250:	e7d0      	b.n	800a1f4 <__gethex+0x334>
 800a252:	2701      	movs	r7, #1
 800a254:	e7e2      	b.n	800a21c <__gethex+0x35c>
 800a256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a258:	f1c3 0301 	rsb	r3, r3, #1
 800a25c:	9315      	str	r3, [sp, #84]	; 0x54
 800a25e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0f0      	beq.n	800a246 <__gethex+0x386>
 800a264:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a268:	f104 0314 	add.w	r3, r4, #20
 800a26c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a270:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a274:	f04f 0c00 	mov.w	ip, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a282:	d01c      	beq.n	800a2be <__gethex+0x3fe>
 800a284:	3201      	adds	r2, #1
 800a286:	6002      	str	r2, [r0, #0]
 800a288:	2f02      	cmp	r7, #2
 800a28a:	f104 0314 	add.w	r3, r4, #20
 800a28e:	d13f      	bne.n	800a310 <__gethex+0x450>
 800a290:	f8d8 2000 	ldr.w	r2, [r8]
 800a294:	3a01      	subs	r2, #1
 800a296:	42b2      	cmp	r2, r6
 800a298:	d10a      	bne.n	800a2b0 <__gethex+0x3f0>
 800a29a:	1171      	asrs	r1, r6, #5
 800a29c:	2201      	movs	r2, #1
 800a29e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2a2:	f006 061f 	and.w	r6, r6, #31
 800a2a6:	fa02 f606 	lsl.w	r6, r2, r6
 800a2aa:	421e      	tst	r6, r3
 800a2ac:	bf18      	it	ne
 800a2ae:	4617      	movne	r7, r2
 800a2b0:	f047 0720 	orr.w	r7, r7, #32
 800a2b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2b6:	601c      	str	r4, [r3, #0]
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	601d      	str	r5, [r3, #0]
 800a2bc:	e695      	b.n	8009fea <__gethex+0x12a>
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2c4:	d8d8      	bhi.n	800a278 <__gethex+0x3b8>
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	459b      	cmp	fp, r3
 800a2ca:	db19      	blt.n	800a300 <__gethex+0x440>
 800a2cc:	6861      	ldr	r1, [r4, #4]
 800a2ce:	ee18 0a10 	vmov	r0, s16
 800a2d2:	3101      	adds	r1, #1
 800a2d4:	f000 f928 	bl	800a528 <_Balloc>
 800a2d8:	4681      	mov	r9, r0
 800a2da:	b918      	cbnz	r0, 800a2e4 <__gethex+0x424>
 800a2dc:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <__gethex+0x488>)
 800a2de:	4602      	mov	r2, r0
 800a2e0:	2184      	movs	r1, #132	; 0x84
 800a2e2:	e6a8      	b.n	800a036 <__gethex+0x176>
 800a2e4:	6922      	ldr	r2, [r4, #16]
 800a2e6:	3202      	adds	r2, #2
 800a2e8:	f104 010c 	add.w	r1, r4, #12
 800a2ec:	0092      	lsls	r2, r2, #2
 800a2ee:	300c      	adds	r0, #12
 800a2f0:	f000 f90c 	bl	800a50c <memcpy>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	ee18 0a10 	vmov	r0, s16
 800a2fa:	f000 f955 	bl	800a5a8 <_Bfree>
 800a2fe:	464c      	mov	r4, r9
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a308:	6122      	str	r2, [r4, #16]
 800a30a:	2201      	movs	r2, #1
 800a30c:	615a      	str	r2, [r3, #20]
 800a30e:	e7bb      	b.n	800a288 <__gethex+0x3c8>
 800a310:	6922      	ldr	r2, [r4, #16]
 800a312:	455a      	cmp	r2, fp
 800a314:	dd0b      	ble.n	800a32e <__gethex+0x46e>
 800a316:	2101      	movs	r1, #1
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff fd69 	bl	8009df0 <rshift>
 800a31e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a322:	3501      	adds	r5, #1
 800a324:	42ab      	cmp	r3, r5
 800a326:	f6ff aed0 	blt.w	800a0ca <__gethex+0x20a>
 800a32a:	2701      	movs	r7, #1
 800a32c:	e7c0      	b.n	800a2b0 <__gethex+0x3f0>
 800a32e:	f016 061f 	ands.w	r6, r6, #31
 800a332:	d0fa      	beq.n	800a32a <__gethex+0x46a>
 800a334:	449a      	add	sl, r3
 800a336:	f1c6 0620 	rsb	r6, r6, #32
 800a33a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a33e:	f000 f9e9 	bl	800a714 <__hi0bits>
 800a342:	42b0      	cmp	r0, r6
 800a344:	dbe7      	blt.n	800a316 <__gethex+0x456>
 800a346:	e7f0      	b.n	800a32a <__gethex+0x46a>
 800a348:	0800ec6c 	.word	0x0800ec6c

0800a34c <L_shift>:
 800a34c:	f1c2 0208 	rsb	r2, r2, #8
 800a350:	0092      	lsls	r2, r2, #2
 800a352:	b570      	push	{r4, r5, r6, lr}
 800a354:	f1c2 0620 	rsb	r6, r2, #32
 800a358:	6843      	ldr	r3, [r0, #4]
 800a35a:	6804      	ldr	r4, [r0, #0]
 800a35c:	fa03 f506 	lsl.w	r5, r3, r6
 800a360:	432c      	orrs	r4, r5
 800a362:	40d3      	lsrs	r3, r2
 800a364:	6004      	str	r4, [r0, #0]
 800a366:	f840 3f04 	str.w	r3, [r0, #4]!
 800a36a:	4288      	cmp	r0, r1
 800a36c:	d3f4      	bcc.n	800a358 <L_shift+0xc>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}

0800a370 <__match>:
 800a370:	b530      	push	{r4, r5, lr}
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a37a:	b914      	cbnz	r4, 800a382 <__match+0x12>
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	2001      	movs	r0, #1
 800a380:	bd30      	pop	{r4, r5, pc}
 800a382:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a386:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a38a:	2d19      	cmp	r5, #25
 800a38c:	bf98      	it	ls
 800a38e:	3220      	addls	r2, #32
 800a390:	42a2      	cmp	r2, r4
 800a392:	d0f0      	beq.n	800a376 <__match+0x6>
 800a394:	2000      	movs	r0, #0
 800a396:	e7f3      	b.n	800a380 <__match+0x10>

0800a398 <__hexnan>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	680b      	ldr	r3, [r1, #0]
 800a39e:	6801      	ldr	r1, [r0, #0]
 800a3a0:	115e      	asrs	r6, r3, #5
 800a3a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3a6:	f013 031f 	ands.w	r3, r3, #31
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	bf18      	it	ne
 800a3ae:	3604      	addne	r6, #4
 800a3b0:	2500      	movs	r5, #0
 800a3b2:	1f37      	subs	r7, r6, #4
 800a3b4:	4682      	mov	sl, r0
 800a3b6:	4690      	mov	r8, r2
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3be:	46b9      	mov	r9, r7
 800a3c0:	463c      	mov	r4, r7
 800a3c2:	9502      	str	r5, [sp, #8]
 800a3c4:	46ab      	mov	fp, r5
 800a3c6:	784a      	ldrb	r2, [r1, #1]
 800a3c8:	1c4b      	adds	r3, r1, #1
 800a3ca:	9303      	str	r3, [sp, #12]
 800a3cc:	b342      	cbz	r2, 800a420 <__hexnan+0x88>
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	9105      	str	r1, [sp, #20]
 800a3d2:	9204      	str	r2, [sp, #16]
 800a3d4:	f7ff fd5e 	bl	8009e94 <__hexdig_fun>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d14f      	bne.n	800a47c <__hexnan+0xe4>
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	9905      	ldr	r1, [sp, #20]
 800a3e0:	2a20      	cmp	r2, #32
 800a3e2:	d818      	bhi.n	800a416 <__hexnan+0x7e>
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	459b      	cmp	fp, r3
 800a3e8:	dd13      	ble.n	800a412 <__hexnan+0x7a>
 800a3ea:	454c      	cmp	r4, r9
 800a3ec:	d206      	bcs.n	800a3fc <__hexnan+0x64>
 800a3ee:	2d07      	cmp	r5, #7
 800a3f0:	dc04      	bgt.n	800a3fc <__hexnan+0x64>
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f7ff ffa8 	bl	800a34c <L_shift>
 800a3fc:	4544      	cmp	r4, r8
 800a3fe:	d950      	bls.n	800a4a2 <__hexnan+0x10a>
 800a400:	2300      	movs	r3, #0
 800a402:	f1a4 0904 	sub.w	r9, r4, #4
 800a406:	f844 3c04 	str.w	r3, [r4, #-4]
 800a40a:	f8cd b008 	str.w	fp, [sp, #8]
 800a40e:	464c      	mov	r4, r9
 800a410:	461d      	mov	r5, r3
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	e7d7      	b.n	800a3c6 <__hexnan+0x2e>
 800a416:	2a29      	cmp	r2, #41	; 0x29
 800a418:	d156      	bne.n	800a4c8 <__hexnan+0x130>
 800a41a:	3102      	adds	r1, #2
 800a41c:	f8ca 1000 	str.w	r1, [sl]
 800a420:	f1bb 0f00 	cmp.w	fp, #0
 800a424:	d050      	beq.n	800a4c8 <__hexnan+0x130>
 800a426:	454c      	cmp	r4, r9
 800a428:	d206      	bcs.n	800a438 <__hexnan+0xa0>
 800a42a:	2d07      	cmp	r5, #7
 800a42c:	dc04      	bgt.n	800a438 <__hexnan+0xa0>
 800a42e:	462a      	mov	r2, r5
 800a430:	4649      	mov	r1, r9
 800a432:	4620      	mov	r0, r4
 800a434:	f7ff ff8a 	bl	800a34c <L_shift>
 800a438:	4544      	cmp	r4, r8
 800a43a:	d934      	bls.n	800a4a6 <__hexnan+0x10e>
 800a43c:	f1a8 0204 	sub.w	r2, r8, #4
 800a440:	4623      	mov	r3, r4
 800a442:	f853 1b04 	ldr.w	r1, [r3], #4
 800a446:	f842 1f04 	str.w	r1, [r2, #4]!
 800a44a:	429f      	cmp	r7, r3
 800a44c:	d2f9      	bcs.n	800a442 <__hexnan+0xaa>
 800a44e:	1b3b      	subs	r3, r7, r4
 800a450:	f023 0303 	bic.w	r3, r3, #3
 800a454:	3304      	adds	r3, #4
 800a456:	3401      	adds	r4, #1
 800a458:	3e03      	subs	r6, #3
 800a45a:	42b4      	cmp	r4, r6
 800a45c:	bf88      	it	hi
 800a45e:	2304      	movhi	r3, #4
 800a460:	4443      	add	r3, r8
 800a462:	2200      	movs	r2, #0
 800a464:	f843 2b04 	str.w	r2, [r3], #4
 800a468:	429f      	cmp	r7, r3
 800a46a:	d2fb      	bcs.n	800a464 <__hexnan+0xcc>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	b91b      	cbnz	r3, 800a478 <__hexnan+0xe0>
 800a470:	4547      	cmp	r7, r8
 800a472:	d127      	bne.n	800a4c4 <__hexnan+0x12c>
 800a474:	2301      	movs	r3, #1
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	2005      	movs	r0, #5
 800a47a:	e026      	b.n	800a4ca <__hexnan+0x132>
 800a47c:	3501      	adds	r5, #1
 800a47e:	2d08      	cmp	r5, #8
 800a480:	f10b 0b01 	add.w	fp, fp, #1
 800a484:	dd06      	ble.n	800a494 <__hexnan+0xfc>
 800a486:	4544      	cmp	r4, r8
 800a488:	d9c3      	bls.n	800a412 <__hexnan+0x7a>
 800a48a:	2300      	movs	r3, #0
 800a48c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a490:	2501      	movs	r5, #1
 800a492:	3c04      	subs	r4, #4
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	f000 000f 	and.w	r0, r0, #15
 800a49a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a49e:	6022      	str	r2, [r4, #0]
 800a4a0:	e7b7      	b.n	800a412 <__hexnan+0x7a>
 800a4a2:	2508      	movs	r5, #8
 800a4a4:	e7b5      	b.n	800a412 <__hexnan+0x7a>
 800a4a6:	9b01      	ldr	r3, [sp, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0df      	beq.n	800a46c <__hexnan+0xd4>
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b0:	f1c3 0320 	rsb	r3, r3, #32
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a4bc:	401a      	ands	r2, r3
 800a4be:	f846 2c04 	str.w	r2, [r6, #-4]
 800a4c2:	e7d3      	b.n	800a46c <__hexnan+0xd4>
 800a4c4:	3f04      	subs	r7, #4
 800a4c6:	e7d1      	b.n	800a46c <__hexnan+0xd4>
 800a4c8:	2004      	movs	r0, #4
 800a4ca:	b007      	add	sp, #28
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4d0 <_localeconv_r>:
 800a4d0:	4800      	ldr	r0, [pc, #0]	; (800a4d4 <_localeconv_r+0x4>)
 800a4d2:	4770      	bx	lr
 800a4d4:	200002b8 	.word	0x200002b8

0800a4d8 <malloc>:
 800a4d8:	4b02      	ldr	r3, [pc, #8]	; (800a4e4 <malloc+0xc>)
 800a4da:	4601      	mov	r1, r0
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	f000 bd3d 	b.w	800af5c <_malloc_r>
 800a4e2:	bf00      	nop
 800a4e4:	20000160 	.word	0x20000160

0800a4e8 <__ascii_mbtowc>:
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	b901      	cbnz	r1, 800a4ee <__ascii_mbtowc+0x6>
 800a4ec:	a901      	add	r1, sp, #4
 800a4ee:	b142      	cbz	r2, 800a502 <__ascii_mbtowc+0x1a>
 800a4f0:	b14b      	cbz	r3, 800a506 <__ascii_mbtowc+0x1e>
 800a4f2:	7813      	ldrb	r3, [r2, #0]
 800a4f4:	600b      	str	r3, [r1, #0]
 800a4f6:	7812      	ldrb	r2, [r2, #0]
 800a4f8:	1e10      	subs	r0, r2, #0
 800a4fa:	bf18      	it	ne
 800a4fc:	2001      	movne	r0, #1
 800a4fe:	b002      	add	sp, #8
 800a500:	4770      	bx	lr
 800a502:	4610      	mov	r0, r2
 800a504:	e7fb      	b.n	800a4fe <__ascii_mbtowc+0x16>
 800a506:	f06f 0001 	mvn.w	r0, #1
 800a50a:	e7f8      	b.n	800a4fe <__ascii_mbtowc+0x16>

0800a50c <memcpy>:
 800a50c:	440a      	add	r2, r1
 800a50e:	4291      	cmp	r1, r2
 800a510:	f100 33ff 	add.w	r3, r0, #4294967295
 800a514:	d100      	bne.n	800a518 <memcpy+0xc>
 800a516:	4770      	bx	lr
 800a518:	b510      	push	{r4, lr}
 800a51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a522:	4291      	cmp	r1, r2
 800a524:	d1f9      	bne.n	800a51a <memcpy+0xe>
 800a526:	bd10      	pop	{r4, pc}

0800a528 <_Balloc>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a52c:	4604      	mov	r4, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	b976      	cbnz	r6, 800a550 <_Balloc+0x28>
 800a532:	2010      	movs	r0, #16
 800a534:	f7ff ffd0 	bl	800a4d8 <malloc>
 800a538:	4602      	mov	r2, r0
 800a53a:	6260      	str	r0, [r4, #36]	; 0x24
 800a53c:	b920      	cbnz	r0, 800a548 <_Balloc+0x20>
 800a53e:	4b18      	ldr	r3, [pc, #96]	; (800a5a0 <_Balloc+0x78>)
 800a540:	4818      	ldr	r0, [pc, #96]	; (800a5a4 <_Balloc+0x7c>)
 800a542:	2166      	movs	r1, #102	; 0x66
 800a544:	f000 fef8 	bl	800b338 <__assert_func>
 800a548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a54c:	6006      	str	r6, [r0, #0]
 800a54e:	60c6      	str	r6, [r0, #12]
 800a550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a552:	68f3      	ldr	r3, [r6, #12]
 800a554:	b183      	cbz	r3, 800a578 <_Balloc+0x50>
 800a556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a55e:	b9b8      	cbnz	r0, 800a590 <_Balloc+0x68>
 800a560:	2101      	movs	r1, #1
 800a562:	fa01 f605 	lsl.w	r6, r1, r5
 800a566:	1d72      	adds	r2, r6, #5
 800a568:	0092      	lsls	r2, r2, #2
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 fc97 	bl	800ae9e <_calloc_r>
 800a570:	b160      	cbz	r0, 800a58c <_Balloc+0x64>
 800a572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a576:	e00e      	b.n	800a596 <_Balloc+0x6e>
 800a578:	2221      	movs	r2, #33	; 0x21
 800a57a:	2104      	movs	r1, #4
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fc8e 	bl	800ae9e <_calloc_r>
 800a582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a584:	60f0      	str	r0, [r6, #12]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e4      	bne.n	800a556 <_Balloc+0x2e>
 800a58c:	2000      	movs	r0, #0
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	6802      	ldr	r2, [r0, #0]
 800a592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a596:	2300      	movs	r3, #0
 800a598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a59c:	e7f7      	b.n	800a58e <_Balloc+0x66>
 800a59e:	bf00      	nop
 800a5a0:	0800ebf6 	.word	0x0800ebf6
 800a5a4:	0800ecfc 	.word	0x0800ecfc

0800a5a8 <_Bfree>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	b976      	cbnz	r6, 800a5d0 <_Bfree+0x28>
 800a5b2:	2010      	movs	r0, #16
 800a5b4:	f7ff ff90 	bl	800a4d8 <malloc>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	6268      	str	r0, [r5, #36]	; 0x24
 800a5bc:	b920      	cbnz	r0, 800a5c8 <_Bfree+0x20>
 800a5be:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <_Bfree+0x3c>)
 800a5c0:	4809      	ldr	r0, [pc, #36]	; (800a5e8 <_Bfree+0x40>)
 800a5c2:	218a      	movs	r1, #138	; 0x8a
 800a5c4:	f000 feb8 	bl	800b338 <__assert_func>
 800a5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5cc:	6006      	str	r6, [r0, #0]
 800a5ce:	60c6      	str	r6, [r0, #12]
 800a5d0:	b13c      	cbz	r4, 800a5e2 <_Bfree+0x3a>
 800a5d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5d4:	6862      	ldr	r2, [r4, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5dc:	6021      	str	r1, [r4, #0]
 800a5de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	0800ebf6 	.word	0x0800ebf6
 800a5e8:	0800ecfc 	.word	0x0800ecfc

0800a5ec <__multadd>:
 800a5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f0:	690e      	ldr	r6, [r1, #16]
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	f101 0014 	add.w	r0, r1, #20
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6805      	ldr	r5, [r0, #0]
 800a600:	b2a9      	uxth	r1, r5
 800a602:	fb02 8101 	mla	r1, r2, r1, r8
 800a606:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a60a:	0c2d      	lsrs	r5, r5, #16
 800a60c:	fb02 c505 	mla	r5, r2, r5, ip
 800a610:	b289      	uxth	r1, r1
 800a612:	3301      	adds	r3, #1
 800a614:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a618:	429e      	cmp	r6, r3
 800a61a:	f840 1b04 	str.w	r1, [r0], #4
 800a61e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a622:	dcec      	bgt.n	800a5fe <__multadd+0x12>
 800a624:	f1b8 0f00 	cmp.w	r8, #0
 800a628:	d022      	beq.n	800a670 <__multadd+0x84>
 800a62a:	68a3      	ldr	r3, [r4, #8]
 800a62c:	42b3      	cmp	r3, r6
 800a62e:	dc19      	bgt.n	800a664 <__multadd+0x78>
 800a630:	6861      	ldr	r1, [r4, #4]
 800a632:	4638      	mov	r0, r7
 800a634:	3101      	adds	r1, #1
 800a636:	f7ff ff77 	bl	800a528 <_Balloc>
 800a63a:	4605      	mov	r5, r0
 800a63c:	b928      	cbnz	r0, 800a64a <__multadd+0x5e>
 800a63e:	4602      	mov	r2, r0
 800a640:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <__multadd+0x8c>)
 800a642:	480e      	ldr	r0, [pc, #56]	; (800a67c <__multadd+0x90>)
 800a644:	21b5      	movs	r1, #181	; 0xb5
 800a646:	f000 fe77 	bl	800b338 <__assert_func>
 800a64a:	6922      	ldr	r2, [r4, #16]
 800a64c:	3202      	adds	r2, #2
 800a64e:	f104 010c 	add.w	r1, r4, #12
 800a652:	0092      	lsls	r2, r2, #2
 800a654:	300c      	adds	r0, #12
 800a656:	f7ff ff59 	bl	800a50c <memcpy>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff ffa3 	bl	800a5a8 <_Bfree>
 800a662:	462c      	mov	r4, r5
 800a664:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a668:	3601      	adds	r6, #1
 800a66a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a66e:	6126      	str	r6, [r4, #16]
 800a670:	4620      	mov	r0, r4
 800a672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a676:	bf00      	nop
 800a678:	0800ec6c 	.word	0x0800ec6c
 800a67c:	0800ecfc 	.word	0x0800ecfc

0800a680 <__s2b>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	4615      	mov	r5, r2
 800a688:	461f      	mov	r7, r3
 800a68a:	2209      	movs	r2, #9
 800a68c:	3308      	adds	r3, #8
 800a68e:	4606      	mov	r6, r0
 800a690:	fb93 f3f2 	sdiv	r3, r3, r2
 800a694:	2100      	movs	r1, #0
 800a696:	2201      	movs	r2, #1
 800a698:	429a      	cmp	r2, r3
 800a69a:	db09      	blt.n	800a6b0 <__s2b+0x30>
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff ff43 	bl	800a528 <_Balloc>
 800a6a2:	b940      	cbnz	r0, 800a6b6 <__s2b+0x36>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b19      	ldr	r3, [pc, #100]	; (800a70c <__s2b+0x8c>)
 800a6a8:	4819      	ldr	r0, [pc, #100]	; (800a710 <__s2b+0x90>)
 800a6aa:	21ce      	movs	r1, #206	; 0xce
 800a6ac:	f000 fe44 	bl	800b338 <__assert_func>
 800a6b0:	0052      	lsls	r2, r2, #1
 800a6b2:	3101      	adds	r1, #1
 800a6b4:	e7f0      	b.n	800a698 <__s2b+0x18>
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	6143      	str	r3, [r0, #20]
 800a6ba:	2d09      	cmp	r5, #9
 800a6bc:	f04f 0301 	mov.w	r3, #1
 800a6c0:	6103      	str	r3, [r0, #16]
 800a6c2:	dd16      	ble.n	800a6f2 <__s2b+0x72>
 800a6c4:	f104 0909 	add.w	r9, r4, #9
 800a6c8:	46c8      	mov	r8, r9
 800a6ca:	442c      	add	r4, r5
 800a6cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	3b30      	subs	r3, #48	; 0x30
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7ff ff88 	bl	800a5ec <__multadd>
 800a6dc:	45a0      	cmp	r8, r4
 800a6de:	d1f5      	bne.n	800a6cc <__s2b+0x4c>
 800a6e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a6e4:	444c      	add	r4, r9
 800a6e6:	1b2d      	subs	r5, r5, r4
 800a6e8:	1963      	adds	r3, r4, r5
 800a6ea:	42bb      	cmp	r3, r7
 800a6ec:	db04      	blt.n	800a6f8 <__s2b+0x78>
 800a6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f2:	340a      	adds	r4, #10
 800a6f4:	2509      	movs	r5, #9
 800a6f6:	e7f6      	b.n	800a6e6 <__s2b+0x66>
 800a6f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	3b30      	subs	r3, #48	; 0x30
 800a700:	220a      	movs	r2, #10
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff ff72 	bl	800a5ec <__multadd>
 800a708:	e7ee      	b.n	800a6e8 <__s2b+0x68>
 800a70a:	bf00      	nop
 800a70c:	0800ec6c 	.word	0x0800ec6c
 800a710:	0800ecfc 	.word	0x0800ecfc

0800a714 <__hi0bits>:
 800a714:	0c03      	lsrs	r3, r0, #16
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	b9d3      	cbnz	r3, 800a750 <__hi0bits+0x3c>
 800a71a:	0400      	lsls	r0, r0, #16
 800a71c:	2310      	movs	r3, #16
 800a71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a722:	bf04      	itt	eq
 800a724:	0200      	lsleq	r0, r0, #8
 800a726:	3308      	addeq	r3, #8
 800a728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a72c:	bf04      	itt	eq
 800a72e:	0100      	lsleq	r0, r0, #4
 800a730:	3304      	addeq	r3, #4
 800a732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a736:	bf04      	itt	eq
 800a738:	0080      	lsleq	r0, r0, #2
 800a73a:	3302      	addeq	r3, #2
 800a73c:	2800      	cmp	r0, #0
 800a73e:	db05      	blt.n	800a74c <__hi0bits+0x38>
 800a740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a744:	f103 0301 	add.w	r3, r3, #1
 800a748:	bf08      	it	eq
 800a74a:	2320      	moveq	r3, #32
 800a74c:	4618      	mov	r0, r3
 800a74e:	4770      	bx	lr
 800a750:	2300      	movs	r3, #0
 800a752:	e7e4      	b.n	800a71e <__hi0bits+0xa>

0800a754 <__lo0bits>:
 800a754:	6803      	ldr	r3, [r0, #0]
 800a756:	f013 0207 	ands.w	r2, r3, #7
 800a75a:	4601      	mov	r1, r0
 800a75c:	d00b      	beq.n	800a776 <__lo0bits+0x22>
 800a75e:	07da      	lsls	r2, r3, #31
 800a760:	d424      	bmi.n	800a7ac <__lo0bits+0x58>
 800a762:	0798      	lsls	r0, r3, #30
 800a764:	bf49      	itett	mi
 800a766:	085b      	lsrmi	r3, r3, #1
 800a768:	089b      	lsrpl	r3, r3, #2
 800a76a:	2001      	movmi	r0, #1
 800a76c:	600b      	strmi	r3, [r1, #0]
 800a76e:	bf5c      	itt	pl
 800a770:	600b      	strpl	r3, [r1, #0]
 800a772:	2002      	movpl	r0, #2
 800a774:	4770      	bx	lr
 800a776:	b298      	uxth	r0, r3
 800a778:	b9b0      	cbnz	r0, 800a7a8 <__lo0bits+0x54>
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	2010      	movs	r0, #16
 800a77e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a782:	bf04      	itt	eq
 800a784:	0a1b      	lsreq	r3, r3, #8
 800a786:	3008      	addeq	r0, #8
 800a788:	071a      	lsls	r2, r3, #28
 800a78a:	bf04      	itt	eq
 800a78c:	091b      	lsreq	r3, r3, #4
 800a78e:	3004      	addeq	r0, #4
 800a790:	079a      	lsls	r2, r3, #30
 800a792:	bf04      	itt	eq
 800a794:	089b      	lsreq	r3, r3, #2
 800a796:	3002      	addeq	r0, #2
 800a798:	07da      	lsls	r2, r3, #31
 800a79a:	d403      	bmi.n	800a7a4 <__lo0bits+0x50>
 800a79c:	085b      	lsrs	r3, r3, #1
 800a79e:	f100 0001 	add.w	r0, r0, #1
 800a7a2:	d005      	beq.n	800a7b0 <__lo0bits+0x5c>
 800a7a4:	600b      	str	r3, [r1, #0]
 800a7a6:	4770      	bx	lr
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	e7e8      	b.n	800a77e <__lo0bits+0x2a>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr
 800a7b0:	2020      	movs	r0, #32
 800a7b2:	4770      	bx	lr

0800a7b4 <__i2b>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	f7ff feb5 	bl	800a528 <_Balloc>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <__i2b+0x1a>
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <__i2b+0x24>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	; (800a7dc <__i2b+0x28>)
 800a7c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7ca:	f000 fdb5 	bl	800b338 <__assert_func>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6144      	str	r4, [r0, #20]
 800a7d2:	6103      	str	r3, [r0, #16]
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0800ec6c 	.word	0x0800ec6c
 800a7dc:	0800ecfc 	.word	0x0800ecfc

0800a7e0 <__multiply>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	690a      	ldr	r2, [r1, #16]
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	bfb8      	it	lt
 800a7ee:	460b      	movlt	r3, r1
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	bfbc      	itt	lt
 800a7f4:	4625      	movlt	r5, r4
 800a7f6:	461c      	movlt	r4, r3
 800a7f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a7fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a800:	68ab      	ldr	r3, [r5, #8]
 800a802:	6869      	ldr	r1, [r5, #4]
 800a804:	eb0a 0709 	add.w	r7, sl, r9
 800a808:	42bb      	cmp	r3, r7
 800a80a:	b085      	sub	sp, #20
 800a80c:	bfb8      	it	lt
 800a80e:	3101      	addlt	r1, #1
 800a810:	f7ff fe8a 	bl	800a528 <_Balloc>
 800a814:	b930      	cbnz	r0, 800a824 <__multiply+0x44>
 800a816:	4602      	mov	r2, r0
 800a818:	4b42      	ldr	r3, [pc, #264]	; (800a924 <__multiply+0x144>)
 800a81a:	4843      	ldr	r0, [pc, #268]	; (800a928 <__multiply+0x148>)
 800a81c:	f240 115d 	movw	r1, #349	; 0x15d
 800a820:	f000 fd8a 	bl	800b338 <__assert_func>
 800a824:	f100 0614 	add.w	r6, r0, #20
 800a828:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a82c:	4633      	mov	r3, r6
 800a82e:	2200      	movs	r2, #0
 800a830:	4543      	cmp	r3, r8
 800a832:	d31e      	bcc.n	800a872 <__multiply+0x92>
 800a834:	f105 0c14 	add.w	ip, r5, #20
 800a838:	f104 0314 	add.w	r3, r4, #20
 800a83c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a840:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a844:	9202      	str	r2, [sp, #8]
 800a846:	ebac 0205 	sub.w	r2, ip, r5
 800a84a:	3a15      	subs	r2, #21
 800a84c:	f022 0203 	bic.w	r2, r2, #3
 800a850:	3204      	adds	r2, #4
 800a852:	f105 0115 	add.w	r1, r5, #21
 800a856:	458c      	cmp	ip, r1
 800a858:	bf38      	it	cc
 800a85a:	2204      	movcc	r2, #4
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	9a02      	ldr	r2, [sp, #8]
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	429a      	cmp	r2, r3
 800a864:	d808      	bhi.n	800a878 <__multiply+0x98>
 800a866:	2f00      	cmp	r7, #0
 800a868:	dc55      	bgt.n	800a916 <__multiply+0x136>
 800a86a:	6107      	str	r7, [r0, #16]
 800a86c:	b005      	add	sp, #20
 800a86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a872:	f843 2b04 	str.w	r2, [r3], #4
 800a876:	e7db      	b.n	800a830 <__multiply+0x50>
 800a878:	f8b3 a000 	ldrh.w	sl, [r3]
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	d020      	beq.n	800a8c4 <__multiply+0xe4>
 800a882:	f105 0e14 	add.w	lr, r5, #20
 800a886:	46b1      	mov	r9, r6
 800a888:	2200      	movs	r2, #0
 800a88a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a88e:	f8d9 b000 	ldr.w	fp, [r9]
 800a892:	b2a1      	uxth	r1, r4
 800a894:	fa1f fb8b 	uxth.w	fp, fp
 800a898:	fb0a b101 	mla	r1, sl, r1, fp
 800a89c:	4411      	add	r1, r2
 800a89e:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a2:	0c24      	lsrs	r4, r4, #16
 800a8a4:	0c12      	lsrs	r2, r2, #16
 800a8a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800a8aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a8ae:	b289      	uxth	r1, r1
 800a8b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a8b4:	45f4      	cmp	ip, lr
 800a8b6:	f849 1b04 	str.w	r1, [r9], #4
 800a8ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a8be:	d8e4      	bhi.n	800a88a <__multiply+0xaa>
 800a8c0:	9901      	ldr	r1, [sp, #4]
 800a8c2:	5072      	str	r2, [r6, r1]
 800a8c4:	9a03      	ldr	r2, [sp, #12]
 800a8c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	d01f      	beq.n	800a912 <__multiply+0x132>
 800a8d2:	6834      	ldr	r4, [r6, #0]
 800a8d4:	f105 0114 	add.w	r1, r5, #20
 800a8d8:	46b6      	mov	lr, r6
 800a8da:	f04f 0a00 	mov.w	sl, #0
 800a8de:	880a      	ldrh	r2, [r1, #0]
 800a8e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a8e4:	fb09 b202 	mla	r2, r9, r2, fp
 800a8e8:	4492      	add	sl, r2
 800a8ea:	b2a4      	uxth	r4, r4
 800a8ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a8f0:	f84e 4b04 	str.w	r4, [lr], #4
 800a8f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a8f8:	f8be 2000 	ldrh.w	r2, [lr]
 800a8fc:	0c24      	lsrs	r4, r4, #16
 800a8fe:	fb09 2404 	mla	r4, r9, r4, r2
 800a902:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a906:	458c      	cmp	ip, r1
 800a908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a90c:	d8e7      	bhi.n	800a8de <__multiply+0xfe>
 800a90e:	9a01      	ldr	r2, [sp, #4]
 800a910:	50b4      	str	r4, [r6, r2]
 800a912:	3604      	adds	r6, #4
 800a914:	e7a3      	b.n	800a85e <__multiply+0x7e>
 800a916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1a5      	bne.n	800a86a <__multiply+0x8a>
 800a91e:	3f01      	subs	r7, #1
 800a920:	e7a1      	b.n	800a866 <__multiply+0x86>
 800a922:	bf00      	nop
 800a924:	0800ec6c 	.word	0x0800ec6c
 800a928:	0800ecfc 	.word	0x0800ecfc

0800a92c <__pow5mult>:
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	4615      	mov	r5, r2
 800a932:	f012 0203 	ands.w	r2, r2, #3
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	d007      	beq.n	800a94c <__pow5mult+0x20>
 800a93c:	4c25      	ldr	r4, [pc, #148]	; (800a9d4 <__pow5mult+0xa8>)
 800a93e:	3a01      	subs	r2, #1
 800a940:	2300      	movs	r3, #0
 800a942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a946:	f7ff fe51 	bl	800a5ec <__multadd>
 800a94a:	4607      	mov	r7, r0
 800a94c:	10ad      	asrs	r5, r5, #2
 800a94e:	d03d      	beq.n	800a9cc <__pow5mult+0xa0>
 800a950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a952:	b97c      	cbnz	r4, 800a974 <__pow5mult+0x48>
 800a954:	2010      	movs	r0, #16
 800a956:	f7ff fdbf 	bl	800a4d8 <malloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6270      	str	r0, [r6, #36]	; 0x24
 800a95e:	b928      	cbnz	r0, 800a96c <__pow5mult+0x40>
 800a960:	4b1d      	ldr	r3, [pc, #116]	; (800a9d8 <__pow5mult+0xac>)
 800a962:	481e      	ldr	r0, [pc, #120]	; (800a9dc <__pow5mult+0xb0>)
 800a964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a968:	f000 fce6 	bl	800b338 <__assert_func>
 800a96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a970:	6004      	str	r4, [r0, #0]
 800a972:	60c4      	str	r4, [r0, #12]
 800a974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a97c:	b94c      	cbnz	r4, 800a992 <__pow5mult+0x66>
 800a97e:	f240 2171 	movw	r1, #625	; 0x271
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ff16 	bl	800a7b4 <__i2b>
 800a988:	2300      	movs	r3, #0
 800a98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a98e:	4604      	mov	r4, r0
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	f04f 0900 	mov.w	r9, #0
 800a996:	07eb      	lsls	r3, r5, #31
 800a998:	d50a      	bpl.n	800a9b0 <__pow5mult+0x84>
 800a99a:	4639      	mov	r1, r7
 800a99c:	4622      	mov	r2, r4
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ff1e 	bl	800a7e0 <__multiply>
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff fdfd 	bl	800a5a8 <_Bfree>
 800a9ae:	4647      	mov	r7, r8
 800a9b0:	106d      	asrs	r5, r5, #1
 800a9b2:	d00b      	beq.n	800a9cc <__pow5mult+0xa0>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	b938      	cbnz	r0, 800a9c8 <__pow5mult+0x9c>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7ff ff0f 	bl	800a7e0 <__multiply>
 800a9c2:	6020      	str	r0, [r4, #0]
 800a9c4:	f8c0 9000 	str.w	r9, [r0]
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	e7e4      	b.n	800a996 <__pow5mult+0x6a>
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800ee50 	.word	0x0800ee50
 800a9d8:	0800ebf6 	.word	0x0800ebf6
 800a9dc:	0800ecfc 	.word	0x0800ecfc

0800a9e0 <__lshift>:
 800a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	6849      	ldr	r1, [r1, #4]
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	4691      	mov	r9, r2
 800a9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9f8:	f108 0601 	add.w	r6, r8, #1
 800a9fc:	42b3      	cmp	r3, r6
 800a9fe:	db0b      	blt.n	800aa18 <__lshift+0x38>
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff fd91 	bl	800a528 <_Balloc>
 800aa06:	4605      	mov	r5, r0
 800aa08:	b948      	cbnz	r0, 800aa1e <__lshift+0x3e>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	4b28      	ldr	r3, [pc, #160]	; (800aab0 <__lshift+0xd0>)
 800aa0e:	4829      	ldr	r0, [pc, #164]	; (800aab4 <__lshift+0xd4>)
 800aa10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa14:	f000 fc90 	bl	800b338 <__assert_func>
 800aa18:	3101      	adds	r1, #1
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	e7ee      	b.n	800a9fc <__lshift+0x1c>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f100 0114 	add.w	r1, r0, #20
 800aa24:	f100 0210 	add.w	r2, r0, #16
 800aa28:	4618      	mov	r0, r3
 800aa2a:	4553      	cmp	r3, sl
 800aa2c:	db33      	blt.n	800aa96 <__lshift+0xb6>
 800aa2e:	6920      	ldr	r0, [r4, #16]
 800aa30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa34:	f104 0314 	add.w	r3, r4, #20
 800aa38:	f019 091f 	ands.w	r9, r9, #31
 800aa3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa44:	d02b      	beq.n	800aa9e <__lshift+0xbe>
 800aa46:	f1c9 0e20 	rsb	lr, r9, #32
 800aa4a:	468a      	mov	sl, r1
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	fa00 f009 	lsl.w	r0, r0, r9
 800aa54:	4302      	orrs	r2, r0
 800aa56:	f84a 2b04 	str.w	r2, [sl], #4
 800aa5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa5e:	459c      	cmp	ip, r3
 800aa60:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa64:	d8f3      	bhi.n	800aa4e <__lshift+0x6e>
 800aa66:	ebac 0304 	sub.w	r3, ip, r4
 800aa6a:	3b15      	subs	r3, #21
 800aa6c:	f023 0303 	bic.w	r3, r3, #3
 800aa70:	3304      	adds	r3, #4
 800aa72:	f104 0015 	add.w	r0, r4, #21
 800aa76:	4584      	cmp	ip, r0
 800aa78:	bf38      	it	cc
 800aa7a:	2304      	movcc	r3, #4
 800aa7c:	50ca      	str	r2, [r1, r3]
 800aa7e:	b10a      	cbz	r2, 800aa84 <__lshift+0xa4>
 800aa80:	f108 0602 	add.w	r6, r8, #2
 800aa84:	3e01      	subs	r6, #1
 800aa86:	4638      	mov	r0, r7
 800aa88:	612e      	str	r6, [r5, #16]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	f7ff fd8c 	bl	800a5a8 <_Bfree>
 800aa90:	4628      	mov	r0, r5
 800aa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa96:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	e7c5      	b.n	800aa2a <__lshift+0x4a>
 800aa9e:	3904      	subs	r1, #4
 800aaa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaa8:	459c      	cmp	ip, r3
 800aaaa:	d8f9      	bhi.n	800aaa0 <__lshift+0xc0>
 800aaac:	e7ea      	b.n	800aa84 <__lshift+0xa4>
 800aaae:	bf00      	nop
 800aab0:	0800ec6c 	.word	0x0800ec6c
 800aab4:	0800ecfc 	.word	0x0800ecfc

0800aab8 <__mcmp>:
 800aab8:	b530      	push	{r4, r5, lr}
 800aaba:	6902      	ldr	r2, [r0, #16]
 800aabc:	690c      	ldr	r4, [r1, #16]
 800aabe:	1b12      	subs	r2, r2, r4
 800aac0:	d10e      	bne.n	800aae0 <__mcmp+0x28>
 800aac2:	f100 0314 	add.w	r3, r0, #20
 800aac6:	3114      	adds	r1, #20
 800aac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aacc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aad8:	42a5      	cmp	r5, r4
 800aada:	d003      	beq.n	800aae4 <__mcmp+0x2c>
 800aadc:	d305      	bcc.n	800aaea <__mcmp+0x32>
 800aade:	2201      	movs	r2, #1
 800aae0:	4610      	mov	r0, r2
 800aae2:	bd30      	pop	{r4, r5, pc}
 800aae4:	4283      	cmp	r3, r0
 800aae6:	d3f3      	bcc.n	800aad0 <__mcmp+0x18>
 800aae8:	e7fa      	b.n	800aae0 <__mcmp+0x28>
 800aaea:	f04f 32ff 	mov.w	r2, #4294967295
 800aaee:	e7f7      	b.n	800aae0 <__mcmp+0x28>

0800aaf0 <__mdiff>:
 800aaf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4620      	mov	r0, r4
 800aafc:	4617      	mov	r7, r2
 800aafe:	f7ff ffdb 	bl	800aab8 <__mcmp>
 800ab02:	1e05      	subs	r5, r0, #0
 800ab04:	d110      	bne.n	800ab28 <__mdiff+0x38>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7ff fd0d 	bl	800a528 <_Balloc>
 800ab0e:	b930      	cbnz	r0, 800ab1e <__mdiff+0x2e>
 800ab10:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <__mdiff+0x108>)
 800ab12:	4602      	mov	r2, r0
 800ab14:	f240 2132 	movw	r1, #562	; 0x232
 800ab18:	4838      	ldr	r0, [pc, #224]	; (800abfc <__mdiff+0x10c>)
 800ab1a:	f000 fc0d 	bl	800b338 <__assert_func>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab28:	bfa4      	itt	ge
 800ab2a:	463b      	movge	r3, r7
 800ab2c:	4627      	movge	r7, r4
 800ab2e:	4630      	mov	r0, r6
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	bfa6      	itte	ge
 800ab34:	461c      	movge	r4, r3
 800ab36:	2500      	movge	r5, #0
 800ab38:	2501      	movlt	r5, #1
 800ab3a:	f7ff fcf5 	bl	800a528 <_Balloc>
 800ab3e:	b920      	cbnz	r0, 800ab4a <__mdiff+0x5a>
 800ab40:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <__mdiff+0x108>)
 800ab42:	4602      	mov	r2, r0
 800ab44:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab48:	e7e6      	b.n	800ab18 <__mdiff+0x28>
 800ab4a:	693e      	ldr	r6, [r7, #16]
 800ab4c:	60c5      	str	r5, [r0, #12]
 800ab4e:	6925      	ldr	r5, [r4, #16]
 800ab50:	f107 0114 	add.w	r1, r7, #20
 800ab54:	f104 0914 	add.w	r9, r4, #20
 800ab58:	f100 0e14 	add.w	lr, r0, #20
 800ab5c:	f107 0210 	add.w	r2, r7, #16
 800ab60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ab64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ab68:	46f2      	mov	sl, lr
 800ab6a:	2700      	movs	r7, #0
 800ab6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab74:	fa1f f883 	uxth.w	r8, r3
 800ab78:	fa17 f78b 	uxtah	r7, r7, fp
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	eba7 0808 	sub.w	r8, r7, r8
 800ab82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab8a:	fa1f f888 	uxth.w	r8, r8
 800ab8e:	141f      	asrs	r7, r3, #16
 800ab90:	454d      	cmp	r5, r9
 800ab92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab96:	f84a 3b04 	str.w	r3, [sl], #4
 800ab9a:	d8e7      	bhi.n	800ab6c <__mdiff+0x7c>
 800ab9c:	1b2b      	subs	r3, r5, r4
 800ab9e:	3b15      	subs	r3, #21
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	3304      	adds	r3, #4
 800aba6:	3415      	adds	r4, #21
 800aba8:	42a5      	cmp	r5, r4
 800abaa:	bf38      	it	cc
 800abac:	2304      	movcc	r3, #4
 800abae:	4419      	add	r1, r3
 800abb0:	4473      	add	r3, lr
 800abb2:	469e      	mov	lr, r3
 800abb4:	460d      	mov	r5, r1
 800abb6:	4565      	cmp	r5, ip
 800abb8:	d30e      	bcc.n	800abd8 <__mdiff+0xe8>
 800abba:	f10c 0203 	add.w	r2, ip, #3
 800abbe:	1a52      	subs	r2, r2, r1
 800abc0:	f022 0203 	bic.w	r2, r2, #3
 800abc4:	3903      	subs	r1, #3
 800abc6:	458c      	cmp	ip, r1
 800abc8:	bf38      	it	cc
 800abca:	2200      	movcc	r2, #0
 800abcc:	441a      	add	r2, r3
 800abce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abd2:	b17b      	cbz	r3, 800abf4 <__mdiff+0x104>
 800abd4:	6106      	str	r6, [r0, #16]
 800abd6:	e7a5      	b.n	800ab24 <__mdiff+0x34>
 800abd8:	f855 8b04 	ldr.w	r8, [r5], #4
 800abdc:	fa17 f488 	uxtah	r4, r7, r8
 800abe0:	1422      	asrs	r2, r4, #16
 800abe2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800abe6:	b2a4      	uxth	r4, r4
 800abe8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800abec:	f84e 4b04 	str.w	r4, [lr], #4
 800abf0:	1417      	asrs	r7, r2, #16
 800abf2:	e7e0      	b.n	800abb6 <__mdiff+0xc6>
 800abf4:	3e01      	subs	r6, #1
 800abf6:	e7ea      	b.n	800abce <__mdiff+0xde>
 800abf8:	0800ec6c 	.word	0x0800ec6c
 800abfc:	0800ecfc 	.word	0x0800ecfc

0800ac00 <__ulp>:
 800ac00:	b082      	sub	sp, #8
 800ac02:	ed8d 0b00 	vstr	d0, [sp]
 800ac06:	9b01      	ldr	r3, [sp, #4]
 800ac08:	4912      	ldr	r1, [pc, #72]	; (800ac54 <__ulp+0x54>)
 800ac0a:	4019      	ands	r1, r3
 800ac0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac10:	2900      	cmp	r1, #0
 800ac12:	dd05      	ble.n	800ac20 <__ulp+0x20>
 800ac14:	2200      	movs	r2, #0
 800ac16:	460b      	mov	r3, r1
 800ac18:	ec43 2b10 	vmov	d0, r2, r3
 800ac1c:	b002      	add	sp, #8
 800ac1e:	4770      	bx	lr
 800ac20:	4249      	negs	r1, r1
 800ac22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ac26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	da04      	bge.n	800ac3e <__ulp+0x3e>
 800ac34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ac38:	fa41 f300 	asr.w	r3, r1, r0
 800ac3c:	e7ec      	b.n	800ac18 <__ulp+0x18>
 800ac3e:	f1a0 0114 	sub.w	r1, r0, #20
 800ac42:	291e      	cmp	r1, #30
 800ac44:	bfda      	itte	le
 800ac46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ac4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ac4e:	2101      	movgt	r1, #1
 800ac50:	460a      	mov	r2, r1
 800ac52:	e7e1      	b.n	800ac18 <__ulp+0x18>
 800ac54:	7ff00000 	.word	0x7ff00000

0800ac58 <__b2d>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	6905      	ldr	r5, [r0, #16]
 800ac5c:	f100 0714 	add.w	r7, r0, #20
 800ac60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ac64:	1f2e      	subs	r6, r5, #4
 800ac66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7ff fd52 	bl	800a714 <__hi0bits>
 800ac70:	f1c0 0320 	rsb	r3, r0, #32
 800ac74:	280a      	cmp	r0, #10
 800ac76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800acf4 <__b2d+0x9c>
 800ac7a:	600b      	str	r3, [r1, #0]
 800ac7c:	dc14      	bgt.n	800aca8 <__b2d+0x50>
 800ac7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ac82:	fa24 f10e 	lsr.w	r1, r4, lr
 800ac86:	42b7      	cmp	r7, r6
 800ac88:	ea41 030c 	orr.w	r3, r1, ip
 800ac8c:	bf34      	ite	cc
 800ac8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac92:	2100      	movcs	r1, #0
 800ac94:	3015      	adds	r0, #21
 800ac96:	fa04 f000 	lsl.w	r0, r4, r0
 800ac9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ac9e:	ea40 0201 	orr.w	r2, r0, r1
 800aca2:	ec43 2b10 	vmov	d0, r2, r3
 800aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca8:	42b7      	cmp	r7, r6
 800acaa:	bf3a      	itte	cc
 800acac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800acb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800acb4:	2100      	movcs	r1, #0
 800acb6:	380b      	subs	r0, #11
 800acb8:	d017      	beq.n	800acea <__b2d+0x92>
 800acba:	f1c0 0c20 	rsb	ip, r0, #32
 800acbe:	fa04 f500 	lsl.w	r5, r4, r0
 800acc2:	42be      	cmp	r6, r7
 800acc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800acc8:	ea45 0504 	orr.w	r5, r5, r4
 800accc:	bf8c      	ite	hi
 800acce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800acd2:	2400      	movls	r4, #0
 800acd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800acd8:	fa01 f000 	lsl.w	r0, r1, r0
 800acdc:	fa24 f40c 	lsr.w	r4, r4, ip
 800ace0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ace4:	ea40 0204 	orr.w	r2, r0, r4
 800ace8:	e7db      	b.n	800aca2 <__b2d+0x4a>
 800acea:	ea44 030c 	orr.w	r3, r4, ip
 800acee:	460a      	mov	r2, r1
 800acf0:	e7d7      	b.n	800aca2 <__b2d+0x4a>
 800acf2:	bf00      	nop
 800acf4:	3ff00000 	.word	0x3ff00000

0800acf8 <__d2b>:
 800acf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	4689      	mov	r9, r1
 800acfe:	2101      	movs	r1, #1
 800ad00:	ec57 6b10 	vmov	r6, r7, d0
 800ad04:	4690      	mov	r8, r2
 800ad06:	f7ff fc0f 	bl	800a528 <_Balloc>
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	b930      	cbnz	r0, 800ad1c <__d2b+0x24>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <__d2b+0xb0>)
 800ad12:	4826      	ldr	r0, [pc, #152]	; (800adac <__d2b+0xb4>)
 800ad14:	f240 310a 	movw	r1, #778	; 0x30a
 800ad18:	f000 fb0e 	bl	800b338 <__assert_func>
 800ad1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad24:	bb35      	cbnz	r5, 800ad74 <__d2b+0x7c>
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	d028      	beq.n	800ad7e <__d2b+0x86>
 800ad2c:	4668      	mov	r0, sp
 800ad2e:	9600      	str	r6, [sp, #0]
 800ad30:	f7ff fd10 	bl	800a754 <__lo0bits>
 800ad34:	9900      	ldr	r1, [sp, #0]
 800ad36:	b300      	cbz	r0, 800ad7a <__d2b+0x82>
 800ad38:	9a01      	ldr	r2, [sp, #4]
 800ad3a:	f1c0 0320 	rsb	r3, r0, #32
 800ad3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad42:	430b      	orrs	r3, r1
 800ad44:	40c2      	lsrs	r2, r0
 800ad46:	6163      	str	r3, [r4, #20]
 800ad48:	9201      	str	r2, [sp, #4]
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	61a3      	str	r3, [r4, #24]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bf14      	ite	ne
 800ad52:	2202      	movne	r2, #2
 800ad54:	2201      	moveq	r2, #1
 800ad56:	6122      	str	r2, [r4, #16]
 800ad58:	b1d5      	cbz	r5, 800ad90 <__d2b+0x98>
 800ad5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad5e:	4405      	add	r5, r0
 800ad60:	f8c9 5000 	str.w	r5, [r9]
 800ad64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad68:	f8c8 0000 	str.w	r0, [r8]
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	b003      	add	sp, #12
 800ad70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad78:	e7d5      	b.n	800ad26 <__d2b+0x2e>
 800ad7a:	6161      	str	r1, [r4, #20]
 800ad7c:	e7e5      	b.n	800ad4a <__d2b+0x52>
 800ad7e:	a801      	add	r0, sp, #4
 800ad80:	f7ff fce8 	bl	800a754 <__lo0bits>
 800ad84:	9b01      	ldr	r3, [sp, #4]
 800ad86:	6163      	str	r3, [r4, #20]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	6122      	str	r2, [r4, #16]
 800ad8c:	3020      	adds	r0, #32
 800ad8e:	e7e3      	b.n	800ad58 <__d2b+0x60>
 800ad90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad98:	f8c9 0000 	str.w	r0, [r9]
 800ad9c:	6918      	ldr	r0, [r3, #16]
 800ad9e:	f7ff fcb9 	bl	800a714 <__hi0bits>
 800ada2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ada6:	e7df      	b.n	800ad68 <__d2b+0x70>
 800ada8:	0800ec6c 	.word	0x0800ec6c
 800adac:	0800ecfc 	.word	0x0800ecfc

0800adb0 <__ratio>:
 800adb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	4688      	mov	r8, r1
 800adb6:	4669      	mov	r1, sp
 800adb8:	4681      	mov	r9, r0
 800adba:	f7ff ff4d 	bl	800ac58 <__b2d>
 800adbe:	a901      	add	r1, sp, #4
 800adc0:	4640      	mov	r0, r8
 800adc2:	ec55 4b10 	vmov	r4, r5, d0
 800adc6:	f7ff ff47 	bl	800ac58 <__b2d>
 800adca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800add2:	eba3 0c02 	sub.w	ip, r3, r2
 800add6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ade0:	ec51 0b10 	vmov	r0, r1, d0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfd6      	itet	le
 800ade8:	460a      	movle	r2, r1
 800adea:	462a      	movgt	r2, r5
 800adec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adf0:	468b      	mov	fp, r1
 800adf2:	462f      	mov	r7, r5
 800adf4:	bfd4      	ite	le
 800adf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800adfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800adfe:	4620      	mov	r0, r4
 800ae00:	ee10 2a10 	vmov	r2, s0
 800ae04:	465b      	mov	r3, fp
 800ae06:	4639      	mov	r1, r7
 800ae08:	f7f5 fd20 	bl	800084c <__aeabi_ddiv>
 800ae0c:	ec41 0b10 	vmov	d0, r0, r1
 800ae10:	b003      	add	sp, #12
 800ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae16 <__copybits>:
 800ae16:	3901      	subs	r1, #1
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	1149      	asrs	r1, r1, #5
 800ae1c:	6914      	ldr	r4, [r2, #16]
 800ae1e:	3101      	adds	r1, #1
 800ae20:	f102 0314 	add.w	r3, r2, #20
 800ae24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae2c:	1f05      	subs	r5, r0, #4
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	d30c      	bcc.n	800ae4c <__copybits+0x36>
 800ae32:	1aa3      	subs	r3, r4, r2
 800ae34:	3b11      	subs	r3, #17
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	3211      	adds	r2, #17
 800ae3c:	42a2      	cmp	r2, r4
 800ae3e:	bf88      	it	hi
 800ae40:	2300      	movhi	r3, #0
 800ae42:	4418      	add	r0, r3
 800ae44:	2300      	movs	r3, #0
 800ae46:	4288      	cmp	r0, r1
 800ae48:	d305      	bcc.n	800ae56 <__copybits+0x40>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae54:	e7eb      	b.n	800ae2e <__copybits+0x18>
 800ae56:	f840 3b04 	str.w	r3, [r0], #4
 800ae5a:	e7f4      	b.n	800ae46 <__copybits+0x30>

0800ae5c <__any_on>:
 800ae5c:	f100 0214 	add.w	r2, r0, #20
 800ae60:	6900      	ldr	r0, [r0, #16]
 800ae62:	114b      	asrs	r3, r1, #5
 800ae64:	4298      	cmp	r0, r3
 800ae66:	b510      	push	{r4, lr}
 800ae68:	db11      	blt.n	800ae8e <__any_on+0x32>
 800ae6a:	dd0a      	ble.n	800ae82 <__any_on+0x26>
 800ae6c:	f011 011f 	ands.w	r1, r1, #31
 800ae70:	d007      	beq.n	800ae82 <__any_on+0x26>
 800ae72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae76:	fa24 f001 	lsr.w	r0, r4, r1
 800ae7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ae7e:	428c      	cmp	r4, r1
 800ae80:	d10b      	bne.n	800ae9a <__any_on+0x3e>
 800ae82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d803      	bhi.n	800ae92 <__any_on+0x36>
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	4603      	mov	r3, r0
 800ae90:	e7f7      	b.n	800ae82 <__any_on+0x26>
 800ae92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae96:	2900      	cmp	r1, #0
 800ae98:	d0f5      	beq.n	800ae86 <__any_on+0x2a>
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	e7f6      	b.n	800ae8c <__any_on+0x30>

0800ae9e <_calloc_r>:
 800ae9e:	b513      	push	{r0, r1, r4, lr}
 800aea0:	434a      	muls	r2, r1
 800aea2:	4611      	mov	r1, r2
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	f000 f859 	bl	800af5c <_malloc_r>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	b118      	cbz	r0, 800aeb6 <_calloc_r+0x18>
 800aeae:	9a01      	ldr	r2, [sp, #4]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	f7fc fbc7 	bl	8007644 <memset>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	b002      	add	sp, #8
 800aeba:	bd10      	pop	{r4, pc}

0800aebc <_free_r>:
 800aebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aebe:	2900      	cmp	r1, #0
 800aec0:	d048      	beq.n	800af54 <_free_r+0x98>
 800aec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec6:	9001      	str	r0, [sp, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f1a1 0404 	sub.w	r4, r1, #4
 800aece:	bfb8      	it	lt
 800aed0:	18e4      	addlt	r4, r4, r3
 800aed2:	f000 fa7b 	bl	800b3cc <__malloc_lock>
 800aed6:	4a20      	ldr	r2, [pc, #128]	; (800af58 <_free_r+0x9c>)
 800aed8:	9801      	ldr	r0, [sp, #4]
 800aeda:	6813      	ldr	r3, [r2, #0]
 800aedc:	4615      	mov	r5, r2
 800aede:	b933      	cbnz	r3, 800aeee <_free_r+0x32>
 800aee0:	6063      	str	r3, [r4, #4]
 800aee2:	6014      	str	r4, [r2, #0]
 800aee4:	b003      	add	sp, #12
 800aee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeea:	f000 ba75 	b.w	800b3d8 <__malloc_unlock>
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	d90b      	bls.n	800af0a <_free_r+0x4e>
 800aef2:	6821      	ldr	r1, [r4, #0]
 800aef4:	1862      	adds	r2, r4, r1
 800aef6:	4293      	cmp	r3, r2
 800aef8:	bf04      	itt	eq
 800aefa:	681a      	ldreq	r2, [r3, #0]
 800aefc:	685b      	ldreq	r3, [r3, #4]
 800aefe:	6063      	str	r3, [r4, #4]
 800af00:	bf04      	itt	eq
 800af02:	1852      	addeq	r2, r2, r1
 800af04:	6022      	streq	r2, [r4, #0]
 800af06:	602c      	str	r4, [r5, #0]
 800af08:	e7ec      	b.n	800aee4 <_free_r+0x28>
 800af0a:	461a      	mov	r2, r3
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	b10b      	cbz	r3, 800af14 <_free_r+0x58>
 800af10:	42a3      	cmp	r3, r4
 800af12:	d9fa      	bls.n	800af0a <_free_r+0x4e>
 800af14:	6811      	ldr	r1, [r2, #0]
 800af16:	1855      	adds	r5, r2, r1
 800af18:	42a5      	cmp	r5, r4
 800af1a:	d10b      	bne.n	800af34 <_free_r+0x78>
 800af1c:	6824      	ldr	r4, [r4, #0]
 800af1e:	4421      	add	r1, r4
 800af20:	1854      	adds	r4, r2, r1
 800af22:	42a3      	cmp	r3, r4
 800af24:	6011      	str	r1, [r2, #0]
 800af26:	d1dd      	bne.n	800aee4 <_free_r+0x28>
 800af28:	681c      	ldr	r4, [r3, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	6053      	str	r3, [r2, #4]
 800af2e:	4421      	add	r1, r4
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	e7d7      	b.n	800aee4 <_free_r+0x28>
 800af34:	d902      	bls.n	800af3c <_free_r+0x80>
 800af36:	230c      	movs	r3, #12
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	e7d3      	b.n	800aee4 <_free_r+0x28>
 800af3c:	6825      	ldr	r5, [r4, #0]
 800af3e:	1961      	adds	r1, r4, r5
 800af40:	428b      	cmp	r3, r1
 800af42:	bf04      	itt	eq
 800af44:	6819      	ldreq	r1, [r3, #0]
 800af46:	685b      	ldreq	r3, [r3, #4]
 800af48:	6063      	str	r3, [r4, #4]
 800af4a:	bf04      	itt	eq
 800af4c:	1949      	addeq	r1, r1, r5
 800af4e:	6021      	streq	r1, [r4, #0]
 800af50:	6054      	str	r4, [r2, #4]
 800af52:	e7c7      	b.n	800aee4 <_free_r+0x28>
 800af54:	b003      	add	sp, #12
 800af56:	bd30      	pop	{r4, r5, pc}
 800af58:	20000364 	.word	0x20000364

0800af5c <_malloc_r>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	1ccd      	adds	r5, r1, #3
 800af60:	f025 0503 	bic.w	r5, r5, #3
 800af64:	3508      	adds	r5, #8
 800af66:	2d0c      	cmp	r5, #12
 800af68:	bf38      	it	cc
 800af6a:	250c      	movcc	r5, #12
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	4606      	mov	r6, r0
 800af70:	db01      	blt.n	800af76 <_malloc_r+0x1a>
 800af72:	42a9      	cmp	r1, r5
 800af74:	d903      	bls.n	800af7e <_malloc_r+0x22>
 800af76:	230c      	movs	r3, #12
 800af78:	6033      	str	r3, [r6, #0]
 800af7a:	2000      	movs	r0, #0
 800af7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af7e:	f000 fa25 	bl	800b3cc <__malloc_lock>
 800af82:	4921      	ldr	r1, [pc, #132]	; (800b008 <_malloc_r+0xac>)
 800af84:	680a      	ldr	r2, [r1, #0]
 800af86:	4614      	mov	r4, r2
 800af88:	b99c      	cbnz	r4, 800afb2 <_malloc_r+0x56>
 800af8a:	4f20      	ldr	r7, [pc, #128]	; (800b00c <_malloc_r+0xb0>)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	b923      	cbnz	r3, 800af9a <_malloc_r+0x3e>
 800af90:	4621      	mov	r1, r4
 800af92:	4630      	mov	r0, r6
 800af94:	f000 f9a0 	bl	800b2d8 <_sbrk_r>
 800af98:	6038      	str	r0, [r7, #0]
 800af9a:	4629      	mov	r1, r5
 800af9c:	4630      	mov	r0, r6
 800af9e:	f000 f99b 	bl	800b2d8 <_sbrk_r>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d123      	bne.n	800afee <_malloc_r+0x92>
 800afa6:	230c      	movs	r3, #12
 800afa8:	6033      	str	r3, [r6, #0]
 800afaa:	4630      	mov	r0, r6
 800afac:	f000 fa14 	bl	800b3d8 <__malloc_unlock>
 800afb0:	e7e3      	b.n	800af7a <_malloc_r+0x1e>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	1b5b      	subs	r3, r3, r5
 800afb6:	d417      	bmi.n	800afe8 <_malloc_r+0x8c>
 800afb8:	2b0b      	cmp	r3, #11
 800afba:	d903      	bls.n	800afc4 <_malloc_r+0x68>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	441c      	add	r4, r3
 800afc0:	6025      	str	r5, [r4, #0]
 800afc2:	e004      	b.n	800afce <_malloc_r+0x72>
 800afc4:	6863      	ldr	r3, [r4, #4]
 800afc6:	42a2      	cmp	r2, r4
 800afc8:	bf0c      	ite	eq
 800afca:	600b      	streq	r3, [r1, #0]
 800afcc:	6053      	strne	r3, [r2, #4]
 800afce:	4630      	mov	r0, r6
 800afd0:	f000 fa02 	bl	800b3d8 <__malloc_unlock>
 800afd4:	f104 000b 	add.w	r0, r4, #11
 800afd8:	1d23      	adds	r3, r4, #4
 800afda:	f020 0007 	bic.w	r0, r0, #7
 800afde:	1ac2      	subs	r2, r0, r3
 800afe0:	d0cc      	beq.n	800af7c <_malloc_r+0x20>
 800afe2:	1a1b      	subs	r3, r3, r0
 800afe4:	50a3      	str	r3, [r4, r2]
 800afe6:	e7c9      	b.n	800af7c <_malloc_r+0x20>
 800afe8:	4622      	mov	r2, r4
 800afea:	6864      	ldr	r4, [r4, #4]
 800afec:	e7cc      	b.n	800af88 <_malloc_r+0x2c>
 800afee:	1cc4      	adds	r4, r0, #3
 800aff0:	f024 0403 	bic.w	r4, r4, #3
 800aff4:	42a0      	cmp	r0, r4
 800aff6:	d0e3      	beq.n	800afc0 <_malloc_r+0x64>
 800aff8:	1a21      	subs	r1, r4, r0
 800affa:	4630      	mov	r0, r6
 800affc:	f000 f96c 	bl	800b2d8 <_sbrk_r>
 800b000:	3001      	adds	r0, #1
 800b002:	d1dd      	bne.n	800afc0 <_malloc_r+0x64>
 800b004:	e7cf      	b.n	800afa6 <_malloc_r+0x4a>
 800b006:	bf00      	nop
 800b008:	20000364 	.word	0x20000364
 800b00c:	20000368 	.word	0x20000368

0800b010 <__ssputs_r>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	688e      	ldr	r6, [r1, #8]
 800b016:	429e      	cmp	r6, r3
 800b018:	4682      	mov	sl, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	4690      	mov	r8, r2
 800b01e:	461f      	mov	r7, r3
 800b020:	d838      	bhi.n	800b094 <__ssputs_r+0x84>
 800b022:	898a      	ldrh	r2, [r1, #12]
 800b024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b028:	d032      	beq.n	800b090 <__ssputs_r+0x80>
 800b02a:	6825      	ldr	r5, [r4, #0]
 800b02c:	6909      	ldr	r1, [r1, #16]
 800b02e:	eba5 0901 	sub.w	r9, r5, r1
 800b032:	6965      	ldr	r5, [r4, #20]
 800b034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b03c:	3301      	adds	r3, #1
 800b03e:	444b      	add	r3, r9
 800b040:	106d      	asrs	r5, r5, #1
 800b042:	429d      	cmp	r5, r3
 800b044:	bf38      	it	cc
 800b046:	461d      	movcc	r5, r3
 800b048:	0553      	lsls	r3, r2, #21
 800b04a:	d531      	bpl.n	800b0b0 <__ssputs_r+0xa0>
 800b04c:	4629      	mov	r1, r5
 800b04e:	f7ff ff85 	bl	800af5c <_malloc_r>
 800b052:	4606      	mov	r6, r0
 800b054:	b950      	cbnz	r0, 800b06c <__ssputs_r+0x5c>
 800b056:	230c      	movs	r3, #12
 800b058:	f8ca 3000 	str.w	r3, [sl]
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06c:	6921      	ldr	r1, [r4, #16]
 800b06e:	464a      	mov	r2, r9
 800b070:	f7ff fa4c 	bl	800a50c <memcpy>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07e:	81a3      	strh	r3, [r4, #12]
 800b080:	6126      	str	r6, [r4, #16]
 800b082:	6165      	str	r5, [r4, #20]
 800b084:	444e      	add	r6, r9
 800b086:	eba5 0509 	sub.w	r5, r5, r9
 800b08a:	6026      	str	r6, [r4, #0]
 800b08c:	60a5      	str	r5, [r4, #8]
 800b08e:	463e      	mov	r6, r7
 800b090:	42be      	cmp	r6, r7
 800b092:	d900      	bls.n	800b096 <__ssputs_r+0x86>
 800b094:	463e      	mov	r6, r7
 800b096:	4632      	mov	r2, r6
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	4641      	mov	r1, r8
 800b09c:	f000 f97c 	bl	800b398 <memmove>
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	1b9b      	subs	r3, r3, r6
 800b0a6:	4432      	add	r2, r6
 800b0a8:	60a3      	str	r3, [r4, #8]
 800b0aa:	6022      	str	r2, [r4, #0]
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e7db      	b.n	800b068 <__ssputs_r+0x58>
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	f000 f997 	bl	800b3e4 <_realloc_r>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1e1      	bne.n	800b080 <__ssputs_r+0x70>
 800b0bc:	6921      	ldr	r1, [r4, #16]
 800b0be:	4650      	mov	r0, sl
 800b0c0:	f7ff fefc 	bl	800aebc <_free_r>
 800b0c4:	e7c7      	b.n	800b056 <__ssputs_r+0x46>
	...

0800b0c8 <_svfiprintf_r>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	4698      	mov	r8, r3
 800b0ce:	898b      	ldrh	r3, [r1, #12]
 800b0d0:	061b      	lsls	r3, r3, #24
 800b0d2:	b09d      	sub	sp, #116	; 0x74
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	4614      	mov	r4, r2
 800b0da:	d50e      	bpl.n	800b0fa <_svfiprintf_r+0x32>
 800b0dc:	690b      	ldr	r3, [r1, #16]
 800b0de:	b963      	cbnz	r3, 800b0fa <_svfiprintf_r+0x32>
 800b0e0:	2140      	movs	r1, #64	; 0x40
 800b0e2:	f7ff ff3b 	bl	800af5c <_malloc_r>
 800b0e6:	6028      	str	r0, [r5, #0]
 800b0e8:	6128      	str	r0, [r5, #16]
 800b0ea:	b920      	cbnz	r0, 800b0f6 <_svfiprintf_r+0x2e>
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f4:	e0d1      	b.n	800b29a <_svfiprintf_r+0x1d2>
 800b0f6:	2340      	movs	r3, #64	; 0x40
 800b0f8:	616b      	str	r3, [r5, #20]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0fe:	2320      	movs	r3, #32
 800b100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b104:	f8cd 800c 	str.w	r8, [sp, #12]
 800b108:	2330      	movs	r3, #48	; 0x30
 800b10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2b4 <_svfiprintf_r+0x1ec>
 800b10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b112:	f04f 0901 	mov.w	r9, #1
 800b116:	4623      	mov	r3, r4
 800b118:	469a      	mov	sl, r3
 800b11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b11e:	b10a      	cbz	r2, 800b124 <_svfiprintf_r+0x5c>
 800b120:	2a25      	cmp	r2, #37	; 0x25
 800b122:	d1f9      	bne.n	800b118 <_svfiprintf_r+0x50>
 800b124:	ebba 0b04 	subs.w	fp, sl, r4
 800b128:	d00b      	beq.n	800b142 <_svfiprintf_r+0x7a>
 800b12a:	465b      	mov	r3, fp
 800b12c:	4622      	mov	r2, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	4638      	mov	r0, r7
 800b132:	f7ff ff6d 	bl	800b010 <__ssputs_r>
 800b136:	3001      	adds	r0, #1
 800b138:	f000 80aa 	beq.w	800b290 <_svfiprintf_r+0x1c8>
 800b13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b13e:	445a      	add	r2, fp
 800b140:	9209      	str	r2, [sp, #36]	; 0x24
 800b142:	f89a 3000 	ldrb.w	r3, [sl]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 80a2 	beq.w	800b290 <_svfiprintf_r+0x1c8>
 800b14c:	2300      	movs	r3, #0
 800b14e:	f04f 32ff 	mov.w	r2, #4294967295
 800b152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b156:	f10a 0a01 	add.w	sl, sl, #1
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	9307      	str	r3, [sp, #28]
 800b15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b162:	931a      	str	r3, [sp, #104]	; 0x68
 800b164:	4654      	mov	r4, sl
 800b166:	2205      	movs	r2, #5
 800b168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16c:	4851      	ldr	r0, [pc, #324]	; (800b2b4 <_svfiprintf_r+0x1ec>)
 800b16e:	f7f5 f837 	bl	80001e0 <memchr>
 800b172:	9a04      	ldr	r2, [sp, #16]
 800b174:	b9d8      	cbnz	r0, 800b1ae <_svfiprintf_r+0xe6>
 800b176:	06d0      	lsls	r0, r2, #27
 800b178:	bf44      	itt	mi
 800b17a:	2320      	movmi	r3, #32
 800b17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b180:	0711      	lsls	r1, r2, #28
 800b182:	bf44      	itt	mi
 800b184:	232b      	movmi	r3, #43	; 0x2b
 800b186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18a:	f89a 3000 	ldrb.w	r3, [sl]
 800b18e:	2b2a      	cmp	r3, #42	; 0x2a
 800b190:	d015      	beq.n	800b1be <_svfiprintf_r+0xf6>
 800b192:	9a07      	ldr	r2, [sp, #28]
 800b194:	4654      	mov	r4, sl
 800b196:	2000      	movs	r0, #0
 800b198:	f04f 0c0a 	mov.w	ip, #10
 800b19c:	4621      	mov	r1, r4
 800b19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a2:	3b30      	subs	r3, #48	; 0x30
 800b1a4:	2b09      	cmp	r3, #9
 800b1a6:	d94e      	bls.n	800b246 <_svfiprintf_r+0x17e>
 800b1a8:	b1b0      	cbz	r0, 800b1d8 <_svfiprintf_r+0x110>
 800b1aa:	9207      	str	r2, [sp, #28]
 800b1ac:	e014      	b.n	800b1d8 <_svfiprintf_r+0x110>
 800b1ae:	eba0 0308 	sub.w	r3, r0, r8
 800b1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	46a2      	mov	sl, r4
 800b1bc:	e7d2      	b.n	800b164 <_svfiprintf_r+0x9c>
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	1d19      	adds	r1, r3, #4
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	9103      	str	r1, [sp, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bfbb      	ittet	lt
 800b1ca:	425b      	neglt	r3, r3
 800b1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d0:	9307      	strge	r3, [sp, #28]
 800b1d2:	9307      	strlt	r3, [sp, #28]
 800b1d4:	bfb8      	it	lt
 800b1d6:	9204      	strlt	r2, [sp, #16]
 800b1d8:	7823      	ldrb	r3, [r4, #0]
 800b1da:	2b2e      	cmp	r3, #46	; 0x2e
 800b1dc:	d10c      	bne.n	800b1f8 <_svfiprintf_r+0x130>
 800b1de:	7863      	ldrb	r3, [r4, #1]
 800b1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e2:	d135      	bne.n	800b250 <_svfiprintf_r+0x188>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	9203      	str	r2, [sp, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	bfb8      	it	lt
 800b1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1f4:	3402      	adds	r4, #2
 800b1f6:	9305      	str	r3, [sp, #20]
 800b1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2c4 <_svfiprintf_r+0x1fc>
 800b1fc:	7821      	ldrb	r1, [r4, #0]
 800b1fe:	2203      	movs	r2, #3
 800b200:	4650      	mov	r0, sl
 800b202:	f7f4 ffed 	bl	80001e0 <memchr>
 800b206:	b140      	cbz	r0, 800b21a <_svfiprintf_r+0x152>
 800b208:	2340      	movs	r3, #64	; 0x40
 800b20a:	eba0 000a 	sub.w	r0, r0, sl
 800b20e:	fa03 f000 	lsl.w	r0, r3, r0
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	4303      	orrs	r3, r0
 800b216:	3401      	adds	r4, #1
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21e:	4826      	ldr	r0, [pc, #152]	; (800b2b8 <_svfiprintf_r+0x1f0>)
 800b220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b224:	2206      	movs	r2, #6
 800b226:	f7f4 ffdb 	bl	80001e0 <memchr>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d038      	beq.n	800b2a0 <_svfiprintf_r+0x1d8>
 800b22e:	4b23      	ldr	r3, [pc, #140]	; (800b2bc <_svfiprintf_r+0x1f4>)
 800b230:	bb1b      	cbnz	r3, 800b27a <_svfiprintf_r+0x1b2>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	3307      	adds	r3, #7
 800b236:	f023 0307 	bic.w	r3, r3, #7
 800b23a:	3308      	adds	r3, #8
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b240:	4433      	add	r3, r6
 800b242:	9309      	str	r3, [sp, #36]	; 0x24
 800b244:	e767      	b.n	800b116 <_svfiprintf_r+0x4e>
 800b246:	fb0c 3202 	mla	r2, ip, r2, r3
 800b24a:	460c      	mov	r4, r1
 800b24c:	2001      	movs	r0, #1
 800b24e:	e7a5      	b.n	800b19c <_svfiprintf_r+0xd4>
 800b250:	2300      	movs	r3, #0
 800b252:	3401      	adds	r4, #1
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	4619      	mov	r1, r3
 800b258:	f04f 0c0a 	mov.w	ip, #10
 800b25c:	4620      	mov	r0, r4
 800b25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b262:	3a30      	subs	r2, #48	; 0x30
 800b264:	2a09      	cmp	r2, #9
 800b266:	d903      	bls.n	800b270 <_svfiprintf_r+0x1a8>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0c5      	beq.n	800b1f8 <_svfiprintf_r+0x130>
 800b26c:	9105      	str	r1, [sp, #20]
 800b26e:	e7c3      	b.n	800b1f8 <_svfiprintf_r+0x130>
 800b270:	fb0c 2101 	mla	r1, ip, r1, r2
 800b274:	4604      	mov	r4, r0
 800b276:	2301      	movs	r3, #1
 800b278:	e7f0      	b.n	800b25c <_svfiprintf_r+0x194>
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	462a      	mov	r2, r5
 800b280:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <_svfiprintf_r+0x1f8>)
 800b282:	a904      	add	r1, sp, #16
 800b284:	4638      	mov	r0, r7
 800b286:	f7fc fa85 	bl	8007794 <_printf_float>
 800b28a:	1c42      	adds	r2, r0, #1
 800b28c:	4606      	mov	r6, r0
 800b28e:	d1d6      	bne.n	800b23e <_svfiprintf_r+0x176>
 800b290:	89ab      	ldrh	r3, [r5, #12]
 800b292:	065b      	lsls	r3, r3, #25
 800b294:	f53f af2c 	bmi.w	800b0f0 <_svfiprintf_r+0x28>
 800b298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b29a:	b01d      	add	sp, #116	; 0x74
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	ab03      	add	r3, sp, #12
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	462a      	mov	r2, r5
 800b2a6:	4b06      	ldr	r3, [pc, #24]	; (800b2c0 <_svfiprintf_r+0x1f8>)
 800b2a8:	a904      	add	r1, sp, #16
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	f7fc fd16 	bl	8007cdc <_printf_i>
 800b2b0:	e7eb      	b.n	800b28a <_svfiprintf_r+0x1c2>
 800b2b2:	bf00      	nop
 800b2b4:	0800ee5c 	.word	0x0800ee5c
 800b2b8:	0800ee66 	.word	0x0800ee66
 800b2bc:	08007795 	.word	0x08007795
 800b2c0:	0800b011 	.word	0x0800b011
 800b2c4:	0800ee62 	.word	0x0800ee62

0800b2c8 <nan>:
 800b2c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b2d0 <nan+0x8>
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	00000000 	.word	0x00000000
 800b2d4:	7ff80000 	.word	0x7ff80000

0800b2d8 <_sbrk_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d06      	ldr	r5, [pc, #24]	; (800b2f4 <_sbrk_r+0x1c>)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	f7f7 fbd2 	bl	8002a8c <_sbrk>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_sbrk_r+0x1a>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_sbrk_r+0x1a>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	20000930 	.word	0x20000930

0800b2f8 <strncmp>:
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	b16a      	cbz	r2, 800b318 <strncmp+0x20>
 800b2fc:	3901      	subs	r1, #1
 800b2fe:	1884      	adds	r4, r0, r2
 800b300:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b304:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b308:	4293      	cmp	r3, r2
 800b30a:	d103      	bne.n	800b314 <strncmp+0x1c>
 800b30c:	42a0      	cmp	r0, r4
 800b30e:	d001      	beq.n	800b314 <strncmp+0x1c>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f5      	bne.n	800b300 <strncmp+0x8>
 800b314:	1a98      	subs	r0, r3, r2
 800b316:	bd10      	pop	{r4, pc}
 800b318:	4610      	mov	r0, r2
 800b31a:	e7fc      	b.n	800b316 <strncmp+0x1e>

0800b31c <__ascii_wctomb>:
 800b31c:	b149      	cbz	r1, 800b332 <__ascii_wctomb+0x16>
 800b31e:	2aff      	cmp	r2, #255	; 0xff
 800b320:	bf85      	ittet	hi
 800b322:	238a      	movhi	r3, #138	; 0x8a
 800b324:	6003      	strhi	r3, [r0, #0]
 800b326:	700a      	strbls	r2, [r1, #0]
 800b328:	f04f 30ff 	movhi.w	r0, #4294967295
 800b32c:	bf98      	it	ls
 800b32e:	2001      	movls	r0, #1
 800b330:	4770      	bx	lr
 800b332:	4608      	mov	r0, r1
 800b334:	4770      	bx	lr
	...

0800b338 <__assert_func>:
 800b338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b33a:	4614      	mov	r4, r2
 800b33c:	461a      	mov	r2, r3
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <__assert_func+0x2c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4605      	mov	r5, r0
 800b344:	68d8      	ldr	r0, [r3, #12]
 800b346:	b14c      	cbz	r4, 800b35c <__assert_func+0x24>
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <__assert_func+0x30>)
 800b34a:	9100      	str	r1, [sp, #0]
 800b34c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b350:	4906      	ldr	r1, [pc, #24]	; (800b36c <__assert_func+0x34>)
 800b352:	462b      	mov	r3, r5
 800b354:	f000 f80e 	bl	800b374 <fiprintf>
 800b358:	f000 fa84 	bl	800b864 <abort>
 800b35c:	4b04      	ldr	r3, [pc, #16]	; (800b370 <__assert_func+0x38>)
 800b35e:	461c      	mov	r4, r3
 800b360:	e7f3      	b.n	800b34a <__assert_func+0x12>
 800b362:	bf00      	nop
 800b364:	20000160 	.word	0x20000160
 800b368:	0800ee6d 	.word	0x0800ee6d
 800b36c:	0800ee7a 	.word	0x0800ee7a
 800b370:	0800eea8 	.word	0x0800eea8

0800b374 <fiprintf>:
 800b374:	b40e      	push	{r1, r2, r3}
 800b376:	b503      	push	{r0, r1, lr}
 800b378:	4601      	mov	r1, r0
 800b37a:	ab03      	add	r3, sp, #12
 800b37c:	4805      	ldr	r0, [pc, #20]	; (800b394 <fiprintf+0x20>)
 800b37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b382:	6800      	ldr	r0, [r0, #0]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	f000 f87d 	bl	800b484 <_vfiprintf_r>
 800b38a:	b002      	add	sp, #8
 800b38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b390:	b003      	add	sp, #12
 800b392:	4770      	bx	lr
 800b394:	20000160 	.word	0x20000160

0800b398 <memmove>:
 800b398:	4288      	cmp	r0, r1
 800b39a:	b510      	push	{r4, lr}
 800b39c:	eb01 0402 	add.w	r4, r1, r2
 800b3a0:	d902      	bls.n	800b3a8 <memmove+0x10>
 800b3a2:	4284      	cmp	r4, r0
 800b3a4:	4623      	mov	r3, r4
 800b3a6:	d807      	bhi.n	800b3b8 <memmove+0x20>
 800b3a8:	1e43      	subs	r3, r0, #1
 800b3aa:	42a1      	cmp	r1, r4
 800b3ac:	d008      	beq.n	800b3c0 <memmove+0x28>
 800b3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3b6:	e7f8      	b.n	800b3aa <memmove+0x12>
 800b3b8:	4402      	add	r2, r0
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	428a      	cmp	r2, r1
 800b3be:	d100      	bne.n	800b3c2 <memmove+0x2a>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ca:	e7f7      	b.n	800b3bc <memmove+0x24>

0800b3cc <__malloc_lock>:
 800b3cc:	4801      	ldr	r0, [pc, #4]	; (800b3d4 <__malloc_lock+0x8>)
 800b3ce:	f000 bc09 	b.w	800bbe4 <__retarget_lock_acquire_recursive>
 800b3d2:	bf00      	nop
 800b3d4:	20000938 	.word	0x20000938

0800b3d8 <__malloc_unlock>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	; (800b3e0 <__malloc_unlock+0x8>)
 800b3da:	f000 bc04 	b.w	800bbe6 <__retarget_lock_release_recursive>
 800b3de:	bf00      	nop
 800b3e0:	20000938 	.word	0x20000938

0800b3e4 <_realloc_r>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	b921      	cbnz	r1, 800b3f8 <_realloc_r+0x14>
 800b3ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	f7ff bdb2 	b.w	800af5c <_malloc_r>
 800b3f8:	b922      	cbnz	r2, 800b404 <_realloc_r+0x20>
 800b3fa:	f7ff fd5f 	bl	800aebc <_free_r>
 800b3fe:	4625      	mov	r5, r4
 800b400:	4628      	mov	r0, r5
 800b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b404:	f000 fc54 	bl	800bcb0 <_malloc_usable_size_r>
 800b408:	42a0      	cmp	r0, r4
 800b40a:	d20f      	bcs.n	800b42c <_realloc_r+0x48>
 800b40c:	4621      	mov	r1, r4
 800b40e:	4638      	mov	r0, r7
 800b410:	f7ff fda4 	bl	800af5c <_malloc_r>
 800b414:	4605      	mov	r5, r0
 800b416:	2800      	cmp	r0, #0
 800b418:	d0f2      	beq.n	800b400 <_realloc_r+0x1c>
 800b41a:	4631      	mov	r1, r6
 800b41c:	4622      	mov	r2, r4
 800b41e:	f7ff f875 	bl	800a50c <memcpy>
 800b422:	4631      	mov	r1, r6
 800b424:	4638      	mov	r0, r7
 800b426:	f7ff fd49 	bl	800aebc <_free_r>
 800b42a:	e7e9      	b.n	800b400 <_realloc_r+0x1c>
 800b42c:	4635      	mov	r5, r6
 800b42e:	e7e7      	b.n	800b400 <_realloc_r+0x1c>

0800b430 <__sfputc_r>:
 800b430:	6893      	ldr	r3, [r2, #8]
 800b432:	3b01      	subs	r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	b410      	push	{r4}
 800b438:	6093      	str	r3, [r2, #8]
 800b43a:	da08      	bge.n	800b44e <__sfputc_r+0x1e>
 800b43c:	6994      	ldr	r4, [r2, #24]
 800b43e:	42a3      	cmp	r3, r4
 800b440:	db01      	blt.n	800b446 <__sfputc_r+0x16>
 800b442:	290a      	cmp	r1, #10
 800b444:	d103      	bne.n	800b44e <__sfputc_r+0x1e>
 800b446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b44a:	f000 b94b 	b.w	800b6e4 <__swbuf_r>
 800b44e:	6813      	ldr	r3, [r2, #0]
 800b450:	1c58      	adds	r0, r3, #1
 800b452:	6010      	str	r0, [r2, #0]
 800b454:	7019      	strb	r1, [r3, #0]
 800b456:	4608      	mov	r0, r1
 800b458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <__sfputs_r>:
 800b45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b460:	4606      	mov	r6, r0
 800b462:	460f      	mov	r7, r1
 800b464:	4614      	mov	r4, r2
 800b466:	18d5      	adds	r5, r2, r3
 800b468:	42ac      	cmp	r4, r5
 800b46a:	d101      	bne.n	800b470 <__sfputs_r+0x12>
 800b46c:	2000      	movs	r0, #0
 800b46e:	e007      	b.n	800b480 <__sfputs_r+0x22>
 800b470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b474:	463a      	mov	r2, r7
 800b476:	4630      	mov	r0, r6
 800b478:	f7ff ffda 	bl	800b430 <__sfputc_r>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d1f3      	bne.n	800b468 <__sfputs_r+0xa>
 800b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b484 <_vfiprintf_r>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	460d      	mov	r5, r1
 800b48a:	b09d      	sub	sp, #116	; 0x74
 800b48c:	4614      	mov	r4, r2
 800b48e:	4698      	mov	r8, r3
 800b490:	4606      	mov	r6, r0
 800b492:	b118      	cbz	r0, 800b49c <_vfiprintf_r+0x18>
 800b494:	6983      	ldr	r3, [r0, #24]
 800b496:	b90b      	cbnz	r3, 800b49c <_vfiprintf_r+0x18>
 800b498:	f000 fb06 	bl	800baa8 <__sinit>
 800b49c:	4b89      	ldr	r3, [pc, #548]	; (800b6c4 <_vfiprintf_r+0x240>)
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	d11b      	bne.n	800b4da <_vfiprintf_r+0x56>
 800b4a2:	6875      	ldr	r5, [r6, #4]
 800b4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a6:	07d9      	lsls	r1, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_vfiprintf_r+0x32>
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	059a      	lsls	r2, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_vfiprintf_r+0x32>
 800b4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b2:	f000 fb97 	bl	800bbe4 <__retarget_lock_acquire_recursive>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	071b      	lsls	r3, r3, #28
 800b4ba:	d501      	bpl.n	800b4c0 <_vfiprintf_r+0x3c>
 800b4bc:	692b      	ldr	r3, [r5, #16]
 800b4be:	b9eb      	cbnz	r3, 800b4fc <_vfiprintf_r+0x78>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f000 f960 	bl	800b788 <__swsetup_r>
 800b4c8:	b1c0      	cbz	r0, 800b4fc <_vfiprintf_r+0x78>
 800b4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4cc:	07dc      	lsls	r4, r3, #31
 800b4ce:	d50e      	bpl.n	800b4ee <_vfiprintf_r+0x6a>
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	b01d      	add	sp, #116	; 0x74
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	4b7b      	ldr	r3, [pc, #492]	; (800b6c8 <_vfiprintf_r+0x244>)
 800b4dc:	429d      	cmp	r5, r3
 800b4de:	d101      	bne.n	800b4e4 <_vfiprintf_r+0x60>
 800b4e0:	68b5      	ldr	r5, [r6, #8]
 800b4e2:	e7df      	b.n	800b4a4 <_vfiprintf_r+0x20>
 800b4e4:	4b79      	ldr	r3, [pc, #484]	; (800b6cc <_vfiprintf_r+0x248>)
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	bf08      	it	eq
 800b4ea:	68f5      	ldreq	r5, [r6, #12]
 800b4ec:	e7da      	b.n	800b4a4 <_vfiprintf_r+0x20>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	0598      	lsls	r0, r3, #22
 800b4f2:	d4ed      	bmi.n	800b4d0 <_vfiprintf_r+0x4c>
 800b4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4f6:	f000 fb76 	bl	800bbe6 <__retarget_lock_release_recursive>
 800b4fa:	e7e9      	b.n	800b4d0 <_vfiprintf_r+0x4c>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b500:	2320      	movs	r3, #32
 800b502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b506:	f8cd 800c 	str.w	r8, [sp, #12]
 800b50a:	2330      	movs	r3, #48	; 0x30
 800b50c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b6d0 <_vfiprintf_r+0x24c>
 800b510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b514:	f04f 0901 	mov.w	r9, #1
 800b518:	4623      	mov	r3, r4
 800b51a:	469a      	mov	sl, r3
 800b51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b520:	b10a      	cbz	r2, 800b526 <_vfiprintf_r+0xa2>
 800b522:	2a25      	cmp	r2, #37	; 0x25
 800b524:	d1f9      	bne.n	800b51a <_vfiprintf_r+0x96>
 800b526:	ebba 0b04 	subs.w	fp, sl, r4
 800b52a:	d00b      	beq.n	800b544 <_vfiprintf_r+0xc0>
 800b52c:	465b      	mov	r3, fp
 800b52e:	4622      	mov	r2, r4
 800b530:	4629      	mov	r1, r5
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ff93 	bl	800b45e <__sfputs_r>
 800b538:	3001      	adds	r0, #1
 800b53a:	f000 80aa 	beq.w	800b692 <_vfiprintf_r+0x20e>
 800b53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b540:	445a      	add	r2, fp
 800b542:	9209      	str	r2, [sp, #36]	; 0x24
 800b544:	f89a 3000 	ldrb.w	r3, [sl]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80a2 	beq.w	800b692 <_vfiprintf_r+0x20e>
 800b54e:	2300      	movs	r3, #0
 800b550:	f04f 32ff 	mov.w	r2, #4294967295
 800b554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b558:	f10a 0a01 	add.w	sl, sl, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	9307      	str	r3, [sp, #28]
 800b560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b564:	931a      	str	r3, [sp, #104]	; 0x68
 800b566:	4654      	mov	r4, sl
 800b568:	2205      	movs	r2, #5
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	4858      	ldr	r0, [pc, #352]	; (800b6d0 <_vfiprintf_r+0x24c>)
 800b570:	f7f4 fe36 	bl	80001e0 <memchr>
 800b574:	9a04      	ldr	r2, [sp, #16]
 800b576:	b9d8      	cbnz	r0, 800b5b0 <_vfiprintf_r+0x12c>
 800b578:	06d1      	lsls	r1, r2, #27
 800b57a:	bf44      	itt	mi
 800b57c:	2320      	movmi	r3, #32
 800b57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b582:	0713      	lsls	r3, r2, #28
 800b584:	bf44      	itt	mi
 800b586:	232b      	movmi	r3, #43	; 0x2b
 800b588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b2a      	cmp	r3, #42	; 0x2a
 800b592:	d015      	beq.n	800b5c0 <_vfiprintf_r+0x13c>
 800b594:	9a07      	ldr	r2, [sp, #28]
 800b596:	4654      	mov	r4, sl
 800b598:	2000      	movs	r0, #0
 800b59a:	f04f 0c0a 	mov.w	ip, #10
 800b59e:	4621      	mov	r1, r4
 800b5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5a4:	3b30      	subs	r3, #48	; 0x30
 800b5a6:	2b09      	cmp	r3, #9
 800b5a8:	d94e      	bls.n	800b648 <_vfiprintf_r+0x1c4>
 800b5aa:	b1b0      	cbz	r0, 800b5da <_vfiprintf_r+0x156>
 800b5ac:	9207      	str	r2, [sp, #28]
 800b5ae:	e014      	b.n	800b5da <_vfiprintf_r+0x156>
 800b5b0:	eba0 0308 	sub.w	r3, r0, r8
 800b5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	9304      	str	r3, [sp, #16]
 800b5bc:	46a2      	mov	sl, r4
 800b5be:	e7d2      	b.n	800b566 <_vfiprintf_r+0xe2>
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	1d19      	adds	r1, r3, #4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	9103      	str	r1, [sp, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bfbb      	ittet	lt
 800b5cc:	425b      	neglt	r3, r3
 800b5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b5d2:	9307      	strge	r3, [sp, #28]
 800b5d4:	9307      	strlt	r3, [sp, #28]
 800b5d6:	bfb8      	it	lt
 800b5d8:	9204      	strlt	r2, [sp, #16]
 800b5da:	7823      	ldrb	r3, [r4, #0]
 800b5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b5de:	d10c      	bne.n	800b5fa <_vfiprintf_r+0x176>
 800b5e0:	7863      	ldrb	r3, [r4, #1]
 800b5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e4:	d135      	bne.n	800b652 <_vfiprintf_r+0x1ce>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	1d1a      	adds	r2, r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	9203      	str	r2, [sp, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfb8      	it	lt
 800b5f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5f6:	3402      	adds	r4, #2
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b6e0 <_vfiprintf_r+0x25c>
 800b5fe:	7821      	ldrb	r1, [r4, #0]
 800b600:	2203      	movs	r2, #3
 800b602:	4650      	mov	r0, sl
 800b604:	f7f4 fdec 	bl	80001e0 <memchr>
 800b608:	b140      	cbz	r0, 800b61c <_vfiprintf_r+0x198>
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	eba0 000a 	sub.w	r0, r0, sl
 800b610:	fa03 f000 	lsl.w	r0, r3, r0
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	4303      	orrs	r3, r0
 800b618:	3401      	adds	r4, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b620:	482c      	ldr	r0, [pc, #176]	; (800b6d4 <_vfiprintf_r+0x250>)
 800b622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b626:	2206      	movs	r2, #6
 800b628:	f7f4 fdda 	bl	80001e0 <memchr>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d03f      	beq.n	800b6b0 <_vfiprintf_r+0x22c>
 800b630:	4b29      	ldr	r3, [pc, #164]	; (800b6d8 <_vfiprintf_r+0x254>)
 800b632:	bb1b      	cbnz	r3, 800b67c <_vfiprintf_r+0x1f8>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	3307      	adds	r3, #7
 800b638:	f023 0307 	bic.w	r3, r3, #7
 800b63c:	3308      	adds	r3, #8
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b642:	443b      	add	r3, r7
 800b644:	9309      	str	r3, [sp, #36]	; 0x24
 800b646:	e767      	b.n	800b518 <_vfiprintf_r+0x94>
 800b648:	fb0c 3202 	mla	r2, ip, r2, r3
 800b64c:	460c      	mov	r4, r1
 800b64e:	2001      	movs	r0, #1
 800b650:	e7a5      	b.n	800b59e <_vfiprintf_r+0x11a>
 800b652:	2300      	movs	r3, #0
 800b654:	3401      	adds	r4, #1
 800b656:	9305      	str	r3, [sp, #20]
 800b658:	4619      	mov	r1, r3
 800b65a:	f04f 0c0a 	mov.w	ip, #10
 800b65e:	4620      	mov	r0, r4
 800b660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b664:	3a30      	subs	r2, #48	; 0x30
 800b666:	2a09      	cmp	r2, #9
 800b668:	d903      	bls.n	800b672 <_vfiprintf_r+0x1ee>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0c5      	beq.n	800b5fa <_vfiprintf_r+0x176>
 800b66e:	9105      	str	r1, [sp, #20]
 800b670:	e7c3      	b.n	800b5fa <_vfiprintf_r+0x176>
 800b672:	fb0c 2101 	mla	r1, ip, r1, r2
 800b676:	4604      	mov	r4, r0
 800b678:	2301      	movs	r3, #1
 800b67a:	e7f0      	b.n	800b65e <_vfiprintf_r+0x1da>
 800b67c:	ab03      	add	r3, sp, #12
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	462a      	mov	r2, r5
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <_vfiprintf_r+0x258>)
 800b684:	a904      	add	r1, sp, #16
 800b686:	4630      	mov	r0, r6
 800b688:	f7fc f884 	bl	8007794 <_printf_float>
 800b68c:	4607      	mov	r7, r0
 800b68e:	1c78      	adds	r0, r7, #1
 800b690:	d1d6      	bne.n	800b640 <_vfiprintf_r+0x1bc>
 800b692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b694:	07d9      	lsls	r1, r3, #31
 800b696:	d405      	bmi.n	800b6a4 <_vfiprintf_r+0x220>
 800b698:	89ab      	ldrh	r3, [r5, #12]
 800b69a:	059a      	lsls	r2, r3, #22
 800b69c:	d402      	bmi.n	800b6a4 <_vfiprintf_r+0x220>
 800b69e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6a0:	f000 faa1 	bl	800bbe6 <__retarget_lock_release_recursive>
 800b6a4:	89ab      	ldrh	r3, [r5, #12]
 800b6a6:	065b      	lsls	r3, r3, #25
 800b6a8:	f53f af12 	bmi.w	800b4d0 <_vfiprintf_r+0x4c>
 800b6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ae:	e711      	b.n	800b4d4 <_vfiprintf_r+0x50>
 800b6b0:	ab03      	add	r3, sp, #12
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	462a      	mov	r2, r5
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <_vfiprintf_r+0x258>)
 800b6b8:	a904      	add	r1, sp, #16
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7fc fb0e 	bl	8007cdc <_printf_i>
 800b6c0:	e7e4      	b.n	800b68c <_vfiprintf_r+0x208>
 800b6c2:	bf00      	nop
 800b6c4:	0800eecc 	.word	0x0800eecc
 800b6c8:	0800eeec 	.word	0x0800eeec
 800b6cc:	0800eeac 	.word	0x0800eeac
 800b6d0:	0800ee5c 	.word	0x0800ee5c
 800b6d4:	0800ee66 	.word	0x0800ee66
 800b6d8:	08007795 	.word	0x08007795
 800b6dc:	0800b45f 	.word	0x0800b45f
 800b6e0:	0800ee62 	.word	0x0800ee62

0800b6e4 <__swbuf_r>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	460e      	mov	r6, r1
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	b118      	cbz	r0, 800b6f6 <__swbuf_r+0x12>
 800b6ee:	6983      	ldr	r3, [r0, #24]
 800b6f0:	b90b      	cbnz	r3, 800b6f6 <__swbuf_r+0x12>
 800b6f2:	f000 f9d9 	bl	800baa8 <__sinit>
 800b6f6:	4b21      	ldr	r3, [pc, #132]	; (800b77c <__swbuf_r+0x98>)
 800b6f8:	429c      	cmp	r4, r3
 800b6fa:	d12b      	bne.n	800b754 <__swbuf_r+0x70>
 800b6fc:	686c      	ldr	r4, [r5, #4]
 800b6fe:	69a3      	ldr	r3, [r4, #24]
 800b700:	60a3      	str	r3, [r4, #8]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	071a      	lsls	r2, r3, #28
 800b706:	d52f      	bpl.n	800b768 <__swbuf_r+0x84>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	b36b      	cbz	r3, 800b768 <__swbuf_r+0x84>
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	1ac0      	subs	r0, r0, r3
 800b712:	6963      	ldr	r3, [r4, #20]
 800b714:	b2f6      	uxtb	r6, r6
 800b716:	4283      	cmp	r3, r0
 800b718:	4637      	mov	r7, r6
 800b71a:	dc04      	bgt.n	800b726 <__swbuf_r+0x42>
 800b71c:	4621      	mov	r1, r4
 800b71e:	4628      	mov	r0, r5
 800b720:	f000 f92e 	bl	800b980 <_fflush_r>
 800b724:	bb30      	cbnz	r0, 800b774 <__swbuf_r+0x90>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	3b01      	subs	r3, #1
 800b72a:	60a3      	str	r3, [r4, #8]
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	6022      	str	r2, [r4, #0]
 800b732:	701e      	strb	r6, [r3, #0]
 800b734:	6963      	ldr	r3, [r4, #20]
 800b736:	3001      	adds	r0, #1
 800b738:	4283      	cmp	r3, r0
 800b73a:	d004      	beq.n	800b746 <__swbuf_r+0x62>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d506      	bpl.n	800b750 <__swbuf_r+0x6c>
 800b742:	2e0a      	cmp	r6, #10
 800b744:	d104      	bne.n	800b750 <__swbuf_r+0x6c>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f000 f919 	bl	800b980 <_fflush_r>
 800b74e:	b988      	cbnz	r0, 800b774 <__swbuf_r+0x90>
 800b750:	4638      	mov	r0, r7
 800b752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b754:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <__swbuf_r+0x9c>)
 800b756:	429c      	cmp	r4, r3
 800b758:	d101      	bne.n	800b75e <__swbuf_r+0x7a>
 800b75a:	68ac      	ldr	r4, [r5, #8]
 800b75c:	e7cf      	b.n	800b6fe <__swbuf_r+0x1a>
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <__swbuf_r+0xa0>)
 800b760:	429c      	cmp	r4, r3
 800b762:	bf08      	it	eq
 800b764:	68ec      	ldreq	r4, [r5, #12]
 800b766:	e7ca      	b.n	800b6fe <__swbuf_r+0x1a>
 800b768:	4621      	mov	r1, r4
 800b76a:	4628      	mov	r0, r5
 800b76c:	f000 f80c 	bl	800b788 <__swsetup_r>
 800b770:	2800      	cmp	r0, #0
 800b772:	d0cb      	beq.n	800b70c <__swbuf_r+0x28>
 800b774:	f04f 37ff 	mov.w	r7, #4294967295
 800b778:	e7ea      	b.n	800b750 <__swbuf_r+0x6c>
 800b77a:	bf00      	nop
 800b77c:	0800eecc 	.word	0x0800eecc
 800b780:	0800eeec 	.word	0x0800eeec
 800b784:	0800eeac 	.word	0x0800eeac

0800b788 <__swsetup_r>:
 800b788:	4b32      	ldr	r3, [pc, #200]	; (800b854 <__swsetup_r+0xcc>)
 800b78a:	b570      	push	{r4, r5, r6, lr}
 800b78c:	681d      	ldr	r5, [r3, #0]
 800b78e:	4606      	mov	r6, r0
 800b790:	460c      	mov	r4, r1
 800b792:	b125      	cbz	r5, 800b79e <__swsetup_r+0x16>
 800b794:	69ab      	ldr	r3, [r5, #24]
 800b796:	b913      	cbnz	r3, 800b79e <__swsetup_r+0x16>
 800b798:	4628      	mov	r0, r5
 800b79a:	f000 f985 	bl	800baa8 <__sinit>
 800b79e:	4b2e      	ldr	r3, [pc, #184]	; (800b858 <__swsetup_r+0xd0>)
 800b7a0:	429c      	cmp	r4, r3
 800b7a2:	d10f      	bne.n	800b7c4 <__swsetup_r+0x3c>
 800b7a4:	686c      	ldr	r4, [r5, #4]
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ac:	0719      	lsls	r1, r3, #28
 800b7ae:	d42c      	bmi.n	800b80a <__swsetup_r+0x82>
 800b7b0:	06dd      	lsls	r5, r3, #27
 800b7b2:	d411      	bmi.n	800b7d8 <__swsetup_r+0x50>
 800b7b4:	2309      	movs	r3, #9
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c2:	e03e      	b.n	800b842 <__swsetup_r+0xba>
 800b7c4:	4b25      	ldr	r3, [pc, #148]	; (800b85c <__swsetup_r+0xd4>)
 800b7c6:	429c      	cmp	r4, r3
 800b7c8:	d101      	bne.n	800b7ce <__swsetup_r+0x46>
 800b7ca:	68ac      	ldr	r4, [r5, #8]
 800b7cc:	e7eb      	b.n	800b7a6 <__swsetup_r+0x1e>
 800b7ce:	4b24      	ldr	r3, [pc, #144]	; (800b860 <__swsetup_r+0xd8>)
 800b7d0:	429c      	cmp	r4, r3
 800b7d2:	bf08      	it	eq
 800b7d4:	68ec      	ldreq	r4, [r5, #12]
 800b7d6:	e7e6      	b.n	800b7a6 <__swsetup_r+0x1e>
 800b7d8:	0758      	lsls	r0, r3, #29
 800b7da:	d512      	bpl.n	800b802 <__swsetup_r+0x7a>
 800b7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7de:	b141      	cbz	r1, 800b7f2 <__swsetup_r+0x6a>
 800b7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	d002      	beq.n	800b7ee <__swsetup_r+0x66>
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff fb67 	bl	800aebc <_free_r>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6063      	str	r3, [r4, #4]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f043 0308 	orr.w	r3, r3, #8
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	b94b      	cbnz	r3, 800b822 <__swsetup_r+0x9a>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b818:	d003      	beq.n	800b822 <__swsetup_r+0x9a>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4630      	mov	r0, r6
 800b81e:	f000 fa07 	bl	800bc30 <__smakebuf_r>
 800b822:	89a0      	ldrh	r0, [r4, #12]
 800b824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b828:	f010 0301 	ands.w	r3, r0, #1
 800b82c:	d00a      	beq.n	800b844 <__swsetup_r+0xbc>
 800b82e:	2300      	movs	r3, #0
 800b830:	60a3      	str	r3, [r4, #8]
 800b832:	6963      	ldr	r3, [r4, #20]
 800b834:	425b      	negs	r3, r3
 800b836:	61a3      	str	r3, [r4, #24]
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	b943      	cbnz	r3, 800b84e <__swsetup_r+0xc6>
 800b83c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b840:	d1ba      	bne.n	800b7b8 <__swsetup_r+0x30>
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	0781      	lsls	r1, r0, #30
 800b846:	bf58      	it	pl
 800b848:	6963      	ldrpl	r3, [r4, #20]
 800b84a:	60a3      	str	r3, [r4, #8]
 800b84c:	e7f4      	b.n	800b838 <__swsetup_r+0xb0>
 800b84e:	2000      	movs	r0, #0
 800b850:	e7f7      	b.n	800b842 <__swsetup_r+0xba>
 800b852:	bf00      	nop
 800b854:	20000160 	.word	0x20000160
 800b858:	0800eecc 	.word	0x0800eecc
 800b85c:	0800eeec 	.word	0x0800eeec
 800b860:	0800eeac 	.word	0x0800eeac

0800b864 <abort>:
 800b864:	b508      	push	{r3, lr}
 800b866:	2006      	movs	r0, #6
 800b868:	f000 fa52 	bl	800bd10 <raise>
 800b86c:	2001      	movs	r0, #1
 800b86e:	f7f7 f895 	bl	800299c <_exit>
	...

0800b874 <__sflush_r>:
 800b874:	898a      	ldrh	r2, [r1, #12]
 800b876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	4605      	mov	r5, r0
 800b87c:	0710      	lsls	r0, r2, #28
 800b87e:	460c      	mov	r4, r1
 800b880:	d458      	bmi.n	800b934 <__sflush_r+0xc0>
 800b882:	684b      	ldr	r3, [r1, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc05      	bgt.n	800b894 <__sflush_r+0x20>
 800b888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	dc02      	bgt.n	800b894 <__sflush_r+0x20>
 800b88e:	2000      	movs	r0, #0
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b896:	2e00      	cmp	r6, #0
 800b898:	d0f9      	beq.n	800b88e <__sflush_r+0x1a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8a0:	682f      	ldr	r7, [r5, #0]
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	d032      	beq.n	800b90c <__sflush_r+0x98>
 800b8a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	075a      	lsls	r2, r3, #29
 800b8ac:	d505      	bpl.n	800b8ba <__sflush_r+0x46>
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	1ac0      	subs	r0, r0, r3
 800b8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b4:	b10b      	cbz	r3, 800b8ba <__sflush_r+0x46>
 800b8b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8b8:	1ac0      	subs	r0, r0, r3
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4602      	mov	r2, r0
 800b8be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c0:	6a21      	ldr	r1, [r4, #32]
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	47b0      	blx	r6
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	d106      	bne.n	800b8da <__sflush_r+0x66>
 800b8cc:	6829      	ldr	r1, [r5, #0]
 800b8ce:	291d      	cmp	r1, #29
 800b8d0:	d82c      	bhi.n	800b92c <__sflush_r+0xb8>
 800b8d2:	4a2a      	ldr	r2, [pc, #168]	; (800b97c <__sflush_r+0x108>)
 800b8d4:	40ca      	lsrs	r2, r1
 800b8d6:	07d6      	lsls	r6, r2, #31
 800b8d8:	d528      	bpl.n	800b92c <__sflush_r+0xb8>
 800b8da:	2200      	movs	r2, #0
 800b8dc:	6062      	str	r2, [r4, #4]
 800b8de:	04d9      	lsls	r1, r3, #19
 800b8e0:	6922      	ldr	r2, [r4, #16]
 800b8e2:	6022      	str	r2, [r4, #0]
 800b8e4:	d504      	bpl.n	800b8f0 <__sflush_r+0x7c>
 800b8e6:	1c42      	adds	r2, r0, #1
 800b8e8:	d101      	bne.n	800b8ee <__sflush_r+0x7a>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	b903      	cbnz	r3, 800b8f0 <__sflush_r+0x7c>
 800b8ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f2:	602f      	str	r7, [r5, #0]
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d0ca      	beq.n	800b88e <__sflush_r+0x1a>
 800b8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d002      	beq.n	800b906 <__sflush_r+0x92>
 800b900:	4628      	mov	r0, r5
 800b902:	f7ff fadb 	bl	800aebc <_free_r>
 800b906:	2000      	movs	r0, #0
 800b908:	6360      	str	r0, [r4, #52]	; 0x34
 800b90a:	e7c1      	b.n	800b890 <__sflush_r+0x1c>
 800b90c:	6a21      	ldr	r1, [r4, #32]
 800b90e:	2301      	movs	r3, #1
 800b910:	4628      	mov	r0, r5
 800b912:	47b0      	blx	r6
 800b914:	1c41      	adds	r1, r0, #1
 800b916:	d1c7      	bne.n	800b8a8 <__sflush_r+0x34>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0c4      	beq.n	800b8a8 <__sflush_r+0x34>
 800b91e:	2b1d      	cmp	r3, #29
 800b920:	d001      	beq.n	800b926 <__sflush_r+0xb2>
 800b922:	2b16      	cmp	r3, #22
 800b924:	d101      	bne.n	800b92a <__sflush_r+0xb6>
 800b926:	602f      	str	r7, [r5, #0]
 800b928:	e7b1      	b.n	800b88e <__sflush_r+0x1a>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b930:	81a3      	strh	r3, [r4, #12]
 800b932:	e7ad      	b.n	800b890 <__sflush_r+0x1c>
 800b934:	690f      	ldr	r7, [r1, #16]
 800b936:	2f00      	cmp	r7, #0
 800b938:	d0a9      	beq.n	800b88e <__sflush_r+0x1a>
 800b93a:	0793      	lsls	r3, r2, #30
 800b93c:	680e      	ldr	r6, [r1, #0]
 800b93e:	bf08      	it	eq
 800b940:	694b      	ldreq	r3, [r1, #20]
 800b942:	600f      	str	r7, [r1, #0]
 800b944:	bf18      	it	ne
 800b946:	2300      	movne	r3, #0
 800b948:	eba6 0807 	sub.w	r8, r6, r7
 800b94c:	608b      	str	r3, [r1, #8]
 800b94e:	f1b8 0f00 	cmp.w	r8, #0
 800b952:	dd9c      	ble.n	800b88e <__sflush_r+0x1a>
 800b954:	6a21      	ldr	r1, [r4, #32]
 800b956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b958:	4643      	mov	r3, r8
 800b95a:	463a      	mov	r2, r7
 800b95c:	4628      	mov	r0, r5
 800b95e:	47b0      	blx	r6
 800b960:	2800      	cmp	r0, #0
 800b962:	dc06      	bgt.n	800b972 <__sflush_r+0xfe>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b96a:	81a3      	strh	r3, [r4, #12]
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	e78e      	b.n	800b890 <__sflush_r+0x1c>
 800b972:	4407      	add	r7, r0
 800b974:	eba8 0800 	sub.w	r8, r8, r0
 800b978:	e7e9      	b.n	800b94e <__sflush_r+0xda>
 800b97a:	bf00      	nop
 800b97c:	20400001 	.word	0x20400001

0800b980 <_fflush_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	690b      	ldr	r3, [r1, #16]
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	b913      	cbnz	r3, 800b990 <_fflush_r+0x10>
 800b98a:	2500      	movs	r5, #0
 800b98c:	4628      	mov	r0, r5
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	b118      	cbz	r0, 800b99a <_fflush_r+0x1a>
 800b992:	6983      	ldr	r3, [r0, #24]
 800b994:	b90b      	cbnz	r3, 800b99a <_fflush_r+0x1a>
 800b996:	f000 f887 	bl	800baa8 <__sinit>
 800b99a:	4b14      	ldr	r3, [pc, #80]	; (800b9ec <_fflush_r+0x6c>)
 800b99c:	429c      	cmp	r4, r3
 800b99e:	d11b      	bne.n	800b9d8 <_fflush_r+0x58>
 800b9a0:	686c      	ldr	r4, [r5, #4]
 800b9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0ef      	beq.n	800b98a <_fflush_r+0xa>
 800b9aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9ac:	07d0      	lsls	r0, r2, #31
 800b9ae:	d404      	bmi.n	800b9ba <_fflush_r+0x3a>
 800b9b0:	0599      	lsls	r1, r3, #22
 800b9b2:	d402      	bmi.n	800b9ba <_fflush_r+0x3a>
 800b9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9b6:	f000 f915 	bl	800bbe4 <__retarget_lock_acquire_recursive>
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	4621      	mov	r1, r4
 800b9be:	f7ff ff59 	bl	800b874 <__sflush_r>
 800b9c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c4:	07da      	lsls	r2, r3, #31
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	d4e0      	bmi.n	800b98c <_fflush_r+0xc>
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	059b      	lsls	r3, r3, #22
 800b9ce:	d4dd      	bmi.n	800b98c <_fflush_r+0xc>
 800b9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d2:	f000 f908 	bl	800bbe6 <__retarget_lock_release_recursive>
 800b9d6:	e7d9      	b.n	800b98c <_fflush_r+0xc>
 800b9d8:	4b05      	ldr	r3, [pc, #20]	; (800b9f0 <_fflush_r+0x70>)
 800b9da:	429c      	cmp	r4, r3
 800b9dc:	d101      	bne.n	800b9e2 <_fflush_r+0x62>
 800b9de:	68ac      	ldr	r4, [r5, #8]
 800b9e0:	e7df      	b.n	800b9a2 <_fflush_r+0x22>
 800b9e2:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <_fflush_r+0x74>)
 800b9e4:	429c      	cmp	r4, r3
 800b9e6:	bf08      	it	eq
 800b9e8:	68ec      	ldreq	r4, [r5, #12]
 800b9ea:	e7da      	b.n	800b9a2 <_fflush_r+0x22>
 800b9ec:	0800eecc 	.word	0x0800eecc
 800b9f0:	0800eeec 	.word	0x0800eeec
 800b9f4:	0800eeac 	.word	0x0800eeac

0800b9f8 <std>:
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	e9c0 3300 	strd	r3, r3, [r0]
 800ba02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba06:	6083      	str	r3, [r0, #8]
 800ba08:	8181      	strh	r1, [r0, #12]
 800ba0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ba0c:	81c2      	strh	r2, [r0, #14]
 800ba0e:	6183      	str	r3, [r0, #24]
 800ba10:	4619      	mov	r1, r3
 800ba12:	2208      	movs	r2, #8
 800ba14:	305c      	adds	r0, #92	; 0x5c
 800ba16:	f7fb fe15 	bl	8007644 <memset>
 800ba1a:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <std+0x38>)
 800ba1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ba1e:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <std+0x3c>)
 800ba20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <std+0x40>)
 800ba24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba26:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <std+0x44>)
 800ba28:	6224      	str	r4, [r4, #32]
 800ba2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ba2c:	bd10      	pop	{r4, pc}
 800ba2e:	bf00      	nop
 800ba30:	0800bd49 	.word	0x0800bd49
 800ba34:	0800bd6b 	.word	0x0800bd6b
 800ba38:	0800bda3 	.word	0x0800bda3
 800ba3c:	0800bdc7 	.word	0x0800bdc7

0800ba40 <_cleanup_r>:
 800ba40:	4901      	ldr	r1, [pc, #4]	; (800ba48 <_cleanup_r+0x8>)
 800ba42:	f000 b8af 	b.w	800bba4 <_fwalk_reent>
 800ba46:	bf00      	nop
 800ba48:	0800b981 	.word	0x0800b981

0800ba4c <__sfmoreglue>:
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	1e4a      	subs	r2, r1, #1
 800ba50:	2568      	movs	r5, #104	; 0x68
 800ba52:	4355      	muls	r5, r2
 800ba54:	460e      	mov	r6, r1
 800ba56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba5a:	f7ff fa7f 	bl	800af5c <_malloc_r>
 800ba5e:	4604      	mov	r4, r0
 800ba60:	b140      	cbz	r0, 800ba74 <__sfmoreglue+0x28>
 800ba62:	2100      	movs	r1, #0
 800ba64:	e9c0 1600 	strd	r1, r6, [r0]
 800ba68:	300c      	adds	r0, #12
 800ba6a:	60a0      	str	r0, [r4, #8]
 800ba6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba70:	f7fb fde8 	bl	8007644 <memset>
 800ba74:	4620      	mov	r0, r4
 800ba76:	bd70      	pop	{r4, r5, r6, pc}

0800ba78 <__sfp_lock_acquire>:
 800ba78:	4801      	ldr	r0, [pc, #4]	; (800ba80 <__sfp_lock_acquire+0x8>)
 800ba7a:	f000 b8b3 	b.w	800bbe4 <__retarget_lock_acquire_recursive>
 800ba7e:	bf00      	nop
 800ba80:	2000093c 	.word	0x2000093c

0800ba84 <__sfp_lock_release>:
 800ba84:	4801      	ldr	r0, [pc, #4]	; (800ba8c <__sfp_lock_release+0x8>)
 800ba86:	f000 b8ae 	b.w	800bbe6 <__retarget_lock_release_recursive>
 800ba8a:	bf00      	nop
 800ba8c:	2000093c 	.word	0x2000093c

0800ba90 <__sinit_lock_acquire>:
 800ba90:	4801      	ldr	r0, [pc, #4]	; (800ba98 <__sinit_lock_acquire+0x8>)
 800ba92:	f000 b8a7 	b.w	800bbe4 <__retarget_lock_acquire_recursive>
 800ba96:	bf00      	nop
 800ba98:	20000937 	.word	0x20000937

0800ba9c <__sinit_lock_release>:
 800ba9c:	4801      	ldr	r0, [pc, #4]	; (800baa4 <__sinit_lock_release+0x8>)
 800ba9e:	f000 b8a2 	b.w	800bbe6 <__retarget_lock_release_recursive>
 800baa2:	bf00      	nop
 800baa4:	20000937 	.word	0x20000937

0800baa8 <__sinit>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	4604      	mov	r4, r0
 800baac:	f7ff fff0 	bl	800ba90 <__sinit_lock_acquire>
 800bab0:	69a3      	ldr	r3, [r4, #24]
 800bab2:	b11b      	cbz	r3, 800babc <__sinit+0x14>
 800bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bab8:	f7ff bff0 	b.w	800ba9c <__sinit_lock_release>
 800babc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bac0:	6523      	str	r3, [r4, #80]	; 0x50
 800bac2:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <__sinit+0x68>)
 800bac4:	4a13      	ldr	r2, [pc, #76]	; (800bb14 <__sinit+0x6c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	62a2      	str	r2, [r4, #40]	; 0x28
 800baca:	42a3      	cmp	r3, r4
 800bacc:	bf04      	itt	eq
 800bace:	2301      	moveq	r3, #1
 800bad0:	61a3      	streq	r3, [r4, #24]
 800bad2:	4620      	mov	r0, r4
 800bad4:	f000 f820 	bl	800bb18 <__sfp>
 800bad8:	6060      	str	r0, [r4, #4]
 800bada:	4620      	mov	r0, r4
 800badc:	f000 f81c 	bl	800bb18 <__sfp>
 800bae0:	60a0      	str	r0, [r4, #8]
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f818 	bl	800bb18 <__sfp>
 800bae8:	2200      	movs	r2, #0
 800baea:	60e0      	str	r0, [r4, #12]
 800baec:	2104      	movs	r1, #4
 800baee:	6860      	ldr	r0, [r4, #4]
 800baf0:	f7ff ff82 	bl	800b9f8 <std>
 800baf4:	68a0      	ldr	r0, [r4, #8]
 800baf6:	2201      	movs	r2, #1
 800baf8:	2109      	movs	r1, #9
 800bafa:	f7ff ff7d 	bl	800b9f8 <std>
 800bafe:	68e0      	ldr	r0, [r4, #12]
 800bb00:	2202      	movs	r2, #2
 800bb02:	2112      	movs	r1, #18
 800bb04:	f7ff ff78 	bl	800b9f8 <std>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	61a3      	str	r3, [r4, #24]
 800bb0c:	e7d2      	b.n	800bab4 <__sinit+0xc>
 800bb0e:	bf00      	nop
 800bb10:	0800ea58 	.word	0x0800ea58
 800bb14:	0800ba41 	.word	0x0800ba41

0800bb18 <__sfp>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	4607      	mov	r7, r0
 800bb1c:	f7ff ffac 	bl	800ba78 <__sfp_lock_acquire>
 800bb20:	4b1e      	ldr	r3, [pc, #120]	; (800bb9c <__sfp+0x84>)
 800bb22:	681e      	ldr	r6, [r3, #0]
 800bb24:	69b3      	ldr	r3, [r6, #24]
 800bb26:	b913      	cbnz	r3, 800bb2e <__sfp+0x16>
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f7ff ffbd 	bl	800baa8 <__sinit>
 800bb2e:	3648      	adds	r6, #72	; 0x48
 800bb30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb34:	3b01      	subs	r3, #1
 800bb36:	d503      	bpl.n	800bb40 <__sfp+0x28>
 800bb38:	6833      	ldr	r3, [r6, #0]
 800bb3a:	b30b      	cbz	r3, 800bb80 <__sfp+0x68>
 800bb3c:	6836      	ldr	r6, [r6, #0]
 800bb3e:	e7f7      	b.n	800bb30 <__sfp+0x18>
 800bb40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb44:	b9d5      	cbnz	r5, 800bb7c <__sfp+0x64>
 800bb46:	4b16      	ldr	r3, [pc, #88]	; (800bba0 <__sfp+0x88>)
 800bb48:	60e3      	str	r3, [r4, #12]
 800bb4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb4e:	6665      	str	r5, [r4, #100]	; 0x64
 800bb50:	f000 f847 	bl	800bbe2 <__retarget_lock_init_recursive>
 800bb54:	f7ff ff96 	bl	800ba84 <__sfp_lock_release>
 800bb58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb60:	6025      	str	r5, [r4, #0]
 800bb62:	61a5      	str	r5, [r4, #24]
 800bb64:	2208      	movs	r2, #8
 800bb66:	4629      	mov	r1, r5
 800bb68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb6c:	f7fb fd6a 	bl	8007644 <memset>
 800bb70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb78:	4620      	mov	r0, r4
 800bb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb7c:	3468      	adds	r4, #104	; 0x68
 800bb7e:	e7d9      	b.n	800bb34 <__sfp+0x1c>
 800bb80:	2104      	movs	r1, #4
 800bb82:	4638      	mov	r0, r7
 800bb84:	f7ff ff62 	bl	800ba4c <__sfmoreglue>
 800bb88:	4604      	mov	r4, r0
 800bb8a:	6030      	str	r0, [r6, #0]
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d1d5      	bne.n	800bb3c <__sfp+0x24>
 800bb90:	f7ff ff78 	bl	800ba84 <__sfp_lock_release>
 800bb94:	230c      	movs	r3, #12
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	e7ee      	b.n	800bb78 <__sfp+0x60>
 800bb9a:	bf00      	nop
 800bb9c:	0800ea58 	.word	0x0800ea58
 800bba0:	ffff0001 	.word	0xffff0001

0800bba4 <_fwalk_reent>:
 800bba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba8:	4606      	mov	r6, r0
 800bbaa:	4688      	mov	r8, r1
 800bbac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbb0:	2700      	movs	r7, #0
 800bbb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbb6:	f1b9 0901 	subs.w	r9, r9, #1
 800bbba:	d505      	bpl.n	800bbc8 <_fwalk_reent+0x24>
 800bbbc:	6824      	ldr	r4, [r4, #0]
 800bbbe:	2c00      	cmp	r4, #0
 800bbc0:	d1f7      	bne.n	800bbb2 <_fwalk_reent+0xe>
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc8:	89ab      	ldrh	r3, [r5, #12]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d907      	bls.n	800bbde <_fwalk_reent+0x3a>
 800bbce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	d003      	beq.n	800bbde <_fwalk_reent+0x3a>
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	4630      	mov	r0, r6
 800bbda:	47c0      	blx	r8
 800bbdc:	4307      	orrs	r7, r0
 800bbde:	3568      	adds	r5, #104	; 0x68
 800bbe0:	e7e9      	b.n	800bbb6 <_fwalk_reent+0x12>

0800bbe2 <__retarget_lock_init_recursive>:
 800bbe2:	4770      	bx	lr

0800bbe4 <__retarget_lock_acquire_recursive>:
 800bbe4:	4770      	bx	lr

0800bbe6 <__retarget_lock_release_recursive>:
 800bbe6:	4770      	bx	lr

0800bbe8 <__swhatbuf_r>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	460e      	mov	r6, r1
 800bbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	b096      	sub	sp, #88	; 0x58
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	461d      	mov	r5, r3
 800bbf8:	da07      	bge.n	800bc0a <__swhatbuf_r+0x22>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	602b      	str	r3, [r5, #0]
 800bbfe:	89b3      	ldrh	r3, [r6, #12]
 800bc00:	061a      	lsls	r2, r3, #24
 800bc02:	d410      	bmi.n	800bc26 <__swhatbuf_r+0x3e>
 800bc04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc08:	e00e      	b.n	800bc28 <__swhatbuf_r+0x40>
 800bc0a:	466a      	mov	r2, sp
 800bc0c:	f000 f902 	bl	800be14 <_fstat_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	dbf2      	blt.n	800bbfa <__swhatbuf_r+0x12>
 800bc14:	9a01      	ldr	r2, [sp, #4]
 800bc16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc1e:	425a      	negs	r2, r3
 800bc20:	415a      	adcs	r2, r3
 800bc22:	602a      	str	r2, [r5, #0]
 800bc24:	e7ee      	b.n	800bc04 <__swhatbuf_r+0x1c>
 800bc26:	2340      	movs	r3, #64	; 0x40
 800bc28:	2000      	movs	r0, #0
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	b016      	add	sp, #88	; 0x58
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}

0800bc30 <__smakebuf_r>:
 800bc30:	898b      	ldrh	r3, [r1, #12]
 800bc32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc34:	079d      	lsls	r5, r3, #30
 800bc36:	4606      	mov	r6, r0
 800bc38:	460c      	mov	r4, r1
 800bc3a:	d507      	bpl.n	800bc4c <__smakebuf_r+0x1c>
 800bc3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	6123      	str	r3, [r4, #16]
 800bc44:	2301      	movs	r3, #1
 800bc46:	6163      	str	r3, [r4, #20]
 800bc48:	b002      	add	sp, #8
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	ab01      	add	r3, sp, #4
 800bc4e:	466a      	mov	r2, sp
 800bc50:	f7ff ffca 	bl	800bbe8 <__swhatbuf_r>
 800bc54:	9900      	ldr	r1, [sp, #0]
 800bc56:	4605      	mov	r5, r0
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7ff f97f 	bl	800af5c <_malloc_r>
 800bc5e:	b948      	cbnz	r0, 800bc74 <__smakebuf_r+0x44>
 800bc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc64:	059a      	lsls	r2, r3, #22
 800bc66:	d4ef      	bmi.n	800bc48 <__smakebuf_r+0x18>
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	f043 0302 	orr.w	r3, r3, #2
 800bc70:	81a3      	strh	r3, [r4, #12]
 800bc72:	e7e3      	b.n	800bc3c <__smakebuf_r+0xc>
 800bc74:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <__smakebuf_r+0x7c>)
 800bc76:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	6020      	str	r0, [r4, #0]
 800bc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	9b00      	ldr	r3, [sp, #0]
 800bc84:	6163      	str	r3, [r4, #20]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	6120      	str	r0, [r4, #16]
 800bc8a:	b15b      	cbz	r3, 800bca4 <__smakebuf_r+0x74>
 800bc8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc90:	4630      	mov	r0, r6
 800bc92:	f000 f8d1 	bl	800be38 <_isatty_r>
 800bc96:	b128      	cbz	r0, 800bca4 <__smakebuf_r+0x74>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	81a3      	strh	r3, [r4, #12]
 800bca4:	89a0      	ldrh	r0, [r4, #12]
 800bca6:	4305      	orrs	r5, r0
 800bca8:	81a5      	strh	r5, [r4, #12]
 800bcaa:	e7cd      	b.n	800bc48 <__smakebuf_r+0x18>
 800bcac:	0800ba41 	.word	0x0800ba41

0800bcb0 <_malloc_usable_size_r>:
 800bcb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcb4:	1f18      	subs	r0, r3, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	bfbc      	itt	lt
 800bcba:	580b      	ldrlt	r3, [r1, r0]
 800bcbc:	18c0      	addlt	r0, r0, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_raise_r>:
 800bcc0:	291f      	cmp	r1, #31
 800bcc2:	b538      	push	{r3, r4, r5, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	d904      	bls.n	800bcd4 <_raise_r+0x14>
 800bcca:	2316      	movs	r3, #22
 800bccc:	6003      	str	r3, [r0, #0]
 800bcce:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcd6:	b112      	cbz	r2, 800bcde <_raise_r+0x1e>
 800bcd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcdc:	b94b      	cbnz	r3, 800bcf2 <_raise_r+0x32>
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 f830 	bl	800bd44 <_getpid_r>
 800bce4:	462a      	mov	r2, r5
 800bce6:	4601      	mov	r1, r0
 800bce8:	4620      	mov	r0, r4
 800bcea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcee:	f000 b817 	b.w	800bd20 <_kill_r>
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d00a      	beq.n	800bd0c <_raise_r+0x4c>
 800bcf6:	1c59      	adds	r1, r3, #1
 800bcf8:	d103      	bne.n	800bd02 <_raise_r+0x42>
 800bcfa:	2316      	movs	r3, #22
 800bcfc:	6003      	str	r3, [r0, #0]
 800bcfe:	2001      	movs	r0, #1
 800bd00:	e7e7      	b.n	800bcd2 <_raise_r+0x12>
 800bd02:	2400      	movs	r4, #0
 800bd04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd08:	4628      	mov	r0, r5
 800bd0a:	4798      	blx	r3
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	e7e0      	b.n	800bcd2 <_raise_r+0x12>

0800bd10 <raise>:
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <raise+0xc>)
 800bd12:	4601      	mov	r1, r0
 800bd14:	6818      	ldr	r0, [r3, #0]
 800bd16:	f7ff bfd3 	b.w	800bcc0 <_raise_r>
 800bd1a:	bf00      	nop
 800bd1c:	20000160 	.word	0x20000160

0800bd20 <_kill_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4d07      	ldr	r5, [pc, #28]	; (800bd40 <_kill_r+0x20>)
 800bd24:	2300      	movs	r3, #0
 800bd26:	4604      	mov	r4, r0
 800bd28:	4608      	mov	r0, r1
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	602b      	str	r3, [r5, #0]
 800bd2e:	f7f6 fe25 	bl	800297c <_kill>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	d102      	bne.n	800bd3c <_kill_r+0x1c>
 800bd36:	682b      	ldr	r3, [r5, #0]
 800bd38:	b103      	cbz	r3, 800bd3c <_kill_r+0x1c>
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	bd38      	pop	{r3, r4, r5, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000930 	.word	0x20000930

0800bd44 <_getpid_r>:
 800bd44:	f7f6 be12 	b.w	800296c <_getpid>

0800bd48 <__sread>:
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd50:	f000 f894 	bl	800be7c <_read_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	bfab      	itete	ge
 800bd58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bd5c:	181b      	addge	r3, r3, r0
 800bd5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd62:	bfac      	ite	ge
 800bd64:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd66:	81a3      	strhlt	r3, [r4, #12]
 800bd68:	bd10      	pop	{r4, pc}

0800bd6a <__swrite>:
 800bd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6e:	461f      	mov	r7, r3
 800bd70:	898b      	ldrh	r3, [r1, #12]
 800bd72:	05db      	lsls	r3, r3, #23
 800bd74:	4605      	mov	r5, r0
 800bd76:	460c      	mov	r4, r1
 800bd78:	4616      	mov	r6, r2
 800bd7a:	d505      	bpl.n	800bd88 <__swrite+0x1e>
 800bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd80:	2302      	movs	r3, #2
 800bd82:	2200      	movs	r2, #0
 800bd84:	f000 f868 	bl	800be58 <_lseek_r>
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd92:	81a3      	strh	r3, [r4, #12]
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	4628      	mov	r0, r5
 800bd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9e:	f000 b817 	b.w	800bdd0 <_write_r>

0800bda2 <__sseek>:
 800bda2:	b510      	push	{r4, lr}
 800bda4:	460c      	mov	r4, r1
 800bda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdaa:	f000 f855 	bl	800be58 <_lseek_r>
 800bdae:	1c43      	adds	r3, r0, #1
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	bf15      	itete	ne
 800bdb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdbe:	81a3      	strheq	r3, [r4, #12]
 800bdc0:	bf18      	it	ne
 800bdc2:	81a3      	strhne	r3, [r4, #12]
 800bdc4:	bd10      	pop	{r4, pc}

0800bdc6 <__sclose>:
 800bdc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdca:	f000 b813 	b.w	800bdf4 <_close_r>
	...

0800bdd0 <_write_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d07      	ldr	r5, [pc, #28]	; (800bdf0 <_write_r+0x20>)
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	4608      	mov	r0, r1
 800bdd8:	4611      	mov	r1, r2
 800bdda:	2200      	movs	r2, #0
 800bddc:	602a      	str	r2, [r5, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	f7f6 fe03 	bl	80029ea <_write>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d102      	bne.n	800bdee <_write_r+0x1e>
 800bde8:	682b      	ldr	r3, [r5, #0]
 800bdea:	b103      	cbz	r3, 800bdee <_write_r+0x1e>
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	20000930 	.word	0x20000930

0800bdf4 <_close_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d06      	ldr	r5, [pc, #24]	; (800be10 <_close_r+0x1c>)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	602b      	str	r3, [r5, #0]
 800be00:	f7f6 fe0f 	bl	8002a22 <_close>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d102      	bne.n	800be0e <_close_r+0x1a>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	b103      	cbz	r3, 800be0e <_close_r+0x1a>
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	20000930 	.word	0x20000930

0800be14 <_fstat_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d07      	ldr	r5, [pc, #28]	; (800be34 <_fstat_r+0x20>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	4611      	mov	r1, r2
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	f7f6 fe0a 	bl	8002a3a <_fstat>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d102      	bne.n	800be30 <_fstat_r+0x1c>
 800be2a:	682b      	ldr	r3, [r5, #0]
 800be2c:	b103      	cbz	r3, 800be30 <_fstat_r+0x1c>
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	bf00      	nop
 800be34:	20000930 	.word	0x20000930

0800be38 <_isatty_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d06      	ldr	r5, [pc, #24]	; (800be54 <_isatty_r+0x1c>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f7f6 fe09 	bl	8002a5a <_isatty>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_isatty_r+0x1a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_isatty_r+0x1a>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20000930 	.word	0x20000930

0800be58 <_lseek_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4d07      	ldr	r5, [pc, #28]	; (800be78 <_lseek_r+0x20>)
 800be5c:	4604      	mov	r4, r0
 800be5e:	4608      	mov	r0, r1
 800be60:	4611      	mov	r1, r2
 800be62:	2200      	movs	r2, #0
 800be64:	602a      	str	r2, [r5, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	f7f6 fe02 	bl	8002a70 <_lseek>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d102      	bne.n	800be76 <_lseek_r+0x1e>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	b103      	cbz	r3, 800be76 <_lseek_r+0x1e>
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	20000930 	.word	0x20000930

0800be7c <_read_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4d07      	ldr	r5, [pc, #28]	; (800be9c <_read_r+0x20>)
 800be80:	4604      	mov	r4, r0
 800be82:	4608      	mov	r0, r1
 800be84:	4611      	mov	r1, r2
 800be86:	2200      	movs	r2, #0
 800be88:	602a      	str	r2, [r5, #0]
 800be8a:	461a      	mov	r2, r3
 800be8c:	f7f6 fd90 	bl	80029b0 <_read>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_read_r+0x1e>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_read_r+0x1e>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	20000930 	.word	0x20000930

0800bea0 <exp>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	ed2d 8b02 	vpush	{d8}
 800bea6:	ec55 4b10 	vmov	r4, r5, d0
 800beaa:	f000 f87d 	bl	800bfa8 <__ieee754_exp>
 800beae:	4b22      	ldr	r3, [pc, #136]	; (800bf38 <exp+0x98>)
 800beb0:	eeb0 8a40 	vmov.f32	s16, s0
 800beb4:	eef0 8a60 	vmov.f32	s17, s1
 800beb8:	f993 3000 	ldrsb.w	r3, [r3]
 800bebc:	3301      	adds	r3, #1
 800bebe:	d012      	beq.n	800bee6 <exp+0x46>
 800bec0:	ec45 4b10 	vmov	d0, r4, r5
 800bec4:	f000 fada 	bl	800c47c <finite>
 800bec8:	b168      	cbz	r0, 800bee6 <exp+0x46>
 800beca:	a313      	add	r3, pc, #76	; (adr r3, 800bf18 <exp+0x78>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 fe20 	bl	8000b18 <__aeabi_dcmpgt>
 800bed8:	b160      	cbz	r0, 800bef4 <exp+0x54>
 800beda:	f7fb fb89 	bl	80075f0 <__errno>
 800bede:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800bf20 <exp+0x80>
 800bee2:	2322      	movs	r3, #34	; 0x22
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	eeb0 0a48 	vmov.f32	s0, s16
 800beea:	eef0 0a68 	vmov.f32	s1, s17
 800beee:	ecbd 8b02 	vpop	{d8}
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	a30c      	add	r3, pc, #48	; (adr r3, 800bf28 <exp+0x88>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 fded 	bl	8000adc <__aeabi_dcmplt>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d0ef      	beq.n	800bee6 <exp+0x46>
 800bf06:	f7fb fb73 	bl	80075f0 <__errno>
 800bf0a:	2322      	movs	r3, #34	; 0x22
 800bf0c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800bf30 <exp+0x90>
 800bf10:	6003      	str	r3, [r0, #0]
 800bf12:	e7e8      	b.n	800bee6 <exp+0x46>
 800bf14:	f3af 8000 	nop.w
 800bf18:	fefa39ef 	.word	0xfefa39ef
 800bf1c:	40862e42 	.word	0x40862e42
 800bf20:	00000000 	.word	0x00000000
 800bf24:	7ff00000 	.word	0x7ff00000
 800bf28:	d52d3051 	.word	0xd52d3051
 800bf2c:	c0874910 	.word	0xc0874910
	...
 800bf38:	20000334 	.word	0x20000334

0800bf3c <logf>:
 800bf3c:	b508      	push	{r3, lr}
 800bf3e:	ed2d 8b02 	vpush	{d8}
 800bf42:	eeb0 8a40 	vmov.f32	s16, s0
 800bf46:	f000 f9a9 	bl	800c29c <__ieee754_logf>
 800bf4a:	4b14      	ldr	r3, [pc, #80]	; (800bf9c <logf+0x60>)
 800bf4c:	f993 3000 	ldrsb.w	r3, [r3]
 800bf50:	3301      	adds	r3, #1
 800bf52:	d014      	beq.n	800bf7e <logf+0x42>
 800bf54:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5c:	d60f      	bvs.n	800bf7e <logf+0x42>
 800bf5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bf62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf66:	dc0a      	bgt.n	800bf7e <logf+0x42>
 800bf68:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf70:	d108      	bne.n	800bf84 <logf+0x48>
 800bf72:	f7fb fb3d 	bl	80075f0 <__errno>
 800bf76:	2322      	movs	r3, #34	; 0x22
 800bf78:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800bfa0 <logf+0x64>
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	ecbd 8b02 	vpop	{d8}
 800bf82:	bd08      	pop	{r3, pc}
 800bf84:	f7fb fb34 	bl	80075f0 <__errno>
 800bf88:	ecbd 8b02 	vpop	{d8}
 800bf8c:	2321      	movs	r3, #33	; 0x21
 800bf8e:	6003      	str	r3, [r0, #0]
 800bf90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bf94:	4803      	ldr	r0, [pc, #12]	; (800bfa4 <logf+0x68>)
 800bf96:	f7fc b9d7 	b.w	8008348 <nanf>
 800bf9a:	bf00      	nop
 800bf9c:	20000334 	.word	0x20000334
 800bfa0:	ff800000 	.word	0xff800000
 800bfa4:	0800eea8 	.word	0x0800eea8

0800bfa8 <__ieee754_exp>:
 800bfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfac:	ec55 4b10 	vmov	r4, r5, d0
 800bfb0:	49b1      	ldr	r1, [pc, #708]	; (800c278 <__ieee754_exp+0x2d0>)
 800bfb2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bfb6:	428b      	cmp	r3, r1
 800bfb8:	ed2d 8b04 	vpush	{d8-d9}
 800bfbc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bfc0:	d937      	bls.n	800c032 <__ieee754_exp+0x8a>
 800bfc2:	49ae      	ldr	r1, [pc, #696]	; (800c27c <__ieee754_exp+0x2d4>)
 800bfc4:	428b      	cmp	r3, r1
 800bfc6:	d916      	bls.n	800bff6 <__ieee754_exp+0x4e>
 800bfc8:	ee10 3a10 	vmov	r3, s0
 800bfcc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	d009      	beq.n	800bfe8 <__ieee754_exp+0x40>
 800bfd4:	ee10 2a10 	vmov	r2, s0
 800bfd8:	462b      	mov	r3, r5
 800bfda:	4620      	mov	r0, r4
 800bfdc:	4629      	mov	r1, r5
 800bfde:	f7f4 f955 	bl	800028c <__adddf3>
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	460d      	mov	r5, r1
 800bfe6:	e000      	b.n	800bfea <__ieee754_exp+0x42>
 800bfe8:	bb06      	cbnz	r6, 800c02c <__ieee754_exp+0x84>
 800bfea:	ecbd 8b04 	vpop	{d8-d9}
 800bfee:	ec45 4b10 	vmov	d0, r4, r5
 800bff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bff6:	a38a      	add	r3, pc, #552	; (adr r3, 800c220 <__ieee754_exp+0x278>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	ee10 0a10 	vmov	r0, s0
 800c000:	4629      	mov	r1, r5
 800c002:	f7f4 fd89 	bl	8000b18 <__aeabi_dcmpgt>
 800c006:	b138      	cbz	r0, 800c018 <__ieee754_exp+0x70>
 800c008:	a387      	add	r3, pc, #540	; (adr r3, 800c228 <__ieee754_exp+0x280>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	4610      	mov	r0, r2
 800c010:	4619      	mov	r1, r3
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	e7e4      	b.n	800bfe2 <__ieee754_exp+0x3a>
 800c018:	a385      	add	r3, pc, #532	; (adr r3, 800c230 <__ieee754_exp+0x288>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	4620      	mov	r0, r4
 800c020:	4629      	mov	r1, r5
 800c022:	f7f4 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800c026:	2800      	cmp	r0, #0
 800c028:	f000 8087 	beq.w	800c13a <__ieee754_exp+0x192>
 800c02c:	2400      	movs	r4, #0
 800c02e:	2500      	movs	r5, #0
 800c030:	e7db      	b.n	800bfea <__ieee754_exp+0x42>
 800c032:	4a93      	ldr	r2, [pc, #588]	; (800c280 <__ieee754_exp+0x2d8>)
 800c034:	4293      	cmp	r3, r2
 800c036:	f240 80ac 	bls.w	800c192 <__ieee754_exp+0x1ea>
 800c03a:	4a92      	ldr	r2, [pc, #584]	; (800c284 <__ieee754_exp+0x2dc>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d87c      	bhi.n	800c13a <__ieee754_exp+0x192>
 800c040:	4b91      	ldr	r3, [pc, #580]	; (800c288 <__ieee754_exp+0x2e0>)
 800c042:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	ee10 0a10 	vmov	r0, s0
 800c04e:	4629      	mov	r1, r5
 800c050:	f7f4 f91a 	bl	8000288 <__aeabi_dsub>
 800c054:	4b8d      	ldr	r3, [pc, #564]	; (800c28c <__ieee754_exp+0x2e4>)
 800c056:	00f7      	lsls	r7, r6, #3
 800c058:	443b      	add	r3, r7
 800c05a:	ed93 7b00 	vldr	d7, [r3]
 800c05e:	f1c6 0a01 	rsb	sl, r6, #1
 800c062:	4680      	mov	r8, r0
 800c064:	4689      	mov	r9, r1
 800c066:	ebaa 0a06 	sub.w	sl, sl, r6
 800c06a:	eeb0 8a47 	vmov.f32	s16, s14
 800c06e:	eef0 8a67 	vmov.f32	s17, s15
 800c072:	ec53 2b18 	vmov	r2, r3, d8
 800c076:	4640      	mov	r0, r8
 800c078:	4649      	mov	r1, r9
 800c07a:	f7f4 f905 	bl	8000288 <__aeabi_dsub>
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	4622      	mov	r2, r4
 800c084:	462b      	mov	r3, r5
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 fab5 	bl	80005f8 <__aeabi_dmul>
 800c08e:	a36a      	add	r3, pc, #424	; (adr r3, 800c238 <__ieee754_exp+0x290>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	4606      	mov	r6, r0
 800c096:	460f      	mov	r7, r1
 800c098:	f7f4 faae 	bl	80005f8 <__aeabi_dmul>
 800c09c:	a368      	add	r3, pc, #416	; (adr r3, 800c240 <__ieee754_exp+0x298>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f8f1 	bl	8000288 <__aeabi_dsub>
 800c0a6:	4632      	mov	r2, r6
 800c0a8:	463b      	mov	r3, r7
 800c0aa:	f7f4 faa5 	bl	80005f8 <__aeabi_dmul>
 800c0ae:	a366      	add	r3, pc, #408	; (adr r3, 800c248 <__ieee754_exp+0x2a0>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f7f4 f8ea 	bl	800028c <__adddf3>
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	f7f4 fa9c 	bl	80005f8 <__aeabi_dmul>
 800c0c0:	a363      	add	r3, pc, #396	; (adr r3, 800c250 <__ieee754_exp+0x2a8>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 f8df 	bl	8000288 <__aeabi_dsub>
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	f7f4 fa93 	bl	80005f8 <__aeabi_dmul>
 800c0d2:	a361      	add	r3, pc, #388	; (adr r3, 800c258 <__ieee754_exp+0x2b0>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f7f4 f8d8 	bl	800028c <__adddf3>
 800c0dc:	4632      	mov	r2, r6
 800c0de:	463b      	mov	r3, r7
 800c0e0:	f7f4 fa8a 	bl	80005f8 <__aeabi_dmul>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	f7f4 f8cc 	bl	8000288 <__aeabi_dsub>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	f7f4 fa7c 	bl	80005f8 <__aeabi_dmul>
 800c100:	ec41 0b19 	vmov	d9, r0, r1
 800c104:	f1ba 0f00 	cmp.w	sl, #0
 800c108:	d15d      	bne.n	800c1c6 <__ieee754_exp+0x21e>
 800c10a:	2200      	movs	r2, #0
 800c10c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c110:	4630      	mov	r0, r6
 800c112:	4639      	mov	r1, r7
 800c114:	f7f4 f8b8 	bl	8000288 <__aeabi_dsub>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	ec51 0b19 	vmov	r0, r1, d9
 800c120:	f7f4 fb94 	bl	800084c <__aeabi_ddiv>
 800c124:	4622      	mov	r2, r4
 800c126:	462b      	mov	r3, r5
 800c128:	f7f4 f8ae 	bl	8000288 <__aeabi_dsub>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	2000      	movs	r0, #0
 800c132:	4957      	ldr	r1, [pc, #348]	; (800c290 <__ieee754_exp+0x2e8>)
 800c134:	f7f4 f8a8 	bl	8000288 <__aeabi_dsub>
 800c138:	e753      	b.n	800bfe2 <__ieee754_exp+0x3a>
 800c13a:	4856      	ldr	r0, [pc, #344]	; (800c294 <__ieee754_exp+0x2ec>)
 800c13c:	a348      	add	r3, pc, #288	; (adr r3, 800c260 <__ieee754_exp+0x2b8>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c146:	4629      	mov	r1, r5
 800c148:	4620      	mov	r0, r4
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c152:	f7f4 f89b 	bl	800028c <__adddf3>
 800c156:	f7f4 fcff 	bl	8000b58 <__aeabi_d2iz>
 800c15a:	4682      	mov	sl, r0
 800c15c:	f7f4 f9e2 	bl	8000524 <__aeabi_i2d>
 800c160:	a341      	add	r3, pc, #260	; (adr r3, 800c268 <__ieee754_exp+0x2c0>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	4606      	mov	r6, r0
 800c168:	460f      	mov	r7, r1
 800c16a:	f7f4 fa45 	bl	80005f8 <__aeabi_dmul>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	4620      	mov	r0, r4
 800c174:	4629      	mov	r1, r5
 800c176:	f7f4 f887 	bl	8000288 <__aeabi_dsub>
 800c17a:	a33d      	add	r3, pc, #244	; (adr r3, 800c270 <__ieee754_exp+0x2c8>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	4680      	mov	r8, r0
 800c182:	4689      	mov	r9, r1
 800c184:	4630      	mov	r0, r6
 800c186:	4639      	mov	r1, r7
 800c188:	f7f4 fa36 	bl	80005f8 <__aeabi_dmul>
 800c18c:	ec41 0b18 	vmov	d8, r0, r1
 800c190:	e76f      	b.n	800c072 <__ieee754_exp+0xca>
 800c192:	4a41      	ldr	r2, [pc, #260]	; (800c298 <__ieee754_exp+0x2f0>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d811      	bhi.n	800c1bc <__ieee754_exp+0x214>
 800c198:	a323      	add	r3, pc, #140	; (adr r3, 800c228 <__ieee754_exp+0x280>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	ee10 0a10 	vmov	r0, s0
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f7f4 f872 	bl	800028c <__adddf3>
 800c1a8:	4b39      	ldr	r3, [pc, #228]	; (800c290 <__ieee754_exp+0x2e8>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f7f4 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 800c1b0:	b138      	cbz	r0, 800c1c2 <__ieee754_exp+0x21a>
 800c1b2:	4b37      	ldr	r3, [pc, #220]	; (800c290 <__ieee754_exp+0x2e8>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	e710      	b.n	800bfde <__ieee754_exp+0x36>
 800c1bc:	f04f 0a00 	mov.w	sl, #0
 800c1c0:	e75f      	b.n	800c082 <__ieee754_exp+0xda>
 800c1c2:	4682      	mov	sl, r0
 800c1c4:	e75d      	b.n	800c082 <__ieee754_exp+0xda>
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	463b      	mov	r3, r7
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	ec51 0b19 	vmov	r0, r1, d9
 800c1dc:	f7f4 fb36 	bl	800084c <__aeabi_ddiv>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	ec51 0b18 	vmov	r0, r1, d8
 800c1e8:	f7f4 f84e 	bl	8000288 <__aeabi_dsub>
 800c1ec:	4642      	mov	r2, r8
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	f7f4 f84a 	bl	8000288 <__aeabi_dsub>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	4925      	ldr	r1, [pc, #148]	; (800c290 <__ieee754_exp+0x2e8>)
 800c1fc:	f7f4 f844 	bl	8000288 <__aeabi_dsub>
 800c200:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c204:	4592      	cmp	sl, r2
 800c206:	db02      	blt.n	800c20e <__ieee754_exp+0x266>
 800c208:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c20c:	e6e9      	b.n	800bfe2 <__ieee754_exp+0x3a>
 800c20e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c212:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c216:	2200      	movs	r2, #0
 800c218:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c21c:	e6f9      	b.n	800c012 <__ieee754_exp+0x6a>
 800c21e:	bf00      	nop
 800c220:	fefa39ef 	.word	0xfefa39ef
 800c224:	40862e42 	.word	0x40862e42
 800c228:	8800759c 	.word	0x8800759c
 800c22c:	7e37e43c 	.word	0x7e37e43c
 800c230:	d52d3051 	.word	0xd52d3051
 800c234:	c0874910 	.word	0xc0874910
 800c238:	72bea4d0 	.word	0x72bea4d0
 800c23c:	3e663769 	.word	0x3e663769
 800c240:	c5d26bf1 	.word	0xc5d26bf1
 800c244:	3ebbbd41 	.word	0x3ebbbd41
 800c248:	af25de2c 	.word	0xaf25de2c
 800c24c:	3f11566a 	.word	0x3f11566a
 800c250:	16bebd93 	.word	0x16bebd93
 800c254:	3f66c16c 	.word	0x3f66c16c
 800c258:	5555553e 	.word	0x5555553e
 800c25c:	3fc55555 	.word	0x3fc55555
 800c260:	652b82fe 	.word	0x652b82fe
 800c264:	3ff71547 	.word	0x3ff71547
 800c268:	fee00000 	.word	0xfee00000
 800c26c:	3fe62e42 	.word	0x3fe62e42
 800c270:	35793c76 	.word	0x35793c76
 800c274:	3dea39ef 	.word	0x3dea39ef
 800c278:	40862e41 	.word	0x40862e41
 800c27c:	7fefffff 	.word	0x7fefffff
 800c280:	3fd62e42 	.word	0x3fd62e42
 800c284:	3ff0a2b1 	.word	0x3ff0a2b1
 800c288:	0800ef20 	.word	0x0800ef20
 800c28c:	0800ef30 	.word	0x0800ef30
 800c290:	3ff00000 	.word	0x3ff00000
 800c294:	0800ef10 	.word	0x0800ef10
 800c298:	3e2fffff 	.word	0x3e2fffff

0800c29c <__ieee754_logf>:
 800c29c:	ee10 3a10 	vmov	r3, s0
 800c2a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c2a4:	d106      	bne.n	800c2b4 <__ieee754_logf+0x18>
 800c2a6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c43c <__ieee754_logf+0x1a0>
 800c2aa:	eddf 7a65 	vldr	s15, [pc, #404]	; 800c440 <__ieee754_logf+0x1a4>
 800c2ae:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c2b2:	4770      	bx	lr
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da02      	bge.n	800c2be <__ieee754_logf+0x22>
 800c2b8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c2bc:	e7f5      	b.n	800c2aa <__ieee754_logf+0xe>
 800c2be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c2c2:	db02      	blt.n	800c2ca <__ieee754_logf+0x2e>
 800c2c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2c8:	4770      	bx	lr
 800c2ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2ce:	bfb8      	it	lt
 800c2d0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800c444 <__ieee754_logf+0x1a8>
 800c2d4:	485c      	ldr	r0, [pc, #368]	; (800c448 <__ieee754_logf+0x1ac>)
 800c2d6:	bfbe      	ittt	lt
 800c2d8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c2dc:	f06f 0118 	mvnlt.w	r1, #24
 800c2e0:	ee17 3a90 	vmovlt	r3, s15
 800c2e4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800c2e8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c2ec:	4418      	add	r0, r3
 800c2ee:	bfa8      	it	ge
 800c2f0:	2100      	movge	r1, #0
 800c2f2:	3a7f      	subs	r2, #127	; 0x7f
 800c2f4:	440a      	add	r2, r1
 800c2f6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800c2fa:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800c2fe:	4319      	orrs	r1, r3
 800c300:	ee00 1a10 	vmov	s0, r1
 800c304:	4951      	ldr	r1, [pc, #324]	; (800c44c <__ieee754_logf+0x1b0>)
 800c306:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800c30a:	f103 000f 	add.w	r0, r3, #15
 800c30e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c312:	4001      	ands	r1, r0
 800c314:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c318:	bb89      	cbnz	r1, 800c37e <__ieee754_logf+0xe2>
 800c31a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c322:	d10f      	bne.n	800c344 <__ieee754_logf+0xa8>
 800c324:	2a00      	cmp	r2, #0
 800c326:	f000 8085 	beq.w	800c434 <__ieee754_logf+0x198>
 800c32a:	ee07 2a90 	vmov	s15, r2
 800c32e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800c450 <__ieee754_logf+0x1b4>
 800c332:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c454 <__ieee754_logf+0x1b8>
 800c336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c33e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c342:	4770      	bx	lr
 800c344:	eddf 6a44 	vldr	s13, [pc, #272]	; 800c458 <__ieee754_logf+0x1bc>
 800c348:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c34c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800c350:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c354:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c358:	b912      	cbnz	r2, 800c360 <__ieee754_logf+0xc4>
 800c35a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c35e:	4770      	bx	lr
 800c360:	ee07 2a90 	vmov	s15, r2
 800c364:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800c450 <__ieee754_logf+0x1b4>
 800c368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c36c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c370:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c374:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800c454 <__ieee754_logf+0x1b8>
 800c378:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c37c:	4770      	bx	lr
 800c37e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c382:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c386:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c45c <__ieee754_logf+0x1c0>
 800c38a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800c460 <__ieee754_logf+0x1c4>
 800c38e:	4935      	ldr	r1, [pc, #212]	; (800c464 <__ieee754_logf+0x1c8>)
 800c390:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c394:	4419      	add	r1, r3
 800c396:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800c39a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	ee07 2a90 	vmov	s15, r2
 800c3a6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c3aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c3ae:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c3b2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c468 <__ieee754_logf+0x1cc>
 800c3b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c3ba:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800c46c <__ieee754_logf+0x1d0>
 800c3be:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c3c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c470 <__ieee754_logf+0x1d4>
 800c3c6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c3ca:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800c474 <__ieee754_logf+0x1d8>
 800c3ce:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c3d2:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c478 <__ieee754_logf+0x1dc>
 800c3d6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c3da:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c3de:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c3e2:	dd1c      	ble.n	800c41e <__ieee754_logf+0x182>
 800c3e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c3e8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c3ec:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c3f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c3f8:	b922      	cbnz	r2, 800c404 <__ieee754_logf+0x168>
 800c3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c402:	4770      	bx	lr
 800c404:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800c450 <__ieee754_logf+0x1b4>
 800c408:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c410:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c414:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c454 <__ieee754_logf+0x1b8>
 800c418:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c41c:	4770      	bx	lr
 800c41e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c422:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c426:	2a00      	cmp	r2, #0
 800c428:	d0e9      	beq.n	800c3fe <__ieee754_logf+0x162>
 800c42a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800c450 <__ieee754_logf+0x1b4>
 800c42e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c432:	e7ed      	b.n	800c410 <__ieee754_logf+0x174>
 800c434:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c440 <__ieee754_logf+0x1a4>
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	cc000000 	.word	0xcc000000
 800c440:	00000000 	.word	0x00000000
 800c444:	4c000000 	.word	0x4c000000
 800c448:	004afb20 	.word	0x004afb20
 800c44c:	007ffff0 	.word	0x007ffff0
 800c450:	3717f7d1 	.word	0x3717f7d1
 800c454:	3f317180 	.word	0x3f317180
 800c458:	3eaaaaab 	.word	0x3eaaaaab
 800c45c:	3e1cd04f 	.word	0x3e1cd04f
 800c460:	3e178897 	.word	0x3e178897
 800c464:	ffcf5c30 	.word	0xffcf5c30
 800c468:	3e638e29 	.word	0x3e638e29
 800c46c:	3ecccccd 	.word	0x3ecccccd
 800c470:	3e3a3325 	.word	0x3e3a3325
 800c474:	3e924925 	.word	0x3e924925
 800c478:	3f2aaaab 	.word	0x3f2aaaab

0800c47c <finite>:
 800c47c:	b082      	sub	sp, #8
 800c47e:	ed8d 0b00 	vstr	d0, [sp]
 800c482:	9801      	ldr	r0, [sp, #4]
 800c484:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c488:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c48c:	0fc0      	lsrs	r0, r0, #31
 800c48e:	b002      	add	sp, #8
 800c490:	4770      	bx	lr
	...

0800c494 <_init>:
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	bf00      	nop
 800c498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49a:	bc08      	pop	{r3}
 800c49c:	469e      	mov	lr, r3
 800c49e:	4770      	bx	lr

0800c4a0 <_fini>:
 800c4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a2:	bf00      	nop
 800c4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a6:	bc08      	pop	{r3}
 800c4a8:	469e      	mov	lr, r3
 800c4aa:	4770      	bx	lr

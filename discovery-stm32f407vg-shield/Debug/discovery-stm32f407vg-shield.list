
discovery-stm32f407vg-shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ad8  0800cbb8  0800cbb8  0001cbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f690  0800f690  00020338  2**0
                  CONTENTS
  4 .ARM          00000008  0800f690  0800f690  0001f690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f698  0800f698  00020338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f69c  0800f69c  0001f69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0800f6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000338  0800f9d8  00020338  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  0800f9d8  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026af7  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000484f  00000000  00000000  00046e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0004b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  0004d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a06  00000000  00000000  0004ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002221a  00000000  00000000  0007567e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e17bf  00000000  00000000  00097898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b20  00000000  00000000  001790ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb9c 	.word	0x0800cb9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	0800cb9c 	.word	0x0800cb9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};


void FIRFilter_Init(FIRFilter *fir) {
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e009      	b.n	800100e <FIRFilter_Init+0x22>

		fir->buf[n] = 0.0f;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d9f2      	bls.n	8000ffa <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* Clear filter output */
	fir->out = 0.0f;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	ed87 0a00 	vstr	s0, [r7]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	601a      	str	r2, [r3, #0]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d103      	bne.n	800106e <FIRFilter_Update+0x3e>

		fir->bufIndex = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800107c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
 8001082:	e021      	b.n	80010c8 <FIRFilter_Update+0x98>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <FIRFilter_Update+0x62>

			sumIndex--;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3b01      	subs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8001092:	2309      	movs	r3, #9
 8001094:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <FIRFilter_Update+0xb4>)
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	edd3 6a00 	vldr	s13, [r3]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	3301      	adds	r3, #1
 80010c6:	73bb      	strb	r3, [r7, #14]
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	d9da      	bls.n	8001084 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	ee07 3a90 	vmov	s15, r3

}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000000 	.word	0x20000000

080010e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010fa:	4b59      	ldr	r3, [pc, #356]	; (8001260 <MX_ADC1_Init+0x178>)
 80010fc:	4a59      	ldr	r2, [pc, #356]	; (8001264 <MX_ADC1_Init+0x17c>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <MX_ADC1_Init+0x178>)
 8001102:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001106:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <MX_ADC1_Init+0x178>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800110e:	4b54      	ldr	r3, [pc, #336]	; (8001260 <MX_ADC1_Init+0x178>)
 8001110:	2201      	movs	r2, #1
 8001112:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001114:	4b52      	ldr	r3, [pc, #328]	; (8001260 <MX_ADC1_Init+0x178>)
 8001116:	2201      	movs	r2, #1
 8001118:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111a:	4b51      	ldr	r3, [pc, #324]	; (8001260 <MX_ADC1_Init+0x178>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <MX_ADC1_Init+0x178>)
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001128:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <MX_ADC1_Init+0x178>)
 800112a:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <MX_ADC1_Init+0x180>)
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <MX_ADC1_Init+0x178>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8001134:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <MX_ADC1_Init+0x178>)
 8001136:	2209      	movs	r2, #9
 8001138:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <MX_ADC1_Init+0x178>)
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001142:	4b47      	ldr	r3, [pc, #284]	; (8001260 <MX_ADC1_Init+0x178>)
 8001144:	2201      	movs	r2, #1
 8001146:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <MX_ADC1_Init+0x178>)
 800114a:	f001 fff3 	bl	8003134 <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001154:	f001 f9a0 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001160:	2303      	movs	r3, #3
 8001162:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	4619      	mov	r1, r3
 8001168:	483d      	ldr	r0, [pc, #244]	; (8001260 <MX_ADC1_Init+0x178>)
 800116a:	f002 f94b 	bl	8003404 <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001174:	f001 f990 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001178:	2301      	movs	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4836      	ldr	r0, [pc, #216]	; (8001260 <MX_ADC1_Init+0x178>)
 8001186:	f002 f93d 	bl	8003404 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001190:	f001 f982 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001194:	2302      	movs	r3, #2
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001198:	2303      	movs	r3, #3
 800119a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <MX_ADC1_Init+0x178>)
 80011a2:	f002 f92f 	bl	8003404 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011ac:	f001 f974 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011b0:	2303      	movs	r3, #3
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <MX_ADC1_Init+0x178>)
 80011be:	f002 f921 	bl	8003404 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011c8:	f001 f966 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011d0:	2305      	movs	r3, #5
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <MX_ADC1_Init+0x178>)
 80011da:	f002 f913 	bl	8003404 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80011e4:	f001 f958 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e8:	2305      	movs	r3, #5
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80011ec:	2306      	movs	r3, #6
 80011ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <MX_ADC1_Init+0x178>)
 80011f6:	f002 f905 	bl	8003404 <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001200:	f001 f94a 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001204:	2306      	movs	r3, #6
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001208:	2307      	movs	r3, #7
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_ADC1_Init+0x178>)
 8001212:	f002 f8f7 	bl	8003404 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800121c:	f001 f93c 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001220:	2307      	movs	r3, #7
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001224:	2308      	movs	r3, #8
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_ADC1_Init+0x178>)
 800122e:	f002 f8e9 	bl	8003404 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001238:	f001 f92e 	bl	8002498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800123c:	2311      	movs	r3, #17
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001240:	2309      	movs	r3, #9
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_ADC1_Init+0x178>)
 800124a:	f002 f8db 	bl	8003404 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001254:	f001 f920 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000390 	.word	0x20000390
 8001264:	40012000 	.word	0x40012000
 8001268:	0f000001 	.word	0x0f000001

0800126c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <HAL_ADC_MspInit+0xdc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d158      	bne.n	8001340 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_ADC_MspInit+0xe0>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a2d      	ldr	r2, [pc, #180]	; (800134c <HAL_ADC_MspInit+0xe0>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a26      	ldr	r2, [pc, #152]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_ADC_MspInit+0xe0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012c6:	23ff      	movs	r3, #255	; 0xff
 80012c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <HAL_ADC_MspInit+0xe4>)
 80012da:	f002 ffb5 	bl	8004248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_ADC_MspInit+0xec>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001304:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001314:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001318:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800131c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001326:	f002 fc1f 	bl	8003b68 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001330:	f001 f8b2 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_ADC_MspInit+0xe8>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40012000 	.word	0x40012000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	200003d8 	.word	0x200003d8
 8001358:	40026410 	.word	0x40026410

0800135c <DAQ_channel_init>:
//struct DAQ_channel *DAQ_channel_SelectChannel(DAQ_channel_no no) {
//	return &DAQ_channel[no];
//}

void DAQ_channel_init(DAQ_channel_no no, GPIO_TypeDef* CHANNEL_GPIOx,
		uint16_t  CHANNEL_GPIO_Pin, struct thermistor *th, struct photodiode *ph) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	4613      	mov	r3, r2
 800136c:	81bb      	strh	r3, [r7, #12]

	DAQ_channel_set_index(no, no);
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f819 	bl	80013ac <DAQ_channel_set_index>
	DAQ_channel_set_GPIO_TypeDef(no, CHANNEL_GPIOx);
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f82e 	bl	80013e0 <DAQ_channel_set_GPIO_TypeDef>
	DAQ_channel_set_GPIO_Pin(no, CHANNEL_GPIO_Pin);
 8001384:	89ba      	ldrh	r2, [r7, #12]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f840 	bl	8001410 <DAQ_channel_set_GPIO_Pin>
	DAQ_channel_set_thermistor(no, th);
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f889 	bl	80014ac <DAQ_channel_set_thermistor>
	DAQ_channel_set_photodiode(no, ph);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	69b9      	ldr	r1, [r7, #24]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f89c 	bl	80014dc <DAQ_channel_set_photodiode>

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DAQ_channel_set_index>:

void DAQ_channel_set_index(DAQ_channel_no no, uint8_t i) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].index = i;
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	4907      	ldr	r1, [pc, #28]	; (80013dc <DAQ_channel_set_index+0x30>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	701a      	strb	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000488 	.word	0x20000488

080013e0 <DAQ_channel_set_GPIO_TypeDef>:

void DAQ_channel_set_GPIO_TypeDef(DAQ_channel_no no, GPIO_TypeDef* CHANNEL_GPIOx) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].CHANNEL_GPIOx = CHANNEL_GPIOx;
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	4907      	ldr	r1, [pc, #28]	; (800140c <DAQ_channel_set_GPIO_TypeDef+0x2c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3304      	adds	r3, #4
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000488 	.word	0x20000488

08001410 <DAQ_channel_set_GPIO_Pin>:

void DAQ_channel_set_GPIO_Pin(DAQ_channel_no no, uint16_t  CHANNEL_GPIO_Pin) {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	80bb      	strh	r3, [r7, #4]
	DAQ_channel[no].CHANNEL_GPIO_Pin = CHANNEL_GPIO_Pin;
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <DAQ_channel_set_GPIO_Pin+0x30>)
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3308      	adds	r3, #8
 8001430:	88ba      	ldrh	r2, [r7, #4]
 8001432:	801a      	strh	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000488 	.word	0x20000488

08001444 <DAQ_channel_set_flag_enable>:

void DAQ_channel_set_flag_enable(DAQ_channel_no no, _Bool flag) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_enable = flag;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4907      	ldr	r1, [pc, #28]	; (8001474 <DAQ_channel_set_flag_enable+0x30>)
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	330a      	adds	r3, #10
 8001464:	79ba      	ldrb	r2, [r7, #6]
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000488 	.word	0x20000488

08001478 <DAQ_channel_set_flag_state>:

void DAQ_channel_set_flag_state(DAQ_channel_no no, _Bool flag) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_state = flag;
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	4907      	ldr	r1, [pc, #28]	; (80014a8 <DAQ_channel_set_flag_state+0x30>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	330b      	adds	r3, #11
 8001498:	79ba      	ldrb	r2, [r7, #6]
 800149a:	701a      	strb	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	20000488 	.word	0x20000488

080014ac <DAQ_channel_set_thermistor>:

void DAQ_channel_set_thermistor(DAQ_channel_no no, struct thermistor *th) {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].th = th;
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	4907      	ldr	r1, [pc, #28]	; (80014d8 <DAQ_channel_set_thermistor+0x2c>)
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	330c      	adds	r3, #12
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000488 	.word	0x20000488

080014dc <DAQ_channel_set_photodiode>:

void DAQ_channel_set_photodiode(DAQ_channel_no no, struct photodiode *ph) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].ph = ph;
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4907      	ldr	r1, [pc, #28]	; (8001508 <DAQ_channel_set_photodiode+0x2c>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3310      	adds	r3, #16
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	20000488 	.word	0x20000488

0800150c <DAQ_channel_set_flag_save>:

void DAQ_channel_set_flag_save(DAQ_channel_no no, _Bool flag) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_save = flag;
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	4907      	ldr	r1, [pc, #28]	; (800153c <DAQ_channel_set_flag_save+0x30>)
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3314      	adds	r3, #20
 800152c:	79ba      	ldrb	r2, [r7, #6]
 800152e:	701a      	strb	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000488 	.word	0x20000488

08001540 <DAQ_channel_set_flag_th_limit>:

void DAQ_channel_set_flag_th_limit(DAQ_channel_no no, _Bool flag) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_th_limit = flag;
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	4907      	ldr	r1, [pc, #28]	; (8001570 <DAQ_channel_set_flag_th_limit+0x30>)
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	3315      	adds	r3, #21
 8001560:	79ba      	ldrb	r2, [r7, #6]
 8001562:	701a      	strb	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000488 	.word	0x20000488

08001574 <DAQ_channel_set_th_limit>:

void DAQ_channel_set_th_limit(DAQ_channel_no no, uint32_t th_limit) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].th_limit = th_limit;
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	4925      	ldr	r1, [pc, #148]	; (8001618 <DAQ_channel_set_th_limit+0xa4>)
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3318      	adds	r3, #24
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	601a      	str	r2, [r3, #0]
	DAQ_channel[no].th->temperature_max_value = ((float)DAQ_channel[no].th_limit/100);
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	4920      	ldr	r1, [pc, #128]	; (8001618 <DAQ_channel_set_th_limit+0xa4>)
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3318      	adds	r3, #24
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4919      	ldr	r1, [pc, #100]	; (8001618 <DAQ_channel_set_th_limit+0xa4>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	330c      	adds	r3, #12
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	eddf 6a16 	vldr	s13, [pc, #88]	; 800161c <DAQ_channel_set_th_limit+0xa8>
 80015c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]
	DAQ_channel[no].th->ADC_max_value = ntc3950_Celcius_to_ADC(DAQ_channel[no].th->temperature_max_value, ADC1read[8]);
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	4912      	ldr	r1, [pc, #72]	; (8001618 <DAQ_channel_set_th_limit+0xa4>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	330c      	adds	r3, #12
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <DAQ_channel_set_th_limit+0xac>)
 80015e4:	6a19      	ldr	r1, [r3, #32]
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <DAQ_channel_set_th_limit+0xa4>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	330c      	adds	r3, #12
 80015f6:	681c      	ldr	r4, [r3, #0]
 80015f8:	4608      	mov	r0, r1
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	f000 ff53 	bl	80024a8 <ntc3950_Celcius_to_ADC>
 8001602:	4603      	mov	r3, r0
 8001604:	60a3      	str	r3, [r4, #8]
	DAQ_channel_set_flag_th_limit(no, false);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff98 	bl	8001540 <DAQ_channel_set_flag_th_limit>
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	20000488 	.word	0x20000488
 800161c:	42c80000 	.word	0x42c80000
 8001620:	2000036c 	.word	0x2000036c

08001624 <DAQ_channel_set_flag_ph_limit>:

void DAQ_channel_set_flag_ph_limit(DAQ_channel_no no, _Bool flag) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
	DAQ_channel[no].flag_ph_limit = flag;
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4907      	ldr	r1, [pc, #28]	; (8001654 <DAQ_channel_set_flag_ph_limit+0x30>)
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	331c      	adds	r3, #28
 8001644:	79ba      	ldrb	r2, [r7, #6]
 8001646:	701a      	strb	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	20000488 	.word	0x20000488

08001658 <DAQ_channel_set_ph_limit>:

void DAQ_channel_set_ph_limit(DAQ_channel_no no, uint32_t ph_limit) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
	DAQ_channel[no].ph_limit = ph_limit;
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	4925      	ldr	r1, [pc, #148]	; (80016fc <DAQ_channel_set_ph_limit+0xa4>)
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3320      	adds	r3, #32
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]
	DAQ_channel[no].ph->power_max_value = ((float)DAQ_channel[no].ph_limit/100);
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	4920      	ldr	r1, [pc, #128]	; (80016fc <DAQ_channel_set_ph_limit+0xa4>)
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3320      	adds	r3, #32
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	4919      	ldr	r1, [pc, #100]	; (80016fc <DAQ_channel_set_ph_limit+0xa4>)
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	3310      	adds	r3, #16
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001700 <DAQ_channel_set_ph_limit+0xa8>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	edc3 7a01 	vstr	s15, [r3, #4]
	DAQ_channel[no].ph->ADC_max_value = photodiode_power_to_ADC(DAQ_channel[no].ph->power_max_value, ADC1read[8]);
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	4912      	ldr	r1, [pc, #72]	; (80016fc <DAQ_channel_set_ph_limit+0xa4>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3310      	adds	r3, #16
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <DAQ_channel_set_ph_limit+0xac>)
 80016c8:	6a19      	ldr	r1, [r3, #32]
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <DAQ_channel_set_ph_limit+0xa4>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4403      	add	r3, r0
 80016d8:	3310      	adds	r3, #16
 80016da:	681c      	ldr	r4, [r3, #0]
 80016dc:	4608      	mov	r0, r1
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f001 f845 	bl	8002770 <photodiode_power_to_ADC>
 80016e6:	4603      	mov	r3, r0
 80016e8:	60a3      	str	r3, [r4, #8]
	DAQ_channel_set_flag_ph_limit(no, false);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff98 	bl	8001624 <DAQ_channel_set_flag_ph_limit>
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	20000488 	.word	0x20000488
 8001700:	42c80000 	.word	0x42c80000
 8001704:	2000036c 	.word	0x2000036c

08001708 <DAQ_channel_get_GPIO_TypeDef>:
uint8_t DAQ_channel_get_index(DAQ_channel_no no) {
	return DAQ_channel[no].index;

}

GPIO_TypeDef *DAQ_channel_get_GPIO_TypeDef(DAQ_channel_no no) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].CHANNEL_GPIOx;
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	4906      	ldr	r1, [pc, #24]	; (8001730 <DAQ_channel_get_GPIO_TypeDef+0x28>)
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	3304      	adds	r3, #4
 8001722:	681b      	ldr	r3, [r3, #0]

}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000488 	.word	0x20000488

08001734 <DAQ_channel_get_GPIO_Pin>:

uint16_t DAQ_channel_get_GPIO_Pin(DAQ_channel_no no) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].CHANNEL_GPIO_Pin;
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <DAQ_channel_get_GPIO_Pin+0x28>)
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	881b      	ldrh	r3, [r3, #0]

}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000488 	.word	0x20000488

08001760 <DAQ_channel_get_flag_enable>:

_Bool DAQ_channel_get_flag_enable(DAQ_channel_no no) {
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_enable;
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	4906      	ldr	r1, [pc, #24]	; (8001788 <DAQ_channel_get_flag_enable+0x28>)
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	330a      	adds	r3, #10
 800177a:	781b      	ldrb	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20000488 	.word	0x20000488

0800178c <DAQ_channel_get_flag_state>:

_Bool DAQ_channel_get_flag_state(DAQ_channel_no no) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_state;
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	4906      	ldr	r1, [pc, #24]	; (80017b4 <DAQ_channel_get_flag_state+0x28>)
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	330b      	adds	r3, #11
 80017a6:	781b      	ldrb	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	20000488 	.word	0x20000488

080017b8 <DAQ_channel_get_flag_save>:

struct photodiode *DAQ_channel_get_photodiode(DAQ_channel_no no) {
	return DAQ_channel[no].ph;
}

_Bool DAQ_channel_get_flag_save(DAQ_channel_no no) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_save;
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4906      	ldr	r1, [pc, #24]	; (80017e0 <DAQ_channel_get_flag_save+0x28>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3314      	adds	r3, #20
 80017d2:	781b      	ldrb	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000488 	.word	0x20000488

080017e4 <DAQ_channel_get_flag_th_limit>:

_Bool DAQ_channel_get_flag_th_limit(DAQ_channel_no no) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_th_limit;
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <DAQ_channel_get_flag_th_limit+0x28>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3315      	adds	r3, #21
 80017fe:	781b      	ldrb	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20000488 	.word	0x20000488

08001810 <DAQ_channel_get_th_limit>:

uint32_t DAQ_channel_get_th_limit(DAQ_channel_no no) {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].th_limit;
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <DAQ_channel_get_th_limit+0x28>)
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3318      	adds	r3, #24
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	20000488 	.word	0x20000488

0800183c <DAQ_channel_get_flag_ph_limit>:

_Bool DAQ_channel_get_flag_ph_limit(DAQ_channel_no no) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].flag_ph_limit;
 8001846:	79fa      	ldrb	r2, [r7, #7]
 8001848:	4906      	ldr	r1, [pc, #24]	; (8001864 <DAQ_channel_get_flag_ph_limit+0x28>)
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	331c      	adds	r3, #28
 8001856:	781b      	ldrb	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000488 	.word	0x20000488

08001868 <DAQ_channel_get_ph_limit>:

uint32_t DAQ_channel_get_ph_limit(DAQ_channel_no no) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	return DAQ_channel[no].ph_limit;
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	4906      	ldr	r1, [pc, #24]	; (8001890 <DAQ_channel_get_ph_limit+0x28>)
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3320      	adds	r3, #32
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000488 	.word	0x20000488

08001894 <DAQ_channel_off>:

//ONOFF
void DAQ_channel_off(DAQ_channel_no no) {
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	DAQ_channel_set_flag_state(no, false);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fde8 	bl	8001478 <DAQ_channel_set_flag_state>
	HAL_GPIO_WritePin(DAQ_channel_get_GPIO_TypeDef(no), DAQ_channel_get_GPIO_Pin(no), GPIO_PIN_SET); //transistor open -> channel closed
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff2c 	bl	8001708 <DAQ_channel_get_GPIO_TypeDef>
 80018b0:	4604      	mov	r4, r0
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff3d 	bl	8001734 <DAQ_channel_get_GPIO_Pin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	4620      	mov	r0, r4
 80018c2:	f002 fe5d 	bl	8004580 <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}

080018ce <DAQ_channel_on>:

void DAQ_channel_on(DAQ_channel_no no) {
 80018ce:	b590      	push	{r4, r7, lr}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
	DAQ_channel_set_flag_state(no, true);
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2101      	movs	r1, #1
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fdcb 	bl	8001478 <DAQ_channel_set_flag_state>
	HAL_GPIO_WritePin(DAQ_channel_get_GPIO_TypeDef(no), DAQ_channel_get_GPIO_Pin(no), GPIO_PIN_RESET); //transistor closed -> channel open
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff0f 	bl	8001708 <DAQ_channel_get_GPIO_TypeDef>
 80018ea:	4604      	mov	r4, r0
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff20 	bl	8001734 <DAQ_channel_get_GPIO_Pin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4620      	mov	r0, r4
 80018fc:	f002 fe40 	bl	8004580 <HAL_GPIO_WritePin>
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <DAQ_CHANGE_enable>:
//	DAQ_channel[no].ph->power_max_value =  ((float)DAQ_channel[no].ph_limit/100);
//	DAQ_channel[no].ph->ADC_max_value = photodiode_power_to_ADC(DAQ_channel[no].ph->power_max_value, ADC1read[8]);
//
//}

void DAQ_CHANGE_enable(DAQ_channel_no no) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af04      	add	r7, sp, #16
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(2, 2+(30*0), "Channel turned: ", Font_7x10, WHITE, BLACK);
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <DAQ_CHANGE_enable+0x88>)
 8001914:	2200      	movs	r2, #0
 8001916:	9202      	str	r2, [sp, #8]
 8001918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <DAQ_CHANGE_enable+0x8c>)
 8001926:	2102      	movs	r1, #2
 8001928:	2002      	movs	r0, #2
 800192a:	f004 fed3 	bl	80066d4 <ST7735_WriteString>
	if(DAQ_channel_get_flag_state(no)) {
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff2b 	bl	800178c <DAQ_channel_get_flag_state>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <DAQ_CHANGE_enable+0x5a>
		DAQ_channel_off(no);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ffa8 	bl	8001894 <DAQ_channel_off>
		ST7735_WriteString(2, 2+(30*2), "OFF", Font_16x26, RED, BLACK);
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <DAQ_CHANGE_enable+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	9202      	str	r2, [sp, #8]
 800194a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	9200      	str	r2, [sp, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <DAQ_CHANGE_enable+0x94>)
 8001958:	213e      	movs	r1, #62	; 0x3e
 800195a:	2002      	movs	r0, #2
 800195c:	f004 feba 	bl	80066d4 <ST7735_WriteString>
	}
	else {
		DAQ_channel_on(no);
		ST7735_WriteString(2, 2+(30*2), "ON", Font_16x26, GREEN, BLACK);
	}
}
 8001960:	e011      	b.n	8001986 <DAQ_CHANGE_enable+0x7e>
		DAQ_channel_on(no);
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffb2 	bl	80018ce <DAQ_channel_on>
		ST7735_WriteString(2, 2+(30*2), "ON", Font_16x26, GREEN, BLACK);
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <DAQ_CHANGE_enable+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	9202      	str	r2, [sp, #8]
 8001970:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	9200      	str	r2, [sp, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <DAQ_CHANGE_enable+0x98>)
 800197e:	213e      	movs	r1, #62	; 0x3e
 8001980:	2002      	movs	r0, #2
 8001982:	f004 fea7 	bl	80066d4 <ST7735_WriteString>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000034 	.word	0x20000034
 8001994:	0800cbb8 	.word	0x0800cbb8
 8001998:	2000003c 	.word	0x2000003c
 800199c:	0800cbcc 	.word	0x0800cbcc
 80019a0:	0800cbd0 	.word	0x0800cbd0

080019a4 <DAQ_CHANGE_save>:

void DAQ_CHANGE_save(DAQ_channel_no no) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(2, 2+(30*2), "Settings saved", Font_16x26, GREEN, BLACK);
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <DAQ_CHANGE_save+0x38>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	9202      	str	r2, [sp, #8]
 80019b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <DAQ_CHANGE_save+0x3c>)
 80019c2:	213e      	movs	r1, #62	; 0x3e
 80019c4:	2002      	movs	r0, #2
 80019c6:	f004 fe85 	bl	80066d4 <ST7735_WriteString>

	DAQ_channel_set_flag_save(no, false);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fd9c 	bl	800150c <DAQ_channel_set_flag_save>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000003c 	.word	0x2000003c
 80019e0:	0800cbd4 	.word	0x0800cbd4

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_DMA_Init+0x5c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <MX_DMA_Init+0x5c>)
 80019f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_DMA_Init+0x5c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2038      	movs	r0, #56	; 0x38
 8001a0c:	f002 f875 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f002 f88e 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2044      	movs	r0, #68	; 0x44
 8001a1c:	f002 f86d 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001a20:	2044      	movs	r0, #68	; 0x44
 8001a22:	f002 f886 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2046      	movs	r0, #70	; 0x46
 8001a2c:	f002 f865 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a30:	2046      	movs	r0, #70	; 0x46
 8001a32:	f002 f87e 	bl	8003b32 <HAL_NVIC_EnableIRQ>

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a53      	ldr	r2, [pc, #332]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a4c      	ldr	r2, [pc, #304]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a45      	ldr	r2, [pc, #276]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a37      	ldr	r2, [pc, #220]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_GPIO_Init+0x188>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001b08:	4831      	ldr	r0, [pc, #196]	; (8001bd0 <MX_GPIO_Init+0x18c>)
 8001b0a:	f002 fd39 	bl	8004580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b14:	482f      	ldr	r0, [pc, #188]	; (8001bd4 <MX_GPIO_Init+0x190>)
 8001b16:	f002 fd33 	bl	8004580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	218f      	movs	r1, #143	; 0x8f
 8001b1e:	482e      	ldr	r0, [pc, #184]	; (8001bd8 <MX_GPIO_Init+0x194>)
 8001b20:	f002 fd2e 	bl	8004580 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001b24:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4824      	ldr	r0, [pc, #144]	; (8001bd0 <MX_GPIO_Init+0x18c>)
 8001b3e:	f002 fb83 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4820      	ldr	r0, [pc, #128]	; (8001bdc <MX_GPIO_Init+0x198>)
 8001b5a:	f002 fb75 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <MX_GPIO_Init+0x190>)
 8001b78:	f002 fb66 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <MX_GPIO_Init+0x194>)
 8001b94:	f002 fb58 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <MX_GPIO_Init+0x194>)
 8001bb0:	f002 fb4a 	bl	8004248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2028      	movs	r0, #40	; 0x28
 8001bba:	f001 ff9e 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bbe:	2028      	movs	r0, #40	; 0x28
 8001bc0:	f001 ffb7 	bl	8003b32 <HAL_NVIC_EnableIRQ>

}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000

08001be0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <MX_I2C2_Init+0x54>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_I2C2_Init+0x58>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c1e:	f002 fce1 	bl	80045e4 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 fc36 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000548 	.word	0x20000548
 8001c34:	40005800 	.word	0x40005800
 8001c38:	000186a0 	.word	0x000186a0

08001c3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_I2C_MspInit+0x84>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12c      	bne.n	8001cb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_I2C_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_I2C_MspInit+0x88>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_I2C_MspInit+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c80:	2312      	movs	r3, #18
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <HAL_I2C_MspInit+0x8c>)
 8001c98:	f002 fad6 	bl	8004248 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_I2C_MspInit+0x88>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_I2C_MspInit+0x88>)
 8001ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001caa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_I2C_MspInit+0x88>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40005800 	.word	0x40005800
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020400 	.word	0x40020400

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd2:	f001 f999 	bl	8003008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd6:	f000 f9e3 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cda:	f7ff feb3 	bl	8001a44 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cde:	f7ff fe81 	bl	80019e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ce2:	f7ff fa01 	bl	80010e8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001ce6:	f001 f88f 	bl	8002e08 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001cea:	f7ff ff79 	bl	8001be0 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001cee:	f000 fe03 	bl	80028f8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001cf2:	f000 ffe3 	bl	8002cbc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
/* -------------------------------------------------------------------------------- */
/* -- TIMERS START -- */
/* -------------------------------------------------------------------------------- */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001cf6:	213c      	movs	r1, #60	; 0x3c
 8001cf8:	48ba      	ldr	r0, [pc, #744]	; (8001fe4 <main+0x318>)
 8001cfa:	f003 fd61 	bl	80057c0 <HAL_TIM_Encoder_Start>
//  HAL_UART_Receive_DMA(&huart1, Received, 13);

/* -------------------------------------------------------------------------------- */
/* -- CREATE ENCODER -- */
/* -------------------------------------------------------------------------------- */
  encoder_struct_init(&encoder_1, &htim1);
 8001cfe:	49b9      	ldr	r1, [pc, #740]	; (8001fe4 <main+0x318>)
 8001d00:	48b9      	ldr	r0, [pc, #740]	; (8001fe8 <main+0x31c>)
 8001d02:	f004 fdf3 	bl	80068ec <encoder_struct_init>

/* -------------------------------------------------------------------------------- */
/* -- LCD ST7735 SCREEN INIT -- */
/* -------------------------------------------------------------------------------- */
  ST7735_Init(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f004 fb82 	bl	8006410 <ST7735_Init>

/* -------------------------------------------------------------------------------- */
/* -- MENU INIT -- */
/* -------------------------------------------------------------------------------- */
  GUI_init();
 8001d0c:	f005 f908 	bl	8006f20 <GUI_init>
  Menu_Show();
 8001d10:	f004 ff26 	bl	8006b60 <Menu_Show>

/* -------------------------------------------------------------------------------- */
/* -- ADC1 START 9 channels -- */
/* -------------------------------------------------------------------------------- */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1read, 9);   // frequency > 10kHz( 0.1 ms/100us )
 8001d14:	2209      	movs	r2, #9
 8001d16:	49b5      	ldr	r1, [pc, #724]	; (8001fec <main+0x320>)
 8001d18:	48b5      	ldr	r0, [pc, #724]	; (8001ff0 <main+0x324>)
 8001d1a:	f001 fa4f 	bl	80031bc <HAL_ADC_Start_DMA>


/* -------------------------------------------------------------------------------- */
/* -- Initialise channels  -- */
/* -------------------------------------------------------------------------------- */
  DAQ_channel_init(DAQ_CH1, CHANNEL_1_GPIO_TypeDef, CHANNEL_1_GPIO_Pin, &thermistor[0], &photodiode[0]);
 8001d1e:	4bb5      	ldr	r3, [pc, #724]	; (8001ff4 <main+0x328>)
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4bb5      	ldr	r3, [pc, #724]	; (8001ff8 <main+0x32c>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	49b5      	ldr	r1, [pc, #724]	; (8001ffc <main+0x330>)
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fb17 	bl	800135c <DAQ_channel_init>
  DAQ_channel_init(DAQ_CH2, CHANNEL_2_GPIO_TypeDef, CHANNEL_2_GPIO_Pin, &thermistor[1], &photodiode[1]);
 8001d2e:	4bb4      	ldr	r3, [pc, #720]	; (8002000 <main+0x334>)
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	4bb4      	ldr	r3, [pc, #720]	; (8002004 <main+0x338>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	49b1      	ldr	r1, [pc, #708]	; (8001ffc <main+0x330>)
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff fb0f 	bl	800135c <DAQ_channel_init>
  DAQ_channel_init(DAQ_CH3, CHANNEL_3_GPIO_TypeDef, CHANNEL_3_GPIO_Pin, &thermistor[2], &photodiode[2]);
 8001d3e:	4bb2      	ldr	r3, [pc, #712]	; (8002008 <main+0x33c>)
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4bb2      	ldr	r3, [pc, #712]	; (800200c <main+0x340>)
 8001d44:	2204      	movs	r2, #4
 8001d46:	49ad      	ldr	r1, [pc, #692]	; (8001ffc <main+0x330>)
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fb07 	bl	800135c <DAQ_channel_init>
  DAQ_channel_init(DAQ_CH4, CHANNEL_4_GPIO_TypeDef, CHANNEL_4_GPIO_Pin, &thermistor[3], &photodiode[3]);
 8001d4e:	4bb0      	ldr	r3, [pc, #704]	; (8002010 <main+0x344>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4bb0      	ldr	r3, [pc, #704]	; (8002014 <main+0x348>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	49a9      	ldr	r1, [pc, #676]	; (8001ffc <main+0x330>)
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f7ff faff 	bl	800135c <DAQ_channel_init>

  HAL_Delay(500);
 8001d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d62:	f001 f9c3 	bl	80030ec <HAL_Delay>

  DAQ_channel_set_th_limit(DAQ_CH1, 2500);
 8001d66:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fc02 	bl	8001574 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH1, 50000);
 8001d70:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fc6f 	bl	8001658 <DAQ_channel_set_ph_limit>

  DAQ_channel_set_th_limit(DAQ_CH2, 2500);
 8001d7a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff fbf8 	bl	8001574 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH2, 50000);
 8001d84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff fc65 	bl	8001658 <DAQ_channel_set_ph_limit>

  DAQ_channel_set_th_limit(DAQ_CH3, 2500);
 8001d8e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001d92:	2002      	movs	r0, #2
 8001d94:	f7ff fbee 	bl	8001574 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH3, 50000);
 8001d98:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f7ff fc5b 	bl	8001658 <DAQ_channel_set_ph_limit>

  DAQ_channel_set_th_limit(DAQ_CH4, 2500);
 8001da2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001da6:	2003      	movs	r0, #3
 8001da8:	f7ff fbe4 	bl	8001574 <DAQ_channel_set_th_limit>
  DAQ_channel_set_ph_limit(DAQ_CH4, 50000);
 8001dac:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001db0:	2003      	movs	r0, #3
 8001db2:	f7ff fc51 	bl	8001658 <DAQ_channel_set_ph_limit>


  for(uint8_t i = 0; i < THERMISTORS_FIR_NUMBER; i++) {
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e00c      	b.n	8001dd6 <main+0x10a>
	  FIRFilter_Init(&moving_average_thermistors[i]);
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4a94      	ldr	r2, [pc, #592]	; (8002018 <main+0x34c>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f90e 	bl	8000fec <FIRFilter_Init>
  for(uint8_t i = 0; i < THERMISTORS_FIR_NUMBER; i++) {
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d9ef      	bls.n	8001dbc <main+0xf0>
  }
  for(uint8_t i = 0; i < PHOTODIODES_FIR_NUMBER; i++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73bb      	strb	r3, [r7, #14]
 8001de0:	e00c      	b.n	8001dfc <main+0x130>
  	  FIRFilter_Init(&moving_average_photodiodes[i]);
 8001de2:	7bba      	ldrb	r2, [r7, #14]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4a8b      	ldr	r2, [pc, #556]	; (800201c <main+0x350>)
 8001dee:	4413      	add	r3, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f8fb 	bl	8000fec <FIRFilter_Init>
  for(uint8_t i = 0; i < PHOTODIODES_FIR_NUMBER; i++) {
 8001df6:	7bbb      	ldrb	r3, [r7, #14]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73bb      	strb	r3, [r7, #14]
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d9ef      	bls.n	8001de2 <main+0x116>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  menu_flags.flag_encoder_event = true;
 8001e02:	4b87      	ldr	r3, [pc, #540]	; (8002020 <main+0x354>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
  uint32_t value = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	if(menu_flags.flag_function && !menu_flags.flag_CHANGE_value && !menu_flags.flag_change_finish && encoder_enter(&encoder_1))  {
 8001e0c:	4b84      	ldr	r3, [pc, #528]	; (8002020 <main+0x354>)
 8001e0e:	78db      	ldrb	r3, [r3, #3]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01c      	beq.n	8001e4e <main+0x182>
 8001e14:	4b82      	ldr	r3, [pc, #520]	; (8002020 <main+0x354>)
 8001e16:	79db      	ldrb	r3, [r3, #7]
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <main+0x182>
 8001e22:	4b7f      	ldr	r3, [pc, #508]	; (8002020 <main+0x354>)
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <main+0x182>
 8001e30:	486d      	ldr	r0, [pc, #436]	; (8001fe8 <main+0x31c>)
 8001e32:	f004 fe31 	bl	8006a98 <encoder_enter>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <main+0x182>
		menu_flags.flag_function = false;
 8001e3c:	4b78      	ldr	r3, [pc, #480]	; (8002020 <main+0x354>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	70da      	strb	r2, [r3, #3]
		menu_flags.flag_display_measurements = false;
 8001e42:	4b77      	ldr	r3, [pc, #476]	; (8002020 <main+0x354>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	729a      	strb	r2, [r3, #10]
		menu_flags.flag_show_menu = true;
 8001e48:	4b75      	ldr	r3, [pc, #468]	; (8002020 <main+0x354>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	709a      	strb	r2, [r3, #2]
	}

	if(!menu_flags.flag_function && !menu_flags.flag_CHANGE_value) {
 8001e4e:	4b74      	ldr	r3, [pc, #464]	; (8002020 <main+0x354>)
 8001e50:	78db      	ldrb	r3, [r3, #3]
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <main+0x1a2>
 8001e5c:	4b70      	ldr	r3, [pc, #448]	; (8002020 <main+0x354>)
 8001e5e:	79db      	ldrb	r3, [r3, #7]
 8001e60:	f083 0301 	eor.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <main+0x1a2>
		menu_encoder_event();
 8001e6a:	f000 f983 	bl	8002174 <menu_encoder_event>
	}

	if(menu_flags.flag_clear_screen) {
 8001e6e:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <main+0x354>)
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <main+0x1b6>
		ST7735_FillScreen(BLACK);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f004 fd08 	bl	800688c <ST7735_FillScreen>
		menu_flags.flag_clear_screen = false;
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <main+0x354>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
	}

	if(menu_flags.flag_show_menu) {
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <main+0x354>)
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <main+0x1ce>
		ST7735_FillScreen(BLACK);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f004 fcfe 	bl	800688c <ST7735_FillScreen>
		Menu_Show();
 8001e90:	f004 fe66 	bl	8006b60 <Menu_Show>
		menu_flags.flag_show_menu = false;
 8001e94:	4b62      	ldr	r3, [pc, #392]	; (8002020 <main+0x354>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	709a      	strb	r2, [r3, #2]
	}

	if(menu_flags.flag_function) {
 8001e9a:	4b61      	ldr	r3, [pc, #388]	; (8002020 <main+0x354>)
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8090 	beq.w	8001fc4 <main+0x2f8>

		for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++) {
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	e082      	b.n	8001fb0 <main+0x2e4>
			if(DAQ_channel_get_flag_enable(i)) {
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fc57 	bl	8001760 <DAQ_channel_get_flag_enable>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <main+0x200>
				DAQ_CHANGE_enable(i);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fd24 	bl	8001908 <DAQ_CHANGE_enable>
				DAQ_channel_set_flag_enable(i, false);
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fabd 	bl	8001444 <DAQ_channel_set_flag_enable>
 8001eca:	e06e      	b.n	8001faa <main+0x2de>
			}

			else if(DAQ_channel_get_flag_th_limit(i)) {
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fc88 	bl	80017e4 <DAQ_channel_get_flag_th_limit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d02a      	beq.n	8001f30 <main+0x264>

				if(menu_flags.flag_change_finish) {
 8001eda:	4b51      	ldr	r3, [pc, #324]	; (8002020 <main+0x354>)
 8001edc:	791b      	ldrb	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d011      	beq.n	8001f06 <main+0x23a>
					DAQ_channel_set_th_limit(i,value);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fb44 	bl	8001574 <DAQ_channel_set_th_limit>
					menu_flags.flag_change_finish = false;
 8001eec:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <main+0x354>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	711a      	strb	r2, [r3, #4]
					menu_flags.flag_CHANGE_value = false;
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <main+0x354>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	71da      	strb	r2, [r3, #7]
					menu_flags.flag_CHANGE_cursor = false;
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <main+0x354>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	721a      	strb	r2, [r3, #8]
					menu_flags.flag_CHANGE_temperature = false;
 8001efe:	4b48      	ldr	r3, [pc, #288]	; (8002020 <main+0x354>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	715a      	strb	r2, [r3, #5]
 8001f04:	e010      	b.n	8001f28 <main+0x25c>

				}
				else {
					value = DAQ_channel_get_th_limit(i);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc81 	bl	8001810 <DAQ_channel_get_th_limit>
 8001f0e:	60b8      	str	r0, [r7, #8]
					menu_flags.flag_CHANGE_value = true;
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <main+0x354>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	71da      	strb	r2, [r3, #7]
					menu_flags.flag_CHANGE_cursor = true;
 8001f16:	4b42      	ldr	r3, [pc, #264]	; (8002020 <main+0x354>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	721a      	strb	r2, [r3, #8]
					menu_flags.flag_CHANGE_temperature = true;
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <main+0x354>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	715a      	strb	r2, [r3, #5]
					menu_flags.flag_clear_screen = true;
 8001f22:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <main+0x354>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	705a      	strb	r2, [r3, #1]
				}

				menu_flags.flag_function = false;
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <main+0x354>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	70da      	strb	r2, [r3, #3]
 8001f2e:	e03c      	b.n	8001faa <main+0x2de>

			}

			else if(DAQ_channel_get_flag_ph_limit(i)) {
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fc82 	bl	800183c <DAQ_channel_get_flag_ph_limit>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02a      	beq.n	8001f94 <main+0x2c8>
				if(menu_flags.flag_change_finish) {
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <main+0x354>)
 8001f40:	791b      	ldrb	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <main+0x29e>
					DAQ_channel_set_ph_limit(i,value);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fb84 	bl	8001658 <DAQ_channel_set_ph_limit>
					menu_flags.flag_change_finish = false;
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <main+0x354>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	711a      	strb	r2, [r3, #4]
					menu_flags.flag_CHANGE_value = false;
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <main+0x354>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	71da      	strb	r2, [r3, #7]
					menu_flags.flag_CHANGE_cursor = false;
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <main+0x354>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	721a      	strb	r2, [r3, #8]
					menu_flags.flag_CHANGE_power = false;
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <main+0x354>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	719a      	strb	r2, [r3, #6]
 8001f68:	e010      	b.n	8001f8c <main+0x2c0>

				}
				else {
					value = DAQ_channel_get_ph_limit(i);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc7b 	bl	8001868 <DAQ_channel_get_ph_limit>
 8001f72:	60b8      	str	r0, [r7, #8]
					menu_flags.flag_CHANGE_value = true;
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <main+0x354>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	71da      	strb	r2, [r3, #7]
					menu_flags.flag_CHANGE_cursor = true;
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <main+0x354>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	721a      	strb	r2, [r3, #8]
					menu_flags.flag_CHANGE_power = true;
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <main+0x354>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	719a      	strb	r2, [r3, #6]
					menu_flags.flag_clear_screen = true;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <main+0x354>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	705a      	strb	r2, [r3, #1]
				}

				menu_flags.flag_function = false;
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <main+0x354>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	70da      	strb	r2, [r3, #3]
 8001f92:	e00a      	b.n	8001faa <main+0x2de>
			}

			else if(DAQ_channel_get_flag_save(i)) {
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fc0e 	bl	80017b8 <DAQ_channel_get_flag_save>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <main+0x2de>
				DAQ_CHANGE_save(i);
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fcfd 	bl	80019a4 <DAQ_CHANGE_save>
		for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++) {
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	3301      	adds	r3, #1
 8001fae:	71fb      	strb	r3, [r7, #7]
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f67f af79 	bls.w	8001eaa <main+0x1de>
			}
		}

		if(menu_flags.flag_display_measurements) {
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <main+0x354>)
 8001fba:	7a9b      	ldrb	r3, [r3, #10]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <main+0x2f8>
			display_values();
 8001fc0:	f000 f8f6 	bl	80021b0 <display_values>
		}
	}

	if(menu_flags.flag_CHANGE_value){
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <main+0x354>)
 8001fc6:	79db      	ldrb	r3, [r3, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <main+0x308>
		value = MENU_CHANGE_value(value);
 8001fcc:	68b8      	ldr	r0, [r7, #8]
 8001fce:	f005 f93f 	bl	8007250 <MENU_CHANGE_value>
 8001fd2:	60b8      	str	r0, [r7, #8]

	}


	if(FIR_flag) {
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <main+0x358>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f43f af17 	beq.w	8001e0c <main+0x140>
		for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	e04d      	b.n	8002080 <main+0x3b4>
 8001fe4:	200007e4 	.word	0x200007e4
 8001fe8:	200006bc 	.word	0x200006bc
 8001fec:	2000036c 	.word	0x2000036c
 8001ff0:	20000390 	.word	0x20000390
 8001ff4:	20000444 	.word	0x20000444
 8001ff8:	20000518 	.word	0x20000518
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	20000450 	.word	0x20000450
 8002004:	20000524 	.word	0x20000524
 8002008:	2000045c 	.word	0x2000045c
 800200c:	20000530 	.word	0x20000530
 8002010:	20000468 	.word	0x20000468
 8002014:	2000053c 	.word	0x2000053c
 8002018:	200005fc 	.word	0x200005fc
 800201c:	200006cc 	.word	0x200006cc
 8002020:	20000478 	.word	0x20000478
 8002024:	20000354 	.word	0x20000354
			FIRFilter_Update(&moving_average_thermistors[channel_no], ADC1read[channel_no]);
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <main+0x3c4>)
 8002034:	441a      	add	r2, r3
 8002036:	4917      	ldr	r1, [pc, #92]	; (8002094 <main+0x3c8>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002046:	eeb0 0a67 	vmov.f32	s0, s15
 800204a:	4610      	mov	r0, r2
 800204c:	f7fe fff0 	bl	8001030 <FIRFilter_Update>
			FIRFilter_Update(&moving_average_photodiodes[channel_no], ADC1read[channel_no+4]);
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <main+0x3cc>)
 800205c:	441a      	add	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3304      	adds	r3, #4
 8002062:	490c      	ldr	r1, [pc, #48]	; (8002094 <main+0x3c8>)
 8002064:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002070:	eeb0 0a67 	vmov.f32	s0, s15
 8002074:	4610      	mov	r0, r2
 8002076:	f7fe ffdb 	bl	8001030 <FIRFilter_Update>
		for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b03      	cmp	r3, #3
 8002084:	ddd0      	ble.n	8002028 <main+0x35c>
		}

		FIR_flag = false;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <main+0x3d0>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
	if(menu_flags.flag_function && !menu_flags.flag_CHANGE_value && !menu_flags.flag_change_finish && encoder_enter(&encoder_1))  {
 800208c:	e6be      	b.n	8001e0c <main+0x140>
 800208e:	bf00      	nop
 8002090:	200005fc 	.word	0x200005fc
 8002094:	2000036c 	.word	0x2000036c
 8002098:	200006cc 	.word	0x200006cc
 800209c:	20000354 	.word	0x20000354

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b094      	sub	sp, #80	; 0x50
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0320 	add.w	r3, r7, #32
 80020aa:	2230      	movs	r2, #48	; 0x30
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f005 fe4e 	bl	8007d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <SystemClock_Config+0xcc>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <SystemClock_Config+0xcc>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <SystemClock_Config+0xcc>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <SystemClock_Config+0xd0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a21      	ldr	r2, [pc, #132]	; (8002170 <SystemClock_Config+0xd0>)
 80020ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <SystemClock_Config+0xd0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020fc:	2302      	movs	r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002100:	2301      	movs	r3, #1
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002104:	2310      	movs	r3, #16
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002108:	2302      	movs	r3, #2
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002110:	2308      	movs	r3, #8
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002114:	23a8      	movs	r3, #168	; 0xa8
 8002116:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002118:	2302      	movs	r3, #2
 800211a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800211c:	2304      	movs	r3, #4
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002120:	f107 0320 	add.w	r3, r7, #32
 8002124:	4618      	mov	r0, r3
 8002126:	f002 fba1 	bl	800486c <HAL_RCC_OscConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002130:	f000 f9b2 	bl	8002498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002134:	230f      	movs	r3, #15
 8002136:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002138:	2302      	movs	r3, #2
 800213a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002140:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002144:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	2105      	movs	r1, #5
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fe02 	bl	8004d5c <HAL_RCC_ClockConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800215e:	f000 f99b 	bl	8002498 <Error_Handler>
  }
}
 8002162:	bf00      	nop
 8002164:	3750      	adds	r7, #80	; 0x50
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000

08002174 <menu_encoder_event>:

/* USER CODE BEGIN 4 */
void menu_encoder_event(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

	  if( encoder_step_clockwise(&encoder_1) == true) {
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <menu_encoder_event+0x38>)
 800217a:	f004 fc63 	bl	8006a44 <encoder_step_clockwise>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <menu_encoder_event+0x14>
		Menu_SelectNext();
 8002184:	f004 fdc6 	bl	8006d14 <Menu_SelectNext>
	  }
	  if(encoder_step_counterclockwise(&encoder_1) == true) {
 8002188:	4808      	ldr	r0, [pc, #32]	; (80021ac <menu_encoder_event+0x38>)
 800218a:	f004 fc70 	bl	8006a6e <encoder_step_counterclockwise>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <menu_encoder_event+0x24>
		Menu_SelectPrev();
 8002194:	f004 fe2c 	bl	8006df0 <Menu_SelectPrev>
	  }
	  if(encoder_enter(&encoder_1) == true) {
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <menu_encoder_event+0x38>)
 800219a:	f004 fc7d 	bl	8006a98 <encoder_enter>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <menu_encoder_event+0x34>
	  		Menu_Click();
 80021a4:	f004 fe8a 	bl	8006ebc <Menu_Click>
	  }
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200006bc 	.word	0x200006bc

080021b0 <display_values>:

void display_values(void) {
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	b0a1      	sub	sp, #132	; 0x84
 80021b4:	af04      	add	r7, sp, #16

	for(int i = 0; i<4; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021ba:	e020      	b.n	80021fe <display_values+0x4e>
		photodiode[i].power_value = photodiode_ADC_to_power(moving_average_photodiodes[i].out, ADC1read[8]);
 80021bc:	4975      	ldr	r1, [pc, #468]	; (8002394 <display_values+0x1e4>)
 80021be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	440b      	add	r3, r1
 80021ca:	332c      	adds	r3, #44	; 0x2c
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d4:	4b70      	ldr	r3, [pc, #448]	; (8002398 <display_values+0x1e8>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4619      	mov	r1, r3
 80021da:	ee17 0a90 	vmov	r0, s15
 80021de:	f000 fb2b 	bl	8002838 <photodiode_ADC_to_power>
 80021e2:	eef0 7a40 	vmov.f32	s15, s0
 80021e6:	496d      	ldr	r1, [pc, #436]	; (800239c <display_values+0x1ec>)
 80021e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<4; i++) {
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	3301      	adds	r3, #1
 80021fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	2b03      	cmp	r3, #3
 8002202:	dddb      	ble.n	80021bc <display_values+0xc>
	}
	for(int i = 0; i<4; i++) {
 8002204:	2300      	movs	r3, #0
 8002206:	66bb      	str	r3, [r7, #104]	; 0x68
 8002208:	e020      	b.n	800224c <display_values+0x9c>
		thermistor[i].temperature_value = ntc3950_ADC_to_Celcius(moving_average_thermistors[i].out, ADC1read[8]);
 800220a:	4965      	ldr	r1, [pc, #404]	; (80023a0 <display_values+0x1f0>)
 800220c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	332c      	adds	r3, #44	; 0x2c
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <display_values+0x1e8>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4619      	mov	r1, r3
 8002228:	ee17 0a90 	vmov	r0, s15
 800222c:	f000 fa08 	bl	8002640 <ntc3950_ADC_to_Celcius>
 8002230:	eef0 7a40 	vmov.f32	s15, s0
 8002234:	495b      	ldr	r1, [pc, #364]	; (80023a4 <display_values+0x1f4>)
 8002236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<4; i++) {
 8002246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002248:	3301      	adds	r3, #1
 800224a:	66bb      	str	r3, [r7, #104]	; 0x68
 800224c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224e:	2b03      	cmp	r3, #3
 8002250:	dddb      	ble.n	800220a <display_values+0x5a>
	}

	char text[8][12];
	for (int i = 0; i<4; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	667b      	str	r3, [r7, #100]	; 0x64
 8002256:	e094      	b.n	8002382 <display_values+0x1d2>
		sprintf(text[i], "T%d:%.2fC < %.2fC", i, thermistor[i].temperature_value, thermistor[i].temperature_max_value);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	18ce      	adds	r6, r1, r3
 8002266:	494f      	ldr	r1, [pc, #316]	; (80023a4 <display_values+0x1f4>)
 8002268:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	4604      	mov	r4, r0
 800227e:	460d      	mov	r5, r1
 8002280:	4948      	ldr	r1, [pc, #288]	; (80023a4 <display_values+0x1f4>)
 8002282:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022a0:	e9cd 4500 	strd	r4, r5, [sp]
 80022a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <display_values+0x1f8>)
 80022a8:	4630      	mov	r0, r6
 80022aa:	f006 fbd9 	bl	8008a60 <siprintf>
		ST7735_WriteString(2, 2+(30*i), text[i], Font_7x10, WHITE, BLACK);
 80022ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3302      	adds	r3, #2
 80022be:	b298      	uxth	r0, r3
 80022c0:	1d39      	adds	r1, r7, #4
 80022c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4419      	add	r1, r3
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <display_values+0x1fc>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	460a      	mov	r2, r1
 80022e2:	4601      	mov	r1, r0
 80022e4:	2002      	movs	r0, #2
 80022e6:	f004 f9f5 	bl	80066d4 <ST7735_WriteString>

		sprintf(text[i], "P%d:%.2fmW < %.2fmW", i, photodiode[i].power_value, photodiode[i].power_max_value);
 80022ea:	1d39      	adds	r1, r7, #4
 80022ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	18ce      	adds	r6, r1, r3
 80022f8:	4928      	ldr	r1, [pc, #160]	; (800239c <display_values+0x1ec>)
 80022fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f91d 	bl	8000548 <__aeabi_f2d>
 800230e:	4604      	mov	r4, r0
 8002310:	460d      	mov	r5, r1
 8002312:	4922      	ldr	r1, [pc, #136]	; (800239c <display_values+0x1ec>)
 8002314:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002332:	e9cd 4500 	strd	r4, r5, [sp]
 8002336:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002338:	491d      	ldr	r1, [pc, #116]	; (80023b0 <display_values+0x200>)
 800233a:	4630      	mov	r0, r6
 800233c:	f006 fb90 	bl	8008a60 <siprintf>
		ST7735_WriteString(2, 17+(30*i), text[i], Font_7x10, WHITE, BLACK);
 8002340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	b29b      	uxth	r3, r3
 800234e:	3311      	adds	r3, #17
 8002350:	b298      	uxth	r0, r3
 8002352:	1d39      	adds	r1, r7, #4
 8002354:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4419      	add	r1, r3
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <display_values+0x1fc>)
 8002362:	2200      	movs	r2, #0
 8002364:	9202      	str	r2, [sp, #8]
 8002366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236a:	9201      	str	r2, [sp, #4]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	9200      	str	r2, [sp, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	460a      	mov	r2, r1
 8002374:	4601      	mov	r1, r0
 8002376:	2002      	movs	r0, #2
 8002378:	f004 f9ac 	bl	80066d4 <ST7735_WriteString>
	for (int i = 0; i<4; i++) {
 800237c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237e:	3301      	adds	r3, #1
 8002380:	667b      	str	r3, [r7, #100]	; 0x64
 8002382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002384:	2b03      	cmp	r3, #3
 8002386:	f77f af67 	ble.w	8002258 <display_values+0xa8>
	}

}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3774      	adds	r7, #116	; 0x74
 8002390:	46bd      	mov	sp, r7
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002394:	200006cc 	.word	0x200006cc
 8002398:	2000036c 	.word	0x2000036c
 800239c:	20000444 	.word	0x20000444
 80023a0:	200005fc 	.word	0x200005fc
 80023a4:	20000518 	.word	0x20000518
 80023a8:	0800cbe4 	.word	0x0800cbe4
 80023ac:	20000034 	.word	0x20000034
 80023b0:	0800cbf8 	.word	0x0800cbf8

080023b4 <Average_IsLimit>:

_Bool Average_IsLimit(DAQ_channel_no no) {
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
	if (moving_average_photodiodes[no].out >= DAQ_channel[no].ph->ADC_max_value || moving_average_thermistors[no].out <= DAQ_channel[no].th->ADC_max_value) {
 80023be:	79fa      	ldrb	r2, [r7, #7]
 80023c0:	4920      	ldr	r1, [pc, #128]	; (8002444 <Average_IsLimit+0x90>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	440b      	add	r3, r1
 80023cc:	332c      	adds	r3, #44	; 0x2c
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	491c      	ldr	r1, [pc, #112]	; (8002448 <Average_IsLimit+0x94>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	3310      	adds	r3, #16
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	da1c      	bge.n	8002432 <Average_IsLimit+0x7e>
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	4914      	ldr	r1, [pc, #80]	; (800244c <Average_IsLimit+0x98>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	440b      	add	r3, r1
 8002406:	332c      	adds	r3, #44	; 0x2c
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	490e      	ldr	r1, [pc, #56]	; (8002448 <Average_IsLimit+0x94>)
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	330c      	adds	r3, #12
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d801      	bhi.n	8002436 <Average_IsLimit+0x82>
		return true;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <Average_IsLimit+0x84>
	}
	else
	return false;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	200006cc 	.word	0x200006cc
 8002448:	20000488 	.word	0x20000488
 800244c:	200005fc 	.word	0x200005fc

08002450 <HAL_ADC_ConvCpltCallback>:
{
//	 HAL_UART_Receive_DMA(&huart1, Received, 13); // Ponowne włączenie nasłuchiwania
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

	FIR_flag = true;
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_ADC_ConvCpltCallback+0x44>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]

	for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e00f      	b.n	8002484 <HAL_ADC_ConvCpltCallback+0x34>

		if(Average_IsLimit(channel_no))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ffa3 	bl	80023b4 <Average_IsLimit>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_ADC_ConvCpltCallback+0x2e>
			 {
				DAQ_channel_off(channel_no);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fa0b 	bl	8001894 <DAQ_channel_off>
	for(int channel_no = 0; channel_no<NUMBER_OF_CHANNELS; channel_no++) {
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3301      	adds	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	ddec      	ble.n	8002464 <HAL_ADC_ConvCpltCallback+0x14>
			 }
	}

}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000354 	.word	0x20000354

08002498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <ntc3950_Celcius_to_ADC>:
void thermistor_init(struct thermistor *th, float temperature_max_value) {
	th->temperature_max_value = temperature_max_value;
	th->ADC_max_value = ntc3950_Celcius_to_ADC(temperature_max_value, ADC1read[8]);
}

uint32_t ntc3950_Celcius_to_ADC(float temperature_value, uint32_t ADC_VREFINT_value) {
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80024b2:	6038      	str	r0, [r7, #0]

//	float vrefint = 0; 	//Reference internal voltage
//	float vrefext = 0; 	//External voltage calculated based on vrefint

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float vmeas = 0; 	//Measured voltage in volts [V]
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
	double Rntc = 0; 	//Resistance of the thermistor
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint32_t ADC_value = 0; // Calculated ADC value
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]


//	vrefint = VCAL * (*TEMP30_CAL_ADDR) / ADC_BUF_LEN;
//	vrefext = vrefint * ADC_BUF_LEN / ADC_VREFINT_value;

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <ntc3950_Celcius_to_ADC+0x188>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f825 	bl	8000524 <__aeabi_i2d>
 80024da:	a34b      	add	r3, pc, #300	; (adr r3, 8002608 <ntc3950_Celcius_to_ADC+0x160>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f88a 	bl	80005f8 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4614      	mov	r4, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	6838      	ldr	r0, [r7, #0]
 80024ee:	f7fe f809 	bl	8000504 <__aeabi_ui2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fe f9a7 	bl	800084c <__aeabi_ddiv>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb6f 	bl	8000be8 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c

//	Rntc = ((float)_NTC_BETA) * ( (1/((float)_NTC_TEMP_NOMINAL) + 273.15f) - (1/temperature_value + 273.15f) );
//	Rntc = exp(Rntc);
//	Rntc = (float)_NTC_R_NOMINAL / Rntc;

	double T = temperature_value + 273.15;
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe f81a 	bl	8000548 <__aeabi_f2d>
 8002514:	a33e      	add	r3, pc, #248	; (adr r3, 8002610 <ntc3950_Celcius_to_ADC+0x168>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7fd feb7 	bl	800028c <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double To = _NTC_TEMP_NOMINAL + 273.15;
 8002526:	a33c      	add	r3, pc, #240	; (adr r3, 8002618 <ntc3950_Celcius_to_ADC+0x170>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	e9c7 2302 	strd	r2, r3, [r7, #8]


	Rntc = ( 1/T - 1 / To);
 8002530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002534:	f04f 0000 	mov.w	r0, #0
 8002538:	493e      	ldr	r1, [pc, #248]	; (8002634 <ntc3950_Celcius_to_ADC+0x18c>)
 800253a:	f7fe f987 	bl	800084c <__aeabi_ddiv>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4614      	mov	r4, r2
 8002544:	461d      	mov	r5, r3
 8002546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800254a:	f04f 0000 	mov.w	r0, #0
 800254e:	4939      	ldr	r1, [pc, #228]	; (8002634 <ntc3950_Celcius_to_ADC+0x18c>)
 8002550:	f7fe f97c 	bl	800084c <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4620      	mov	r0, r4
 800255a:	4629      	mov	r1, r5
 800255c:	f7fd fe94 	bl	8000288 <__aeabi_dsub>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Rntc = ((float)_NTC_BETA) * Rntc;
 8002568:	a32d      	add	r3, pc, #180	; (adr r3, 8002620 <ntc3950_Celcius_to_ADC+0x178>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002572:	f7fe f841 	bl	80005f8 <__aeabi_dmul>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Rntc = exp(Rntc);
 800257e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002582:	f00a f811 	bl	800c5a8 <exp>
 8002586:	ed87 0b08 	vstr	d0, [r7, #32]
	Rntc = (float)_NTC_R_NOMINAL * Rntc;
 800258a:	a327      	add	r3, pc, #156	; (adr r3, 8002628 <ntc3950_Celcius_to_ADC+0x180>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002594:	f7fe f830 	bl	80005f8 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	vmeas = (Rntc * V_DDA) / (Rntc + (float)_NTC_R_NOMINAL);
 80025a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025a2:	f7fd ffd1 	bl	8000548 <__aeabi_f2d>
 80025a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025aa:	f7fe f825 	bl	80005f8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4614      	mov	r4, r2
 80025b4:	461d      	mov	r5, r3
 80025b6:	a31c      	add	r3, pc, #112	; (adr r3, 8002628 <ntc3950_Celcius_to_ADC+0x180>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025c0:	f7fd fe64 	bl	800028c <__adddf3>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fe f93e 	bl	800084c <__aeabi_ddiv>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fb06 	bl	8000be8 <__aeabi_d2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28

	ADC_value = (vmeas * ADC_BUF_LEN) / V_DDA;
 80025e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002638 <ntc3950_Celcius_to_ADC+0x190>
 80025e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80025ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80025f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f8:	ee17 3a90 	vmov	r3, s15
 80025fc:	61fb      	str	r3, [r7, #28]

	return ADC_value;
 80025fe:	69fb      	ldr	r3, [r7, #28]


}
 8002600:	4618      	mov	r0, r3
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bdb0      	pop	{r4, r5, r7, pc}
 8002608:	66666666 	.word	0x66666666
 800260c:	400a6666 	.word	0x400a6666
 8002610:	66666666 	.word	0x66666666
 8002614:	40711266 	.word	0x40711266
 8002618:	66666666 	.word	0x66666666
 800261c:	4072a266 	.word	0x4072a266
 8002620:	00000000 	.word	0x00000000
 8002624:	40aedc00 	.word	0x40aedc00
 8002628:	00000000 	.word	0x00000000
 800262c:	40c38800 	.word	0x40c38800
 8002630:	1fff7a2a 	.word	0x1fff7a2a
 8002634:	3ff00000 	.word	0x3ff00000
 8002638:	457ff000 	.word	0x457ff000
 800263c:	00000000 	.word	0x00000000

08002640 <ntc3950_ADC_to_Celcius>:

float ntc3950_ADC_to_Celcius(uint32_t ADC_value, uint32_t ADC_VREFINT_value)
{
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
//	float vrefint = 0; 	//Reference internal voltage
//	float vrefext = 0; 	//External voltage calculated based on vrefint

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
	float vmeas = 0; 	//Measured voltage in volts [V]
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
	float Rntc = 0; 	//Resistance of the thermistor
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
	float temp_C = 0; 	//Calculated temperature in Celcius
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]

//	vrefint = VCAL * (*TEMP30_CAL_ADDR) / ADC_BUF_LEN;
//	vrefext = vrefint * ADC_BUF_LEN / ADC_VREFINT_value;

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <ntc3950_ADC_to_Celcius+0x118>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff5c 	bl	8000524 <__aeabi_i2d>
 800266c:	a338      	add	r3, pc, #224	; (adr r3, 8002750 <ntc3950_ADC_to_Celcius+0x110>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd ffc1 	bl	80005f8 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	461d      	mov	r5, r3
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f7fd ff40 	bl	8000504 <__aeabi_ui2d>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4620      	mov	r0, r4
 800268a:	4629      	mov	r1, r5
 800268c:	f7fe f8de 	bl	800084c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f7fe faa6 	bl	8000be8 <__aeabi_d2f>
 800269c:	4603      	mov	r3, r0
 800269e:	617b      	str	r3, [r7, #20]
	vmeas = (V_DDA / ADC_BUF_LEN) * ADC_value;
 80026a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026a4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800275c <ntc3950_ADC_to_Celcius+0x11c>
 80026a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculating Resistance of the NTC Vmeasured*10kOhms
	Rntc= (vmeas * (float)_NTC_R_NOMINAL) / (V_DDA - vmeas);
 80026be:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002760 <ntc3950_ADC_to_Celcius+0x120>
 80026c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80026ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80026ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026da:	edc7 7a03 	vstr	s15, [r7, #12]
	//	- R1 = resistance at 25C
	//	- R2 = measured resistance
	//	- T1 = nominal temperature 25C

	// Calculating Temperature
	temp_C = Rntc/(float)_NTC_R_NOMINAL;
 80026de:	ed97 7a03 	vldr	s14, [r7, #12]
 80026e2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002760 <ntc3950_ADC_to_Celcius+0x120>
 80026e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ea:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C = logf(temp_C);
 80026ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80026f2:	f009 ffa7 	bl	800c644 <logf>
 80026f6:	ed87 0a02 	vstr	s0, [r7, #8]
	temp_C = temp_C/(float)_NTC_BETA;
 80026fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80026fe:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002764 <ntc3950_ADC_to_Celcius+0x124>
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C += 1.0f / ((float)_NTC_TEMP_NOMINAL + 273.15f);
 800270a:	edd7 7a02 	vldr	s15, [r7, #8]
 800270e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002768 <ntc3950_ADC_to_Celcius+0x128>
 8002712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002716:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C = 1.0f/temp_C;
 800271a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800271e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002726:	edc7 7a02 	vstr	s15, [r7, #8]
	temp_C -= 273.15f;
 800272a:	edd7 7a02 	vldr	s15, [r7, #8]
 800272e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800276c <ntc3950_ADC_to_Celcius+0x12c>
 8002732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002736:	edc7 7a02 	vstr	s15, [r7, #8]

	return temp_C;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	ee07 3a90 	vmov	s15, r3
}
 8002740:	eeb0 0a67 	vmov.f32	s0, s15
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bdb0      	pop	{r4, r5, r7, pc}
 800274a:	bf00      	nop
 800274c:	f3af 8000 	nop.w
 8002750:	66666666 	.word	0x66666666
 8002754:	400a6666 	.word	0x400a6666
 8002758:	1fff7a2a 	.word	0x1fff7a2a
 800275c:	457ff000 	.word	0x457ff000
 8002760:	461c4000 	.word	0x461c4000
 8002764:	4576e000 	.word	0x4576e000
 8002768:	3b5bcf0f 	.word	0x3b5bcf0f
 800276c:	43889333 	.word	0x43889333

08002770 <photodiode_power_to_ADC>:
void photodiode_init(struct photodiode *ph, float power_max_value) {
	ph->power_max_value = power_max_value;
	ph->ADC_max_value = photodiode_power_to_ADC(power_max_value, ADC1read[8]);
}

uint32_t photodiode_power_to_ADC(float power_value, uint32_t ADC_VREFINT_value) {
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	ed87 0a01 	vstr	s0, [r7, #4]
 800277a:	6038      	str	r0, [r7, #0]

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
	float vmeas = 0; 	//Measured voltage in volts [V]
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
	uint32_t ADC_value = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <photodiode_power_to_ADC+0xb8>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fec7 	bl	8000524 <__aeabi_i2d>
 8002796:	a322      	add	r3, pc, #136	; (adr r3, 8002820 <photodiode_power_to_ADC+0xb0>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd ff2c 	bl	80005f8 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4614      	mov	r4, r2
 80027a6:	461d      	mov	r5, r3
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	f7fd feab 	bl	8000504 <__aeabi_ui2d>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4620      	mov	r0, r4
 80027b4:	4629      	mov	r1, r5
 80027b6:	f7fe f849 	bl	800084c <__aeabi_ddiv>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7fe fa11 	bl	8000be8 <__aeabi_d2f>
 80027c6:	4603      	mov	r3, r0
 80027c8:	61fb      	str	r3, [r7, #28]

	//Coefficients based on linear regression
	const float a = 7.84;
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <photodiode_power_to_ADC+0xbc>)
 80027cc:	613b      	str	r3, [r7, #16]
	const float b = 51.88;
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <photodiode_power_to_ADC+0xc0>)
 80027d0:	60fb      	str	r3, [r7, #12]

	vmeas = (uint32_t) (a * power_value - b);
 80027d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027de:	edd7 7a03 	vldr	s15, [r7, #12]
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	edc7 7a06 	vstr	s15, [r7, #24]
	ADC_value = (vmeas * ADC_BUF_LEN) / V_DDA;
 80027f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027f6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002834 <photodiode_power_to_ADC+0xc4>
 80027fa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280a:	ee17 3a90 	vmov	r3, s15
 800280e:	617b      	str	r3, [r7, #20]
	return ADC_value;
 8002810:	697b      	ldr	r3, [r7, #20]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bdb0      	pop	{r4, r5, r7, pc}
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w
 8002820:	66666666 	.word	0x66666666
 8002824:	400a6666 	.word	0x400a6666
 8002828:	1fff7a2a 	.word	0x1fff7a2a
 800282c:	40fae148 	.word	0x40fae148
 8002830:	424f851f 	.word	0x424f851f
 8002834:	457ff000 	.word	0x457ff000

08002838 <photodiode_ADC_to_power>:

float photodiode_ADC_to_power(uint32_t ADC_value, uint32_t ADC_VREFINT_value){
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]

	float V_DDA = 0; 	//Actual analog voltage calculated based on internal reference voltage
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
	float vmeas = 0; 	//Measured voltage in volts [V]
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
	float power_value = 0;
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

	V_DDA = VCAL * (*TEMP30_CAL_ADDR) / ADC_VREFINT_value;
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <photodiode_ADC_to_power+0xb0>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe63 	bl	8000524 <__aeabi_i2d>
 800285e:	a320      	add	r3, pc, #128	; (adr r3, 80028e0 <photodiode_ADC_to_power+0xa8>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fec8 	bl	80005f8 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	f7fd fe47 	bl	8000504 <__aeabi_ui2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f7fd ffe5 	bl	800084c <__aeabi_ddiv>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f9ad 	bl	8000be8 <__aeabi_d2f>
 800288e:	4603      	mov	r3, r0
 8002890:	61fb      	str	r3, [r7, #28]
	vmeas = (V_DDA / ADC_BUF_LEN) * ADC_value;
 8002892:	edd7 7a07 	vldr	s15, [r7, #28]
 8002896:	eddf 6a15 	vldr	s13, [pc, #84]	; 80028ec <photodiode_ADC_to_power+0xb4>
 800289a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ac:	edc7 7a06 	vstr	s15, [r7, #24]

	//Coefficients based on linear regression
	const float a = 7.84;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <photodiode_ADC_to_power+0xb8>)
 80028b2:	613b      	str	r3, [r7, #16]
	const float b = 51.88;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <photodiode_ADC_to_power+0xbc>)
 80028b6:	60fb      	str	r3, [r7, #12]

	power_value = (vmeas + b) / a;
 80028b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80028bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80028c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028cc:	edc7 7a05 	vstr	s15, [r7, #20]

	return power_value;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	ee07 3a90 	vmov	s15, r3

}
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bdb0      	pop	{r4, r5, r7, pc}
 80028e0:	66666666 	.word	0x66666666
 80028e4:	400a6666 	.word	0x400a6666
 80028e8:	1fff7a2a 	.word	0x1fff7a2a
 80028ec:	457ff000 	.word	0x457ff000
 80028f0:	40fae148 	.word	0x40fae148
 80028f4:	424f851f 	.word	0x424f851f

080028f8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_SPI3_Init+0x68>)
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <MX_SPI3_Init+0x6c>)
 8002900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <MX_SPI3_Init+0x68>)
 8002904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_SPI3_Init+0x68>)
 800290c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002910:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_SPI3_Init+0x68>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_SPI3_Init+0x68>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <MX_SPI3_Init+0x68>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_SPI3_Init+0x68>)
 8002926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_SPI3_Init+0x68>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_SPI3_Init+0x68>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_SPI3_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <MX_SPI3_Init+0x68>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_SPI3_Init+0x68>)
 8002946:	220a      	movs	r2, #10
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_SPI3_Init+0x68>)
 800294c:	f002 fc02 	bl	8005154 <HAL_SPI_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002956:	f7ff fd9f 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000078c 	.word	0x2000078c
 8002964:	40003c00 	.word	0x40003c00

08002968 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_SPI_MspInit+0x84>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d12c      	bne.n	80029e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_SPI_MspInit+0x88>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_SPI_MspInit+0x88>)
 8002994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_SPI_MspInit+0x88>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_SPI_MspInit+0x88>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <HAL_SPI_MspInit+0x88>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_SPI_MspInit+0x88>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80029c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029d4:	2306      	movs	r3, #6
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_SPI_MspInit+0x8c>)
 80029e0:	f001 fc32 	bl	8004248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80029e4:	bf00      	nop
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40003c00 	.word	0x40003c00
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020800 	.word	0x40020800

080029f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_MspInit+0x4c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_MspInit+0x4c>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_MspInit+0x4c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_MspInit+0x4c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_MspInit+0x4c>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_MspInit+0x4c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <HardFault_Handler+0x4>

08002a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <MemManage_Handler+0x4>

08002a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <BusFault_Handler+0x4>

08002a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <UsageFault_Handler+0x4>

08002a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a9c:	f000 fb06 	bl	80030ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002aaa:	f002 ff17 	bl	80058dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200007e4 	.word	0x200007e4

08002ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002abc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ac0:	f001 fd78 	bl	80045b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <DMA2_Stream0_IRQHandler+0x10>)
 8002ace:	f001 f951 	bl	8003d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200003d8 	.word	0x200003d8

08002adc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <DMA2_Stream5_IRQHandler+0x10>)
 8002ae2:	f001 f947 	bl	8003d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000088c 	.word	0x2000088c

08002af0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA2_Stream7_IRQHandler+0x10>)
 8002af6:	f001 f93d 	bl	8003d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000082c 	.word	0x2000082c

08002b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
	return 1;
 8002b08:	2301      	movs	r3, #1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_kill>:

int _kill(int pid, int sig)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b1e:	f005 f8ed 	bl	8007cfc <__errno>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2216      	movs	r2, #22
 8002b26:	601a      	str	r2, [r3, #0]
	return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_exit>:

void _exit (int status)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffe7 	bl	8002b14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b46:	e7fe      	b.n	8002b46 <_exit+0x12>

08002b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e00a      	b.n	8002b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b5a:	f3af 8000 	nop.w
 8002b5e:	4601      	mov	r1, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	60ba      	str	r2, [r7, #8]
 8002b66:	b2ca      	uxtb	r2, r1
 8002b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	dbf0      	blt.n	8002b5a <_read+0x12>
	}

return len;
 8002b78:	687b      	ldr	r3, [r7, #4]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e009      	b.n	8002ba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	60ba      	str	r2, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbf1      	blt.n	8002b94 <_write+0x12>
	}
	return len;
 8002bb0:	687b      	ldr	r3, [r7, #4]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_close>:

int _close(int file)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002be2:	605a      	str	r2, [r3, #4]
	return 0;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_isatty>:

int _isatty(int file)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
	return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <_sbrk+0x5c>)
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <_sbrk+0x60>)
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <_sbrk+0x64>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <_sbrk+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <_sbrk+0x64>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c54:	f005 f852 	bl	8007cfc <__errno>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	e009      	b.n	8002c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <_sbrk+0x64>)
 8002c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20020000 	.word	0x20020000
 8002c84:	00000400 	.word	0x00000400
 8002c88:	20000358 	.word	0x20000358
 8002c8c:	20000948 	.word	0x20000948

08002c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <SystemInit+0x28>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <SystemInit+0x28>)
 8002c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <SystemInit+0x28>)
 8002ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002caa:	609a      	str	r2, [r3, #8]
#endif
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f005 f840 	bl	8007d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cd8:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <MX_TIM1_Init+0xa8>)
 8002cdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002cec:	2213      	movs	r2, #19
 8002cee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002d2e:	f002 fca1 	bl	8005674 <HAL_TIM_Encoder_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002d38:	f7ff fbae 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_TIM1_Init+0xa4>)
 8002d4a:	f002 ffc7 	bl	8005cdc <HAL_TIMEx_MasterConfigSynchronization>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002d54:	f7ff fba0 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	3730      	adds	r7, #48	; 0x30
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200007e4 	.word	0x200007e4
 8002d64:	40010000 	.word	0x40010000

08002d68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <HAL_TIM_Encoder_MspInit+0x94>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d134      	bne.n	8002df4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002dc2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4809      	ldr	r0, [pc, #36]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002de0:	f001 fa32 	bl	8004248 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2019      	movs	r0, #25
 8002dea:	f000 fe86 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002dee:	2019      	movs	r0, #25
 8002df0:	f000 fe9f 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002df4:	bf00      	nop
 8002df6:	3728      	adds	r7, #40	; 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40021000 	.word	0x40021000

08002e08 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <MX_USART1_UART_Init+0x50>)
 8002e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_USART1_UART_Init+0x4c>)
 8002e40:	f002 ffdc 	bl	8005dfc <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e4a:	f7ff fb25 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200008ec 	.word	0x200008ec
 8002e58:	40011000 	.word	0x40011000

08002e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a47      	ldr	r2, [pc, #284]	; (8002f98 <HAL_UART_MspInit+0x13c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	f040 8088 	bne.w	8002f90 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <HAL_UART_MspInit+0x140>)
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	4a44      	ldr	r2, [pc, #272]	; (8002f9c <HAL_UART_MspInit+0x140>)
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_UART_MspInit+0x140>)
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_UART_MspInit+0x140>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <HAL_UART_MspInit+0x140>)
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_UART_MspInit+0x140>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb8:	23c0      	movs	r3, #192	; 0xc0
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ec8:	2307      	movs	r3, #7
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4833      	ldr	r0, [pc, #204]	; (8002fa0 <HAL_UART_MspInit+0x144>)
 8002ed4:	f001 f9b8 	bl	8004248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002eda:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <HAL_UART_MspInit+0x14c>)
 8002edc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ee4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f18:	4822      	ldr	r0, [pc, #136]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f1a:	f000 fe25 	bl	8003b68 <HAL_DMA_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002f24:	f7ff fab8 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_UART_MspInit+0x148>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_UART_MspInit+0x154>)
 8002f38:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f40:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f44:	2240      	movs	r2, #64	; 0x40
 8002f46:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f54:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f76:	f000 fdf7 	bl	8003b68 <HAL_DMA_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002f80:	f7ff fa8a 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_UART_MspInit+0x150>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f90:	bf00      	nop
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	2000088c 	.word	0x2000088c
 8002fa8:	40026488 	.word	0x40026488
 8002fac:	2000082c 	.word	0x2000082c
 8002fb0:	400264b8 	.word	0x400264b8

08002fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fba:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fbc:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd0:	4c0b      	ldr	r4, [pc, #44]	; (8003000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fde:	f7ff fe57 	bl	8002c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe2:	f004 fe91 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe6:	f7fe fe71 	bl	8001ccc <main>
  bx  lr    
 8002fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff4:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8002ff8:	0800f6a0 	.word	0x0800f6a0
  ldr r2, =_sbss
 8002ffc:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8003000:	20000944 	.word	0x20000944

08003004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003004:	e7fe      	b.n	8003004 <ADC_IRQHandler>
	...

08003008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_Init+0x40>)
 8003012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_Init+0x40>)
 800301e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_Init+0x40>)
 800302a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003030:	2003      	movs	r0, #3
 8003032:	f000 fd57 	bl	8003ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003036:	2000      	movs	r0, #0
 8003038:	f000 f808 	bl	800304c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800303c:	f7ff fcdc 	bl	80029f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023c00 	.word	0x40023c00

0800304c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_InitTick+0x54>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_InitTick+0x58>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003062:	fbb3 f3f1 	udiv	r3, r3, r1
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fd6f 	bl	8003b4e <HAL_SYSTICK_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e00e      	b.n	8003098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b0f      	cmp	r3, #15
 800307e:	d80a      	bhi.n	8003096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003080:	2200      	movs	r2, #0
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	f000 fd37 	bl	8003afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800308c:	4a06      	ldr	r2, [pc, #24]	; (80030a8 <HAL_InitTick+0x5c>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000028 	.word	0x20000028
 80030a4:	20000030 	.word	0x20000030
 80030a8:	2000002c 	.word	0x2000002c

080030ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x20>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x24>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_IncTick+0x24>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000030 	.word	0x20000030
 80030d0:	20000930 	.word	0x20000930

080030d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return uwTick;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_GetTick+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000930 	.word	0x20000930

080030ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff ffee 	bl	80030d4 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d005      	beq.n	8003112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_Delay+0x44>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003112:	bf00      	nop
 8003114:	f7ff ffde 	bl	80030d4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d8f7      	bhi.n	8003114 <HAL_Delay+0x28>
  {
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000030 	.word	0x20000030

08003134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e033      	b.n	80031b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f88a 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800317a:	f023 0302 	bic.w	r3, r3, #2
 800317e:	f043 0202 	orr.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa5e 	bl	8003648 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
 80031a2:	e001      	b.n	80031a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Start_DMA+0x1e>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e0e9      	b.n	80033ae <HAL_ADC_Start_DMA+0x1f2>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d018      	beq.n	8003222 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003200:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <HAL_ADC_Start_DMA+0x1fc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <HAL_ADC_Start_DMA+0x200>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0c9a      	lsrs	r2, r3, #18
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003214:	e002      	b.n	800321c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3b01      	subs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f9      	bne.n	8003216 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d107      	bne.n	8003242 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003240:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 80a1 	bne.w	8003394 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800327c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d106      	bne.n	80032a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f023 0206 	bic.w	r2, r3, #6
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
 800329e:	e002      	b.n	80032a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ae:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <HAL_ADC_Start_DMA+0x204>)
 80032b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4a43      	ldr	r2, [pc, #268]	; (80033c4 <HAL_ADC_Start_DMA+0x208>)
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	4a42      	ldr	r2, [pc, #264]	; (80033c8 <HAL_ADC_Start_DMA+0x20c>)
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4a41      	ldr	r2, [pc, #260]	; (80033cc <HAL_ADC_Start_DMA+0x210>)
 80032c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	334c      	adds	r3, #76	; 0x4c
 80032fe:	4619      	mov	r1, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f000 fcde 	bl	8003cc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2b00      	cmp	r3, #0
 8003312:	d12a      	bne.n	800336a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <HAL_ADC_Start_DMA+0x214>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d015      	beq.n	800334a <HAL_ADC_Start_DMA+0x18e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2c      	ldr	r2, [pc, #176]	; (80033d4 <HAL_ADC_Start_DMA+0x218>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d105      	bne.n	8003334 <HAL_ADC_Start_DMA+0x178>
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_ADC_Start_DMA+0x204>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_ADC_Start_DMA+0x21c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d136      	bne.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_ADC_Start_DMA+0x204>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d130      	bne.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d129      	bne.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	e020      	b.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_ADC_Start_DMA+0x214>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d11b      	bne.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d114      	bne.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	e00b      	b.n	80033ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000028 	.word	0x20000028
 80033bc:	431bde83 	.word	0x431bde83
 80033c0:	40012300 	.word	0x40012300
 80033c4:	08003841 	.word	0x08003841
 80033c8:	080038fb 	.word	0x080038fb
 80033cc:	08003917 	.word	0x08003917
 80033d0:	40012000 	.word	0x40012000
 80033d4:	40012100 	.word	0x40012100
 80033d8:	40012200 	.word	0x40012200

080033dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1c>
 800341c:	2302      	movs	r3, #2
 800341e:	e105      	b.n	800362c <HAL_ADC_ConfigChannel+0x228>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d925      	bls.n	800347c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68d9      	ldr	r1, [r3, #12]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	3b1e      	subs	r3, #30
 8003446:	2207      	movs	r2, #7
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43da      	mvns	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	400a      	ands	r2, r1
 8003454:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68d9      	ldr	r1, [r3, #12]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	4603      	mov	r3, r0
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4403      	add	r3, r0
 800346e:	3b1e      	subs	r3, #30
 8003470:	409a      	lsls	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	e022      	b.n	80034c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6919      	ldr	r1, [r3, #16]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	2207      	movs	r2, #7
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	400a      	ands	r2, r1
 800349e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4403      	add	r3, r0
 80034b8:	409a      	lsls	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d824      	bhi.n	8003514 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3b05      	subs	r3, #5
 80034dc:	221f      	movs	r2, #31
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b05      	subs	r3, #5
 8003506:	fa00 f203 	lsl.w	r2, r0, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	635a      	str	r2, [r3, #52]	; 0x34
 8003512:	e04c      	b.n	80035ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d824      	bhi.n	8003566 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3b23      	subs	r3, #35	; 0x23
 800352e:	221f      	movs	r2, #31
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43da      	mvns	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	400a      	ands	r2, r1
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	3b23      	subs	r3, #35	; 0x23
 8003558:	fa00 f203 	lsl.w	r2, r0, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	e023      	b.n	80035ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	3b41      	subs	r3, #65	; 0x41
 8003578:	221f      	movs	r2, #31
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	400a      	ands	r2, r1
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	4618      	mov	r0, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	3b41      	subs	r3, #65	; 0x41
 80035a2:	fa00 f203 	lsl.w	r2, r0, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_ADC_ConfigChannel+0x234>)
 80035b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a21      	ldr	r2, [pc, #132]	; (800363c <HAL_ADC_ConfigChannel+0x238>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1cc>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b12      	cmp	r3, #18
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_ADC_ConfigChannel+0x238>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d123      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21e>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d003      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1e6>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d11b      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d111      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_ADC_ConfigChannel+0x23c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <HAL_ADC_ConfigChannel+0x240>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9a      	lsrs	r2, r3, #18
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003614:	e002      	b.n	800361c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3b01      	subs	r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40012300 	.word	0x40012300
 800363c:	40012000 	.word	0x40012000
 8003640:	20000028 	.word	0x20000028
 8003644:	431bde83 	.word	0x431bde83

08003648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003650:	4b79      	ldr	r3, [pc, #484]	; (8003838 <ADC_Init+0x1f0>)
 8003652:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800367c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	021a      	lsls	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	4a58      	ldr	r2, [pc, #352]	; (800383c <ADC_Init+0x1f4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e00f      	b.n	8003746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003744:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0202 	bic.w	r2, r2, #2
 8003754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7e1b      	ldrb	r3, [r3, #24]
 8003760:	005a      	lsls	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003782:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	3b01      	subs	r3, #1
 80037a0:	035a      	lsls	r2, r3, #13
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	051a      	lsls	r2, r3, #20
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037fe:	025a      	lsls	r2, r3, #9
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	029a      	lsls	r2, r3, #10
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40012300 	.word	0x40012300
 800383c:	0f000001 	.word	0x0f000001

08003840 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13c      	bne.n	80038d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12b      	bne.n	80038cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003878:	2b00      	cmp	r3, #0
 800387a:	d127      	bne.n	80038cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003894:	2b00      	cmp	r3, #0
 8003896:	d119      	bne.n	80038cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0220 	bic.w	r2, r2, #32
 80038a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7fe fdbf 	bl	8002450 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038d2:	e00e      	b.n	80038f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff fd85 	bl	80033f0 <HAL_ADC_ErrorCallback>
}
 80038e6:	e004      	b.n	80038f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fd67 	bl	80033dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fd5a 	bl	80033f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <__NVIC_SetPriorityGrouping+0x44>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003960:	4013      	ands	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800396c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <__NVIC_SetPriorityGrouping+0x44>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	60d3      	str	r3, [r2, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 0307 	and.w	r3, r3, #7
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	db0b      	blt.n	80039d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <__NVIC_EnableIRQ+0x38>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2001      	movs	r0, #1
 80039ca:	fa00 f202 	lsl.w	r2, r0, r2
 80039ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e100 	.word	0xe000e100

080039e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	db0a      	blt.n	8003a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	490c      	ldr	r1, [pc, #48]	; (8003a30 <__NVIC_SetPriority+0x4c>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	440b      	add	r3, r1
 8003a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a0c:	e00a      	b.n	8003a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4908      	ldr	r1, [pc, #32]	; (8003a34 <__NVIC_SetPriority+0x50>)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	3b04      	subs	r3, #4
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	440b      	add	r3, r1
 8003a22:	761a      	strb	r2, [r3, #24]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000e100 	.word	0xe000e100
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f1c3 0307 	rsb	r3, r3, #7
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	bf28      	it	cs
 8003a56:	2304      	movcs	r3, #4
 8003a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d902      	bls.n	8003a68 <NVIC_EncodePriority+0x30>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3b03      	subs	r3, #3
 8003a66:	e000      	b.n	8003a6a <NVIC_EncodePriority+0x32>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a80:	f04f 31ff 	mov.w	r1, #4294967295
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	43d9      	mvns	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	4313      	orrs	r3, r2
         );
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab0:	d301      	bcc.n	8003ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00f      	b.n	8003ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <SysTick_Config+0x40>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003abe:	210f      	movs	r1, #15
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f7ff ff8e 	bl	80039e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <SysTick_Config+0x40>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <SysTick_Config+0x40>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	e000e010 	.word	0xe000e010

08003ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff29 	bl	8003944 <__NVIC_SetPriorityGrouping>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0c:	f7ff ff3e 	bl	800398c <__NVIC_GetPriorityGrouping>
 8003b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff8e 	bl	8003a38 <NVIC_EncodePriority>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff5d 	bl	80039e4 <__NVIC_SetPriority>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	4603      	mov	r3, r0
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff31 	bl	80039a8 <__NVIC_EnableIRQ>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ffa2 	bl	8003aa0 <SysTick_Config>
 8003b5c:	4603      	mov	r3, r0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b74:	f7ff faae 	bl	80030d4 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e099      	b.n	8003cb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba4:	e00f      	b.n	8003bc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba6:	f7ff fa95 	bl	80030d4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d908      	bls.n	8003bc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e078      	b.n	8003cb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e8      	bne.n	8003ba6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <HAL_DMA_Init+0x158>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d117      	bne.n	8003c8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fa6f 	bl	8004150 <DMA_CheckFifoParam>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c86:	2301      	movs	r3, #1
 8003c88:	e016      	b.n	8003cb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa26 	bl	80040e4 <DMA_CalcBaseAndBitshift>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	223f      	movs	r2, #63	; 0x3f
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	f010803f 	.word	0xf010803f

08003cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_DMA_Start_IT+0x26>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e040      	b.n	8003d6c <HAL_DMA_Start_IT+0xa8>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d12f      	bne.n	8003d5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f9b8 	bl	8004088 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	223f      	movs	r2, #63	; 0x3f
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0216 	orr.w	r2, r2, #22
 8003d32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e005      	b.n	8003d6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d80:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <HAL_DMA_IRQHandler+0x258>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a92      	ldr	r2, [pc, #584]	; (8003fd0 <HAL_DMA_IRQHandler+0x25c>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2208      	movs	r2, #8
 8003da0:	409a      	lsls	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01a      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0204 	bic.w	r2, r2, #4
 8003dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	2208      	movs	r2, #8
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	2201      	movs	r2, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d012      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	2201      	movs	r2, #1
 8003e04:	409a      	lsls	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d012      	beq.n	8003e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00b      	beq.n	8003e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	2204      	movs	r2, #4
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	f043 0204 	orr.w	r2, r3, #4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	2210      	movs	r2, #16
 8003e52:	409a      	lsls	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d043      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d03c      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	2210      	movs	r2, #16
 8003e70:	409a      	lsls	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d024      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
 8003ea2:	e01f      	b.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01b      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
 8003eb4:	e016      	b.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0208 	bic.w	r2, r2, #8
 8003ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	2220      	movs	r2, #32
 8003eea:	409a      	lsls	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 808e 	beq.w	8004012 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8086 	beq.w	8004012 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d136      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0216 	bic.w	r2, r2, #22
 8003f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x1da>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0208 	bic.w	r2, r2, #8
 8003f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	223f      	movs	r2, #63	; 0x3f
 8003f64:	409a      	lsls	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d07d      	beq.n	800407e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
        }
        return;
 8003f8a:	e078      	b.n	800407e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01c      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d030      	beq.n	8004012 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
 8003fb8:	e02b      	b.n	8004012 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d027      	beq.n	8004012 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e022      	b.n	8004012 <HAL_DMA_IRQHandler+0x29e>
 8003fcc:	20000028 	.word	0x20000028
 8003fd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0210 	bic.w	r2, r2, #16
 8003ff0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	2b00      	cmp	r3, #0
 8004018:	d032      	beq.n	8004080 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d022      	beq.n	800406c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2205      	movs	r2, #5
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3301      	adds	r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	429a      	cmp	r2, r3
 8004048:	d307      	bcc.n	800405a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f2      	bne.n	800403e <HAL_DMA_IRQHandler+0x2ca>
 8004058:	e000      	b.n	800405c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800405a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
 800407c:	e000      	b.n	8004080 <HAL_DMA_IRQHandler+0x30c>
        return;
 800407e:	bf00      	nop
    }
  }
}
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop

08004088 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d108      	bne.n	80040c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040c6:	e007      	b.n	80040d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3b10      	subs	r3, #16
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <DMA_CalcBaseAndBitshift+0x64>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040fe:	4a13      	ldr	r2, [pc, #76]	; (800414c <DMA_CalcBaseAndBitshift+0x68>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d909      	bls.n	8004126 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	659a      	str	r2, [r3, #88]	; 0x58
 8004124:	e007      	b.n	8004136 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	aaaaaaab 	.word	0xaaaaaaab
 800414c:	0800cc74 	.word	0x0800cc74

08004150 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11f      	bne.n	80041aa <DMA_CheckFifoParam+0x5a>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d856      	bhi.n	800421e <DMA_CheckFifoParam+0xce>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <DMA_CheckFifoParam+0x28>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	0800419b 	.word	0x0800419b
 8004180:	08004189 	.word	0x08004189
 8004184:	0800421f 	.word	0x0800421f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d046      	beq.n	8004222 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004198:	e043      	b.n	8004222 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041a2:	d140      	bne.n	8004226 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e03d      	b.n	8004226 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d121      	bne.n	80041f8 <DMA_CheckFifoParam+0xa8>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d837      	bhi.n	800422a <DMA_CheckFifoParam+0xda>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <DMA_CheckFifoParam+0x70>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041d1 	.word	0x080041d1
 80041c4:	080041d7 	.word	0x080041d7
 80041c8:	080041d1 	.word	0x080041d1
 80041cc:	080041e9 	.word	0x080041e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e030      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d025      	beq.n	800422e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e6:	e022      	b.n	800422e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041f0:	d11f      	bne.n	8004232 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041f6:	e01c      	b.n	8004232 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d903      	bls.n	8004206 <DMA_CheckFifoParam+0xb6>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d003      	beq.n	800420c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004204:	e018      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
      break;
 800420a:	e015      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00e      	beq.n	8004236 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      break;
 800421c:	e00b      	b.n	8004236 <DMA_CheckFifoParam+0xe6>
      break;
 800421e:	bf00      	nop
 8004220:	e00a      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e008      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e006      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      break;
 800422a:	bf00      	nop
 800422c:	e004      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      break;   
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <DMA_CheckFifoParam+0xe8>
      break;
 8004236:	bf00      	nop
    }
  } 
  
  return status; 
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop

08004248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e16b      	b.n	800453c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004264:	2201      	movs	r2, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	f040 815a 	bne.w	8004536 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d005      	beq.n	800429a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004296:	2b02      	cmp	r3, #2
 8004298:	d130      	bne.n	80042fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042d0:	2201      	movs	r2, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 0201 	and.w	r2, r3, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b03      	cmp	r3, #3
 8004306:	d017      	beq.n	8004338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d123      	bne.n	800438c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	08da      	lsrs	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3208      	adds	r2, #8
 8004386:	69b9      	ldr	r1, [r7, #24]
 8004388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0203 	and.w	r2, r3, #3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80b4 	beq.w	8004536 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	4b60      	ldr	r3, [pc, #384]	; (8004554 <HAL_GPIO_Init+0x30c>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	4a5f      	ldr	r2, [pc, #380]	; (8004554 <HAL_GPIO_Init+0x30c>)
 80043d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043dc:	6453      	str	r3, [r2, #68]	; 0x44
 80043de:	4b5d      	ldr	r3, [pc, #372]	; (8004554 <HAL_GPIO_Init+0x30c>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ea:	4a5b      	ldr	r2, [pc, #364]	; (8004558 <HAL_GPIO_Init+0x310>)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	089b      	lsrs	r3, r3, #2
 80043f0:	3302      	adds	r3, #2
 80043f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	220f      	movs	r2, #15
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_GPIO_Init+0x314>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d02b      	beq.n	800446e <HAL_GPIO_Init+0x226>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a51      	ldr	r2, [pc, #324]	; (8004560 <HAL_GPIO_Init+0x318>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d025      	beq.n	800446a <HAL_GPIO_Init+0x222>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a50      	ldr	r2, [pc, #320]	; (8004564 <HAL_GPIO_Init+0x31c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01f      	beq.n	8004466 <HAL_GPIO_Init+0x21e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4f      	ldr	r2, [pc, #316]	; (8004568 <HAL_GPIO_Init+0x320>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d019      	beq.n	8004462 <HAL_GPIO_Init+0x21a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4e      	ldr	r2, [pc, #312]	; (800456c <HAL_GPIO_Init+0x324>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_GPIO_Init+0x216>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4d      	ldr	r2, [pc, #308]	; (8004570 <HAL_GPIO_Init+0x328>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00d      	beq.n	800445a <HAL_GPIO_Init+0x212>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a4c      	ldr	r2, [pc, #304]	; (8004574 <HAL_GPIO_Init+0x32c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <HAL_GPIO_Init+0x20e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4b      	ldr	r2, [pc, #300]	; (8004578 <HAL_GPIO_Init+0x330>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d101      	bne.n	8004452 <HAL_GPIO_Init+0x20a>
 800444e:	2307      	movs	r3, #7
 8004450:	e00e      	b.n	8004470 <HAL_GPIO_Init+0x228>
 8004452:	2308      	movs	r3, #8
 8004454:	e00c      	b.n	8004470 <HAL_GPIO_Init+0x228>
 8004456:	2306      	movs	r3, #6
 8004458:	e00a      	b.n	8004470 <HAL_GPIO_Init+0x228>
 800445a:	2305      	movs	r3, #5
 800445c:	e008      	b.n	8004470 <HAL_GPIO_Init+0x228>
 800445e:	2304      	movs	r3, #4
 8004460:	e006      	b.n	8004470 <HAL_GPIO_Init+0x228>
 8004462:	2303      	movs	r3, #3
 8004464:	e004      	b.n	8004470 <HAL_GPIO_Init+0x228>
 8004466:	2302      	movs	r3, #2
 8004468:	e002      	b.n	8004470 <HAL_GPIO_Init+0x228>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_GPIO_Init+0x228>
 800446e:	2300      	movs	r3, #0
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	f002 0203 	and.w	r2, r2, #3
 8004476:	0092      	lsls	r2, r2, #2
 8004478:	4093      	lsls	r3, r2
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004480:	4935      	ldr	r1, [pc, #212]	; (8004558 <HAL_GPIO_Init+0x310>)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3302      	adds	r3, #2
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800448e:	4b3b      	ldr	r3, [pc, #236]	; (800457c <HAL_GPIO_Init+0x334>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b2:	4a32      	ldr	r2, [pc, #200]	; (800457c <HAL_GPIO_Init+0x334>)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044b8:	4b30      	ldr	r3, [pc, #192]	; (800457c <HAL_GPIO_Init+0x334>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_GPIO_Init+0x334>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e2:	4b26      	ldr	r3, [pc, #152]	; (800457c <HAL_GPIO_Init+0x334>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004506:	4a1d      	ldr	r2, [pc, #116]	; (800457c <HAL_GPIO_Init+0x334>)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_GPIO_Init+0x334>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <HAL_GPIO_Init+0x334>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3301      	adds	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	f67f ae90 	bls.w	8004264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3724      	adds	r7, #36	; 0x24
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	40013800 	.word	0x40013800
 800455c:	40020000 	.word	0x40020000
 8004560:	40020400 	.word	0x40020400
 8004564:	40020800 	.word	0x40020800
 8004568:	40020c00 	.word	0x40020c00
 800456c:	40021000 	.word	0x40021000
 8004570:	40021400 	.word	0x40021400
 8004574:	40021800 	.word	0x40021800
 8004578:	40021c00 	.word	0x40021c00
 800457c:	40013c00 	.word	0x40013c00

08004580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
 800458c:	4613      	mov	r3, r2
 800458e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004590:	787b      	ldrb	r3, [r7, #1]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800459c:	e003      	b.n	80045a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459e:	887b      	ldrh	r3, [r7, #2]
 80045a0:	041a      	lsls	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	619a      	str	r2, [r3, #24]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ca:	4a05      	ldr	r2, [pc, #20]	; (80045e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f002 f976 	bl	80068c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40013c00 	.word	0x40013c00

080045e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e12b      	b.n	800484e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fb16 	bl	8001c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004648:	f000 fd5c 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 800464c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a81      	ldr	r2, [pc, #516]	; (8004858 <HAL_I2C_Init+0x274>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d807      	bhi.n	8004668 <HAL_I2C_Init+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a80      	ldr	r2, [pc, #512]	; (800485c <HAL_I2C_Init+0x278>)
 800465c:	4293      	cmp	r3, r2
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e006      	b.n	8004676 <HAL_I2C_Init+0x92>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a7d      	ldr	r2, [pc, #500]	; (8004860 <HAL_I2C_Init+0x27c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0e7      	b.n	800484e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a78      	ldr	r2, [pc, #480]	; (8004864 <HAL_I2C_Init+0x280>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a6a      	ldr	r2, [pc, #424]	; (8004858 <HAL_I2C_Init+0x274>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d802      	bhi.n	80046b8 <HAL_I2C_Init+0xd4>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	e009      	b.n	80046cc <HAL_I2C_Init+0xe8>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	4a69      	ldr	r2, [pc, #420]	; (8004868 <HAL_I2C_Init+0x284>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	3301      	adds	r3, #1
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	495c      	ldr	r1, [pc, #368]	; (8004858 <HAL_I2C_Init+0x274>)
 80046e8:	428b      	cmp	r3, r1
 80046ea:	d819      	bhi.n	8004720 <HAL_I2C_Init+0x13c>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e59      	subs	r1, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004700:	400b      	ands	r3, r1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_I2C_Init+0x138>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e59      	subs	r1, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fbb1 f3f3 	udiv	r3, r1, r3
 8004714:	3301      	adds	r3, #1
 8004716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471a:	e051      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 800471c:	2304      	movs	r3, #4
 800471e:	e04f      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d111      	bne.n	800474c <HAL_I2C_Init+0x168>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e012      	b.n	8004772 <HAL_I2C_Init+0x18e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Init+0x196>
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10e      	bne.n	80047a0 <HAL_I2C_Init+0x1bc>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1e58      	subs	r0, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	440b      	add	r3, r1
 8004790:	fbb0 f3f3 	udiv	r3, r0, r3
 8004794:	3301      	adds	r3, #1
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	e00f      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	0099      	lsls	r1, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6809      	ldr	r1, [r1, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6911      	ldr	r1, [r2, #16]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	4311      	orrs	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	430b      	orrs	r3, r1
 8004802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	000186a0 	.word	0x000186a0
 800485c:	001e847f 	.word	0x001e847f
 8004860:	003d08ff 	.word	0x003d08ff
 8004864:	431bde83 	.word	0x431bde83
 8004868:	10624dd3 	.word	0x10624dd3

0800486c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e264      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d075      	beq.n	8004976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800488a:	4ba3      	ldr	r3, [pc, #652]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004896:	4ba0      	ldr	r3, [pc, #640]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d112      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a2:	4b9d      	ldr	r3, [pc, #628]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ae:	d10b      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	4b99      	ldr	r3, [pc, #612]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d05b      	beq.n	8004974 <HAL_RCC_OscConfig+0x108>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d157      	bne.n	8004974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e23f      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x74>
 80048d2:	4b91      	ldr	r3, [pc, #580]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a90      	ldr	r2, [pc, #576]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xb0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x98>
 80048ea:	4b8b      	ldr	r3, [pc, #556]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a8a      	ldr	r2, [pc, #552]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a87      	ldr	r2, [pc, #540]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xb0>
 8004904:	4b84      	ldr	r3, [pc, #528]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b81      	ldr	r3, [pc, #516]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a80      	ldr	r2, [pc, #512]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fe fbd6 	bl	80030d4 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492c:	f7fe fbd2 	bl	80030d4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e204      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b76      	ldr	r3, [pc, #472]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xc0>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fe fbc2 	bl	80030d4 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004954:	f7fe fbbe 	bl	80030d4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e1f0      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0xe8>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d063      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004982:	4b65      	ldr	r3, [pc, #404]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b62      	ldr	r3, [pc, #392]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499a:	4b5f      	ldr	r3, [pc, #380]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	4b5c      	ldr	r3, [pc, #368]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x152>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1c4      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4952      	ldr	r1, [pc, #328]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	e03a      	b.n	8004a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <HAL_RCC_OscConfig+0x2b0>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fe fb77 	bl	80030d4 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ea:	f7fe fb73 	bl	80030d4 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e1a5      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	4b46      	ldr	r3, [pc, #280]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a08:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4940      	ldr	r1, [pc, #256]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	600b      	str	r3, [r1, #0]
 8004a1c:	e015      	b.n	8004a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <HAL_RCC_OscConfig+0x2b0>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fe fb56 	bl	80030d4 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2c:	f7fe fb52 	bl	80030d4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e184      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d030      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5e:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <HAL_RCC_OscConfig+0x2b4>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fe fb36 	bl	80030d4 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fe fb32 	bl	80030d4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e164      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x200>
 8004a8a:	e015      	b.n	8004ab8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8c:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <HAL_RCC_OscConfig+0x2b4>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fe fb1f 	bl	80030d4 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9a:	f7fe fb1b 	bl	80030d4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e14d      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a0 	beq.w	8004c06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCC_OscConfig+0x2b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d121      	bne.n	8004b46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_RCC_OscConfig+0x2b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <HAL_RCC_OscConfig+0x2b8>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fae1 	bl	80030d4 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	e011      	b.n	8004b3a <HAL_RCC_OscConfig+0x2ce>
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	42470000 	.word	0x42470000
 8004b20:	42470e80 	.word	0x42470e80
 8004b24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b28:	f7fe fad4 	bl	80030d4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e106      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4b85      	ldr	r3, [pc, #532]	; (8004d50 <HAL_RCC_OscConfig+0x4e4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x2f0>
 8004b4e:	4b81      	ldr	r3, [pc, #516]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a80      	ldr	r2, [pc, #512]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	e01c      	b.n	8004b96 <HAL_RCC_OscConfig+0x32a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d10c      	bne.n	8004b7e <HAL_RCC_OscConfig+0x312>
 8004b64:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a7a      	ldr	r2, [pc, #488]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b70:	4b78      	ldr	r3, [pc, #480]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a77      	ldr	r2, [pc, #476]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	e00b      	b.n	8004b96 <HAL_RCC_OscConfig+0x32a>
 8004b7e:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a74      	ldr	r2, [pc, #464]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	4b72      	ldr	r3, [pc, #456]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a71      	ldr	r2, [pc, #452]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004b90:	f023 0304 	bic.w	r3, r3, #4
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d015      	beq.n	8004bca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9e:	f7fe fa99 	bl	80030d4 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fe fa95 	bl	80030d4 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e0c5      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbc:	4b65      	ldr	r3, [pc, #404]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ee      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x33a>
 8004bc8:	e014      	b.n	8004bf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bca:	f7fe fa83 	bl	80030d4 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fe fa7f 	bl	80030d4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0af      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be8:	4b5a      	ldr	r3, [pc, #360]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ee      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	4a55      	ldr	r2, [pc, #340]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 809b 	beq.w	8004d46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c10:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d05c      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d141      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c24:	4b4c      	ldr	r3, [pc, #304]	; (8004d58 <HAL_RCC_OscConfig+0x4ec>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fa53 	bl	80030d4 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe fa4f 	bl	80030d4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e081      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c44:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	019b      	lsls	r3, r3, #6
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	4937      	ldr	r1, [pc, #220]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c7a:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <HAL_RCC_OscConfig+0x4ec>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fa28 	bl	80030d4 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fe fa24 	bl	80030d4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e056      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x41c>
 8004ca6:	e04e      	b.n	8004d46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCC_OscConfig+0x4ec>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fe fa11 	bl	80030d4 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fe fa0d 	bl	80030d4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e03f      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x44a>
 8004cd4:	e037      	b.n	8004d46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e032      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <HAL_RCC_OscConfig+0x4e8>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d028      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d121      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d11a      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d12:	4013      	ands	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d001      	beq.n	8004d46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40007000 	.word	0x40007000
 8004d54:	40023800 	.word	0x40023800
 8004d58:	42470060 	.word	0x42470060

08004d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0cc      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d70:	4b68      	ldr	r3, [pc, #416]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d90c      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0b8      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a58      	ldr	r2, [pc, #352]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc8:	4b53      	ldr	r3, [pc, #332]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a52      	ldr	r2, [pc, #328]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	4b50      	ldr	r3, [pc, #320]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	494d      	ldr	r1, [pc, #308]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d044      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d119      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e06f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2a:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e067      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e3a:	4b37      	ldr	r3, [pc, #220]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0203 	bic.w	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4934      	ldr	r1, [pc, #208]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e4c:	f7fe f942 	bl	80030d4 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e54:	f7fe f93e 	bl	80030d4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e04f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 020c 	and.w	r2, r3, #12
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1eb      	bne.n	8004e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d20c      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e032      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4916      	ldr	r1, [pc, #88]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	490e      	ldr	r1, [pc, #56]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ee2:	f000 f821 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	490a      	ldr	r1, [pc, #40]	; (8004f1c <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	5ccb      	ldrb	r3, [r1, r3]
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1c8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe f8a2 	bl	800304c <HAL_InitTick>

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40023c00 	.word	0x40023c00
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	0800cc5c 	.word	0x0800cc5c
 8004f20:	20000028 	.word	0x20000028
 8004f24:	2000002c 	.word	0x2000002c

08004f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f40:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x40>
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	f200 80bd 	bhi.w	80050cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x34>
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f5a:	e0b7      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f5c:	4b61      	ldr	r3, [pc, #388]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f5e:	60bb      	str	r3, [r7, #8]
       break;
 8004f60:	e0b7      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f62:	4b61      	ldr	r3, [pc, #388]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f64:	60bb      	str	r3, [r7, #8]
      break;
 8004f66:	e0b4      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f68:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f72:	4b5b      	ldr	r3, [pc, #364]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04d      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7e:	4b58      	ldr	r3, [pc, #352]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	461a      	mov	r2, r3
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	ea02 0800 	and.w	r8, r2, r0
 8004f96:	ea03 0901 	and.w	r9, r3, r1
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	014b      	lsls	r3, r1, #5
 8004fa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fac:	0142      	lsls	r2, r0, #5
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	ebb0 0008 	subs.w	r0, r0, r8
 8004fb6:	eb61 0109 	sbc.w	r1, r1, r9
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	018b      	lsls	r3, r1, #6
 8004fc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fc8:	0182      	lsls	r2, r0, #6
 8004fca:	1a12      	subs	r2, r2, r0
 8004fcc:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd0:	f04f 0000 	mov.w	r0, #0
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	00d9      	lsls	r1, r3, #3
 8004fda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fde:	00d0      	lsls	r0, r2, #3
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	eb12 0208 	adds.w	r2, r2, r8
 8004fe8:	eb43 0309 	adc.w	r3, r3, r9
 8004fec:	f04f 0000 	mov.w	r0, #0
 8004ff0:	f04f 0100 	mov.w	r1, #0
 8004ff4:	0259      	lsls	r1, r3, #9
 8004ff6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ffa:	0250      	lsls	r0, r2, #9
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	f7fb fe3c 	bl	8000c88 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4613      	mov	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e04a      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501a:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	099b      	lsrs	r3, r3, #6
 8005020:	461a      	mov	r2, r3
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	f240 10ff 	movw	r0, #511	; 0x1ff
 800502a:	f04f 0100 	mov.w	r1, #0
 800502e:	ea02 0400 	and.w	r4, r2, r0
 8005032:	ea03 0501 	and.w	r5, r3, r1
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	014b      	lsls	r3, r1, #5
 8005044:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005048:	0142      	lsls	r2, r0, #5
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	1b00      	subs	r0, r0, r4
 8005050:	eb61 0105 	sbc.w	r1, r1, r5
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	018b      	lsls	r3, r1, #6
 800505e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005062:	0182      	lsls	r2, r0, #6
 8005064:	1a12      	subs	r2, r2, r0
 8005066:	eb63 0301 	sbc.w	r3, r3, r1
 800506a:	f04f 0000 	mov.w	r0, #0
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	00d9      	lsls	r1, r3, #3
 8005074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005078:	00d0      	lsls	r0, r2, #3
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	1912      	adds	r2, r2, r4
 8005080:	eb45 0303 	adc.w	r3, r5, r3
 8005084:	f04f 0000 	mov.w	r0, #0
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	0299      	lsls	r1, r3, #10
 800508e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005092:	0290      	lsls	r0, r2, #10
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	461a      	mov	r2, r3
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f7fb fdf0 	bl	8000c88 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4613      	mov	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	3301      	adds	r3, #1
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	60bb      	str	r3, [r7, #8]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050ce:	60bb      	str	r3, [r7, #8]
      break;
 80050d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d2:	68bb      	ldr	r3, [r7, #8]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	007a1200 	.word	0x007a1200

080050ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f0:	4b03      	ldr	r3, [pc, #12]	; (8005100 <HAL_RCC_GetHCLKFreq+0x14>)
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000028 	.word	0x20000028

08005104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005108:	f7ff fff0 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0a9b      	lsrs	r3, r3, #10
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4903      	ldr	r1, [pc, #12]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023800 	.word	0x40023800
 8005128:	0800cc6c 	.word	0x0800cc6c

0800512c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005130:	f7ff ffdc 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0b5b      	lsrs	r3, r3, #13
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4903      	ldr	r1, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	0800cc6c 	.word	0x0800cc6c

08005154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e07b      	b.n	800525e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d009      	beq.n	800518c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	61da      	str	r2, [r3, #28]
 800517e:	e005      	b.n	800518c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fbde 	bl	8002968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005210:	ea42 0103 	orr.w	r1, r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0104 	and.w	r1, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f003 0210 	and.w	r2, r3, #16
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800524c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_SPI_Transmit+0x22>
 8005284:	2302      	movs	r3, #2
 8005286:	e126      	b.n	80054d6 <HAL_SPI_Transmit+0x270>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005290:	f7fd ff20 	bl	80030d4 <HAL_GetTick>
 8005294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052aa:	e10b      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Transmit+0x52>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052bc:	e102      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2203      	movs	r2, #3
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005304:	d10f      	bne.n	8005326 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005324:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d007      	beq.n	8005344 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534c:	d14b      	bne.n	80053e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_SPI_Transmit+0xf6>
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d13e      	bne.n	80053da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005380:	e02b      	b.n	80053da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d112      	bne.n	80053b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80053b4:	e011      	b.n	80053da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b6:	f7fd fe8d 	bl	80030d4 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_Transmit+0x168>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_Transmit+0x16e>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053d8:	e074      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ce      	bne.n	8005382 <HAL_SPI_Transmit+0x11c>
 80053e4:	e04c      	b.n	8005480 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_Transmit+0x18e>
 80053ee:	8afb      	ldrh	r3, [r7, #22]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d140      	bne.n	8005476 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800541a:	e02c      	b.n	8005476 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d113      	bne.n	8005452 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005450:	e011      	b.n	8005476 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005452:	f7fd fe3f 	bl	80030d4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_Transmit+0x204>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x20a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005474:	e026      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1cd      	bne.n	800541c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f8b3 	bl	80055f0 <SPI_EndRxTxTransaction>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e000      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80054c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054f0:	f7fd fdf0 	bl	80030d4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	4413      	add	r3, r2
 80054fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005500:	f7fd fde8 	bl	80030d4 <HAL_GetTick>
 8005504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005506:	4b39      	ldr	r3, [pc, #228]	; (80055ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	015b      	lsls	r3, r3, #5
 800550c:	0d1b      	lsrs	r3, r3, #20
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005516:	e054      	b.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d050      	beq.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005520:	f7fd fdd8 	bl	80030d4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	429a      	cmp	r2, r3
 800552e:	d902      	bls.n	8005536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d13d      	bne.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554e:	d111      	bne.n	8005574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005558:	d004      	beq.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005562:	d107      	bne.n	8005574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557c:	d10f      	bne.n	800559e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e017      	b.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	3b01      	subs	r3, #1
 80055c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d19b      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000028 	.word	0x20000028

080055f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <SPI_EndRxTxTransaction+0x7c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <SPI_EndRxTxTransaction+0x80>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	0d5b      	lsrs	r3, r3, #21
 8005608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800560c:	fb02 f303 	mul.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561a:	d112      	bne.n	8005642 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ff5a 	bl	80054e0 <SPI_WaitFlagStateUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e00f      	b.n	8005662 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3b01      	subs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d0f2      	beq.n	8005642 <SPI_EndRxTxTransaction+0x52>
 800565c:	e000      	b.n	8005660 <SPI_EndRxTxTransaction+0x70>
        break;
 800565e:	bf00      	nop
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000028 	.word	0x20000028
 8005670:	165e9f81 	.word	0x165e9f81

08005674 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e097      	b.n	80057b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fd fb63 	bl	8002d68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b8:	f023 0307 	bic.w	r3, r3, #7
 80056bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f000 fa41 	bl	8005b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	4313      	orrs	r3, r2
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005714:	f023 030c 	bic.w	r3, r3, #12
 8005718:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	4313      	orrs	r3, r2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	011a      	lsls	r2, r3, #4
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	031b      	lsls	r3, r3, #12
 8005744:	4313      	orrs	r3, r2
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	4313      	orrs	r3, r2
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d110      	bne.n	8005812 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d102      	bne.n	80057fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f6:	7b7b      	ldrb	r3, [r7, #13]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d001      	beq.n	8005800 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e069      	b.n	80058d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005810:	e031      	b.n	8005876 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d110      	bne.n	800583a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d102      	bne.n	8005824 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800581e:	7b3b      	ldrb	r3, [r7, #12]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d001      	beq.n	8005828 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e055      	b.n	80058d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005838:	e01d      	b.n	8005876 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d108      	bne.n	8005852 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d105      	bne.n	8005852 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005846:	7b7b      	ldrb	r3, [r7, #13]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d102      	bne.n	8005852 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800584c:	7b3b      	ldrb	r3, [r7, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d001      	beq.n	8005856 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e03e      	b.n	80058d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_TIM_Encoder_Start+0xc4>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b04      	cmp	r3, #4
 8005880:	d008      	beq.n	8005894 <HAL_TIM_Encoder_Start+0xd4>
 8005882:	e00f      	b.n	80058a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2201      	movs	r2, #1
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f9ff 	bl	8005c90 <TIM_CCxChannelCmd>
      break;
 8005892:	e016      	b.n	80058c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2201      	movs	r2, #1
 800589a:	2104      	movs	r1, #4
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f9f7 	bl	8005c90 <TIM_CCxChannelCmd>
      break;
 80058a2:	e00e      	b.n	80058c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f9ef 	bl	8005c90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	2104      	movs	r1, #4
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f9e8 	bl	8005c90 <TIM_CCxChannelCmd>
      break;
 80058c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0202 	mvn.w	r2, #2
 8005908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8f8 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8ea 	bl	8005b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f8fb 	bl	8005b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d122      	bne.n	800598c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b04      	cmp	r3, #4
 8005952:	d11b      	bne.n	800598c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0204 	mvn.w	r2, #4
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8ce 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8c0 	bl	8005b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8d1 	bl	8005b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b08      	cmp	r3, #8
 8005998:	d122      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d11b      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0208 	mvn.w	r2, #8
 80059b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2204      	movs	r2, #4
 80059b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f8a4 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f896 	bl	8005b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f8a7 	bl	8005b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b10      	cmp	r3, #16
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0210 	mvn.w	r2, #16
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f87a 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f86c 	bl	8005b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f87d 	bl	8005b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d10e      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d107      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0201 	mvn.w	r2, #1
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f846 	bl	8005aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b80      	cmp	r3, #128	; 0x80
 8005a6c:	d10e      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d107      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9ae 	bl	8005de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	d10e      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d107      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f842 	bl	8005b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d10e      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0220 	mvn.w	r2, #32
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f978 	bl	8005dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a40      	ldr	r2, [pc, #256]	; (8005c64 <TIM_Base_SetConfig+0x114>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d00f      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3d      	ldr	r2, [pc, #244]	; (8005c68 <TIM_Base_SetConfig+0x118>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3c      	ldr	r2, [pc, #240]	; (8005c6c <TIM_Base_SetConfig+0x11c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a3b      	ldr	r2, [pc, #236]	; (8005c70 <TIM_Base_SetConfig+0x120>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a3a      	ldr	r2, [pc, #232]	; (8005c74 <TIM_Base_SetConfig+0x124>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2f      	ldr	r2, [pc, #188]	; (8005c64 <TIM_Base_SetConfig+0x114>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d02b      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb0:	d027      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <TIM_Base_SetConfig+0x118>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d023      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a2b      	ldr	r2, [pc, #172]	; (8005c6c <TIM_Base_SetConfig+0x11c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01f      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <TIM_Base_SetConfig+0x120>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01b      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a29      	ldr	r2, [pc, #164]	; (8005c74 <TIM_Base_SetConfig+0x124>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d017      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <TIM_Base_SetConfig+0x128>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <TIM_Base_SetConfig+0x12c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a26      	ldr	r2, [pc, #152]	; (8005c80 <TIM_Base_SetConfig+0x130>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a25      	ldr	r2, [pc, #148]	; (8005c84 <TIM_Base_SetConfig+0x134>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a24      	ldr	r2, [pc, #144]	; (8005c88 <TIM_Base_SetConfig+0x138>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <TIM_Base_SetConfig+0x13c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <TIM_Base_SetConfig+0x114>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0xf8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <TIM_Base_SetConfig+0x124>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d103      	bne.n	8005c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	615a      	str	r2, [r3, #20]
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40000800 	.word	0x40000800
 8005c70:	40000c00 	.word	0x40000c00
 8005c74:	40010400 	.word	0x40010400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800
 8005c84:	40001800 	.word	0x40001800
 8005c88:	40001c00 	.word	0x40001c00
 8005c8c:	40002000 	.word	0x40002000

08005c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1a      	ldr	r2, [r3, #32]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e05a      	b.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d40:	d01d      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d10c      	bne.n	8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40010400 	.word	0x40010400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40001800 	.word	0x40001800

08005dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e03f      	b.n	8005e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fd f81a 	bl	8002e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f829 	bl	8005e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	b09f      	sub	sp, #124	; 0x7c
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eae:	68d9      	ldr	r1, [r3, #12]
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	ea40 0301 	orr.w	r3, r0, r1
 8005eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005edc:	f021 010c 	bic.w	r1, r1, #12
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef6:	6999      	ldr	r1, [r3, #24]
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	ea40 0301 	orr.w	r3, r0, r1
 8005f00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4bc5      	ldr	r3, [pc, #788]	; (800621c <UART_SetConfig+0x384>)
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d004      	beq.n	8005f16 <UART_SetConfig+0x7e>
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4bc3      	ldr	r3, [pc, #780]	; (8006220 <UART_SetConfig+0x388>)
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d103      	bne.n	8005f1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f16:	f7ff f909 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8005f1a:	6778      	str	r0, [r7, #116]	; 0x74
 8005f1c:	e002      	b.n	8005f24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7ff f8f1 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8005f22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2c:	f040 80b6 	bne.w	800609c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f32:	461c      	mov	r4, r3
 8005f34:	f04f 0500 	mov.w	r5, #0
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	6439      	str	r1, [r7, #64]	; 0x40
 8005f40:	415b      	adcs	r3, r3
 8005f42:	647b      	str	r3, [r7, #68]	; 0x44
 8005f44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f48:	1912      	adds	r2, r2, r4
 8005f4a:	eb45 0303 	adc.w	r3, r5, r3
 8005f4e:	f04f 0000 	mov.w	r0, #0
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	00d9      	lsls	r1, r3, #3
 8005f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f5c:	00d0      	lsls	r0, r2, #3
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	1911      	adds	r1, r2, r4
 8005f64:	6639      	str	r1, [r7, #96]	; 0x60
 8005f66:	416b      	adcs	r3, r5
 8005f68:	667b      	str	r3, [r7, #100]	; 0x64
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	1891      	adds	r1, r2, r2
 8005f76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f84:	f7fa fe80 	bl	8000c88 <__aeabi_uldivmod>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4ba5      	ldr	r3, [pc, #660]	; (8006224 <UART_SetConfig+0x38c>)
 8005f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	011e      	lsls	r6, r3, #4
 8005f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f98:	461c      	mov	r4, r3
 8005f9a:	f04f 0500 	mov.w	r5, #0
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	1891      	adds	r1, r2, r2
 8005fa4:	6339      	str	r1, [r7, #48]	; 0x30
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005faa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005fae:	1912      	adds	r2, r2, r4
 8005fb0:	eb45 0303 	adc.w	r3, r5, r3
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	00d9      	lsls	r1, r3, #3
 8005fbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc2:	00d0      	lsls	r0, r2, #3
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	1911      	adds	r1, r2, r4
 8005fca:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fcc:	416b      	adcs	r3, r5
 8005fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	1891      	adds	r1, r2, r2
 8005fdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fde:	415b      	adcs	r3, r3
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fe6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005fea:	f7fa fe4d 	bl	8000c88 <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4b8c      	ldr	r3, [pc, #560]	; (8006224 <UART_SetConfig+0x38c>)
 8005ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	2164      	movs	r1, #100	; 0x64
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	3332      	adds	r3, #50	; 0x32
 8006006:	4a87      	ldr	r2, [pc, #540]	; (8006224 <UART_SetConfig+0x38c>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006014:	441e      	add	r6, r3
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	4618      	mov	r0, r3
 800601a:	f04f 0100 	mov.w	r1, #0
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	1894      	adds	r4, r2, r2
 8006024:	623c      	str	r4, [r7, #32]
 8006026:	415b      	adcs	r3, r3
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 800602a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602e:	1812      	adds	r2, r2, r0
 8006030:	eb41 0303 	adc.w	r3, r1, r3
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	f04f 0500 	mov.w	r5, #0
 800603c:	00dd      	lsls	r5, r3, #3
 800603e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006042:	00d4      	lsls	r4, r2, #3
 8006044:	4622      	mov	r2, r4
 8006046:	462b      	mov	r3, r5
 8006048:	1814      	adds	r4, r2, r0
 800604a:	653c      	str	r4, [r7, #80]	; 0x50
 800604c:	414b      	adcs	r3, r1
 800604e:	657b      	str	r3, [r7, #84]	; 0x54
 8006050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	461a      	mov	r2, r3
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	1891      	adds	r1, r2, r2
 800605c:	61b9      	str	r1, [r7, #24]
 800605e:	415b      	adcs	r3, r3
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006066:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800606a:	f7fa fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4b6c      	ldr	r3, [pc, #432]	; (8006224 <UART_SetConfig+0x38c>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	; 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	3332      	adds	r3, #50	; 0x32
 8006086:	4a67      	ldr	r2, [pc, #412]	; (8006224 <UART_SetConfig+0x38c>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 0207 	and.w	r2, r3, #7
 8006092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4432      	add	r2, r6
 8006098:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800609a:	e0b9      	b.n	8006210 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800609c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609e:	461c      	mov	r4, r3
 80060a0:	f04f 0500 	mov.w	r5, #0
 80060a4:	4622      	mov	r2, r4
 80060a6:	462b      	mov	r3, r5
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	415b      	adcs	r3, r3
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060b4:	1912      	adds	r2, r2, r4
 80060b6:	eb45 0303 	adc.w	r3, r5, r3
 80060ba:	f04f 0000 	mov.w	r0, #0
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	00d9      	lsls	r1, r3, #3
 80060c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060c8:	00d0      	lsls	r0, r2, #3
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	eb12 0804 	adds.w	r8, r2, r4
 80060d2:	eb43 0905 	adc.w	r9, r3, r5
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4618      	mov	r0, r3
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	008b      	lsls	r3, r1, #2
 80060ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ee:	0082      	lsls	r2, r0, #2
 80060f0:	4640      	mov	r0, r8
 80060f2:	4649      	mov	r1, r9
 80060f4:	f7fa fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4b49      	ldr	r3, [pc, #292]	; (8006224 <UART_SetConfig+0x38c>)
 80060fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	011e      	lsls	r6, r3, #4
 8006106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006108:	4618      	mov	r0, r3
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	1894      	adds	r4, r2, r2
 8006114:	60bc      	str	r4, [r7, #8]
 8006116:	415b      	adcs	r3, r3
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800611e:	1812      	adds	r2, r2, r0
 8006120:	eb41 0303 	adc.w	r3, r1, r3
 8006124:	f04f 0400 	mov.w	r4, #0
 8006128:	f04f 0500 	mov.w	r5, #0
 800612c:	00dd      	lsls	r5, r3, #3
 800612e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006132:	00d4      	lsls	r4, r2, #3
 8006134:	4622      	mov	r2, r4
 8006136:	462b      	mov	r3, r5
 8006138:	1814      	adds	r4, r2, r0
 800613a:	64bc      	str	r4, [r7, #72]	; 0x48
 800613c:	414b      	adcs	r3, r1
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4618      	mov	r0, r3
 8006146:	f04f 0100 	mov.w	r1, #0
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	008b      	lsls	r3, r1, #2
 8006154:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006158:	0082      	lsls	r2, r0, #2
 800615a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800615e:	f7fa fd93 	bl	8000c88 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <UART_SetConfig+0x38c>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	; 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <UART_SetConfig+0x38c>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006186:	441e      	add	r6, r3
 8006188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800618a:	4618      	mov	r0, r3
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	1894      	adds	r4, r2, r2
 8006196:	603c      	str	r4, [r7, #0]
 8006198:	415b      	adcs	r3, r3
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a0:	1812      	adds	r2, r2, r0
 80061a2:	eb41 0303 	adc.w	r3, r1, r3
 80061a6:	f04f 0400 	mov.w	r4, #0
 80061aa:	f04f 0500 	mov.w	r5, #0
 80061ae:	00dd      	lsls	r5, r3, #3
 80061b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061b4:	00d4      	lsls	r4, r2, #3
 80061b6:	4622      	mov	r2, r4
 80061b8:	462b      	mov	r3, r5
 80061ba:	eb12 0a00 	adds.w	sl, r2, r0
 80061be:	eb43 0b01 	adc.w	fp, r3, r1
 80061c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f04f 0100 	mov.w	r1, #0
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	008b      	lsls	r3, r1, #2
 80061d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061da:	0082      	lsls	r2, r0, #2
 80061dc:	4650      	mov	r0, sl
 80061de:	4659      	mov	r1, fp
 80061e0:	f7fa fd52 	bl	8000c88 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <UART_SetConfig+0x38c>)
 80061ea:	fba3 1302 	umull	r1, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	2164      	movs	r1, #100	; 0x64
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	3332      	adds	r3, #50	; 0x32
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <UART_SetConfig+0x38c>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	f003 020f 	and.w	r2, r3, #15
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4432      	add	r2, r6
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	377c      	adds	r7, #124	; 0x7c
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621a:	bf00      	nop
 800621c:	40011000 	.word	0x40011000
 8006220:	40011400 	.word	0x40011400
 8006224:	51eb851f 	.word	0x51eb851f

08006228 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800622c:	2200      	movs	r2, #0
 800622e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006232:	4802      	ldr	r0, [pc, #8]	; (800623c <ST7735_Select+0x14>)
 8006234:	f7fe f9a4 	bl	8004580 <HAL_GPIO_WritePin>
}
 8006238:	bf00      	nop
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40020800 	.word	0x40020800

08006240 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8006244:	2201      	movs	r2, #1
 8006246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800624a:	4802      	ldr	r0, [pc, #8]	; (8006254 <ST7735_Unselect+0x14>)
 800624c:	f7fe f998 	bl	8004580 <HAL_GPIO_WritePin>
}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40020800 	.word	0x40020800

08006258 <ST7735_Reset>:

void ST7735_Reset()
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800625c:	2200      	movs	r2, #0
 800625e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006262:	4807      	ldr	r0, [pc, #28]	; (8006280 <ST7735_Reset+0x28>)
 8006264:	f7fe f98c 	bl	8004580 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8006268:	2005      	movs	r0, #5
 800626a:	f7fc ff3f 	bl	80030ec <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800626e:	2201      	movs	r2, #1
 8006270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006274:	4802      	ldr	r0, [pc, #8]	; (8006280 <ST7735_Reset+0x28>)
 8006276:	f7fe f983 	bl	8004580 <HAL_GPIO_WritePin>
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40020000 	.word	0x40020000

08006284 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800628e:	2200      	movs	r2, #0
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	4807      	ldr	r0, [pc, #28]	; (80062b0 <ST7735_WriteCommand+0x2c>)
 8006294:	f7fe f974 	bl	8004580 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006298:	1df9      	adds	r1, r7, #7
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	2201      	movs	r2, #1
 80062a0:	4804      	ldr	r0, [pc, #16]	; (80062b4 <ST7735_WriteCommand+0x30>)
 80062a2:	f7fe ffe0 	bl	8005266 <HAL_SPI_Transmit>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40020c00 	.word	0x40020c00
 80062b4:	2000078c 	.word	0x2000078c

080062b8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80062c2:	2201      	movs	r2, #1
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	4807      	ldr	r0, [pc, #28]	; (80062e4 <ST7735_WriteData+0x2c>)
 80062c8:	f7fe f95a 	bl	8004580 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f04f 33ff 	mov.w	r3, #4294967295
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4804      	ldr	r0, [pc, #16]	; (80062e8 <ST7735_WriteData+0x30>)
 80062d8:	f7fe ffc5 	bl	8005266 <HAL_SPI_Transmit>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40020c00 	.word	0x40020c00
 80062e8:	2000078c 	.word	0x2000078c

080062ec <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80062fe:	e034      	b.n	800636a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800630a:	7afb      	ldrb	r3, [r7, #11]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ffb9 	bl	8006284 <ST7735_WriteCommand>

        numArgs = *addr++;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800631c:	7abb      	ldrb	r3, [r7, #10]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8006326:	7abb      	ldrb	r3, [r7, #10]
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800632e:	7abb      	ldrb	r3, [r7, #10]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8006334:	7abb      	ldrb	r3, [r7, #10]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ffbd 	bl	80062b8 <ST7735_WriteData>
            addr += numArgs;
 800633e:	7abb      	ldrb	r3, [r7, #10]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8006346:	89bb      	ldrh	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <DisplayInit+0x7e>
            ms = *addr++;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	607a      	str	r2, [r7, #4]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8006356:	89bb      	ldrh	r3, [r7, #12]
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d102      	bne.n	8006362 <DisplayInit+0x76>
 800635c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006360:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8006362:	89bb      	ldrh	r3, [r7, #12]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fc fec1 	bl	80030ec <HAL_Delay>
    while(numCommands--) {
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	1e5a      	subs	r2, r3, #1
 800636e:	73fa      	strb	r2, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1c5      	bne.n	8006300 <DisplayInit+0x14>
        }
    }
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4623      	mov	r3, r4
 8006390:	71fb      	strb	r3, [r7, #7]
 8006392:	4603      	mov	r3, r0
 8006394:	71bb      	strb	r3, [r7, #6]
 8006396:	460b      	mov	r3, r1
 8006398:	717b      	strb	r3, [r7, #5]
 800639a:	4613      	mov	r3, r2
 800639c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800639e:	202a      	movs	r0, #42	; 0x2a
 80063a0:	f7ff ff70 	bl	8006284 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80063a4:	2300      	movs	r3, #0
 80063a6:	733b      	strb	r3, [r7, #12]
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <ST7735_SetAddressWindow+0x88>)
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	4413      	add	r3, r2
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	737b      	strb	r3, [r7, #13]
 80063b4:	2300      	movs	r3, #0
 80063b6:	73bb      	strb	r3, [r7, #14]
 80063b8:	4b13      	ldr	r3, [pc, #76]	; (8006408 <ST7735_SetAddressWindow+0x88>)
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	797b      	ldrb	r3, [r7, #5]
 80063be:	4413      	add	r3, r2
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80063c4:	f107 030c 	add.w	r3, r7, #12
 80063c8:	2104      	movs	r1, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ff74 	bl	80062b8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80063d0:	202b      	movs	r0, #43	; 0x2b
 80063d2:	f7ff ff57 	bl	8006284 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <ST7735_SetAddressWindow+0x8c>)
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	79bb      	ldrb	r3, [r7, #6]
 80063dc:	4413      	add	r3, r2
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80063e2:	4b0a      	ldr	r3, [pc, #40]	; (800640c <ST7735_SetAddressWindow+0x8c>)
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	793b      	ldrb	r3, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80063ee:	f107 030c 	add.w	r3, r7, #12
 80063f2:	2104      	movs	r1, #4
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ff5f 	bl	80062b8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80063fa:	202c      	movs	r0, #44	; 0x2c
 80063fc:	f7ff ff42 	bl	8006284 <ST7735_WriteCommand>
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bd90      	pop	{r4, r7, pc}
 8006408:	20000438 	.word	0x20000438
 800640c:	2000043c 	.word	0x2000043c

08006410 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800641a:	f7ff ff05 	bl	8006228 <ST7735_Select>
    ST7735_Reset();
 800641e:	f7ff ff1b 	bl	8006258 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8006422:	480c      	ldr	r0, [pc, #48]	; (8006454 <ST7735_Init+0x44>)
 8006424:	f7ff ff62 	bl	80062ec <DisplayInit>
    DisplayInit(init_cmds2);
 8006428:	480b      	ldr	r0, [pc, #44]	; (8006458 <ST7735_Init+0x48>)
 800642a:	f7ff ff5f 	bl	80062ec <DisplayInit>
    DisplayInit(init_cmds3);
 800642e:	480b      	ldr	r0, [pc, #44]	; (800645c <ST7735_Init+0x4c>)
 8006430:	f7ff ff5c 	bl	80062ec <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <ST7735_Init+0x50>)
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <ST7735_Init+0x54>)
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f810 	bl	8006468 <ST7735_SetRotation>
    ST7735_Unselect();
 8006448:	f7ff fefa 	bl	8006240 <ST7735_Unselect>

}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	0800cc7c 	.word	0x0800cc7c
 8006458:	0800ccb4 	.word	0x0800ccb4
 800645c:	0800ccc4 	.word	0x0800ccc4
 8006460:	20000439 	.word	0x20000439
 8006464:	2000043d 	.word	0x2000043d

08006468 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b33      	ldr	r3, [pc, #204]	; (800654c <ST7735_SetRotation+0xe4>)
 8006480:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8006482:	4b32      	ldr	r3, [pc, #200]	; (800654c <ST7735_SetRotation+0xe4>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b03      	cmp	r3, #3
 8006488:	d84e      	bhi.n	8006528 <ST7735_SetRotation+0xc0>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <ST7735_SetRotation+0x28>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064c3 	.word	0x080064c3
 8006498:	080064e5 	.word	0x080064e5
 800649c:	08006507 	.word	0x08006507
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80064a0:	23c0      	movs	r3, #192	; 0xc0
 80064a2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <ST7735_SetRotation+0xe8>)
 80064a6:	22a1      	movs	r2, #161	; 0xa1
 80064a8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80064aa:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <ST7735_SetRotation+0xec>)
 80064ac:	2282      	movs	r2, #130	; 0x82
 80064ae:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80064b0:	4b29      	ldr	r3, [pc, #164]	; (8006558 <ST7735_SetRotation+0xf0>)
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	4b29      	ldr	r3, [pc, #164]	; (800655c <ST7735_SetRotation+0xf4>)
 80064b6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80064b8:	4b29      	ldr	r3, [pc, #164]	; (8006560 <ST7735_SetRotation+0xf8>)
 80064ba:	781a      	ldrb	r2, [r3, #0]
 80064bc:	4b29      	ldr	r3, [pc, #164]	; (8006564 <ST7735_SetRotation+0xfc>)
 80064be:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80064c0:	e032      	b.n	8006528 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80064c2:	23a0      	movs	r3, #160	; 0xa0
 80064c4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80064c6:	4b23      	ldr	r3, [pc, #140]	; (8006554 <ST7735_SetRotation+0xec>)
 80064c8:	22a1      	movs	r2, #161	; 0xa1
 80064ca:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80064cc:	4b20      	ldr	r3, [pc, #128]	; (8006550 <ST7735_SetRotation+0xe8>)
 80064ce:	2282      	movs	r2, #130	; 0x82
 80064d0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <ST7735_SetRotation+0xf0>)
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <ST7735_SetRotation+0xfc>)
 80064d8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <ST7735_SetRotation+0xf8>)
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	4b1f      	ldr	r3, [pc, #124]	; (800655c <ST7735_SetRotation+0xf4>)
 80064e0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80064e2:	e021      	b.n	8006528 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <ST7735_SetRotation+0xe8>)
 80064ea:	22a1      	movs	r2, #161	; 0xa1
 80064ec:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80064ee:	4b19      	ldr	r3, [pc, #100]	; (8006554 <ST7735_SetRotation+0xec>)
 80064f0:	2282      	movs	r2, #130	; 0x82
 80064f2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <ST7735_SetRotation+0xf0>)
 80064f6:	781a      	ldrb	r2, [r3, #0]
 80064f8:	4b18      	ldr	r3, [pc, #96]	; (800655c <ST7735_SetRotation+0xf4>)
 80064fa:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80064fc:	4b18      	ldr	r3, [pc, #96]	; (8006560 <ST7735_SetRotation+0xf8>)
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	4b18      	ldr	r3, [pc, #96]	; (8006564 <ST7735_SetRotation+0xfc>)
 8006502:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8006504:	e010      	b.n	8006528 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8006506:	2360      	movs	r3, #96	; 0x60
 8006508:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <ST7735_SetRotation+0xec>)
 800650c:	22a1      	movs	r2, #161	; 0xa1
 800650e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <ST7735_SetRotation+0xe8>)
 8006512:	2282      	movs	r2, #130	; 0x82
 8006514:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <ST7735_SetRotation+0xf0>)
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <ST7735_SetRotation+0xfc>)
 800651c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <ST7735_SetRotation+0xf8>)
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	4b0e      	ldr	r3, [pc, #56]	; (800655c <ST7735_SetRotation+0xf4>)
 8006524:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8006526:	bf00      	nop
  }
  ST7735_Select();
 8006528:	f7ff fe7e 	bl	8006228 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800652c:	2036      	movs	r0, #54	; 0x36
 800652e:	f7ff fea9 	bl	8006284 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8006532:	f107 030f 	add.w	r3, r7, #15
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff febd 	bl	80062b8 <ST7735_WriteData>
  ST7735_Unselect();
 800653e:	f7ff fe7f 	bl	8006240 <ST7735_Unselect>
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000474 	.word	0x20000474
 8006550:	20000486 	.word	0x20000486
 8006554:	20000476 	.word	0x20000476
 8006558:	20000439 	.word	0x20000439
 800655c:	20000438 	.word	0x20000438
 8006560:	2000043d 	.word	0x2000043d
 8006564:	2000043c 	.word	0x2000043c

08006568 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	80fb      	strh	r3, [r7, #6]
 8006572:	460b      	mov	r3, r1
 8006574:	80bb      	strh	r3, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <ST7735_DrawPixel+0x74>)
 800657e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006582:	4293      	cmp	r3, r2
 8006584:	da26      	bge.n	80065d4 <ST7735_DrawPixel+0x6c>
 8006586:	88bb      	ldrh	r3, [r7, #4]
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <ST7735_DrawPixel+0x78>)
 800658a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800658e:	4293      	cmp	r3, r2
 8006590:	da20      	bge.n	80065d4 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8006592:	f7ff fe49 	bl	8006228 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	b2d8      	uxtb	r0, r3
 800659a:	88bb      	ldrh	r3, [r7, #4]
 800659c:	b2d9      	uxtb	r1, r3
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	3301      	adds	r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	88bb      	ldrh	r3, [r7, #4]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	3301      	adds	r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f7ff fee7 	bl	8006380 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80065b2:	887b      	ldrh	r3, [r7, #2]
 80065b4:	0a1b      	lsrs	r3, r3, #8
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	733b      	strb	r3, [r7, #12]
 80065bc:	887b      	ldrh	r3, [r7, #2]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fe75 	bl	80062b8 <ST7735_WriteData>

    ST7735_Unselect();
 80065ce:	f7ff fe37 	bl	8006240 <ST7735_Unselect>
 80065d2:	e000      	b.n	80065d6 <ST7735_DrawPixel+0x6e>
        return;
 80065d4:	bf00      	nop
}
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000476 	.word	0x20000476
 80065e0:	20000486 	.word	0x20000486

080065e4 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80065e4:	b082      	sub	sp, #8
 80065e6:	b590      	push	{r4, r7, lr}
 80065e8:	b089      	sub	sp, #36	; 0x24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	4603      	mov	r3, r0
 80065f0:	80fb      	strh	r3, [r7, #6]
 80065f2:	460b      	mov	r3, r1
 80065f4:	80bb      	strh	r3, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	b2d8      	uxtb	r0, r3
 80065fe:	88bb      	ldrh	r3, [r7, #4]
 8006600:	b2d9      	uxtb	r1, r3
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800660a:	4413      	add	r3, r2
 800660c:	b2db      	uxtb	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b2dc      	uxtb	r4, r3
 8006612:	88bb      	ldrh	r3, [r7, #4]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800661a:	4413      	add	r3, r2
 800661c:	b2db      	uxtb	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	4622      	mov	r2, r4
 8006624:	f7ff feac 	bl	8006380 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	e043      	b.n	80066b6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800662e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	3b20      	subs	r3, #32
 8006634:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	4619      	mov	r1, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	440b      	add	r3, r1
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e029      	b.n	80066a4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8006660:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	b29b      	uxth	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	743b      	strb	r3, [r7, #16]
 800666a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	2102      	movs	r1, #2
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fe1e 	bl	80062b8 <ST7735_WriteData>
 800667c:	e00f      	b.n	800669e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800667e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b29b      	uxth	r3, r3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	733b      	strb	r3, [r7, #12]
 800668a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800668e:	b2db      	uxtb	r3, r3
 8006690:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	2102      	movs	r1, #2
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fe0d 	bl	80062b8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	3301      	adds	r3, #1
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80066a8:	461a      	mov	r2, r3
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d3cf      	bcc.n	8006650 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	3301      	adds	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066ba:	461a      	mov	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4293      	cmp	r3, r2
 80066c0:	d3b5      	bcc.n	800662e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	3724      	adds	r7, #36	; 0x24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80066ce:	b002      	add	sp, #8
 80066d0:	4770      	bx	lr
	...

080066d4 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80066d4:	b082      	sub	sp, #8
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af04      	add	r7, sp, #16
 80066dc:	603a      	str	r2, [r7, #0]
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	4603      	mov	r3, r0
 80066e2:	80fb      	strh	r3, [r7, #6]
 80066e4:	460b      	mov	r3, r1
 80066e6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80066e8:	f7ff fd9e 	bl	8006228 <ST7735_Select>

    while(*str) {
 80066ec:	e033      	b.n	8006756 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	7d3a      	ldrb	r2, [r7, #20]
 80066f2:	4413      	add	r3, r2
 80066f4:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <ST7735_WriteString+0xa0>)
 80066f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80066fa:	4293      	cmp	r3, r2
 80066fc:	db16      	blt.n	800672c <ST7735_WriteString+0x58>
            x = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8006702:	7d7b      	ldrb	r3, [r7, #21]
 8006704:	b29a      	uxth	r2, r3
 8006706:	88bb      	ldrh	r3, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800670c:	88bb      	ldrh	r3, [r7, #4]
 800670e:	7d7a      	ldrb	r2, [r7, #21]
 8006710:	4413      	add	r3, r2
 8006712:	4a19      	ldr	r2, [pc, #100]	; (8006778 <ST7735_WriteString+0xa4>)
 8006714:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006718:	4293      	cmp	r3, r2
 800671a:	da21      	bge.n	8006760 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b20      	cmp	r3, #32
 8006722:	d103      	bne.n	800672c <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	603b      	str	r3, [r7, #0]
                continue;
 800672a:	e014      	b.n	8006756 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	88b9      	ldrh	r1, [r7, #4]
 8006732:	88f8      	ldrh	r0, [r7, #6]
 8006734:	8c3b      	ldrh	r3, [r7, #32]
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	8bbb      	ldrh	r3, [r7, #28]
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f7ff ff4f 	bl	80065e4 <ST7735_WriteChar>
        x += font.width;
 8006746:	7d3b      	ldrb	r3, [r7, #20]
 8006748:	b29a      	uxth	r2, r3
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	4413      	add	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
        str++;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	603b      	str	r3, [r7, #0]
    while(*str) {
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1c7      	bne.n	80066ee <ST7735_WriteString+0x1a>
 800675e:	e000      	b.n	8006762 <ST7735_WriteString+0x8e>
                break;
 8006760:	bf00      	nop
    }

    ST7735_Unselect();
 8006762:	f7ff fd6d 	bl	8006240 <ST7735_Unselect>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006770:	b002      	add	sp, #8
 8006772:	4770      	bx	lr
 8006774:	20000476 	.word	0x20000476
 8006778:	20000486 	.word	0x20000486

0800677c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	4611      	mov	r1, r2
 8006788:	461a      	mov	r2, r3
 800678a:	4623      	mov	r3, r4
 800678c:	80fb      	strh	r3, [r7, #6]
 800678e:	4603      	mov	r3, r0
 8006790:	80bb      	strh	r3, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	807b      	strh	r3, [r7, #2]
 8006796:	4613      	mov	r3, r2
 8006798:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	4a37      	ldr	r2, [pc, #220]	; (800687c <ST7735_FillRectangle+0x100>)
 800679e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	da66      	bge.n	8006874 <ST7735_FillRectangle+0xf8>
 80067a6:	88bb      	ldrh	r3, [r7, #4]
 80067a8:	4a35      	ldr	r2, [pc, #212]	; (8006880 <ST7735_FillRectangle+0x104>)
 80067aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	da60      	bge.n	8006874 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	887b      	ldrh	r3, [r7, #2]
 80067b6:	4413      	add	r3, r2
 80067b8:	4a30      	ldr	r2, [pc, #192]	; (800687c <ST7735_FillRectangle+0x100>)
 80067ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80067be:	4293      	cmp	r3, r2
 80067c0:	dd06      	ble.n	80067d0 <ST7735_FillRectangle+0x54>
 80067c2:	4b2e      	ldr	r3, [pc, #184]	; (800687c <ST7735_FillRectangle+0x100>)
 80067c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80067d0:	88ba      	ldrh	r2, [r7, #4]
 80067d2:	883b      	ldrh	r3, [r7, #0]
 80067d4:	4413      	add	r3, r2
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <ST7735_FillRectangle+0x104>)
 80067d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80067dc:	4293      	cmp	r3, r2
 80067de:	dd06      	ble.n	80067ee <ST7735_FillRectangle+0x72>
 80067e0:	4b27      	ldr	r3, [pc, #156]	; (8006880 <ST7735_FillRectangle+0x104>)
 80067e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	88bb      	ldrh	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80067ee:	f7ff fd1b 	bl	8006228 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	b2d8      	uxtb	r0, r3
 80067f6:	88bb      	ldrh	r3, [r7, #4]
 80067f8:	b2d9      	uxtb	r1, r3
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	887b      	ldrh	r3, [r7, #2]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	4413      	add	r3, r2
 8006804:	b2db      	uxtb	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b2dc      	uxtb	r4, r3
 800680a:	88bb      	ldrh	r3, [r7, #4]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	883b      	ldrh	r3, [r7, #0]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	4413      	add	r3, r2
 8006814:	b2db      	uxtb	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	4622      	mov	r2, r4
 800681c:	f7ff fdb0 	bl	8006380 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8006820:	8c3b      	ldrh	r3, [r7, #32]
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	b29b      	uxth	r3, r3
 8006826:	b2db      	uxtb	r3, r3
 8006828:	733b      	strb	r3, [r7, #12]
 800682a:	8c3b      	ldrh	r3, [r7, #32]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8006830:	2201      	movs	r2, #1
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	4813      	ldr	r0, [pc, #76]	; (8006884 <ST7735_FillRectangle+0x108>)
 8006836:	f7fd fea3 	bl	8004580 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800683a:	883b      	ldrh	r3, [r7, #0]
 800683c:	80bb      	strh	r3, [r7, #4]
 800683e:	e013      	b.n	8006868 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	80fb      	strh	r3, [r7, #6]
 8006844:	e00a      	b.n	800685c <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006846:	f107 010c 	add.w	r1, r7, #12
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	2202      	movs	r2, #2
 8006850:	480d      	ldr	r0, [pc, #52]	; (8006888 <ST7735_FillRectangle+0x10c>)
 8006852:	f7fe fd08 	bl	8005266 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	3b01      	subs	r3, #1
 800685a:	80fb      	strh	r3, [r7, #6]
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f1      	bne.n	8006846 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8006862:	88bb      	ldrh	r3, [r7, #4]
 8006864:	3b01      	subs	r3, #1
 8006866:	80bb      	strh	r3, [r7, #4]
 8006868:	88bb      	ldrh	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e8      	bne.n	8006840 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800686e:	f7ff fce7 	bl	8006240 <ST7735_Unselect>
 8006872:	e000      	b.n	8006876 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8006874:	bf00      	nop
}
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}
 800687c:	20000476 	.word	0x20000476
 8006880:	20000486 	.word	0x20000486
 8006884:	40020c00 	.word	0x40020c00
 8006888:	2000078c 	.word	0x2000078c

0800688c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af02      	add	r7, sp, #8
 8006892:	4603      	mov	r3, r0
 8006894:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, _width, _height, color);
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <ST7735_FillScreen+0x30>)
 8006898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800689c:	b29a      	uxth	r2, r3
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <ST7735_FillScreen+0x34>)
 80068a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068a4:	b299      	uxth	r1, r3
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	460b      	mov	r3, r1
 80068ac:	2100      	movs	r1, #0
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7ff ff64 	bl	800677c <ST7735_FillRectangle>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000476 	.word	0x20000476
 80068c0:	20000486 	.word	0x20000486

080068c4 <HAL_GPIO_EXTI_Callback>:
#include "stm32f4xx_hal.h"
#include "stdbool.h"
#include "tim.h"

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == ENCODER_1_BTN ) {
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d4:	d103      	bne.n	80068de <HAL_GPIO_EXTI_Callback+0x1a>
		encoder_toggle_button (&encoder_1);
 80068d6:	4804      	ldr	r0, [pc, #16]	; (80068e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80068d8:	f000 f83d 	bl	8006956 <encoder_toggle_button>
 80068dc:	e000      	b.n	80068e0 <HAL_GPIO_EXTI_Callback+0x1c>
	}
	else {
		return;
 80068de:	bf00      	nop
	}
}
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200006bc 	.word	0x200006bc

080068ec <encoder_struct_init>:

void encoder_struct_init(struct encoder *enc, TIM_HandleTypeDef *htim) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	encoder_reset_flags(enc);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f80a 	bl	8006910 <encoder_reset_flags>
	enc->ptr = htim;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	60da      	str	r2, [r3, #12]
	encoder_check_counter (enc);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f817 	bl	8006936 <encoder_check_counter>
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <encoder_reset_flags>:

void encoder_reset_flags(struct encoder *enc) {
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	enc->step_clockwise = false;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	721a      	strb	r2, [r3, #8]
	enc->step_counterclockwise = false;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	725a      	strb	r2, [r3, #9]
	enc->enter = false;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	729a      	strb	r2, [r3, #10]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <encoder_check_counter>:

void encoder_check_counter (struct encoder *enc) {
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]

	enc->encoderState = __HAL_TIM_GET_COUNTER( enc->ptr );
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <encoder_toggle_button>:

void encoder_toggle_button (struct encoder *enc) {
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]

	if ( enc->enter == true) {
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7a9b      	ldrb	r3, [r3, #10]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <encoder_toggle_button+0x18>
		enc->enter = false;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	729a      	strb	r2, [r3, #10]
	else {
		enc->enter = true;
	}


}
 800696c:	e002      	b.n	8006974 <encoder_toggle_button+0x1e>
		enc->enter = true;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	729a      	strb	r2, [r3, #10]
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <encoder_check_direction>:

void encoder_check_direction(struct encoder *enc) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

	encoder_check_counter (enc);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff ffd4 	bl	8006936 <encoder_check_counter>

	int8_t state = (enc->lastEncoderState - enc->encoderState);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	b2da      	uxtb	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b2db      	uxtb	r3, r3
 800699e:	73fb      	strb	r3, [r7, #15]

	if( state == 1 ) {
 80069a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d107      	bne.n	80069b8 <encoder_check_direction+0x38>
		enc->lastEncoderState = enc->encoderState;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	721a      	strb	r2, [r3, #8]
	}
	else {
		enc->lastEncoderState = enc->encoderState;

	}
}
 80069b6:	e03f      	b.n	8006a38 <encoder_check_direction+0xb8>
	else if (state == -1){
 80069b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d107      	bne.n	80069d2 <encoder_check_direction+0x52>
		enc->lastEncoderState = enc->encoderState;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	725a      	strb	r2, [r3, #9]
}
 80069d0:	e032      	b.n	8006a38 <encoder_check_direction+0xb8>
	else if ( (state == enc->lastEncoderState) && (enc->lastEncoderState == htim1.Init.Period) && (enc->encoderState == 0) ) {
 80069d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d111      	bne.n	8006a02 <encoder_check_direction+0x82>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <encoder_check_direction+0xc0>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d10b      	bne.n	8006a02 <encoder_check_direction+0x82>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <encoder_check_direction+0x82>
		enc->lastEncoderState = enc->encoderState;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	725a      	strb	r2, [r3, #9]
 8006a00:	e01a      	b.n	8006a38 <encoder_check_direction+0xb8>
	else if ( (state < 0) && (enc->lastEncoderState == 0) && (enc->encoderState == htim1.Init.Period)) {
 8006a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da11      	bge.n	8006a2e <encoder_check_direction+0xae>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <encoder_check_direction+0xae>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <encoder_check_direction+0xc0>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d107      	bne.n	8006a2e <encoder_check_direction+0xae>
		enc->lastEncoderState = enc->encoderState;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	721a      	strb	r2, [r3, #8]
 8006a2c:	e004      	b.n	8006a38 <encoder_check_direction+0xb8>
		enc->lastEncoderState = enc->encoderState;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
}
 8006a36:	e7ff      	b.n	8006a38 <encoder_check_direction+0xb8>
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	200007e4 	.word	0x200007e4

08006a44 <encoder_step_clockwise>:

_Bool encoder_step_clockwise(struct encoder *enc) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff97 	bl	8006980 <encoder_check_direction>
	if(enc->step_clockwise == true) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7a1b      	ldrb	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d004      	beq.n	8006a64 <encoder_step_clockwise+0x20>
		encoder_reset_flags(enc);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff ff58 	bl	8006910 <encoder_reset_flags>
		return true;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <encoder_step_clockwise+0x22>
	}
	else {
		return false;
 8006a64:	2300      	movs	r3, #0
	}

}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <encoder_step_counterclockwise>:

_Bool encoder_step_counterclockwise(struct encoder *enc) {
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff82 	bl	8006980 <encoder_check_direction>
	if(enc->step_counterclockwise == true) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7a5b      	ldrb	r3, [r3, #9]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <encoder_step_counterclockwise+0x20>
		encoder_reset_flags(enc);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ff43 	bl	8006910 <encoder_reset_flags>
		return true;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <encoder_step_counterclockwise+0x22>
	}
	else {
		return false;
 8006a8e:	2300      	movs	r3, #0
	}
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <encoder_enter>:

_Bool encoder_enter(struct encoder *enc) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	if(enc->enter == true) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7a9b      	ldrb	r3, [r3, #10]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <encoder_enter+0x20>
		HAL_Delay(50);
 8006aa8:	2032      	movs	r0, #50	; 0x32
 8006aaa:	f7fc fb1f 	bl	80030ec <HAL_Delay>
		encoder_reset_flags(enc);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ff2e 	bl	8006910 <encoder_reset_flags>
		return true;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <encoder_enter+0x22>
	}
	else {
		return false;
 8006ab8:	2300      	movs	r3, #0
	}
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <Menu_GetMenuItemsNo>:

static const  struct menuitem *currMenuPtr = &menu_link;    //Current menu position
static int8_t menuindex;                                    //Index of current menu position
static int8_t menufirstpos;                                 //Index of menu position displayed at the top

uint8_t Menu_GetMenuItemsNo() {
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	const struct menuitem *tmpmenuitem = currMenuPtr;
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <Menu_GetMenuItemsNo+0x34>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	607b      	str	r3, [r7, #4]
	uint8_t index=0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	70fb      	strb	r3, [r7, #3]

	while(tmpmenuitem) {
 8006ad4:	e005      	b.n	8006ae2 <Menu_GetMenuItemsNo+0x1e>
		tmpmenuitem=tmpmenuitem->next;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	607b      	str	r3, [r7, #4]
		index++;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	70fb      	strb	r3, [r7, #3]
	while(tmpmenuitem) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f6      	bne.n	8006ad6 <Menu_GetMenuItemsNo+0x12>
	}

	return index;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000044 	.word	0x20000044

08006afc <Menu_GetMenuItem>:

const struct menuitem *Menu_GetMenuItem(uint8_t index) {
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	71fb      	strb	r3, [r7, #7]
	const struct menuitem *tmpmenuitem=currMenuPtr;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <Menu_GetMenuItem+0x38>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

	while((tmpmenuitem) && (index>0)) {
 8006b0c:	e005      	b.n	8006b1a <Menu_GetMenuItem+0x1e>
	 tmpmenuitem=tmpmenuitem->next;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	60fb      	str	r3, [r7, #12]
	 index--;
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	71fb      	strb	r3, [r7, #7]
	while((tmpmenuitem) && (index>0)) {
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <Menu_GetMenuItem+0x2a>
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f3      	bne.n	8006b0e <Menu_GetMenuItem+0x12>
	}

	return tmpmenuitem;
 8006b26:	68fb      	ldr	r3, [r7, #12]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000044 	.word	0x20000044

08006b38 <Menu_GetMenuRows>:

uint8_t Menu_GetMenuRows() {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
	uint8_t menuRows = UG_GetYDim() / (gui1.font.font_height);
 8006b3e:	f001 f8cf 	bl	8007ce0 <UG_GetYDim>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <Menu_GetMenuRows+0x24>)
 8006b48:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b50:	71fb      	strb	r3, [r7, #7]
	return menuRows;
 8006b52:	79fb      	ldrb	r3, [r7, #7]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	2000059c 	.word	0x2000059c

08006b60 <Menu_Show>:

void Menu_Show() {
 8006b60:	b5b0      	push	{r4, r5, r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af02      	add	r7, sp, #8
	const struct menuitem *tmpmenuitem=Menu_GetMenuItem(menufirstpos);
 8006b66:	4b66      	ldr	r3, [pc, #408]	; (8006d00 <Menu_Show+0x1a0>)
 8006b68:	f993 3000 	ldrsb.w	r3, [r3]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ffc4 	bl	8006afc <Menu_GetMenuItem>
 8006b74:	6078      	str	r0, [r7, #4]
	uint8_t menuitemsno=Menu_GetMenuItemsNo();
 8006b76:	f7ff ffa5 	bl	8006ac4 <Menu_GetMenuItemsNo>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	70bb      	strb	r3, [r7, #2]

	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 8006b7e:	2300      	movs	r3, #0
 8006b80:	70fb      	strb	r3, [r7, #3]
 8006b82:	e0af      	b.n	8006ce4 <Menu_Show+0x184>
		uint8_t xbox = 0, ybox = 26;
 8006b84:	2300      	movs	r3, #0
 8006b86:	707b      	strb	r3, [r7, #1]
 8006b88:	231a      	movs	r3, #26
 8006b8a:	703b      	strb	r3, [r7, #0]

		if(menuindex == ((menufirstpos + i) % menuitemsno)) {
 8006b8c:	4b5d      	ldr	r3, [pc, #372]	; (8006d04 <Menu_Show+0x1a4>)
 8006b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006b92:	4618      	mov	r0, r3
 8006b94:	4b5a      	ldr	r3, [pc, #360]	; (8006d00 <Menu_Show+0x1a0>)
 8006b96:	f993 3000 	ldrsb.w	r3, [r3]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	78ba      	ldrb	r2, [r7, #2]
 8006ba2:	fb93 f1f2 	sdiv	r1, r3, r2
 8006ba6:	fb02 f201 	mul.w	r2, r2, r1
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	4298      	cmp	r0, r3
 8006bae:	d138      	bne.n	8006c22 <Menu_Show+0xc2>

			UG_SetBackcolor( C_BLUE );
 8006bb0:	20ff      	movs	r0, #255	; 0xff
 8006bb2:	f001 f877 	bl	8007ca4 <UG_SetBackcolor>
			UG_FillFrame(xbox, 2+(i*ybox), UG_GetXDim(), (gui1.font.char_height)+(0+(i*ybox)), C_BLUE);
 8006bb6:	787b      	ldrb	r3, [r7, #1]
 8006bb8:	b21c      	sxth	r4, r3
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	783b      	ldrb	r3, [r7, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	fb12 f303 	smulbb	r3, r2, r3
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3302      	adds	r3, #2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	b21d      	sxth	r5, r3
 8006bce:	f001 f879 	bl	8007cc4 <UG_GetXDim>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	4b4c      	ldr	r3, [pc, #304]	; (8006d08 <Menu_Show+0x1a8>)
 8006bd8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	b299      	uxth	r1, r3
 8006be2:	783b      	ldrb	r3, [r7, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	fb11 f303 	smulbb	r3, r1, r3
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4413      	add	r3, r2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	22ff      	movs	r2, #255	; 0xff
 8006bf4:	9200      	str	r2, [sp, #0]
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fe5e 	bl	80078bc <UG_FillFrame>
			UG_PutString( 0, 2+(i*ybox), tmpmenuitem->text);
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	783b      	ldrb	r3, [r7, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	fb12 f303 	smulbb	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3302      	adds	r3, #2
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b219      	sxth	r1, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f000 febe 	bl	800799c <UG_PutString>
 8006c20:	e037      	b.n	8006c92 <Menu_Show+0x132>
		}
		else {
			UG_SetBackcolor( C_BLACK );
 8006c22:	2000      	movs	r0, #0
 8006c24:	f001 f83e 	bl	8007ca4 <UG_SetBackcolor>
			UG_FillFrame(xbox, 2+(i*ybox), UG_GetXDim(), (gui1.font.char_height)+(0+(i*ybox)), C_BLACK);
 8006c28:	787b      	ldrb	r3, [r7, #1]
 8006c2a:	b21c      	sxth	r4, r3
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	783b      	ldrb	r3, [r7, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	fb12 f303 	smulbb	r3, r2, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	b21d      	sxth	r5, r3
 8006c40:	f001 f840 	bl	8007cc4 <UG_GetXDim>
 8006c44:	4603      	mov	r3, r0
 8006c46:	4618      	mov	r0, r3
 8006c48:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <Menu_Show+0x1a8>)
 8006c4a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	b299      	uxth	r1, r3
 8006c54:	783b      	ldrb	r3, [r7, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	fb11 f303 	smulbb	r3, r1, r3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b21b      	sxth	r3, r3
 8006c64:	2200      	movs	r2, #0
 8006c66:	9200      	str	r2, [sp, #0]
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 fe25 	bl	80078bc <UG_FillFrame>
			UG_PutString( 0, 2+(i*ybox), tmpmenuitem->text);
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	783b      	ldrb	r3, [r7, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	fb12 f303 	smulbb	r3, r2, r3
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3302      	adds	r3, #2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b219      	sxth	r1, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f000 fe85 	bl	800799c <UG_PutString>
		}

		if(tmpmenuitem->submenu) {
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00f      	beq.n	8006cba <Menu_Show+0x15a>
			UG_PutString( xbox, 2+(i*ybox), "");
 8006c9a:	787b      	ldrb	r3, [r7, #1]
 8006c9c:	b218      	sxth	r0, r3
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	783b      	ldrb	r3, [r7, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	fb12 f303 	smulbb	r3, r2, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3302      	adds	r3, #2
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <Menu_Show+0x1ac>)
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f000 fe71 	bl	800799c <UG_PutString>
		}

		tmpmenuitem = tmpmenuitem->next;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	607b      	str	r3, [r7, #4]

		if(tmpmenuitem == NULL)  //End of list
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10b      	bne.n	8006cde <Menu_Show+0x17e>
		{
			if(Menu_GetMenuItemsNo() > Menu_GetMenuRows()){
 8006cc6:	f7ff fefd 	bl	8006ac4 <Menu_GetMenuItemsNo>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	461c      	mov	r4, r3
 8006cce:	f7ff ff33 	bl	8006b38 <Menu_GetMenuRows>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	d90e      	bls.n	8006cf6 <Menu_Show+0x196>
				tmpmenuitem=currMenuPtr;
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <Menu_Show+0x1b0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	70fb      	strb	r3, [r7, #3]
 8006ce4:	f7ff ff28 	bl	8006b38 <Menu_GetMenuRows>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	461a      	mov	r2, r3
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	f4ff af48 	bcc.w	8006b84 <Menu_Show+0x24>
			else {
				break;   //Finish to avoid repeating elements
			}
		}
	}
}
 8006cf4:	e000      	b.n	8006cf8 <Menu_Show+0x198>
				break;   //Finish to avoid repeating elements
 8006cf6:	bf00      	nop
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8006d00:	2000035d 	.word	0x2000035d
 8006d04:	2000035c 	.word	0x2000035c
 8006d08:	2000059c 	.word	0x2000059c
 8006d0c:	0800cc0c 	.word	0x0800cc0c
 8006d10:	20000044 	.word	0x20000044

08006d14 <Menu_SelectNext>:

void Menu_SelectNext() {
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
	uint8_t no = Menu_GetMenuItemsNo();
 8006d1a:	f7ff fed3 	bl	8006ac4 <Menu_GetMenuItemsNo>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71bb      	strb	r3, [r7, #6]
	menuindex++;
 8006d22:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006d24:	f993 3000 	ldrsb.w	r3, [r3]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	b25a      	sxtb	r2, r3
 8006d30:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006d32:	701a      	strb	r2, [r3, #0]

	if(no > Menu_GetMenuRows()){
 8006d34:	f7ff ff00 	bl	8006b38 <Menu_GetMenuRows>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	79bb      	ldrb	r3, [r7, #6]
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d931      	bls.n	8006da6 <Menu_SelectNext+0x92>
		int8_t dist;	//Distance between first and highlighted position

		if(menuindex < menufirstpos) {
 8006d42:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006d44:	f993 2000 	ldrsb.w	r2, [r3]
 8006d48:	4b28      	ldr	r3, [pc, #160]	; (8006dec <Menu_SelectNext+0xd8>)
 8006d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	da0e      	bge.n	8006d70 <Menu_SelectNext+0x5c>
			dist = no - menufirstpos + menuindex;
 8006d52:	4b26      	ldr	r3, [pc, #152]	; (8006dec <Menu_SelectNext+0xd8>)
 8006d54:	f993 3000 	ldrsb.w	r3, [r3]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	79ba      	ldrb	r2, [r7, #6]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	4b21      	ldr	r3, [pc, #132]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006d62:	f993 3000 	ldrsb.w	r3, [r3]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	71fb      	strb	r3, [r7, #7]
 8006d6e:	e00a      	b.n	8006d86 <Menu_SelectNext+0x72>
		}
		else {
			dist=menuindex-menufirstpos;
 8006d70:	4b1d      	ldr	r3, [pc, #116]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006d72:	f993 3000 	ldrsb.w	r3, [r3]
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <Menu_SelectNext+0xd8>)
 8006d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	71fb      	strb	r3, [r7, #7]
		}

		if(dist >= Menu_GetMenuRows()) {
 8006d86:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8006d8a:	f7ff fed5 	bl	8006b38 <Menu_GetMenuRows>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	429c      	cmp	r4, r3
 8006d92:	db08      	blt.n	8006da6 <Menu_SelectNext+0x92>
			menufirstpos++;  //End of screen, scroll
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <Menu_SelectNext+0xd8>)
 8006d96:	f993 3000 	ldrsb.w	r3, [r3]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	b25a      	sxtb	r2, r3
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <Menu_SelectNext+0xd8>)
 8006da4:	701a      	strb	r2, [r3, #0]
		}
	}

	menuindex %= no;
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006da8:	f993 3000 	ldrsb.w	r3, [r3]
 8006dac:	461a      	mov	r2, r3
 8006dae:	79bb      	ldrb	r3, [r7, #6]
 8006db0:	fb92 f1f3 	sdiv	r1, r2, r3
 8006db4:	fb03 f301 	mul.w	r3, r3, r1
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	b25a      	sxtb	r2, r3
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <Menu_SelectNext+0xd4>)
 8006dbe:	701a      	strb	r2, [r3, #0]
	menufirstpos %= no;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <Menu_SelectNext+0xd8>)
 8006dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	79bb      	ldrb	r3, [r7, #6]
 8006dca:	fb92 f1f3 	sdiv	r1, r2, r3
 8006dce:	fb03 f301 	mul.w	r3, r3, r1
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	b25a      	sxtb	r2, r3
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <Menu_SelectNext+0xd8>)
 8006dd8:	701a      	strb	r2, [r3, #0]
	Menu_Show();
 8006dda:	f7ff fec1 	bl	8006b60 <Menu_Show>
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd90      	pop	{r4, r7, pc}
 8006de6:	bf00      	nop
 8006de8:	2000035c 	.word	0x2000035c
 8006dec:	2000035d 	.word	0x2000035d

08006df0 <Menu_SelectPrev>:

void Menu_SelectPrev() {
 8006df0:	b598      	push	{r3, r4, r7, lr}
 8006df2:	af00      	add	r7, sp, #0
	if(menuindex > 0)
 8006df4:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006df6:	f993 3000 	ldrsb.w	r3, [r3]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	dd1a      	ble.n	8006e34 <Menu_SelectPrev+0x44>
	{
		if(menuindex == menufirstpos) menufirstpos--;
 8006dfe:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006e00:	f993 2000 	ldrsb.w	r2, [r3]
 8006e04:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <Menu_SelectPrev+0x98>)
 8006e06:	f993 3000 	ldrsb.w	r3, [r3]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d108      	bne.n	8006e20 <Menu_SelectPrev+0x30>
 8006e0e:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <Menu_SelectPrev+0x98>)
 8006e10:	f993 3000 	ldrsb.w	r3, [r3]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	b25a      	sxtb	r2, r3
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <Menu_SelectPrev+0x98>)
 8006e1e:	701a      	strb	r2, [r3, #0]
		menuindex--;
 8006e20:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006e22:	f993 3000 	ldrsb.w	r3, [r3]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	b25a      	sxtb	r2, r3
 8006e2e:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e023      	b.n	8006e7c <Menu_SelectPrev+0x8c>
	}
	 else
	{
		if(menufirstpos == 0)
 8006e34:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <Menu_SelectPrev+0x98>)
 8006e36:	f993 3000 	ldrsb.w	r3, [r3]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d116      	bne.n	8006e6c <Menu_SelectPrev+0x7c>
		{
			menuindex=Menu_GetMenuItemsNo()-1;
 8006e3e:	f7ff fe41 	bl	8006ac4 <Menu_GetMenuItemsNo>
 8006e42:	4603      	mov	r3, r0
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	b25a      	sxtb	r2, r3
 8006e4a:	4b0e      	ldr	r3, [pc, #56]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006e4c:	701a      	strb	r2, [r3, #0]
			if(Menu_GetMenuItemsNo()>Menu_GetMenuRows()) menufirstpos = menuindex;
 8006e4e:	f7ff fe39 	bl	8006ac4 <Menu_GetMenuItemsNo>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461c      	mov	r4, r3
 8006e56:	f7ff fe6f 	bl	8006b38 <Menu_GetMenuRows>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	d90d      	bls.n	8006e7c <Menu_SelectPrev+0x8c>
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006e62:	f993 2000 	ldrsb.w	r2, [r3]
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <Menu_SelectPrev+0x98>)
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e007      	b.n	8006e7c <Menu_SelectPrev+0x8c>
		} else menuindex = Menu_GetMenuItemsNo()-1;
 8006e6c:	f7ff fe2a 	bl	8006ac4 <Menu_GetMenuItemsNo>
 8006e70:	4603      	mov	r3, r0
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	b25a      	sxtb	r2, r3
 8006e78:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <Menu_SelectPrev+0x94>)
 8006e7a:	701a      	strb	r2, [r3, #0]
	}
	Menu_Show();
 8006e7c:	f7ff fe70 	bl	8006b60 <Menu_Show>
}
 8006e80:	bf00      	nop
 8006e82:	bd98      	pop	{r3, r4, r7, pc}
 8006e84:	2000035c 	.word	0x2000035c
 8006e88:	2000035d 	.word	0x2000035d

08006e8c <Menu_Back>:

void Menu_Back() {
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
	menufirstpos = 0;
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <Menu_Back+0x24>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
	menuindex = 0;
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <Menu_Back+0x28>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	701a      	strb	r2, [r3, #0]
	currMenuPtr = currMenuPtr->parent;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <Menu_Back+0x2c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4a05      	ldr	r2, [pc, #20]	; (8006eb8 <Menu_Back+0x2c>)
 8006ea4:	6013      	str	r3, [r2, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	2000035d 	.word	0x2000035d
 8006eb4:	2000035c 	.word	0x2000035c
 8006eb8:	20000044 	.word	0x20000044

08006ebc <Menu_Click>:

void Menu_Click() {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
  const struct menuitem *tmpmenuitem = Menu_GetMenuItem(menuindex);
 8006ec2:	4b14      	ldr	r3, [pc, #80]	; (8006f14 <Menu_Click+0x58>)
 8006ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fe16 	bl	8006afc <Menu_GetMenuItem>
 8006ed0:	60f8      	str	r0, [r7, #12]
  const struct menuitem *submenu = tmpmenuitem->submenu;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	60bb      	str	r3, [r7, #8]

  menuitemfuncptr mfptr = tmpmenuitem->menuitemfunc;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	607b      	str	r3, [r7, #4]

  if(mfptr) {
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <Menu_Click+0x2c>
	  (*mfptr)();
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4798      	blx	r3
  }
  if(submenu) {
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <Menu_Click+0x44>
	  currMenuPtr = submenu;
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <Menu_Click+0x5c>)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	6013      	str	r3, [r2, #0]
	  menuindex = 0;
 8006ef4:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <Menu_Click+0x58>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
	  menufirstpos = 0;
 8006efa:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <Menu_Click+0x60>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
   }
  UG_FillScreen( C_BLACK );
 8006f00:	2000      	movs	r0, #0
 8006f02:	f000 fcb9 	bl	8007878 <UG_FillScreen>
  Menu_Show();
 8006f06:	f7ff fe2b 	bl	8006b60 <Menu_Show>
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000035c 	.word	0x2000035c
 8006f18:	20000044 	.word	0x20000044
 8006f1c:	2000035d 	.word	0x2000035d

08006f20 <GUI_init>:

void GUI_init(void) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0

  /* -------------------------------------------------------------------------------- */
  /* Define µGUI structure (ST7735 128x160)                              			  */
  /* -------------------------------------------------------------------------------- */
  UG_Init(&gui1,(void(*)(UG_S16,UG_S16,UG_COLOR))ST7735_DrawPixel,ST7735_HEIGHT,ST7735_WIDTH);
 8006f24:	2382      	movs	r3, #130	; 0x82
 8006f26:	22a1      	movs	r2, #161	; 0xa1
 8006f28:	4909      	ldr	r1, [pc, #36]	; (8006f50 <GUI_init+0x30>)
 8006f2a:	480a      	ldr	r0, [pc, #40]	; (8006f54 <GUI_init+0x34>)
 8006f2c:	f000 fbe2 	bl	80076f4 <UG_Init>

  /* Clear Screen */
  UG_FillScreen( C_BLACK );
 8006f30:	2000      	movs	r0, #0
 8006f32:	f000 fca1 	bl	8007878 <UG_FillScreen>
  UG_FontSelect ( &FONT_6X8 ) ;
 8006f36:	4808      	ldr	r0, [pc, #32]	; (8006f58 <GUI_init+0x38>)
 8006f38:	f000 fc60 	bl	80077fc <UG_FontSelect>
  UG_SetBackcolor ( C_BLACK ) ;
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f000 feb1 	bl	8007ca4 <UG_SetBackcolor>
  UG_SetForecolor ( C_CYAN ) ;
 8006f42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006f46:	f000 fe9d 	bl	8007c84 <UG_SetForecolor>
}
 8006f4a:	bf00      	nop
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	08006569 	.word	0x08006569
 8006f54:	2000059c 	.word	0x2000059c
 8006f58:	0800f19c 	.word	0x0800f19c

08006f5c <func_A1>:
//
/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 1 -- */
/* -------------------------------------------------------------------------------- */

void func_A1() {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <func_A1+0x1c>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <func_A1+0x1c>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH1, true);
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	2000      	movs	r0, #0
 8006f70:	f7fa fa68 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8006f74:	bf00      	nop
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000478 	.word	0x20000478

08006f7c <func_A2>:
void func_A2() {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <func_A2+0x1c>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006f86:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <func_A2+0x1c>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH1, true);
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f7fa fad6 	bl	8001540 <DAQ_channel_set_flag_th_limit>
}
 8006f94:	bf00      	nop
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20000478 	.word	0x20000478

08006f9c <func_A3>:

void func_A3() {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <func_A3+0x1c>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <func_A3+0x1c>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH1, true);
 8006fac:	2101      	movs	r1, #1
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7fa fb38 	bl	8001624 <DAQ_channel_set_flag_ph_limit>
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000478 	.word	0x20000478

08006fbc <func_A4>:

void func_A4() {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <func_A4+0x1c>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006fc6:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <func_A4+0x1c>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH1, true);
 8006fcc:	2101      	movs	r1, #1
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f7fa fa9c 	bl	800150c <DAQ_channel_set_flag_save>
}
 8006fd4:	bf00      	nop
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000478 	.word	0x20000478

08006fdc <func_B1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 2 -- */
/* -------------------------------------------------------------------------------- */
void func_B1(){
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <func_B1+0x1c>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8006fe6:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <func_B1+0x1c>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH2, true);
 8006fec:	2101      	movs	r1, #1
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f7fa fa28 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8006ff4:	bf00      	nop
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000478 	.word	0x20000478

08006ffc <func_B2>:

void func_B2() {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <func_B2+0x1c>)
 8007002:	2201      	movs	r2, #1
 8007004:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007006:	4b04      	ldr	r3, [pc, #16]	; (8007018 <func_B2+0x1c>)
 8007008:	2201      	movs	r2, #1
 800700a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH2, true);
 800700c:	2101      	movs	r1, #1
 800700e:	2001      	movs	r0, #1
 8007010:	f7fa fa96 	bl	8001540 <DAQ_channel_set_flag_th_limit>
}
 8007014:	bf00      	nop
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000478 	.word	0x20000478

0800701c <func_B3>:

void func_B3() {
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <func_B3+0x1c>)
 8007022:	2201      	movs	r2, #1
 8007024:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007026:	4b04      	ldr	r3, [pc, #16]	; (8007038 <func_B3+0x1c>)
 8007028:	2201      	movs	r2, #1
 800702a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH2, true);
 800702c:	2101      	movs	r1, #1
 800702e:	2001      	movs	r0, #1
 8007030:	f7fa faf8 	bl	8001624 <DAQ_channel_set_flag_ph_limit>
}
 8007034:	bf00      	nop
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20000478 	.word	0x20000478

0800703c <func_B4>:

void func_B4() {
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <func_B4+0x1c>)
 8007042:	2201      	movs	r2, #1
 8007044:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007046:	4b04      	ldr	r3, [pc, #16]	; (8007058 <func_B4+0x1c>)
 8007048:	2201      	movs	r2, #1
 800704a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH2, true);
 800704c:	2101      	movs	r1, #1
 800704e:	2001      	movs	r0, #1
 8007050:	f7fa fa5c 	bl	800150c <DAQ_channel_set_flag_save>
}
 8007054:	bf00      	nop
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000478 	.word	0x20000478

0800705c <func_C1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 3 -- */
/* -------------------------------------------------------------------------------- */
void func_C1() {
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <func_C1+0x1c>)
 8007062:	2201      	movs	r2, #1
 8007064:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007066:	4b04      	ldr	r3, [pc, #16]	; (8007078 <func_C1+0x1c>)
 8007068:	2201      	movs	r2, #1
 800706a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH3, true);
 800706c:	2101      	movs	r1, #1
 800706e:	2002      	movs	r0, #2
 8007070:	f7fa f9e8 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 8007074:	bf00      	nop
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000478 	.word	0x20000478

0800707c <func_C2>:
void func_C2() {
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <func_C2+0x1c>)
 8007082:	2201      	movs	r2, #1
 8007084:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <func_C2+0x1c>)
 8007088:	2201      	movs	r2, #1
 800708a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH3, true);
 800708c:	2101      	movs	r1, #1
 800708e:	2002      	movs	r0, #2
 8007090:	f7fa fa56 	bl	8001540 <DAQ_channel_set_flag_th_limit>
}
 8007094:	bf00      	nop
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000478 	.word	0x20000478

0800709c <func_C3>:

void func_C3() {
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <func_C3+0x1c>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <func_C3+0x1c>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH3, true);
 80070ac:	2101      	movs	r1, #1
 80070ae:	2002      	movs	r0, #2
 80070b0:	f7fa fab8 	bl	8001624 <DAQ_channel_set_flag_ph_limit>
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000478 	.word	0x20000478

080070bc <func_C4>:

void func_C4() {
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <func_C4+0x1c>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 80070c6:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <func_C4+0x1c>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH3, true);
 80070cc:	2101      	movs	r1, #1
 80070ce:	2002      	movs	r0, #2
 80070d0:	f7fa fa1c 	bl	800150c <DAQ_channel_set_flag_save>
}
 80070d4:	bf00      	nop
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000478 	.word	0x20000478

080070dc <func_D1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 4 -- */
/* -------------------------------------------------------------------------------- */
void func_D1(){
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <func_D1+0x1c>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 80070e6:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <func_D1+0x1c>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_enable(DAQ_CH4, true);
 80070ec:	2101      	movs	r1, #1
 80070ee:	2003      	movs	r0, #3
 80070f0:	f7fa f9a8 	bl	8001444 <DAQ_channel_set_flag_enable>
}
 80070f4:	bf00      	nop
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000478 	.word	0x20000478

080070fc <func_D2>:

void func_D2() {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <func_D2+0x1c>)
 8007102:	2201      	movs	r2, #1
 8007104:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007106:	4b04      	ldr	r3, [pc, #16]	; (8007118 <func_D2+0x1c>)
 8007108:	2201      	movs	r2, #1
 800710a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_th_limit(DAQ_CH4, true);
 800710c:	2101      	movs	r1, #1
 800710e:	2003      	movs	r0, #3
 8007110:	f7fa fa16 	bl	8001540 <DAQ_channel_set_flag_th_limit>
}
 8007114:	bf00      	nop
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20000478 	.word	0x20000478

0800711c <func_D3>:

void func_D3() {
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <func_D3+0x1c>)
 8007122:	2201      	movs	r2, #1
 8007124:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <func_D3+0x1c>)
 8007128:	2201      	movs	r2, #1
 800712a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_ph_limit(DAQ_CH4, true);
 800712c:	2101      	movs	r1, #1
 800712e:	2003      	movs	r0, #3
 8007130:	f7fa fa78 	bl	8001624 <DAQ_channel_set_flag_ph_limit>
}
 8007134:	bf00      	nop
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000478 	.word	0x20000478

0800713c <func_D4>:

void func_D4() {
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <func_D4+0x1c>)
 8007142:	2201      	movs	r2, #1
 8007144:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <func_D4+0x1c>)
 8007148:	2201      	movs	r2, #1
 800714a:	70da      	strb	r2, [r3, #3]
	DAQ_channel_set_flag_save(DAQ_CH4, true);
 800714c:	2101      	movs	r1, #1
 800714e:	2003      	movs	r0, #3
 8007150:	f7fa f9dc 	bl	800150c <DAQ_channel_set_flag_save>
}
 8007154:	bf00      	nop
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000478 	.word	0x20000478

0800715c <func_display>:

/* -------------------------------------------------------------------------------- */
/* -- DISPLAY VALUES -- */
/* -------------------------------------------------------------------------------- */
void func_display(void) {
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
	menu_flags.flag_clear_screen = true;
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <func_display+0x20>)
 8007162:	2201      	movs	r2, #1
 8007164:	705a      	strb	r2, [r3, #1]
	menu_flags.flag_function = true;
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <func_display+0x20>)
 8007168:	2201      	movs	r2, #1
 800716a:	70da      	strb	r2, [r3, #3]
	menu_flags.flag_display_measurements = true;
 800716c:	4b03      	ldr	r3, [pc, #12]	; (800717c <func_display+0x20>)
 800716e:	2201      	movs	r2, #1
 8007170:	729a      	strb	r2, [r3, #10]
}
 8007172:	bf00      	nop
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	20000478 	.word	0x20000478

08007180 <MENU_CHANGE_cursor>:
	menu_flags.flag_CHANGE_digit = false;

	menu_flags.flag_display_measurements = false;
}
//------------------------------------------
void MENU_CHANGE_cursor(struct cursor *c) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]

	if (encoder_step_clockwise(&encoder_1) == true) {
 8007188:	4817      	ldr	r0, [pc, #92]	; (80071e8 <MENU_CHANGE_cursor+0x68>)
 800718a:	f7ff fc5b 	bl	8006a44 <encoder_step_clockwise>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00e      	beq.n	80071b2 <MENU_CHANGE_cursor+0x32>
		if((c->place_value == 0)) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <MENU_CHANGE_cursor+0x24>
			c->place_value = 8;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2208      	movs	r2, #8
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e01a      	b.n	80071da <MENU_CHANGE_cursor+0x5a>
		}
		else {
			(c->place_value)--;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e013      	b.n	80071da <MENU_CHANGE_cursor+0x5a>
		}
	}
	else if (encoder_step_counterclockwise(&encoder_1) == true) {
 80071b2:	480d      	ldr	r0, [pc, #52]	; (80071e8 <MENU_CHANGE_cursor+0x68>)
 80071b4:	f7ff fc5b 	bl	8006a6e <encoder_step_counterclockwise>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <MENU_CHANGE_cursor+0x5a>
		if( (c->place_value == 8) ) {
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d103      	bne.n	80071ce <MENU_CHANGE_cursor+0x4e>
			c->place_value = 0;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e005      	b.n	80071da <MENU_CHANGE_cursor+0x5a>
		}
		else {
			(c->place_value)++;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	701a      	strb	r2, [r3, #0]
		}

	}

	MENU_SHOW_cursor(c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9be 	bl	800755c <MENU_SHOW_cursor>

}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	200006bc 	.word	0x200006bc

080071ec <MENU_CHANGE_digit>:

uint32_t MENU_CHANGE_digit(uint32_t value) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

	if (encoder_step_clockwise(&encoder_1) == true) {
 80071f4:	4814      	ldr	r0, [pc, #80]	; (8007248 <MENU_CHANGE_digit+0x5c>)
 80071f6:	f7ff fc25 	bl	8006a44 <encoder_step_clockwise>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <MENU_CHANGE_digit+0x2c>
		value = MENU_CALC_value(value, 1, c.place_value);
 8007200:	4b12      	ldr	r3, [pc, #72]	; (800724c <MENU_CHANGE_digit+0x60>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f8bb 	bl	8007384 <MENU_CALC_value>
 800720e:	6078      	str	r0, [r7, #4]
		MENU_SHOW_value(value);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f941 	bl	8007498 <MENU_SHOW_value>
 8007216:	e011      	b.n	800723c <MENU_CHANGE_digit+0x50>
	}
	else if (encoder_step_counterclockwise(&encoder_1) == true) {
 8007218:	480b      	ldr	r0, [pc, #44]	; (8007248 <MENU_CHANGE_digit+0x5c>)
 800721a:	f7ff fc28 	bl	8006a6e <encoder_step_counterclockwise>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <MENU_CHANGE_digit+0x50>
		value = MENU_CALC_value(value, -1,  c.place_value);
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <MENU_CHANGE_digit+0x60>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	f04f 31ff 	mov.w	r1, #4294967295
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8a8 	bl	8007384 <MENU_CALC_value>
 8007234:	6078      	str	r0, [r7, #4]
		MENU_SHOW_value(value);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f92e 	bl	8007498 <MENU_SHOW_value>
	}

	return value;
 800723c:	687b      	ldr	r3, [r7, #4]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	200006bc 	.word	0x200006bc
 800724c:	20000440 	.word	0x20000440

08007250 <MENU_CHANGE_value>:

uint32_t MENU_CHANGE_value(uint32_t value) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af04      	add	r7, sp, #16
 8007256:	6078      	str	r0, [r7, #4]

	MENU_SHOW_value(value);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f91d 	bl	8007498 <MENU_SHOW_value>

	if(menu_flags.flag_CHANGE_cursor) {
 800725e:	4b42      	ldr	r3, [pc, #264]	; (8007368 <MENU_CHANGE_value+0x118>)
 8007260:	7a1b      	ldrb	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <MENU_CHANGE_value+0x1c>
		MENU_CHANGE_cursor(&c);
 8007266:	4841      	ldr	r0, [pc, #260]	; (800736c <MENU_CHANGE_value+0x11c>)
 8007268:	f7ff ff8a 	bl	8007180 <MENU_CHANGE_cursor>
	}
	if(menu_flags.flag_CHANGE_digit) {
 800726c:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <MENU_CHANGE_value+0x118>)
 800726e:	7a5b      	ldrb	r3, [r3, #9]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <MENU_CHANGE_value+0x2c>
		value = MENU_CHANGE_digit(value);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ffb9 	bl	80071ec <MENU_CHANGE_digit>
 800727a:	6078      	str	r0, [r7, #4]
	}

	if(c.place_value != 8 && encoder_enter(&encoder_1)) {
 800727c:	4b3b      	ldr	r3, [pc, #236]	; (800736c <MENU_CHANGE_value+0x11c>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d01a      	beq.n	80072ba <MENU_CHANGE_value+0x6a>
 8007284:	483a      	ldr	r0, [pc, #232]	; (8007370 <MENU_CHANGE_value+0x120>)
 8007286:	f7ff fc07 	bl	8006a98 <encoder_enter>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d014      	beq.n	80072ba <MENU_CHANGE_value+0x6a>
		if(menu_flags.flag_CHANGE_cursor){
 8007290:	4b35      	ldr	r3, [pc, #212]	; (8007368 <MENU_CHANGE_value+0x118>)
 8007292:	7a1b      	ldrb	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <MENU_CHANGE_value+0x56>
			menu_flags.flag_CHANGE_cursor = false;
 8007298:	4b33      	ldr	r3, [pc, #204]	; (8007368 <MENU_CHANGE_value+0x118>)
 800729a:	2200      	movs	r2, #0
 800729c:	721a      	strb	r2, [r3, #8]
			menu_flags.flag_CHANGE_digit = true;
 800729e:	4b32      	ldr	r3, [pc, #200]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	725a      	strb	r2, [r3, #9]
 80072a4:	e009      	b.n	80072ba <MENU_CHANGE_value+0x6a>
		}
		else if(menu_flags.flag_CHANGE_digit){
 80072a6:	4b30      	ldr	r3, [pc, #192]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072a8:	7a5b      	ldrb	r3, [r3, #9]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <MENU_CHANGE_value+0x6a>
			menu_flags.flag_CHANGE_digit = false;
 80072ae:	4b2e      	ldr	r3, [pc, #184]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	725a      	strb	r2, [r3, #9]
			menu_flags.flag_CHANGE_cursor = true;
 80072b4:	4b2c      	ldr	r3, [pc, #176]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	721a      	strb	r2, [r3, #8]
		}

	}

	if( c.place_value == 8 && encoder_enter(&encoder_1)) {
 80072ba:	4b2c      	ldr	r3, [pc, #176]	; (800736c <MENU_CHANGE_value+0x11c>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d11a      	bne.n	80072f8 <MENU_CHANGE_value+0xa8>
 80072c2:	482b      	ldr	r0, [pc, #172]	; (8007370 <MENU_CHANGE_value+0x120>)
 80072c4:	f7ff fbe8 	bl	8006a98 <encoder_enter>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d014      	beq.n	80072f8 <MENU_CHANGE_value+0xa8>
		menu_flags.flag_CHANGE_cursor = false;
 80072ce:	4b26      	ldr	r3, [pc, #152]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	721a      	strb	r2, [r3, #8]
		menu_flags.flag_CHANGE_digit = false;
 80072d4:	4b24      	ldr	r3, [pc, #144]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	725a      	strb	r2, [r3, #9]
		menu_flags.flag_CHANGE_value = false;
 80072da:	4b23      	ldr	r3, [pc, #140]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072dc:	2200      	movs	r2, #0
 80072de:	71da      	strb	r2, [r3, #7]
		menu_flags.flag_function = true;
 80072e0:	4b21      	ldr	r3, [pc, #132]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	70da      	strb	r2, [r3, #3]
		menu_flags.flag_show_menu = true;
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	709a      	strb	r2, [r3, #2]
		menu_flags.flag_change_finish = true;
 80072ec:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	711a      	strb	r2, [r3, #4]
		c.place_value = 2;
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <MENU_CHANGE_value+0x11c>)
 80072f4:	2202      	movs	r2, #2
 80072f6:	701a      	strb	r2, [r3, #0]
	}

	if(menu_flags.flag_CHANGE_temperature) {
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <MENU_CHANGE_value+0x118>)
 80072fa:	795b      	ldrb	r3, [r3, #5]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <MENU_CHANGE_value+0xdc>
		ST7735_WriteString(2, 2+(30*0), "Set temperature limit: ", Font_7x10, WHITE, BLACK);
 8007300:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <MENU_CHANGE_value+0x124>)
 8007302:	2200      	movs	r2, #0
 8007304:	9202      	str	r2, [sp, #8]
 8007306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	9200      	str	r2, [sp, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a19      	ldr	r2, [pc, #100]	; (8007378 <MENU_CHANGE_value+0x128>)
 8007314:	2102      	movs	r1, #2
 8007316:	2002      	movs	r0, #2
 8007318:	f7ff f9dc 	bl	80066d4 <ST7735_WriteString>
		if(value>10000) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007322:	4293      	cmp	r3, r2
 8007324:	d902      	bls.n	800732c <MENU_CHANGE_value+0xdc>
			value = 10000;
 8007326:	f242 7310 	movw	r3, #10000	; 0x2710
 800732a:	607b      	str	r3, [r7, #4]
		}
	}
	if(menu_flags.flag_CHANGE_power) {
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <MENU_CHANGE_value+0x118>)
 800732e:	799b      	ldrb	r3, [r3, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d013      	beq.n	800735c <MENU_CHANGE_value+0x10c>
		ST7735_WriteString(2, 2+(30*0), "Set power limit: ", Font_7x10, WHITE, BLACK);
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <MENU_CHANGE_value+0x124>)
 8007336:	2200      	movs	r2, #0
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	9200      	str	r2, [sp, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a0d      	ldr	r2, [pc, #52]	; (800737c <MENU_CHANGE_value+0x12c>)
 8007348:	2102      	movs	r1, #2
 800734a:	2002      	movs	r0, #2
 800734c:	f7ff f9c2 	bl	80066d4 <ST7735_WriteString>
		if(value>99900) {
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a0b      	ldr	r2, [pc, #44]	; (8007380 <MENU_CHANGE_value+0x130>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d901      	bls.n	800735c <MENU_CHANGE_value+0x10c>
			value = 99900;
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <MENU_CHANGE_value+0x130>)
 800735a:	607b      	str	r3, [r7, #4]
		}
	}
	return value;
 800735c:	687b      	ldr	r3, [r7, #4]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000478 	.word	0x20000478
 800736c:	20000440 	.word	0x20000440
 8007370:	200006bc 	.word	0x200006bc
 8007374:	20000034 	.word	0x20000034
 8007378:	0800cc10 	.word	0x0800cc10
 800737c:	0800cc28 	.word	0x0800cc28
 8007380:	0001863c 	.word	0x0001863c

08007384 <MENU_CALC_value>:

uint32_t MENU_CALC_value(uint32_t value_in, int8_t direction, uint8_t dec) {
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
 8007390:	4613      	mov	r3, r2
 8007392:	70bb      	strb	r3, [r7, #2]
	int32_t value_out = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

	switch (dec)
 8007398:	78bb      	ldrb	r3, [r7, #2]
 800739a:	2b07      	cmp	r3, #7
 800739c:	d861      	bhi.n	8007462 <MENU_CALC_value+0xde>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <MENU_CALC_value+0x20>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073d1 	.word	0x080073d1
 80073ac:	080073e7 	.word	0x080073e7
 80073b0:	080073fb 	.word	0x080073fb
 80073b4:	08007411 	.word	0x08007411
 80073b8:	08007427 	.word	0x08007427
 80073bc:	0800743b 	.word	0x0800743b
 80073c0:	0800744f 	.word	0x0800744f
	{
	case 0:
		value_out = value_in + ( (int32_t) direction * 1);
 80073c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
		break;
 80073ce:	e049      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 1:
		value_out = value_in + ( (int32_t) direction * 10);
 80073d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
		break;
 80073e4:	e03e      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 2:
		value_out = value_in + ( (int32_t) direction * 100);
 80073e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ea:	2264      	movs	r2, #100	; 0x64
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
		break;
 80073f8:	e034      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 3:
		value_out = value_in + ( (int32_t) direction * 1000);
 80073fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
		break;
 800740e:	e029      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 4:
		value_out = value_in + ( (int32_t) direction * 10000);
 8007410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007414:	f242 7210 	movw	r2, #10000	; 0x2710
 8007418:	fb02 f303 	mul.w	r3, r2, r3
 800741c:	461a      	mov	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
		break;
 8007424:	e01e      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 5:
		value_out = value_in + ( (int32_t) direction * 100000);
 8007426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742a:	4a17      	ldr	r2, [pc, #92]	; (8007488 <MENU_CALC_value+0x104>)
 800742c:	fb02 f303 	mul.w	r3, r2, r3
 8007430:	461a      	mov	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
		break;
 8007438:	e014      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 6:
		value_out = value_in + ( (int32_t) direction * 1000000);
 800743a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800743e:	4a13      	ldr	r2, [pc, #76]	; (800748c <MENU_CALC_value+0x108>)
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	461a      	mov	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
		break;
 800744c:	e00a      	b.n	8007464 <MENU_CALC_value+0xe0>
	case 7:
		value_out = value_in + ( (int32_t) direction * 10000000);
 800744e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007452:	4a0f      	ldr	r2, [pc, #60]	; (8007490 <MENU_CALC_value+0x10c>)
 8007454:	fb02 f303 	mul.w	r3, r2, r3
 8007458:	461a      	mov	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
		break;
 8007460:	e000      	b.n	8007464 <MENU_CALC_value+0xe0>
	default:
		break;
 8007462:	bf00      	nop
	}

	if (value_out < 0) value_out = 0;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	da01      	bge.n	800746e <MENU_CALC_value+0xea>
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
	if (value_out > 99999999) value_out = 99999999;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <MENU_CALC_value+0x110>)
 8007472:	4293      	cmp	r3, r2
 8007474:	dd01      	ble.n	800747a <MENU_CALC_value+0xf6>
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <MENU_CALC_value+0x110>)
 8007478:	60fb      	str	r3, [r7, #12]
	return (uint32_t) value_out;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	000186a0 	.word	0x000186a0
 800748c:	000f4240 	.word	0x000f4240
 8007490:	00989680 	.word	0x00989680
 8007494:	05f5e0ff 	.word	0x05f5e0ff

08007498 <MENU_SHOW_value>:

void MENU_SHOW_value(uint32_t value) {
 8007498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749a:	b091      	sub	sp, #68	; 0x44
 800749c:	af06      	add	r7, sp, #24
 800749e:	6078      	str	r0, [r7, #4]
	char buffer[20];
	uint8_t cijfer[8];

	if (value <= 99999999)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a2a      	ldr	r2, [pc, #168]	; (800754c <MENU_SHOW_value+0xb4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d84d      	bhi.n	8007544 <MENU_SHOW_value+0xac>
	{
		for (uint8_t i = 0; i < 8; i++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074ae:	e01e      	b.n	80074ee <MENU_SHOW_value+0x56>
		{
			cijfer[i] = (uint8_t) (value % 10) + 48;
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4b27      	ldr	r3, [pc, #156]	; (8007550 <MENU_SHOW_value+0xb8>)
 80074b4:	fba3 2301 	umull	r2, r3, r3, r1
 80074b8:	08da      	lsrs	r2, r3, #3
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	1aca      	subs	r2, r1, r3
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ca:	3230      	adds	r2, #48	; 0x30
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80074d2:	440b      	add	r3, r1
 80074d4:	f803 2c20 	strb.w	r2, [r3, #-32]
			value /= 10;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <MENU_SHOW_value+0xb8>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < 8; i++)
 80074e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e8:	3301      	adds	r3, #1
 80074ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f2:	2b07      	cmp	r3, #7
 80074f4:	d9dc      	bls.n	80074b0 <MENU_SHOW_value+0x18>
		}

		sprintf(buffer, "%c%c%c %c%c%c.%c%c", cijfer[7], cijfer[6], cijfer[5], cijfer[4], cijfer[3], cijfer[2], cijfer[1], cijfer[0]);
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	469c      	mov	ip, r3
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	469e      	mov	lr, r3
 80074fe:	7b7b      	ldrb	r3, [r7, #13]
 8007500:	7b3a      	ldrb	r2, [r7, #12]
 8007502:	7af9      	ldrb	r1, [r7, #11]
 8007504:	7ab8      	ldrb	r0, [r7, #10]
 8007506:	4604      	mov	r4, r0
 8007508:	7a78      	ldrb	r0, [r7, #9]
 800750a:	4605      	mov	r5, r0
 800750c:	7a38      	ldrb	r0, [r7, #8]
 800750e:	4606      	mov	r6, r0
 8007510:	f107 0010 	add.w	r0, r7, #16
 8007514:	9605      	str	r6, [sp, #20]
 8007516:	9504      	str	r5, [sp, #16]
 8007518:	9403      	str	r4, [sp, #12]
 800751a:	9102      	str	r1, [sp, #8]
 800751c:	9201      	str	r2, [sp, #4]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4673      	mov	r3, lr
 8007522:	4662      	mov	r2, ip
 8007524:	490b      	ldr	r1, [pc, #44]	; (8007554 <MENU_SHOW_value+0xbc>)
 8007526:	f001 fa9b 	bl	8008a60 <siprintf>
		//UG_FillFrame(2, gui1.font.font_height, UG_GetXDim(), 2*gui1.font.font_height, C_BLACK);
		UG_PutString(2, 2*(gui1.font.font_height), buffer );
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <MENU_SHOW_value+0xc0>)
 800752c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8007530:	b29b      	uxth	r3, r3
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	b29b      	uxth	r3, r3
 8007536:	b21b      	sxth	r3, r3
 8007538:	f107 0210 	add.w	r2, r7, #16
 800753c:	4619      	mov	r1, r3
 800753e:	2002      	movs	r0, #2
 8007540:	f000 fa2c 	bl	800799c <UG_PutString>

	}

}
 8007544:	bf00      	nop
 8007546:	372c      	adds	r7, #44	; 0x2c
 8007548:	46bd      	mov	sp, r7
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754c:	05f5e0ff 	.word	0x05f5e0ff
 8007550:	cccccccd 	.word	0xcccccccd
 8007554:	0800cc3c 	.word	0x0800cc3c
 8007558:	2000059c 	.word	0x2000059c

0800755c <MENU_SHOW_cursor>:

void MENU_SHOW_cursor(struct cursor *c) {
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b087      	sub	sp, #28
 8007560:	af02      	add	r7, sp, #8
 8007562:	6078      	str	r0, [r7, #4]
	uint8_t cursor_position = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]

	switch (c->place_value)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b08      	cmp	r3, #8
 800756e:	d85e      	bhi.n	800762e <MENU_SHOW_cursor+0xd2>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <MENU_SHOW_cursor+0x1c>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075b3 	.word	0x080075b3
 8007580:	080075c5 	.word	0x080075c5
 8007584:	080075dd 	.word	0x080075dd
 8007588:	080075f3 	.word	0x080075f3
 800758c:	08007605 	.word	0x08007605
 8007590:	08007615 	.word	0x08007615
 8007594:	08007623 	.word	0x08007623
 8007598:	08007629 	.word	0x08007629
	{
	case 0:
		cursor_position = 2+(9*gui1.font.font_width);
 800759c:	4b52      	ldr	r3, [pc, #328]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 800759e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	00d2      	lsls	r2, r2, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	3302      	adds	r3, #2
 80075ae:	73fb      	strb	r3, [r7, #15]
		break;
 80075b0:	e03e      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 1:
		cursor_position = 2+(8*gui1.font.font_width);
 80075b2:	4b4d      	ldr	r3, [pc, #308]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 80075b4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	3302      	adds	r3, #2
 80075c0:	73fb      	strb	r3, [r7, #15]
		break;
 80075c2:	e035      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 2:
		cursor_position = 2+(6*gui1.font.font_width);
 80075c4:	4b48      	ldr	r3, [pc, #288]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 80075c6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	0052      	lsls	r2, r2, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	3302      	adds	r3, #2
 80075d8:	73fb      	strb	r3, [r7, #15]
		break;
 80075da:	e029      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 3:
		cursor_position = 2+(5*gui1.font.font_width);
 80075dc:	4b42      	ldr	r3, [pc, #264]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 80075de:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	0092      	lsls	r2, r2, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3302      	adds	r3, #2
 80075ee:	73fb      	strb	r3, [r7, #15]
		break;
 80075f0:	e01e      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 4:
		cursor_position = 2+(4*gui1.font.font_width);
 80075f2:	4b3d      	ldr	r3, [pc, #244]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 80075f4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	3302      	adds	r3, #2
 8007600:	73fb      	strb	r3, [r7, #15]
		break;
 8007602:	e015      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 5:
		cursor_position = 2+(2*gui1.font.font_width);
 8007604:	4b38      	ldr	r3, [pc, #224]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 8007606:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800760a:	3301      	adds	r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	73fb      	strb	r3, [r7, #15]
		break;
 8007612:	e00d      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 6:
		cursor_position = 2+(1*gui1.font.font_width);
 8007614:	4b34      	ldr	r3, [pc, #208]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 8007616:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800761a:	b2db      	uxtb	r3, r3
 800761c:	3302      	adds	r3, #2
 800761e:	73fb      	strb	r3, [r7, #15]
		break;
 8007620:	e006      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 7:
		cursor_position = 2+(0*gui1.font.font_width);
 8007622:	2302      	movs	r3, #2
 8007624:	73fb      	strb	r3, [r7, #15]
		break;
 8007626:	e003      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	case 8:
		cursor_position = 2+(0*gui1.font.font_width);
 8007628:	2302      	movs	r3, #2
 800762a:	73fb      	strb	r3, [r7, #15]
		break;
 800762c:	e000      	b.n	8007630 <MENU_SHOW_cursor+0xd4>
	default:
		break;
 800762e:	bf00      	nop
	}

	if(c->place_value != c->previous_place_value) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	429a      	cmp	r2, r3
 800763a:	d02e      	beq.n	800769a <MENU_SHOW_cursor+0x13e>
		UG_FillFrame(0, 3*gui1.font.font_height, UG_GetXDim(), 4*gui1.font.font_height, C_BLACK);
 800763c:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 800763e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	0052      	lsls	r2, r2, #1
 8007648:	4413      	add	r3, r2
 800764a:	b29b      	uxth	r3, r3
 800764c:	b21c      	sxth	r4, r3
 800764e:	f000 fb39 	bl	8007cc4 <UG_GetXDim>
 8007652:	4603      	mov	r3, r0
 8007654:	4619      	mov	r1, r3
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 8007658:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800765c:	b29b      	uxth	r3, r3
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	b29b      	uxth	r3, r3
 8007662:	b21b      	sxth	r3, r3
 8007664:	2200      	movs	r2, #0
 8007666:	9200      	str	r2, [sp, #0]
 8007668:	460a      	mov	r2, r1
 800766a:	4621      	mov	r1, r4
 800766c:	2000      	movs	r0, #0
 800766e:	f000 f925 	bl	80078bc <UG_FillFrame>
		UG_PutString( cursor_position, gui1.font.font_height+(2*gui1.font.font_height), "^" );
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	b21b      	sxth	r3, r3
 8007676:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 8007678:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800767c:	b292      	uxth	r2, r2
 800767e:	4611      	mov	r1, r2
 8007680:	0049      	lsls	r1, r1, #1
 8007682:	440a      	add	r2, r1
 8007684:	b292      	uxth	r2, r2
 8007686:	b211      	sxth	r1, r2
 8007688:	4a18      	ldr	r2, [pc, #96]	; (80076ec <MENU_SHOW_cursor+0x190>)
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f986 	bl	800799c <UG_PutString>
		c->previous_place_value = c->place_value;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	705a      	strb	r2, [r3, #1]
	}
	else {
		UG_PutString( cursor_position, gui1.font.font_height+(2*gui1.font.font_height), "^" );
	}

}
 8007698:	e022      	b.n	80076e0 <MENU_SHOW_cursor+0x184>
	else if(c->place_value == 8) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d10f      	bne.n	80076c2 <MENU_SHOW_cursor+0x166>
		UG_PutString( cursor_position, gui1.font.font_height+(2*gui1.font.font_height), "<Back>" );
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	b21b      	sxth	r3, r3
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 80076a8:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 80076ac:	b292      	uxth	r2, r2
 80076ae:	4611      	mov	r1, r2
 80076b0:	0049      	lsls	r1, r1, #1
 80076b2:	440a      	add	r2, r1
 80076b4:	b292      	uxth	r2, r2
 80076b6:	b211      	sxth	r1, r2
 80076b8:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <MENU_SHOW_cursor+0x194>)
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f96e 	bl	800799c <UG_PutString>
}
 80076c0:	e00e      	b.n	80076e0 <MENU_SHOW_cursor+0x184>
		UG_PutString( cursor_position, gui1.font.font_height+(2*gui1.font.font_height), "^" );
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	b21b      	sxth	r3, r3
 80076c6:	4a08      	ldr	r2, [pc, #32]	; (80076e8 <MENU_SHOW_cursor+0x18c>)
 80076c8:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 80076cc:	b292      	uxth	r2, r2
 80076ce:	4611      	mov	r1, r2
 80076d0:	0049      	lsls	r1, r1, #1
 80076d2:	440a      	add	r2, r1
 80076d4:	b292      	uxth	r2, r2
 80076d6:	b211      	sxth	r1, r2
 80076d8:	4a04      	ldr	r2, [pc, #16]	; (80076ec <MENU_SHOW_cursor+0x190>)
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f95e 	bl	800799c <UG_PutString>
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd90      	pop	{r4, r7, pc}
 80076e8:	2000059c 	.word	0x2000059c
 80076ec:	0800cc50 	.word	0x0800cc50
 80076f0:	0800cc54 	.word	0x0800cc54

080076f4 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4611      	mov	r1, r2
 8007700:	461a      	mov	r2, r3
 8007702:	460b      	mov	r3, r1
 8007704:	80fb      	strh	r3, [r7, #6]
 8007706:	4613      	mov	r3, r2
 8007708:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	88ba      	ldrh	r2, [r7, #4]
 800771a:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2204      	movs	r2, #4
 8007720:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2204      	movs	r2, #4
 8007726:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007736:	b29b      	uxth	r3, r3
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	b21a      	sxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007754:	b29b      	uxth	r3, r3
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29b      	uxth	r3, r3
 800775e:	b21a      	sxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	83da      	strh	r2, [r3, #30]
   g->font.char_h_space = 1;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   g->font.char_v_space = 1;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   g->font.p = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
   g->desktop_color = C_DARK_GRAY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4a18      	ldr	r2, [pc, #96]	; (80077f4 <UG_Init+0x100>)
 8007792:	649a      	str	r2, [r3, #72]	; 0x48
   g->fore_color = C_WHITE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800779a:	641a      	str	r2, [r3, #64]	; 0x40
   g->back_color = C_BLACK;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]
 80077b8:	e00f      	b.n	80077da <UG_Init+0xe6>
   {
      g->driver[i].driver = NULL;
 80077ba:	7dfa      	ldrb	r2, [r7, #23]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	320a      	adds	r2, #10
 80077c0:	2100      	movs	r1, #0
 80077c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      g->driver[i].state = 0;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	330a      	adds	r3, #10
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	4413      	add	r3, r2
 80077d0:	2200      	movs	r2, #0
 80077d2:	711a      	strb	r2, [r3, #4]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	3301      	adds	r3, #1
 80077d8:	75fb      	strb	r3, [r7, #23]
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d9ec      	bls.n	80077ba <UG_Init+0xc6>
   }
   // assignment of gui structrue passed to the function to the pointer gui, declared at the top of ugui.c
   gui = g;
 80077e0:	4a05      	ldr	r2, [pc, #20]	; (80077f8 <UG_Init+0x104>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6013      	str	r3, [r2, #0]
   return 1;
 80077e6:	2301      	movs	r3, #1
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	371c      	adds	r7, #28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	00a9a9a9 	.word	0x00a9a9a9
 80077f8:	20000360 	.word	0x20000360

080077fc <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
   gui->font.p = font->p;
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <UG_FontSelect+0x78>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
   gui->font.char_width = font->char_width;
 800780e:	4b19      	ldr	r3, [pc, #100]	; (8007874 <UG_FontSelect+0x78>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8007818:	871a      	strh	r2, [r3, #56]	; 0x38
   gui->font.char_height = font->char_height;
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <UG_FontSelect+0x78>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8007824:	875a      	strh	r2, [r3, #58]	; 0x3a
   gui->font.font_width = (gui->font.char_width + gui->font.char_h_space);
 8007826:	4b13      	ldr	r3, [pc, #76]	; (8007874 <UG_FontSelect+0x78>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800782e:	b29a      	uxth	r2, r3
 8007830:	4b10      	ldr	r3, [pc, #64]	; (8007874 <UG_FontSelect+0x78>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 8007838:	b29b      	uxth	r3, r3
 800783a:	4413      	add	r3, r2
 800783c:	b29a      	uxth	r2, r3
 800783e:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <UG_FontSelect+0x78>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	b212      	sxth	r2, r2
 8007844:	86da      	strh	r2, [r3, #54]	; 0x36
   gui->font.font_height = (gui->font.char_height + gui->font.char_v_space);
 8007846:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <UG_FontSelect+0x78>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800784e:	b29a      	uxth	r2, r3
 8007850:	4b08      	ldr	r3, [pc, #32]	; (8007874 <UG_FontSelect+0x78>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8007858:	b29b      	uxth	r3, r3
 800785a:	4413      	add	r3, r2
 800785c:	b29a      	uxth	r2, r3
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <UG_FontSelect+0x78>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	b212      	sxth	r2, r2
 8007864:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000360 	.word	0x20000360

08007878 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af02      	add	r7, sp, #8
 800787e:	6078      	str	r0, [r7, #4]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8007880:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <UG_FillScreen+0x40>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29b      	uxth	r3, r3
 800788e:	b21a      	sxth	r2, r3
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <UG_FillScreen+0x40>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29b      	uxth	r3, r3
 800789e:	b219      	sxth	r1, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	460b      	mov	r3, r1
 80078a6:	2100      	movs	r1, #0
 80078a8:	2000      	movs	r0, #0
 80078aa:	f000 f807 	bl	80078bc <UG_FillFrame>
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000360 	.word	0x20000360

080078bc <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80078bc:	b5b0      	push	{r4, r5, r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	4623      	mov	r3, r4
 80078cc:	80fb      	strh	r3, [r7, #6]
 80078ce:	4603      	mov	r3, r0
 80078d0:	80bb      	strh	r3, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	807b      	strh	r3, [r7, #2]
 80078d6:	4613      	mov	r3, r2
 80078d8:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80078da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80078de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	da05      	bge.n	80078f2 <UG_FillFrame+0x36>
   {
      n = x2;
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80078ee:	89fb      	ldrh	r3, [r7, #14]
 80078f0:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80078f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80078f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	da05      	bge.n	800790a <UG_FillFrame+0x4e>
   {
      n = y2;
 80078fe:	883b      	ldrh	r3, [r7, #0]
 8007900:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 8007902:	88bb      	ldrh	r3, [r7, #4]
 8007904:	803b      	strh	r3, [r7, #0]
      y1 = n;
 8007906:	89fb      	ldrh	r3, [r7, #14]
 8007908:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800790a:	4b23      	ldr	r3, [pc, #140]	; (8007998 <UG_FillFrame+0xdc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d012      	beq.n	8007940 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800791a:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <UG_FillFrame+0xdc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	461d      	mov	r5, r3
 8007922:	f9b7 4000 	ldrsh.w	r4, [r7]
 8007926:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800792a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800792e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	4623      	mov	r3, r4
 8007938:	47a8      	blx	r5
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d027      	beq.n	8007990 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8007940:	88bb      	ldrh	r3, [r7, #4]
 8007942:	81bb      	strh	r3, [r7, #12]
 8007944:	e01d      	b.n	8007982 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	81fb      	strh	r3, [r7, #14]
 800794a:	e00e      	b.n	800796a <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 800794c:	4b12      	ldr	r3, [pc, #72]	; (8007998 <UG_FillFrame+0xdc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8007956:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800795a:	6a3a      	ldr	r2, [r7, #32]
 800795c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800795e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007962:	b29b      	uxth	r3, r3
 8007964:	3301      	adds	r3, #1
 8007966:	b29b      	uxth	r3, r3
 8007968:	81fb      	strh	r3, [r7, #14]
 800796a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800796e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007972:	429a      	cmp	r2, r3
 8007974:	ddea      	ble.n	800794c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8007976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800797a:	b29b      	uxth	r3, r3
 800797c:	3301      	adds	r3, #1
 800797e:	b29b      	uxth	r3, r3
 8007980:	81bb      	strh	r3, [r7, #12]
 8007982:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007986:	f9b7 3000 	ldrsh.w	r3, [r7]
 800798a:	429a      	cmp	r2, r3
 800798c:	dddb      	ble.n	8007946 <UG_FillFrame+0x8a>
 800798e:	e000      	b.n	8007992 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007990:	bf00      	nop
      }
   }
}
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bdb0      	pop	{r4, r5, r7, pc}
 8007998:	20000360 	.word	0x20000360

0800799c <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800799c:	b590      	push	{r4, r7, lr}
 800799e:	b087      	sub	sp, #28
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	4603      	mov	r3, r0
 80079a4:	603a      	str	r2, [r7, #0]
 80079a6:	80fb      	strh	r3, [r7, #6]
 80079a8:	460b      	mov	r3, r1
 80079aa:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   char chr;

   xp=x;
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80079b0:	88bb      	ldrh	r3, [r7, #4]
 80079b2:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 80079b4:	e04f      	b.n	8007a56 <UG_PutString+0xba>
   {
      chr = *str;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	72fb      	strb	r3, [r7, #11]
      if ( chr == '\n' )
 80079bc:	7afb      	ldrb	r3, [r7, #11]
 80079be:	2b0a      	cmp	r3, #10
 80079c0:	d107      	bne.n	80079d2 <UG_PutString+0x36>
      {
         xp = gui->x_dim;
 80079c2:	4b29      	ldr	r3, [pc, #164]	; (8007a68 <UG_PutString+0xcc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	889b      	ldrh	r3, [r3, #4]
 80079c8:	81fb      	strh	r3, [r7, #14]
         str++;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	3301      	adds	r3, #1
 80079ce:	603b      	str	r3, [r7, #0]
         continue;
 80079d0:	e041      	b.n	8007a56 <UG_PutString+0xba>
      }

      if ( xp+gui->font.char_width > gui->x_dim - 1 )
 80079d2:	4b25      	ldr	r3, [pc, #148]	; (8007a68 <UG_PutString+0xcc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079da:	4619      	mov	r1, r3
 80079dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079e0:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <UG_PutString+0xcc>)
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 80079e8:	4413      	add	r3, r2
 80079ea:	4299      	cmp	r1, r3
 80079ec:	dc11      	bgt.n	8007a12 <UG_PutString+0x76>
      {
         xp = x;
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->font.char_v_space;
 80079f2:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <UG_PutString+0xcc>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <UG_PutString+0xcc>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	89bb      	ldrh	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <UG_PutString+0xcc>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007a18:	4b13      	ldr	r3, [pc, #76]	; (8007a68 <UG_PutString+0xcc>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007a22:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8007a26:	7af8      	ldrb	r0, [r7, #11]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	f000 f81e 	bl	8007a6c <UG_PutChar>

      xp += gui->font.char_width+gui->font.char_h_space;
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <UG_PutString+0xcc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <UG_PutString+0xcc>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	89fb      	ldrh	r3, [r7, #14]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	81fb      	strh	r3, [r7, #14]
      str++;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	603b      	str	r3, [r7, #0]
   while ( *str != 0 )
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1ab      	bne.n	80079b6 <UG_PutString+0x1a>
   }
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd90      	pop	{r4, r7, pc}
 8007a68:	20000360 	.word	0x20000360

08007a6c <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	81bb      	strh	r3, [r7, #12]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	817b      	strh	r3, [r7, #10]
   UG_U16 i,j,k,xo,yo,c,bn;
   UG_U8 b,bt;
   unsigned char* p;

   bt = (UG_U8)chr;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8007a84:	7e3b      	ldrb	r3, [r7, #24]
 8007a86:	2bfc      	cmp	r3, #252	; 0xfc
 8007a88:	dc76      	bgt.n	8007b78 <UG_PutChar+0x10c>
 8007a8a:	2bd6      	cmp	r3, #214	; 0xd6
 8007a8c:	da08      	bge.n	8007aa0 <UG_PutChar+0x34>
 8007a8e:	2bc4      	cmp	r3, #196	; 0xc4
 8007a90:	d069      	beq.n	8007b66 <UG_PutChar+0xfa>
 8007a92:	2bc4      	cmp	r3, #196	; 0xc4
 8007a94:	dc70      	bgt.n	8007b78 <UG_PutChar+0x10c>
 8007a96:	2bb0      	cmp	r3, #176	; 0xb0
 8007a98:	d06b      	beq.n	8007b72 <UG_PutChar+0x106>
 8007a9a:	2bb5      	cmp	r3, #181	; 0xb5
 8007a9c:	d066      	beq.n	8007b6c <UG_PutChar+0x100>
 8007a9e:	e06b      	b.n	8007b78 <UG_PutChar+0x10c>
 8007aa0:	3bd6      	subs	r3, #214	; 0xd6
 8007aa2:	2b26      	cmp	r3, #38	; 0x26
 8007aa4:	d868      	bhi.n	8007b78 <UG_PutChar+0x10c>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <UG_PutChar+0x40>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007b4f 	.word	0x08007b4f
 8007ab0:	08007b79 	.word	0x08007b79
 8007ab4:	08007b79 	.word	0x08007b79
 8007ab8:	08007b79 	.word	0x08007b79
 8007abc:	08007b79 	.word	0x08007b79
 8007ac0:	08007b79 	.word	0x08007b79
 8007ac4:	08007b5b 	.word	0x08007b5b
 8007ac8:	08007b79 	.word	0x08007b79
 8007acc:	08007b79 	.word	0x08007b79
 8007ad0:	08007b79 	.word	0x08007b79
 8007ad4:	08007b79 	.word	0x08007b79
 8007ad8:	08007b79 	.word	0x08007b79
 8007adc:	08007b79 	.word	0x08007b79
 8007ae0:	08007b79 	.word	0x08007b79
 8007ae4:	08007b61 	.word	0x08007b61
 8007ae8:	08007b79 	.word	0x08007b79
 8007aec:	08007b79 	.word	0x08007b79
 8007af0:	08007b79 	.word	0x08007b79
 8007af4:	08007b79 	.word	0x08007b79
 8007af8:	08007b79 	.word	0x08007b79
 8007afc:	08007b79 	.word	0x08007b79
 8007b00:	08007b79 	.word	0x08007b79
 8007b04:	08007b79 	.word	0x08007b79
 8007b08:	08007b79 	.word	0x08007b79
 8007b0c:	08007b79 	.word	0x08007b79
 8007b10:	08007b79 	.word	0x08007b79
 8007b14:	08007b79 	.word	0x08007b79
 8007b18:	08007b79 	.word	0x08007b79
 8007b1c:	08007b79 	.word	0x08007b79
 8007b20:	08007b79 	.word	0x08007b79
 8007b24:	08007b79 	.word	0x08007b79
 8007b28:	08007b79 	.word	0x08007b79
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	08007b79 	.word	0x08007b79
 8007b34:	08007b79 	.word	0x08007b79
 8007b38:	08007b79 	.word	0x08007b79
 8007b3c:	08007b79 	.word	0x08007b79
 8007b40:	08007b79 	.word	0x08007b79
 8007b44:	08007b55 	.word	0x08007b55
   {
      case 0xF6: bt = 0x94; break; // �
 8007b48:	2394      	movs	r3, #148	; 0x94
 8007b4a:	763b      	strb	r3, [r7, #24]
 8007b4c:	e014      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xD6: bt = 0x99; break; // �
 8007b4e:	2399      	movs	r3, #153	; 0x99
 8007b50:	763b      	strb	r3, [r7, #24]
 8007b52:	e011      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xFC: bt = 0x81; break; // �
 8007b54:	2381      	movs	r3, #129	; 0x81
 8007b56:	763b      	strb	r3, [r7, #24]
 8007b58:	e00e      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xDC: bt = 0x9A; break; // �
 8007b5a:	239a      	movs	r3, #154	; 0x9a
 8007b5c:	763b      	strb	r3, [r7, #24]
 8007b5e:	e00b      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xE4: bt = 0x84; break; // �
 8007b60:	2384      	movs	r3, #132	; 0x84
 8007b62:	763b      	strb	r3, [r7, #24]
 8007b64:	e008      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xC4: bt = 0x8E; break; // �
 8007b66:	238e      	movs	r3, #142	; 0x8e
 8007b68:	763b      	strb	r3, [r7, #24]
 8007b6a:	e005      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xB5: bt = 0xE6; break; // �
 8007b6c:	23e6      	movs	r3, #230	; 0xe6
 8007b6e:	763b      	strb	r3, [r7, #24]
 8007b70:	e002      	b.n	8007b78 <UG_PutChar+0x10c>
      case 0xB0: bt = 0xF8; break; // �
 8007b72:	23f8      	movs	r3, #248	; 0xf8
 8007b74:	763b      	strb	r3, [r7, #24]
 8007b76:	bf00      	nop
   }

   yo = y;
 8007b78:	897b      	ldrh	r3, [r7, #10]
 8007b7a:	83fb      	strh	r3, [r7, #30]
   bn = gui->font.char_width;
 8007b7c:	4b40      	ldr	r3, [pc, #256]	; (8007c80 <UG_PutChar+0x214>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007b84:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8007b86:	8b7b      	ldrh	r3, [r7, #26]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d075      	beq.n	8007c78 <UG_PutChar+0x20c>
   bn >>= 3;
 8007b8c:	8b7b      	ldrh	r3, [r7, #26]
 8007b8e:	08db      	lsrs	r3, r3, #3
 8007b90:	837b      	strh	r3, [r7, #26]
   if ( gui->font.char_width % 8 ) bn++;
 8007b92:	4b3b      	ldr	r3, [pc, #236]	; (8007c80 <UG_PutChar+0x214>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <UG_PutChar+0x140>
 8007ba6:	8b7b      	ldrh	r3, [r7, #26]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	837b      	strh	r3, [r7, #26]
   p = gui->font.p;
 8007bac:	4b34      	ldr	r3, [pc, #208]	; (8007c80 <UG_PutChar+0x214>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	617b      	str	r3, [r7, #20]
   p+= bt * gui->font.char_height * bn;
 8007bb4:	7e3b      	ldrb	r3, [r7, #24]
 8007bb6:	4a32      	ldr	r2, [pc, #200]	; (8007c80 <UG_PutChar+0x214>)
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
 8007bc2:	8b7a      	ldrh	r2, [r7, #26]
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	4413      	add	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

   for( j=0;j<gui->font.char_height;j++ )
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bd4:	e048      	b.n	8007c68 <UG_PutChar+0x1fc>
   {
      xo = x;
 8007bd6:	89bb      	ldrh	r3, [r7, #12]
 8007bd8:	843b      	strh	r3, [r7, #32]
      c=gui->font.char_width;
 8007bda:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <UG_PutChar+0x214>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007be2:	83bb      	strh	r3, [r7, #28]
      for( i=0;i<bn;i++ )
 8007be4:	2300      	movs	r3, #0
 8007be6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007be8:	e034      	b.n	8007c54 <UG_PutChar+0x1e8>
      {
         b = *p++;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	617a      	str	r2, [r7, #20]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	767b      	strb	r3, [r7, #25]
         for( k=0;(k<8) && c;k++ )
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bf8:	e023      	b.n	8007c42 <UG_PutChar+0x1d6>
         {
            if( b & 0x01 )
 8007bfa:	7e7b      	ldrb	r3, [r7, #25]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <UG_PutChar+0x1ac>
            {
               gui->pset(xo,yo,fc);
 8007c04:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <UG_PutChar+0x214>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8007c0e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4798      	blx	r3
 8007c16:	e008      	b.n	8007c2a <UG_PutChar+0x1be>
            }
            else
            {
               gui->pset(xo,yo,bc);
 8007c18:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <UG_PutChar+0x214>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8007c22:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8007c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c28:	4798      	blx	r3
            }
            b >>= 1;
 8007c2a:	7e7b      	ldrb	r3, [r7, #25]
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	767b      	strb	r3, [r7, #25]
            xo++;
 8007c30:	8c3b      	ldrh	r3, [r7, #32]
 8007c32:	3301      	adds	r3, #1
 8007c34:	843b      	strh	r3, [r7, #32]
            c--;
 8007c36:	8bbb      	ldrh	r3, [r7, #28]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	83bb      	strh	r3, [r7, #28]
         for( k=0;(k<8) && c;k++ )
 8007c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c3e:	3301      	adds	r3, #1
 8007c40:	847b      	strh	r3, [r7, #34]	; 0x22
 8007c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c44:	2b07      	cmp	r3, #7
 8007c46:	d802      	bhi.n	8007c4e <UG_PutChar+0x1e2>
 8007c48:	8bbb      	ldrh	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d5      	bne.n	8007bfa <UG_PutChar+0x18e>
      for( i=0;i<bn;i++ )
 8007c4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c50:	3301      	adds	r3, #1
 8007c52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c56:	8b7b      	ldrh	r3, [r7, #26]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d3c6      	bcc.n	8007bea <UG_PutChar+0x17e>
         }
      }
      yo++;
 8007c5c:	8bfb      	ldrh	r3, [r7, #30]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	83fb      	strh	r3, [r7, #30]
   for( j=0;j<gui->font.char_height;j++ )
 8007c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c64:	3301      	adds	r3, #1
 8007c66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c6a:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <UG_PutChar+0x214>)
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 8007c72:	4293      	cmp	r3, r2
 8007c74:	dbaf      	blt.n	8007bd6 <UG_PutChar+0x16a>
 8007c76:	e000      	b.n	8007c7a <UG_PutChar+0x20e>
   if ( !bn ) return;
 8007c78:	bf00      	nop
   }
}
 8007c7a:	3728      	adds	r7, #40	; 0x28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000360 	.word	0x20000360

08007c84 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
   gui->fore_color = c;
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <UG_SetForecolor+0x1c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20000360 	.word	0x20000360

08007ca4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
   gui->back_color = c;
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <UG_SetBackcolor+0x1c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	20000360 	.word	0x20000360

08007cc4 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
   return gui->x_dim;
 8007cc8:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <UG_GetXDim+0x18>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000360 	.word	0x20000360

08007ce0 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
   return gui->y_dim;
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <UG_GetYDim+0x18>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000360 	.word	0x20000360

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000160 	.word	0x20000160

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4d0d      	ldr	r5, [pc, #52]	; (8007d40 <__libc_init_array+0x38>)
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	; (8007d44 <__libc_init_array+0x3c>)
 8007d0e:	1b64      	subs	r4, r4, r5
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	2600      	movs	r6, #0
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4d0b      	ldr	r5, [pc, #44]	; (8007d48 <__libc_init_array+0x40>)
 8007d1a:	4c0c      	ldr	r4, [pc, #48]	; (8007d4c <__libc_init_array+0x44>)
 8007d1c:	f004 ff3e 	bl	800cb9c <_init>
 8007d20:	1b64      	subs	r4, r4, r5
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	2600      	movs	r6, #0
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d30:	4798      	blx	r3
 8007d32:	3601      	adds	r6, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3a:	4798      	blx	r3
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	0800f698 	.word	0x0800f698
 8007d44:	0800f698 	.word	0x0800f698
 8007d48:	0800f698 	.word	0x0800f698
 8007d4c:	0800f69c 	.word	0x0800f69c

08007d50 <memset>:
 8007d50:	4402      	add	r2, r0
 8007d52:	4603      	mov	r3, r0
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d100      	bne.n	8007d5a <memset+0xa>
 8007d58:	4770      	bx	lr
 8007d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5e:	e7f9      	b.n	8007d54 <memset+0x4>

08007d60 <__cvt>:
 8007d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	ec55 4b10 	vmov	r4, r5, d0
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	460e      	mov	r6, r1
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	462b      	mov	r3, r5
 8007d70:	bfbb      	ittet	lt
 8007d72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d76:	461d      	movlt	r5, r3
 8007d78:	2300      	movge	r3, #0
 8007d7a:	232d      	movlt	r3, #45	; 0x2d
 8007d7c:	700b      	strb	r3, [r1, #0]
 8007d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d84:	4691      	mov	r9, r2
 8007d86:	f023 0820 	bic.w	r8, r3, #32
 8007d8a:	bfbc      	itt	lt
 8007d8c:	4622      	movlt	r2, r4
 8007d8e:	4614      	movlt	r4, r2
 8007d90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d94:	d005      	beq.n	8007da2 <__cvt+0x42>
 8007d96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d9a:	d100      	bne.n	8007d9e <__cvt+0x3e>
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	2102      	movs	r1, #2
 8007da0:	e000      	b.n	8007da4 <__cvt+0x44>
 8007da2:	2103      	movs	r1, #3
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	ab02      	add	r3, sp, #8
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	ec45 4b10 	vmov	d0, r4, r5
 8007db0:	4653      	mov	r3, sl
 8007db2:	4632      	mov	r2, r6
 8007db4:	f001 fdb4 	bl	8009920 <_dtoa_r>
 8007db8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	d102      	bne.n	8007dc6 <__cvt+0x66>
 8007dc0:	f019 0f01 	tst.w	r9, #1
 8007dc4:	d022      	beq.n	8007e0c <__cvt+0xac>
 8007dc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dca:	eb07 0906 	add.w	r9, r7, r6
 8007dce:	d110      	bne.n	8007df2 <__cvt+0x92>
 8007dd0:	783b      	ldrb	r3, [r7, #0]
 8007dd2:	2b30      	cmp	r3, #48	; 0x30
 8007dd4:	d10a      	bne.n	8007dec <__cvt+0x8c>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f7f8 fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de2:	b918      	cbnz	r0, 8007dec <__cvt+0x8c>
 8007de4:	f1c6 0601 	rsb	r6, r6, #1
 8007de8:	f8ca 6000 	str.w	r6, [sl]
 8007dec:	f8da 3000 	ldr.w	r3, [sl]
 8007df0:	4499      	add	r9, r3
 8007df2:	2200      	movs	r2, #0
 8007df4:	2300      	movs	r3, #0
 8007df6:	4620      	mov	r0, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7f8 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfe:	b108      	cbz	r0, 8007e04 <__cvt+0xa4>
 8007e00:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e04:	2230      	movs	r2, #48	; 0x30
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	454b      	cmp	r3, r9
 8007e0a:	d307      	bcc.n	8007e1c <__cvt+0xbc>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e10:	1bdb      	subs	r3, r3, r7
 8007e12:	4638      	mov	r0, r7
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	b004      	add	sp, #16
 8007e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	9103      	str	r1, [sp, #12]
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	e7f0      	b.n	8007e06 <__cvt+0xa6>

08007e24 <__exponent>:
 8007e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e26:	4603      	mov	r3, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	bfb8      	it	lt
 8007e2c:	4249      	neglt	r1, r1
 8007e2e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e32:	bfb4      	ite	lt
 8007e34:	222d      	movlt	r2, #45	; 0x2d
 8007e36:	222b      	movge	r2, #43	; 0x2b
 8007e38:	2909      	cmp	r1, #9
 8007e3a:	7042      	strb	r2, [r0, #1]
 8007e3c:	dd2a      	ble.n	8007e94 <__exponent+0x70>
 8007e3e:	f10d 0407 	add.w	r4, sp, #7
 8007e42:	46a4      	mov	ip, r4
 8007e44:	270a      	movs	r7, #10
 8007e46:	46a6      	mov	lr, r4
 8007e48:	460a      	mov	r2, r1
 8007e4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e4e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e52:	3530      	adds	r5, #48	; 0x30
 8007e54:	2a63      	cmp	r2, #99	; 0x63
 8007e56:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e5e:	4631      	mov	r1, r6
 8007e60:	dcf1      	bgt.n	8007e46 <__exponent+0x22>
 8007e62:	3130      	adds	r1, #48	; 0x30
 8007e64:	f1ae 0502 	sub.w	r5, lr, #2
 8007e68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e6c:	1c44      	adds	r4, r0, #1
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4561      	cmp	r1, ip
 8007e72:	d30a      	bcc.n	8007e8a <__exponent+0x66>
 8007e74:	f10d 0209 	add.w	r2, sp, #9
 8007e78:	eba2 020e 	sub.w	r2, r2, lr
 8007e7c:	4565      	cmp	r5, ip
 8007e7e:	bf88      	it	hi
 8007e80:	2200      	movhi	r2, #0
 8007e82:	4413      	add	r3, r2
 8007e84:	1a18      	subs	r0, r3, r0
 8007e86:	b003      	add	sp, #12
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e92:	e7ed      	b.n	8007e70 <__exponent+0x4c>
 8007e94:	2330      	movs	r3, #48	; 0x30
 8007e96:	3130      	adds	r1, #48	; 0x30
 8007e98:	7083      	strb	r3, [r0, #2]
 8007e9a:	70c1      	strb	r1, [r0, #3]
 8007e9c:	1d03      	adds	r3, r0, #4
 8007e9e:	e7f1      	b.n	8007e84 <__exponent+0x60>

08007ea0 <_printf_float>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	ed2d 8b02 	vpush	{d8}
 8007ea8:	b08d      	sub	sp, #52	; 0x34
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	461f      	mov	r7, r3
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	f002 fe8f 	bl	800abd8 <_localeconv_r>
 8007eba:	f8d0 a000 	ldr.w	sl, [r0]
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f7f8 f986 	bl	80001d0 <strlen>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ed4:	3307      	adds	r3, #7
 8007ed6:	f023 0307 	bic.w	r3, r3, #7
 8007eda:	f103 0208 	add.w	r2, r3, #8
 8007ede:	f8c8 2000 	str.w	r2, [r8]
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007eea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007eee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ef8:	ee08 0a10 	vmov	s16, r0
 8007efc:	4b9f      	ldr	r3, [pc, #636]	; (800817c <_printf_float+0x2dc>)
 8007efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	f7f8 fe11 	bl	8000b2c <__aeabi_dcmpun>
 8007f0a:	bb88      	cbnz	r0, 8007f70 <_printf_float+0xd0>
 8007f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f10:	4b9a      	ldr	r3, [pc, #616]	; (800817c <_printf_float+0x2dc>)
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
 8007f16:	f7f8 fdeb 	bl	8000af0 <__aeabi_dcmple>
 8007f1a:	bb48      	cbnz	r0, 8007f70 <_printf_float+0xd0>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4640      	mov	r0, r8
 8007f22:	4649      	mov	r1, r9
 8007f24:	f7f8 fdda 	bl	8000adc <__aeabi_dcmplt>
 8007f28:	b110      	cbz	r0, 8007f30 <_printf_float+0x90>
 8007f2a:	232d      	movs	r3, #45	; 0x2d
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f30:	4b93      	ldr	r3, [pc, #588]	; (8008180 <_printf_float+0x2e0>)
 8007f32:	4894      	ldr	r0, [pc, #592]	; (8008184 <_printf_float+0x2e4>)
 8007f34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f38:	bf94      	ite	ls
 8007f3a:	4698      	movls	r8, r3
 8007f3c:	4680      	movhi	r8, r0
 8007f3e:	2303      	movs	r3, #3
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	f023 0204 	bic.w	r2, r3, #4
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	f04f 0900 	mov.w	r9, #0
 8007f4e:	9700      	str	r7, [sp, #0]
 8007f50:	4633      	mov	r3, r6
 8007f52:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f9d8 	bl	800830c <_printf_common>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f040 8090 	bne.w	8008082 <_printf_float+0x1e2>
 8007f62:	f04f 30ff 	mov.w	r0, #4294967295
 8007f66:	b00d      	add	sp, #52	; 0x34
 8007f68:	ecbd 8b02 	vpop	{d8}
 8007f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f70:	4642      	mov	r2, r8
 8007f72:	464b      	mov	r3, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	4649      	mov	r1, r9
 8007f78:	f7f8 fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8007f7c:	b140      	cbz	r0, 8007f90 <_printf_float+0xf0>
 8007f7e:	464b      	mov	r3, r9
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bfbc      	itt	lt
 8007f84:	232d      	movlt	r3, #45	; 0x2d
 8007f86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f8a:	487f      	ldr	r0, [pc, #508]	; (8008188 <_printf_float+0x2e8>)
 8007f8c:	4b7f      	ldr	r3, [pc, #508]	; (800818c <_printf_float+0x2ec>)
 8007f8e:	e7d1      	b.n	8007f34 <_printf_float+0x94>
 8007f90:	6863      	ldr	r3, [r4, #4]
 8007f92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f96:	9206      	str	r2, [sp, #24]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	d13f      	bne.n	800801c <_printf_float+0x17c>
 8007f9c:	2306      	movs	r3, #6
 8007f9e:	6063      	str	r3, [r4, #4]
 8007fa0:	9b05      	ldr	r3, [sp, #20]
 8007fa2:	6861      	ldr	r1, [r4, #4]
 8007fa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9303      	str	r3, [sp, #12]
 8007fac:	ab0a      	add	r3, sp, #40	; 0x28
 8007fae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fb2:	ab09      	add	r3, sp, #36	; 0x24
 8007fb4:	ec49 8b10 	vmov	d0, r8, r9
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	6022      	str	r2, [r4, #0]
 8007fbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f7ff fecd 	bl	8007d60 <__cvt>
 8007fc6:	9b06      	ldr	r3, [sp, #24]
 8007fc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fca:	2b47      	cmp	r3, #71	; 0x47
 8007fcc:	4680      	mov	r8, r0
 8007fce:	d108      	bne.n	8007fe2 <_printf_float+0x142>
 8007fd0:	1cc8      	adds	r0, r1, #3
 8007fd2:	db02      	blt.n	8007fda <_printf_float+0x13a>
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	4299      	cmp	r1, r3
 8007fd8:	dd41      	ble.n	800805e <_printf_float+0x1be>
 8007fda:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fde:	fa5f fb8b 	uxtb.w	fp, fp
 8007fe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fe6:	d820      	bhi.n	800802a <_printf_float+0x18a>
 8007fe8:	3901      	subs	r1, #1
 8007fea:	465a      	mov	r2, fp
 8007fec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ff0:	9109      	str	r1, [sp, #36]	; 0x24
 8007ff2:	f7ff ff17 	bl	8007e24 <__exponent>
 8007ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff8:	1813      	adds	r3, r2, r0
 8007ffa:	2a01      	cmp	r2, #1
 8007ffc:	4681      	mov	r9, r0
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	dc02      	bgt.n	8008008 <_printf_float+0x168>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	07d2      	lsls	r2, r2, #31
 8008006:	d501      	bpl.n	800800c <_printf_float+0x16c>
 8008008:	3301      	adds	r3, #1
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008010:	2b00      	cmp	r3, #0
 8008012:	d09c      	beq.n	8007f4e <_printf_float+0xae>
 8008014:	232d      	movs	r3, #45	; 0x2d
 8008016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801a:	e798      	b.n	8007f4e <_printf_float+0xae>
 800801c:	9a06      	ldr	r2, [sp, #24]
 800801e:	2a47      	cmp	r2, #71	; 0x47
 8008020:	d1be      	bne.n	8007fa0 <_printf_float+0x100>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1bc      	bne.n	8007fa0 <_printf_float+0x100>
 8008026:	2301      	movs	r3, #1
 8008028:	e7b9      	b.n	8007f9e <_printf_float+0xfe>
 800802a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800802e:	d118      	bne.n	8008062 <_printf_float+0x1c2>
 8008030:	2900      	cmp	r1, #0
 8008032:	6863      	ldr	r3, [r4, #4]
 8008034:	dd0b      	ble.n	800804e <_printf_float+0x1ae>
 8008036:	6121      	str	r1, [r4, #16]
 8008038:	b913      	cbnz	r3, 8008040 <_printf_float+0x1a0>
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	07d0      	lsls	r0, r2, #31
 800803e:	d502      	bpl.n	8008046 <_printf_float+0x1a6>
 8008040:	3301      	adds	r3, #1
 8008042:	440b      	add	r3, r1
 8008044:	6123      	str	r3, [r4, #16]
 8008046:	65a1      	str	r1, [r4, #88]	; 0x58
 8008048:	f04f 0900 	mov.w	r9, #0
 800804c:	e7de      	b.n	800800c <_printf_float+0x16c>
 800804e:	b913      	cbnz	r3, 8008056 <_printf_float+0x1b6>
 8008050:	6822      	ldr	r2, [r4, #0]
 8008052:	07d2      	lsls	r2, r2, #31
 8008054:	d501      	bpl.n	800805a <_printf_float+0x1ba>
 8008056:	3302      	adds	r3, #2
 8008058:	e7f4      	b.n	8008044 <_printf_float+0x1a4>
 800805a:	2301      	movs	r3, #1
 800805c:	e7f2      	b.n	8008044 <_printf_float+0x1a4>
 800805e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008064:	4299      	cmp	r1, r3
 8008066:	db05      	blt.n	8008074 <_printf_float+0x1d4>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	6121      	str	r1, [r4, #16]
 800806c:	07d8      	lsls	r0, r3, #31
 800806e:	d5ea      	bpl.n	8008046 <_printf_float+0x1a6>
 8008070:	1c4b      	adds	r3, r1, #1
 8008072:	e7e7      	b.n	8008044 <_printf_float+0x1a4>
 8008074:	2900      	cmp	r1, #0
 8008076:	bfd4      	ite	le
 8008078:	f1c1 0202 	rsble	r2, r1, #2
 800807c:	2201      	movgt	r2, #1
 800807e:	4413      	add	r3, r2
 8008080:	e7e0      	b.n	8008044 <_printf_float+0x1a4>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	055a      	lsls	r2, r3, #21
 8008086:	d407      	bmi.n	8008098 <_printf_float+0x1f8>
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	4642      	mov	r2, r8
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	d12c      	bne.n	80080f0 <_printf_float+0x250>
 8008096:	e764      	b.n	8007f62 <_printf_float+0xc2>
 8008098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800809c:	f240 80e0 	bls.w	8008260 <_printf_float+0x3c0>
 80080a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080a4:	2200      	movs	r2, #0
 80080a6:	2300      	movs	r3, #0
 80080a8:	f7f8 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d034      	beq.n	800811a <_printf_float+0x27a>
 80080b0:	4a37      	ldr	r2, [pc, #220]	; (8008190 <_printf_float+0x2f0>)
 80080b2:	2301      	movs	r3, #1
 80080b4:	4631      	mov	r1, r6
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	f43f af51 	beq.w	8007f62 <_printf_float+0xc2>
 80080c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c4:	429a      	cmp	r2, r3
 80080c6:	db02      	blt.n	80080ce <_printf_float+0x22e>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	07d8      	lsls	r0, r3, #31
 80080cc:	d510      	bpl.n	80080f0 <_printf_float+0x250>
 80080ce:	ee18 3a10 	vmov	r3, s16
 80080d2:	4652      	mov	r2, sl
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f af41 	beq.w	8007f62 <_printf_float+0xc2>
 80080e0:	f04f 0800 	mov.w	r8, #0
 80080e4:	f104 091a 	add.w	r9, r4, #26
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	3b01      	subs	r3, #1
 80080ec:	4543      	cmp	r3, r8
 80080ee:	dc09      	bgt.n	8008104 <_printf_float+0x264>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	079b      	lsls	r3, r3, #30
 80080f4:	f100 8105 	bmi.w	8008302 <_printf_float+0x462>
 80080f8:	68e0      	ldr	r0, [r4, #12]
 80080fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080fc:	4298      	cmp	r0, r3
 80080fe:	bfb8      	it	lt
 8008100:	4618      	movlt	r0, r3
 8008102:	e730      	b.n	8007f66 <_printf_float+0xc6>
 8008104:	2301      	movs	r3, #1
 8008106:	464a      	mov	r2, r9
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f af27 	beq.w	8007f62 <_printf_float+0xc2>
 8008114:	f108 0801 	add.w	r8, r8, #1
 8008118:	e7e6      	b.n	80080e8 <_printf_float+0x248>
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc39      	bgt.n	8008194 <_printf_float+0x2f4>
 8008120:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <_printf_float+0x2f0>)
 8008122:	2301      	movs	r3, #1
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f af19 	beq.w	8007f62 <_printf_float+0xc2>
 8008130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008134:	4313      	orrs	r3, r2
 8008136:	d102      	bne.n	800813e <_printf_float+0x29e>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	07d9      	lsls	r1, r3, #31
 800813c:	d5d8      	bpl.n	80080f0 <_printf_float+0x250>
 800813e:	ee18 3a10 	vmov	r3, s16
 8008142:	4652      	mov	r2, sl
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	f43f af09 	beq.w	8007f62 <_printf_float+0xc2>
 8008150:	f04f 0900 	mov.w	r9, #0
 8008154:	f104 0a1a 	add.w	sl, r4, #26
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	425b      	negs	r3, r3
 800815c:	454b      	cmp	r3, r9
 800815e:	dc01      	bgt.n	8008164 <_printf_float+0x2c4>
 8008160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008162:	e792      	b.n	800808a <_printf_float+0x1ea>
 8008164:	2301      	movs	r3, #1
 8008166:	4652      	mov	r2, sl
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f aef7 	beq.w	8007f62 <_printf_float+0xc2>
 8008174:	f109 0901 	add.w	r9, r9, #1
 8008178:	e7ee      	b.n	8008158 <_printf_float+0x2b8>
 800817a:	bf00      	nop
 800817c:	7fefffff 	.word	0x7fefffff
 8008180:	0800f1a8 	.word	0x0800f1a8
 8008184:	0800f1ac 	.word	0x0800f1ac
 8008188:	0800f1b4 	.word	0x0800f1b4
 800818c:	0800f1b0 	.word	0x0800f1b0
 8008190:	0800f1b8 	.word	0x0800f1b8
 8008194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008198:	429a      	cmp	r2, r3
 800819a:	bfa8      	it	ge
 800819c:	461a      	movge	r2, r3
 800819e:	2a00      	cmp	r2, #0
 80081a0:	4691      	mov	r9, r2
 80081a2:	dc37      	bgt.n	8008214 <_printf_float+0x374>
 80081a4:	f04f 0b00 	mov.w	fp, #0
 80081a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ac:	f104 021a 	add.w	r2, r4, #26
 80081b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	eba3 0309 	sub.w	r3, r3, r9
 80081b8:	455b      	cmp	r3, fp
 80081ba:	dc33      	bgt.n	8008224 <_printf_float+0x384>
 80081bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081c0:	429a      	cmp	r2, r3
 80081c2:	db3b      	blt.n	800823c <_printf_float+0x39c>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	07da      	lsls	r2, r3, #31
 80081c8:	d438      	bmi.n	800823c <_printf_float+0x39c>
 80081ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	eba2 0901 	sub.w	r9, r2, r1
 80081d6:	4599      	cmp	r9, r3
 80081d8:	bfa8      	it	ge
 80081da:	4699      	movge	r9, r3
 80081dc:	f1b9 0f00 	cmp.w	r9, #0
 80081e0:	dc35      	bgt.n	800824e <_printf_float+0x3ae>
 80081e2:	f04f 0800 	mov.w	r8, #0
 80081e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ea:	f104 0a1a 	add.w	sl, r4, #26
 80081ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	eba3 0309 	sub.w	r3, r3, r9
 80081f8:	4543      	cmp	r3, r8
 80081fa:	f77f af79 	ble.w	80080f0 <_printf_float+0x250>
 80081fe:	2301      	movs	r3, #1
 8008200:	4652      	mov	r2, sl
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	f43f aeaa 	beq.w	8007f62 <_printf_float+0xc2>
 800820e:	f108 0801 	add.w	r8, r8, #1
 8008212:	e7ec      	b.n	80081ee <_printf_float+0x34e>
 8008214:	4613      	mov	r3, r2
 8008216:	4631      	mov	r1, r6
 8008218:	4642      	mov	r2, r8
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	d1c0      	bne.n	80081a4 <_printf_float+0x304>
 8008222:	e69e      	b.n	8007f62 <_printf_float+0xc2>
 8008224:	2301      	movs	r3, #1
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	9205      	str	r2, [sp, #20]
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	f43f ae97 	beq.w	8007f62 <_printf_float+0xc2>
 8008234:	9a05      	ldr	r2, [sp, #20]
 8008236:	f10b 0b01 	add.w	fp, fp, #1
 800823a:	e7b9      	b.n	80081b0 <_printf_float+0x310>
 800823c:	ee18 3a10 	vmov	r3, s16
 8008240:	4652      	mov	r2, sl
 8008242:	4631      	mov	r1, r6
 8008244:	4628      	mov	r0, r5
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	d1be      	bne.n	80081ca <_printf_float+0x32a>
 800824c:	e689      	b.n	8007f62 <_printf_float+0xc2>
 800824e:	9a05      	ldr	r2, [sp, #20]
 8008250:	464b      	mov	r3, r9
 8008252:	4442      	add	r2, r8
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	d1c1      	bne.n	80081e2 <_printf_float+0x342>
 800825e:	e680      	b.n	8007f62 <_printf_float+0xc2>
 8008260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008262:	2a01      	cmp	r2, #1
 8008264:	dc01      	bgt.n	800826a <_printf_float+0x3ca>
 8008266:	07db      	lsls	r3, r3, #31
 8008268:	d538      	bpl.n	80082dc <_printf_float+0x43c>
 800826a:	2301      	movs	r3, #1
 800826c:	4642      	mov	r2, r8
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	f43f ae74 	beq.w	8007f62 <_printf_float+0xc2>
 800827a:	ee18 3a10 	vmov	r3, s16
 800827e:	4652      	mov	r2, sl
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	f43f ae6b 	beq.w	8007f62 <_printf_float+0xc2>
 800828c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008290:	2200      	movs	r2, #0
 8008292:	2300      	movs	r3, #0
 8008294:	f7f8 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008298:	b9d8      	cbnz	r0, 80082d2 <_printf_float+0x432>
 800829a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829c:	f108 0201 	add.w	r2, r8, #1
 80082a0:	3b01      	subs	r3, #1
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	d10e      	bne.n	80082ca <_printf_float+0x42a>
 80082ac:	e659      	b.n	8007f62 <_printf_float+0xc2>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4652      	mov	r2, sl
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	f43f ae52 	beq.w	8007f62 <_printf_float+0xc2>
 80082be:	f108 0801 	add.w	r8, r8, #1
 80082c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4543      	cmp	r3, r8
 80082c8:	dcf1      	bgt.n	80082ae <_printf_float+0x40e>
 80082ca:	464b      	mov	r3, r9
 80082cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082d0:	e6dc      	b.n	800808c <_printf_float+0x1ec>
 80082d2:	f04f 0800 	mov.w	r8, #0
 80082d6:	f104 0a1a 	add.w	sl, r4, #26
 80082da:	e7f2      	b.n	80082c2 <_printf_float+0x422>
 80082dc:	2301      	movs	r3, #1
 80082de:	4642      	mov	r2, r8
 80082e0:	e7df      	b.n	80082a2 <_printf_float+0x402>
 80082e2:	2301      	movs	r3, #1
 80082e4:	464a      	mov	r2, r9
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f ae38 	beq.w	8007f62 <_printf_float+0xc2>
 80082f2:	f108 0801 	add.w	r8, r8, #1
 80082f6:	68e3      	ldr	r3, [r4, #12]
 80082f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082fa:	1a5b      	subs	r3, r3, r1
 80082fc:	4543      	cmp	r3, r8
 80082fe:	dcf0      	bgt.n	80082e2 <_printf_float+0x442>
 8008300:	e6fa      	b.n	80080f8 <_printf_float+0x258>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	f104 0919 	add.w	r9, r4, #25
 800830a:	e7f4      	b.n	80082f6 <_printf_float+0x456>

0800830c <_printf_common>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	4616      	mov	r6, r2
 8008312:	4699      	mov	r9, r3
 8008314:	688a      	ldr	r2, [r1, #8]
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800831c:	4293      	cmp	r3, r2
 800831e:	bfb8      	it	lt
 8008320:	4613      	movlt	r3, r2
 8008322:	6033      	str	r3, [r6, #0]
 8008324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008328:	4607      	mov	r7, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b10a      	cbz	r2, 8008332 <_printf_common+0x26>
 800832e:	3301      	adds	r3, #1
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	0699      	lsls	r1, r3, #26
 8008336:	bf42      	ittt	mi
 8008338:	6833      	ldrmi	r3, [r6, #0]
 800833a:	3302      	addmi	r3, #2
 800833c:	6033      	strmi	r3, [r6, #0]
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	f015 0506 	ands.w	r5, r5, #6
 8008344:	d106      	bne.n	8008354 <_printf_common+0x48>
 8008346:	f104 0a19 	add.w	sl, r4, #25
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	6832      	ldr	r2, [r6, #0]
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	42ab      	cmp	r3, r5
 8008352:	dc26      	bgt.n	80083a2 <_printf_common+0x96>
 8008354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008358:	1e13      	subs	r3, r2, #0
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	bf18      	it	ne
 800835e:	2301      	movne	r3, #1
 8008360:	0692      	lsls	r2, r2, #26
 8008362:	d42b      	bmi.n	80083bc <_printf_common+0xb0>
 8008364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008368:	4649      	mov	r1, r9
 800836a:	4638      	mov	r0, r7
 800836c:	47c0      	blx	r8
 800836e:	3001      	adds	r0, #1
 8008370:	d01e      	beq.n	80083b0 <_printf_common+0xa4>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	68e5      	ldr	r5, [r4, #12]
 8008376:	6832      	ldr	r2, [r6, #0]
 8008378:	f003 0306 	and.w	r3, r3, #6
 800837c:	2b04      	cmp	r3, #4
 800837e:	bf08      	it	eq
 8008380:	1aad      	subeq	r5, r5, r2
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	6922      	ldr	r2, [r4, #16]
 8008386:	bf0c      	ite	eq
 8008388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800838c:	2500      	movne	r5, #0
 800838e:	4293      	cmp	r3, r2
 8008390:	bfc4      	itt	gt
 8008392:	1a9b      	subgt	r3, r3, r2
 8008394:	18ed      	addgt	r5, r5, r3
 8008396:	2600      	movs	r6, #0
 8008398:	341a      	adds	r4, #26
 800839a:	42b5      	cmp	r5, r6
 800839c:	d11a      	bne.n	80083d4 <_printf_common+0xc8>
 800839e:	2000      	movs	r0, #0
 80083a0:	e008      	b.n	80083b4 <_printf_common+0xa8>
 80083a2:	2301      	movs	r3, #1
 80083a4:	4652      	mov	r2, sl
 80083a6:	4649      	mov	r1, r9
 80083a8:	4638      	mov	r0, r7
 80083aa:	47c0      	blx	r8
 80083ac:	3001      	adds	r0, #1
 80083ae:	d103      	bne.n	80083b8 <_printf_common+0xac>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	3501      	adds	r5, #1
 80083ba:	e7c6      	b.n	800834a <_printf_common+0x3e>
 80083bc:	18e1      	adds	r1, r4, r3
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	2030      	movs	r0, #48	; 0x30
 80083c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083c6:	4422      	add	r2, r4
 80083c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083d0:	3302      	adds	r3, #2
 80083d2:	e7c7      	b.n	8008364 <_printf_common+0x58>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4622      	mov	r2, r4
 80083d8:	4649      	mov	r1, r9
 80083da:	4638      	mov	r0, r7
 80083dc:	47c0      	blx	r8
 80083de:	3001      	adds	r0, #1
 80083e0:	d0e6      	beq.n	80083b0 <_printf_common+0xa4>
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7d9      	b.n	800839a <_printf_common+0x8e>
	...

080083e8 <_printf_i>:
 80083e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	460c      	mov	r4, r1
 80083ee:	4691      	mov	r9, r2
 80083f0:	7e27      	ldrb	r7, [r4, #24]
 80083f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083f4:	2f78      	cmp	r7, #120	; 0x78
 80083f6:	4680      	mov	r8, r0
 80083f8:	469a      	mov	sl, r3
 80083fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083fe:	d807      	bhi.n	8008410 <_printf_i+0x28>
 8008400:	2f62      	cmp	r7, #98	; 0x62
 8008402:	d80a      	bhi.n	800841a <_printf_i+0x32>
 8008404:	2f00      	cmp	r7, #0
 8008406:	f000 80d8 	beq.w	80085ba <_printf_i+0x1d2>
 800840a:	2f58      	cmp	r7, #88	; 0x58
 800840c:	f000 80a3 	beq.w	8008556 <_printf_i+0x16e>
 8008410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008418:	e03a      	b.n	8008490 <_printf_i+0xa8>
 800841a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800841e:	2b15      	cmp	r3, #21
 8008420:	d8f6      	bhi.n	8008410 <_printf_i+0x28>
 8008422:	a001      	add	r0, pc, #4	; (adr r0, 8008428 <_printf_i+0x40>)
 8008424:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008428:	08008481 	.word	0x08008481
 800842c:	08008495 	.word	0x08008495
 8008430:	08008411 	.word	0x08008411
 8008434:	08008411 	.word	0x08008411
 8008438:	08008411 	.word	0x08008411
 800843c:	08008411 	.word	0x08008411
 8008440:	08008495 	.word	0x08008495
 8008444:	08008411 	.word	0x08008411
 8008448:	08008411 	.word	0x08008411
 800844c:	08008411 	.word	0x08008411
 8008450:	08008411 	.word	0x08008411
 8008454:	080085a1 	.word	0x080085a1
 8008458:	080084c5 	.word	0x080084c5
 800845c:	08008583 	.word	0x08008583
 8008460:	08008411 	.word	0x08008411
 8008464:	08008411 	.word	0x08008411
 8008468:	080085c3 	.word	0x080085c3
 800846c:	08008411 	.word	0x08008411
 8008470:	080084c5 	.word	0x080084c5
 8008474:	08008411 	.word	0x08008411
 8008478:	08008411 	.word	0x08008411
 800847c:	0800858b 	.word	0x0800858b
 8008480:	680b      	ldr	r3, [r1, #0]
 8008482:	1d1a      	adds	r2, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	600a      	str	r2, [r1, #0]
 8008488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800848c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008490:	2301      	movs	r3, #1
 8008492:	e0a3      	b.n	80085dc <_printf_i+0x1f4>
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	6808      	ldr	r0, [r1, #0]
 8008498:	062e      	lsls	r6, r5, #24
 800849a:	f100 0304 	add.w	r3, r0, #4
 800849e:	d50a      	bpl.n	80084b6 <_printf_i+0xce>
 80084a0:	6805      	ldr	r5, [r0, #0]
 80084a2:	600b      	str	r3, [r1, #0]
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	da03      	bge.n	80084b0 <_printf_i+0xc8>
 80084a8:	232d      	movs	r3, #45	; 0x2d
 80084aa:	426d      	negs	r5, r5
 80084ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b0:	485e      	ldr	r0, [pc, #376]	; (800862c <_printf_i+0x244>)
 80084b2:	230a      	movs	r3, #10
 80084b4:	e019      	b.n	80084ea <_printf_i+0x102>
 80084b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084ba:	6805      	ldr	r5, [r0, #0]
 80084bc:	600b      	str	r3, [r1, #0]
 80084be:	bf18      	it	ne
 80084c0:	b22d      	sxthne	r5, r5
 80084c2:	e7ef      	b.n	80084a4 <_printf_i+0xbc>
 80084c4:	680b      	ldr	r3, [r1, #0]
 80084c6:	6825      	ldr	r5, [r4, #0]
 80084c8:	1d18      	adds	r0, r3, #4
 80084ca:	6008      	str	r0, [r1, #0]
 80084cc:	0628      	lsls	r0, r5, #24
 80084ce:	d501      	bpl.n	80084d4 <_printf_i+0xec>
 80084d0:	681d      	ldr	r5, [r3, #0]
 80084d2:	e002      	b.n	80084da <_printf_i+0xf2>
 80084d4:	0669      	lsls	r1, r5, #25
 80084d6:	d5fb      	bpl.n	80084d0 <_printf_i+0xe8>
 80084d8:	881d      	ldrh	r5, [r3, #0]
 80084da:	4854      	ldr	r0, [pc, #336]	; (800862c <_printf_i+0x244>)
 80084dc:	2f6f      	cmp	r7, #111	; 0x6f
 80084de:	bf0c      	ite	eq
 80084e0:	2308      	moveq	r3, #8
 80084e2:	230a      	movne	r3, #10
 80084e4:	2100      	movs	r1, #0
 80084e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ea:	6866      	ldr	r6, [r4, #4]
 80084ec:	60a6      	str	r6, [r4, #8]
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	bfa2      	ittt	ge
 80084f2:	6821      	ldrge	r1, [r4, #0]
 80084f4:	f021 0104 	bicge.w	r1, r1, #4
 80084f8:	6021      	strge	r1, [r4, #0]
 80084fa:	b90d      	cbnz	r5, 8008500 <_printf_i+0x118>
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	d04d      	beq.n	800859c <_printf_i+0x1b4>
 8008500:	4616      	mov	r6, r2
 8008502:	fbb5 f1f3 	udiv	r1, r5, r3
 8008506:	fb03 5711 	mls	r7, r3, r1, r5
 800850a:	5dc7      	ldrb	r7, [r0, r7]
 800850c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008510:	462f      	mov	r7, r5
 8008512:	42bb      	cmp	r3, r7
 8008514:	460d      	mov	r5, r1
 8008516:	d9f4      	bls.n	8008502 <_printf_i+0x11a>
 8008518:	2b08      	cmp	r3, #8
 800851a:	d10b      	bne.n	8008534 <_printf_i+0x14c>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	07df      	lsls	r7, r3, #31
 8008520:	d508      	bpl.n	8008534 <_printf_i+0x14c>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	6861      	ldr	r1, [r4, #4]
 8008526:	4299      	cmp	r1, r3
 8008528:	bfde      	ittt	le
 800852a:	2330      	movle	r3, #48	; 0x30
 800852c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008530:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008534:	1b92      	subs	r2, r2, r6
 8008536:	6122      	str	r2, [r4, #16]
 8008538:	f8cd a000 	str.w	sl, [sp]
 800853c:	464b      	mov	r3, r9
 800853e:	aa03      	add	r2, sp, #12
 8008540:	4621      	mov	r1, r4
 8008542:	4640      	mov	r0, r8
 8008544:	f7ff fee2 	bl	800830c <_printf_common>
 8008548:	3001      	adds	r0, #1
 800854a:	d14c      	bne.n	80085e6 <_printf_i+0x1fe>
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	b004      	add	sp, #16
 8008552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008556:	4835      	ldr	r0, [pc, #212]	; (800862c <_printf_i+0x244>)
 8008558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	680e      	ldr	r6, [r1, #0]
 8008560:	061f      	lsls	r7, r3, #24
 8008562:	f856 5b04 	ldr.w	r5, [r6], #4
 8008566:	600e      	str	r6, [r1, #0]
 8008568:	d514      	bpl.n	8008594 <_printf_i+0x1ac>
 800856a:	07d9      	lsls	r1, r3, #31
 800856c:	bf44      	itt	mi
 800856e:	f043 0320 	orrmi.w	r3, r3, #32
 8008572:	6023      	strmi	r3, [r4, #0]
 8008574:	b91d      	cbnz	r5, 800857e <_printf_i+0x196>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	f023 0320 	bic.w	r3, r3, #32
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	2310      	movs	r3, #16
 8008580:	e7b0      	b.n	80084e4 <_printf_i+0xfc>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f043 0320 	orr.w	r3, r3, #32
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	2378      	movs	r3, #120	; 0x78
 800858c:	4828      	ldr	r0, [pc, #160]	; (8008630 <_printf_i+0x248>)
 800858e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008592:	e7e3      	b.n	800855c <_printf_i+0x174>
 8008594:	065e      	lsls	r6, r3, #25
 8008596:	bf48      	it	mi
 8008598:	b2ad      	uxthmi	r5, r5
 800859a:	e7e6      	b.n	800856a <_printf_i+0x182>
 800859c:	4616      	mov	r6, r2
 800859e:	e7bb      	b.n	8008518 <_printf_i+0x130>
 80085a0:	680b      	ldr	r3, [r1, #0]
 80085a2:	6826      	ldr	r6, [r4, #0]
 80085a4:	6960      	ldr	r0, [r4, #20]
 80085a6:	1d1d      	adds	r5, r3, #4
 80085a8:	600d      	str	r5, [r1, #0]
 80085aa:	0635      	lsls	r5, r6, #24
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0x1cc>
 80085b0:	6018      	str	r0, [r3, #0]
 80085b2:	e002      	b.n	80085ba <_printf_i+0x1d2>
 80085b4:	0671      	lsls	r1, r6, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0x1c8>
 80085b8:	8018      	strh	r0, [r3, #0]
 80085ba:	2300      	movs	r3, #0
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	4616      	mov	r6, r2
 80085c0:	e7ba      	b.n	8008538 <_printf_i+0x150>
 80085c2:	680b      	ldr	r3, [r1, #0]
 80085c4:	1d1a      	adds	r2, r3, #4
 80085c6:	600a      	str	r2, [r1, #0]
 80085c8:	681e      	ldr	r6, [r3, #0]
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	2100      	movs	r1, #0
 80085ce:	4630      	mov	r0, r6
 80085d0:	f7f7 fe06 	bl	80001e0 <memchr>
 80085d4:	b108      	cbz	r0, 80085da <_printf_i+0x1f2>
 80085d6:	1b80      	subs	r0, r0, r6
 80085d8:	6060      	str	r0, [r4, #4]
 80085da:	6863      	ldr	r3, [r4, #4]
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	2300      	movs	r3, #0
 80085e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e4:	e7a8      	b.n	8008538 <_printf_i+0x150>
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	4632      	mov	r2, r6
 80085ea:	4649      	mov	r1, r9
 80085ec:	4640      	mov	r0, r8
 80085ee:	47d0      	blx	sl
 80085f0:	3001      	adds	r0, #1
 80085f2:	d0ab      	beq.n	800854c <_printf_i+0x164>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	079b      	lsls	r3, r3, #30
 80085f8:	d413      	bmi.n	8008622 <_printf_i+0x23a>
 80085fa:	68e0      	ldr	r0, [r4, #12]
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	4298      	cmp	r0, r3
 8008600:	bfb8      	it	lt
 8008602:	4618      	movlt	r0, r3
 8008604:	e7a4      	b.n	8008550 <_printf_i+0x168>
 8008606:	2301      	movs	r3, #1
 8008608:	4632      	mov	r2, r6
 800860a:	4649      	mov	r1, r9
 800860c:	4640      	mov	r0, r8
 800860e:	47d0      	blx	sl
 8008610:	3001      	adds	r0, #1
 8008612:	d09b      	beq.n	800854c <_printf_i+0x164>
 8008614:	3501      	adds	r5, #1
 8008616:	68e3      	ldr	r3, [r4, #12]
 8008618:	9903      	ldr	r1, [sp, #12]
 800861a:	1a5b      	subs	r3, r3, r1
 800861c:	42ab      	cmp	r3, r5
 800861e:	dcf2      	bgt.n	8008606 <_printf_i+0x21e>
 8008620:	e7eb      	b.n	80085fa <_printf_i+0x212>
 8008622:	2500      	movs	r5, #0
 8008624:	f104 0619 	add.w	r6, r4, #25
 8008628:	e7f5      	b.n	8008616 <_printf_i+0x22e>
 800862a:	bf00      	nop
 800862c:	0800f1ba 	.word	0x0800f1ba
 8008630:	0800f1cb 	.word	0x0800f1cb

08008634 <_scanf_float>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	b087      	sub	sp, #28
 800863a:	4617      	mov	r7, r2
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	688b      	ldr	r3, [r1, #8]
 8008640:	1e5a      	subs	r2, r3, #1
 8008642:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008646:	bf83      	ittte	hi
 8008648:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800864c:	195b      	addhi	r3, r3, r5
 800864e:	9302      	strhi	r3, [sp, #8]
 8008650:	2300      	movls	r3, #0
 8008652:	bf86      	itte	hi
 8008654:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008658:	608b      	strhi	r3, [r1, #8]
 800865a:	9302      	strls	r3, [sp, #8]
 800865c:	680b      	ldr	r3, [r1, #0]
 800865e:	468b      	mov	fp, r1
 8008660:	2500      	movs	r5, #0
 8008662:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008666:	f84b 3b1c 	str.w	r3, [fp], #28
 800866a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800866e:	4680      	mov	r8, r0
 8008670:	460c      	mov	r4, r1
 8008672:	465e      	mov	r6, fp
 8008674:	46aa      	mov	sl, r5
 8008676:	46a9      	mov	r9, r5
 8008678:	9501      	str	r5, [sp, #4]
 800867a:	68a2      	ldr	r2, [r4, #8]
 800867c:	b152      	cbz	r2, 8008694 <_scanf_float+0x60>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b4e      	cmp	r3, #78	; 0x4e
 8008684:	d864      	bhi.n	8008750 <_scanf_float+0x11c>
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	d83c      	bhi.n	8008704 <_scanf_float+0xd0>
 800868a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800868e:	b2c8      	uxtb	r0, r1
 8008690:	280e      	cmp	r0, #14
 8008692:	d93a      	bls.n	800870a <_scanf_float+0xd6>
 8008694:	f1b9 0f00 	cmp.w	r9, #0
 8008698:	d003      	beq.n	80086a2 <_scanf_float+0x6e>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a6:	f1ba 0f01 	cmp.w	sl, #1
 80086aa:	f200 8113 	bhi.w	80088d4 <_scanf_float+0x2a0>
 80086ae:	455e      	cmp	r6, fp
 80086b0:	f200 8105 	bhi.w	80088be <_scanf_float+0x28a>
 80086b4:	2501      	movs	r5, #1
 80086b6:	4628      	mov	r0, r5
 80086b8:	b007      	add	sp, #28
 80086ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80086c2:	2a0d      	cmp	r2, #13
 80086c4:	d8e6      	bhi.n	8008694 <_scanf_float+0x60>
 80086c6:	a101      	add	r1, pc, #4	; (adr r1, 80086cc <_scanf_float+0x98>)
 80086c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086cc:	0800880b 	.word	0x0800880b
 80086d0:	08008695 	.word	0x08008695
 80086d4:	08008695 	.word	0x08008695
 80086d8:	08008695 	.word	0x08008695
 80086dc:	0800886b 	.word	0x0800886b
 80086e0:	08008843 	.word	0x08008843
 80086e4:	08008695 	.word	0x08008695
 80086e8:	08008695 	.word	0x08008695
 80086ec:	08008819 	.word	0x08008819
 80086f0:	08008695 	.word	0x08008695
 80086f4:	08008695 	.word	0x08008695
 80086f8:	08008695 	.word	0x08008695
 80086fc:	08008695 	.word	0x08008695
 8008700:	080087d1 	.word	0x080087d1
 8008704:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008708:	e7db      	b.n	80086c2 <_scanf_float+0x8e>
 800870a:	290e      	cmp	r1, #14
 800870c:	d8c2      	bhi.n	8008694 <_scanf_float+0x60>
 800870e:	a001      	add	r0, pc, #4	; (adr r0, 8008714 <_scanf_float+0xe0>)
 8008710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008714:	080087c3 	.word	0x080087c3
 8008718:	08008695 	.word	0x08008695
 800871c:	080087c3 	.word	0x080087c3
 8008720:	08008857 	.word	0x08008857
 8008724:	08008695 	.word	0x08008695
 8008728:	08008771 	.word	0x08008771
 800872c:	080087ad 	.word	0x080087ad
 8008730:	080087ad 	.word	0x080087ad
 8008734:	080087ad 	.word	0x080087ad
 8008738:	080087ad 	.word	0x080087ad
 800873c:	080087ad 	.word	0x080087ad
 8008740:	080087ad 	.word	0x080087ad
 8008744:	080087ad 	.word	0x080087ad
 8008748:	080087ad 	.word	0x080087ad
 800874c:	080087ad 	.word	0x080087ad
 8008750:	2b6e      	cmp	r3, #110	; 0x6e
 8008752:	d809      	bhi.n	8008768 <_scanf_float+0x134>
 8008754:	2b60      	cmp	r3, #96	; 0x60
 8008756:	d8b2      	bhi.n	80086be <_scanf_float+0x8a>
 8008758:	2b54      	cmp	r3, #84	; 0x54
 800875a:	d077      	beq.n	800884c <_scanf_float+0x218>
 800875c:	2b59      	cmp	r3, #89	; 0x59
 800875e:	d199      	bne.n	8008694 <_scanf_float+0x60>
 8008760:	2d07      	cmp	r5, #7
 8008762:	d197      	bne.n	8008694 <_scanf_float+0x60>
 8008764:	2508      	movs	r5, #8
 8008766:	e029      	b.n	80087bc <_scanf_float+0x188>
 8008768:	2b74      	cmp	r3, #116	; 0x74
 800876a:	d06f      	beq.n	800884c <_scanf_float+0x218>
 800876c:	2b79      	cmp	r3, #121	; 0x79
 800876e:	e7f6      	b.n	800875e <_scanf_float+0x12a>
 8008770:	6821      	ldr	r1, [r4, #0]
 8008772:	05c8      	lsls	r0, r1, #23
 8008774:	d51a      	bpl.n	80087ac <_scanf_float+0x178>
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800877c:	6021      	str	r1, [r4, #0]
 800877e:	f109 0901 	add.w	r9, r9, #1
 8008782:	b11b      	cbz	r3, 800878c <_scanf_float+0x158>
 8008784:	3b01      	subs	r3, #1
 8008786:	3201      	adds	r2, #1
 8008788:	9302      	str	r3, [sp, #8]
 800878a:	60a2      	str	r2, [r4, #8]
 800878c:	68a3      	ldr	r3, [r4, #8]
 800878e:	3b01      	subs	r3, #1
 8008790:	60a3      	str	r3, [r4, #8]
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	3301      	adds	r3, #1
 8008796:	6123      	str	r3, [r4, #16]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3b01      	subs	r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	f340 8084 	ble.w	80088ac <_scanf_float+0x278>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	3301      	adds	r3, #1
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	e766      	b.n	800867a <_scanf_float+0x46>
 80087ac:	eb1a 0f05 	cmn.w	sl, r5
 80087b0:	f47f af70 	bne.w	8008694 <_scanf_float+0x60>
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	f806 3b01 	strb.w	r3, [r6], #1
 80087c0:	e7e4      	b.n	800878c <_scanf_float+0x158>
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	0610      	lsls	r0, r2, #24
 80087c6:	f57f af65 	bpl.w	8008694 <_scanf_float+0x60>
 80087ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ce:	e7f4      	b.n	80087ba <_scanf_float+0x186>
 80087d0:	f1ba 0f00 	cmp.w	sl, #0
 80087d4:	d10e      	bne.n	80087f4 <_scanf_float+0x1c0>
 80087d6:	f1b9 0f00 	cmp.w	r9, #0
 80087da:	d10e      	bne.n	80087fa <_scanf_float+0x1c6>
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087e6:	d108      	bne.n	80087fa <_scanf_float+0x1c6>
 80087e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	f04f 0a01 	mov.w	sl, #1
 80087f2:	e7e3      	b.n	80087bc <_scanf_float+0x188>
 80087f4:	f1ba 0f02 	cmp.w	sl, #2
 80087f8:	d055      	beq.n	80088a6 <_scanf_float+0x272>
 80087fa:	2d01      	cmp	r5, #1
 80087fc:	d002      	beq.n	8008804 <_scanf_float+0x1d0>
 80087fe:	2d04      	cmp	r5, #4
 8008800:	f47f af48 	bne.w	8008694 <_scanf_float+0x60>
 8008804:	3501      	adds	r5, #1
 8008806:	b2ed      	uxtb	r5, r5
 8008808:	e7d8      	b.n	80087bc <_scanf_float+0x188>
 800880a:	f1ba 0f01 	cmp.w	sl, #1
 800880e:	f47f af41 	bne.w	8008694 <_scanf_float+0x60>
 8008812:	f04f 0a02 	mov.w	sl, #2
 8008816:	e7d1      	b.n	80087bc <_scanf_float+0x188>
 8008818:	b97d      	cbnz	r5, 800883a <_scanf_float+0x206>
 800881a:	f1b9 0f00 	cmp.w	r9, #0
 800881e:	f47f af3c 	bne.w	800869a <_scanf_float+0x66>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008828:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800882c:	f47f af39 	bne.w	80086a2 <_scanf_float+0x6e>
 8008830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008834:	6022      	str	r2, [r4, #0]
 8008836:	2501      	movs	r5, #1
 8008838:	e7c0      	b.n	80087bc <_scanf_float+0x188>
 800883a:	2d03      	cmp	r5, #3
 800883c:	d0e2      	beq.n	8008804 <_scanf_float+0x1d0>
 800883e:	2d05      	cmp	r5, #5
 8008840:	e7de      	b.n	8008800 <_scanf_float+0x1cc>
 8008842:	2d02      	cmp	r5, #2
 8008844:	f47f af26 	bne.w	8008694 <_scanf_float+0x60>
 8008848:	2503      	movs	r5, #3
 800884a:	e7b7      	b.n	80087bc <_scanf_float+0x188>
 800884c:	2d06      	cmp	r5, #6
 800884e:	f47f af21 	bne.w	8008694 <_scanf_float+0x60>
 8008852:	2507      	movs	r5, #7
 8008854:	e7b2      	b.n	80087bc <_scanf_float+0x188>
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	0591      	lsls	r1, r2, #22
 800885a:	f57f af1b 	bpl.w	8008694 <_scanf_float+0x60>
 800885e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008862:	6022      	str	r2, [r4, #0]
 8008864:	f8cd 9004 	str.w	r9, [sp, #4]
 8008868:	e7a8      	b.n	80087bc <_scanf_float+0x188>
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008870:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008874:	d006      	beq.n	8008884 <_scanf_float+0x250>
 8008876:	0550      	lsls	r0, r2, #21
 8008878:	f57f af0c 	bpl.w	8008694 <_scanf_float+0x60>
 800887c:	f1b9 0f00 	cmp.w	r9, #0
 8008880:	f43f af0f 	beq.w	80086a2 <_scanf_float+0x6e>
 8008884:	0591      	lsls	r1, r2, #22
 8008886:	bf58      	it	pl
 8008888:	9901      	ldrpl	r1, [sp, #4]
 800888a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800888e:	bf58      	it	pl
 8008890:	eba9 0101 	subpl.w	r1, r9, r1
 8008894:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008898:	bf58      	it	pl
 800889a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	f04f 0900 	mov.w	r9, #0
 80088a4:	e78a      	b.n	80087bc <_scanf_float+0x188>
 80088a6:	f04f 0a03 	mov.w	sl, #3
 80088aa:	e787      	b.n	80087bc <_scanf_float+0x188>
 80088ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80088b0:	4639      	mov	r1, r7
 80088b2:	4640      	mov	r0, r8
 80088b4:	4798      	blx	r3
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f43f aedf 	beq.w	800867a <_scanf_float+0x46>
 80088bc:	e6ea      	b.n	8008694 <_scanf_float+0x60>
 80088be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088c6:	463a      	mov	r2, r7
 80088c8:	4640      	mov	r0, r8
 80088ca:	4798      	blx	r3
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	6123      	str	r3, [r4, #16]
 80088d2:	e6ec      	b.n	80086ae <_scanf_float+0x7a>
 80088d4:	1e6b      	subs	r3, r5, #1
 80088d6:	2b06      	cmp	r3, #6
 80088d8:	d825      	bhi.n	8008926 <_scanf_float+0x2f2>
 80088da:	2d02      	cmp	r5, #2
 80088dc:	d836      	bhi.n	800894c <_scanf_float+0x318>
 80088de:	455e      	cmp	r6, fp
 80088e0:	f67f aee8 	bls.w	80086b4 <_scanf_float+0x80>
 80088e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ec:	463a      	mov	r2, r7
 80088ee:	4640      	mov	r0, r8
 80088f0:	4798      	blx	r3
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	e7f1      	b.n	80088de <_scanf_float+0x2aa>
 80088fa:	9802      	ldr	r0, [sp, #8]
 80088fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008900:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008904:	9002      	str	r0, [sp, #8]
 8008906:	463a      	mov	r2, r7
 8008908:	4640      	mov	r0, r8
 800890a:	4798      	blx	r3
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	3b01      	subs	r3, #1
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008916:	fa5f fa8a 	uxtb.w	sl, sl
 800891a:	f1ba 0f02 	cmp.w	sl, #2
 800891e:	d1ec      	bne.n	80088fa <_scanf_float+0x2c6>
 8008920:	3d03      	subs	r5, #3
 8008922:	b2ed      	uxtb	r5, r5
 8008924:	1b76      	subs	r6, r6, r5
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	05da      	lsls	r2, r3, #23
 800892a:	d52f      	bpl.n	800898c <_scanf_float+0x358>
 800892c:	055b      	lsls	r3, r3, #21
 800892e:	d510      	bpl.n	8008952 <_scanf_float+0x31e>
 8008930:	455e      	cmp	r6, fp
 8008932:	f67f aebf 	bls.w	80086b4 <_scanf_float+0x80>
 8008936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800893a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800893e:	463a      	mov	r2, r7
 8008940:	4640      	mov	r0, r8
 8008942:	4798      	blx	r3
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	3b01      	subs	r3, #1
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	e7f1      	b.n	8008930 <_scanf_float+0x2fc>
 800894c:	46aa      	mov	sl, r5
 800894e:	9602      	str	r6, [sp, #8]
 8008950:	e7df      	b.n	8008912 <_scanf_float+0x2de>
 8008952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	2965      	cmp	r1, #101	; 0x65
 800895a:	f103 33ff 	add.w	r3, r3, #4294967295
 800895e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008962:	6123      	str	r3, [r4, #16]
 8008964:	d00c      	beq.n	8008980 <_scanf_float+0x34c>
 8008966:	2945      	cmp	r1, #69	; 0x45
 8008968:	d00a      	beq.n	8008980 <_scanf_float+0x34c>
 800896a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800896e:	463a      	mov	r2, r7
 8008970:	4640      	mov	r0, r8
 8008972:	4798      	blx	r3
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800897a:	3b01      	subs	r3, #1
 800897c:	1eb5      	subs	r5, r6, #2
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008984:	463a      	mov	r2, r7
 8008986:	4640      	mov	r0, r8
 8008988:	4798      	blx	r3
 800898a:	462e      	mov	r6, r5
 800898c:	6825      	ldr	r5, [r4, #0]
 800898e:	f015 0510 	ands.w	r5, r5, #16
 8008992:	d158      	bne.n	8008a46 <_scanf_float+0x412>
 8008994:	7035      	strb	r5, [r6, #0]
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800899c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a0:	d11c      	bne.n	80089dc <_scanf_float+0x3a8>
 80089a2:	9b01      	ldr	r3, [sp, #4]
 80089a4:	454b      	cmp	r3, r9
 80089a6:	eba3 0209 	sub.w	r2, r3, r9
 80089aa:	d124      	bne.n	80089f6 <_scanf_float+0x3c2>
 80089ac:	2200      	movs	r2, #0
 80089ae:	4659      	mov	r1, fp
 80089b0:	4640      	mov	r0, r8
 80089b2:	f000 fe9b 	bl	80096ec <_strtod_r>
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	6821      	ldr	r1, [r4, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f011 0f02 	tst.w	r1, #2
 80089c0:	ec57 6b10 	vmov	r6, r7, d0
 80089c4:	f103 0204 	add.w	r2, r3, #4
 80089c8:	d020      	beq.n	8008a0c <_scanf_float+0x3d8>
 80089ca:	9903      	ldr	r1, [sp, #12]
 80089cc:	600a      	str	r2, [r1, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	e9c3 6700 	strd	r6, r7, [r3]
 80089d4:	68e3      	ldr	r3, [r4, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60e3      	str	r3, [r4, #12]
 80089da:	e66c      	b.n	80086b6 <_scanf_float+0x82>
 80089dc:	9b04      	ldr	r3, [sp, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0e4      	beq.n	80089ac <_scanf_float+0x378>
 80089e2:	9905      	ldr	r1, [sp, #20]
 80089e4:	230a      	movs	r3, #10
 80089e6:	462a      	mov	r2, r5
 80089e8:	3101      	adds	r1, #1
 80089ea:	4640      	mov	r0, r8
 80089ec:	f000 ff08 	bl	8009800 <_strtol_r>
 80089f0:	9b04      	ldr	r3, [sp, #16]
 80089f2:	9e05      	ldr	r6, [sp, #20]
 80089f4:	1ac2      	subs	r2, r0, r3
 80089f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80089fa:	429e      	cmp	r6, r3
 80089fc:	bf28      	it	cs
 80089fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a02:	4912      	ldr	r1, [pc, #72]	; (8008a4c <_scanf_float+0x418>)
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 f82b 	bl	8008a60 <siprintf>
 8008a0a:	e7cf      	b.n	80089ac <_scanf_float+0x378>
 8008a0c:	f011 0f04 	tst.w	r1, #4
 8008a10:	9903      	ldr	r1, [sp, #12]
 8008a12:	600a      	str	r2, [r1, #0]
 8008a14:	d1db      	bne.n	80089ce <_scanf_float+0x39a>
 8008a16:	f8d3 8000 	ldr.w	r8, [r3]
 8008a1a:	ee10 2a10 	vmov	r2, s0
 8008a1e:	ee10 0a10 	vmov	r0, s0
 8008a22:	463b      	mov	r3, r7
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f8 f881 	bl	8000b2c <__aeabi_dcmpun>
 8008a2a:	b128      	cbz	r0, 8008a38 <_scanf_float+0x404>
 8008a2c:	4808      	ldr	r0, [pc, #32]	; (8008a50 <_scanf_float+0x41c>)
 8008a2e:	f000 f811 	bl	8008a54 <nanf>
 8008a32:	ed88 0a00 	vstr	s0, [r8]
 8008a36:	e7cd      	b.n	80089d4 <_scanf_float+0x3a0>
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f8d4 	bl	8000be8 <__aeabi_d2f>
 8008a40:	f8c8 0000 	str.w	r0, [r8]
 8008a44:	e7c6      	b.n	80089d4 <_scanf_float+0x3a0>
 8008a46:	2500      	movs	r5, #0
 8008a48:	e635      	b.n	80086b6 <_scanf_float+0x82>
 8008a4a:	bf00      	nop
 8008a4c:	0800f1dc 	.word	0x0800f1dc
 8008a50:	0800f5f8 	.word	0x0800f5f8

08008a54 <nanf>:
 8008a54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a5c <nanf+0x8>
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	7fc00000 	.word	0x7fc00000

08008a60 <siprintf>:
 8008a60:	b40e      	push	{r1, r2, r3}
 8008a62:	b500      	push	{lr}
 8008a64:	b09c      	sub	sp, #112	; 0x70
 8008a66:	ab1d      	add	r3, sp, #116	; 0x74
 8008a68:	9002      	str	r0, [sp, #8]
 8008a6a:	9006      	str	r0, [sp, #24]
 8008a6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a70:	4809      	ldr	r0, [pc, #36]	; (8008a98 <siprintf+0x38>)
 8008a72:	9107      	str	r1, [sp, #28]
 8008a74:	9104      	str	r1, [sp, #16]
 8008a76:	4909      	ldr	r1, [pc, #36]	; (8008a9c <siprintf+0x3c>)
 8008a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7c:	9105      	str	r1, [sp, #20]
 8008a7e:	6800      	ldr	r0, [r0, #0]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	a902      	add	r1, sp, #8
 8008a84:	f002 fea4 	bl	800b7d0 <_svfiprintf_r>
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	b01c      	add	sp, #112	; 0x70
 8008a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a94:	b003      	add	sp, #12
 8008a96:	4770      	bx	lr
 8008a98:	20000160 	.word	0x20000160
 8008a9c:	ffff0208 	.word	0xffff0208

08008aa0 <sulp>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	ec45 4b10 	vmov	d0, r4, r5
 8008aaa:	4616      	mov	r6, r2
 8008aac:	f002 fc2c 	bl	800b308 <__ulp>
 8008ab0:	ec51 0b10 	vmov	r0, r1, d0
 8008ab4:	b17e      	cbz	r6, 8008ad6 <sulp+0x36>
 8008ab6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008aba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dd09      	ble.n	8008ad6 <sulp+0x36>
 8008ac2:	051b      	lsls	r3, r3, #20
 8008ac4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ac8:	2400      	movs	r4, #0
 8008aca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ace:	4622      	mov	r2, r4
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	f7f7 fd91 	bl	80005f8 <__aeabi_dmul>
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}

08008ad8 <_strtod_l>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	b0a3      	sub	sp, #140	; 0x8c
 8008ade:	461f      	mov	r7, r3
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	931e      	str	r3, [sp, #120]	; 0x78
 8008ae4:	4ba4      	ldr	r3, [pc, #656]	; (8008d78 <_strtod_l+0x2a0>)
 8008ae6:	9219      	str	r2, [sp, #100]	; 0x64
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	9307      	str	r3, [sp, #28]
 8008aec:	4604      	mov	r4, r0
 8008aee:	4618      	mov	r0, r3
 8008af0:	4688      	mov	r8, r1
 8008af2:	f7f7 fb6d 	bl	80001d0 <strlen>
 8008af6:	f04f 0a00 	mov.w	sl, #0
 8008afa:	4605      	mov	r5, r0
 8008afc:	f04f 0b00 	mov.w	fp, #0
 8008b00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b06:	781a      	ldrb	r2, [r3, #0]
 8008b08:	2a2b      	cmp	r2, #43	; 0x2b
 8008b0a:	d04c      	beq.n	8008ba6 <_strtod_l+0xce>
 8008b0c:	d839      	bhi.n	8008b82 <_strtod_l+0xaa>
 8008b0e:	2a0d      	cmp	r2, #13
 8008b10:	d832      	bhi.n	8008b78 <_strtod_l+0xa0>
 8008b12:	2a08      	cmp	r2, #8
 8008b14:	d832      	bhi.n	8008b7c <_strtod_l+0xa4>
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d03c      	beq.n	8008b94 <_strtod_l+0xbc>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8008b1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008b20:	7833      	ldrb	r3, [r6, #0]
 8008b22:	2b30      	cmp	r3, #48	; 0x30
 8008b24:	f040 80b4 	bne.w	8008c90 <_strtod_l+0x1b8>
 8008b28:	7873      	ldrb	r3, [r6, #1]
 8008b2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b2e:	2b58      	cmp	r3, #88	; 0x58
 8008b30:	d16c      	bne.n	8008c0c <_strtod_l+0x134>
 8008b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	ab1e      	add	r3, sp, #120	; 0x78
 8008b38:	9702      	str	r7, [sp, #8]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	4a8f      	ldr	r2, [pc, #572]	; (8008d7c <_strtod_l+0x2a4>)
 8008b3e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008b40:	a91d      	add	r1, sp, #116	; 0x74
 8008b42:	4620      	mov	r0, r4
 8008b44:	f001 fd40 	bl	800a5c8 <__gethex>
 8008b48:	f010 0707 	ands.w	r7, r0, #7
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	d005      	beq.n	8008b5c <_strtod_l+0x84>
 8008b50:	2f06      	cmp	r7, #6
 8008b52:	d12a      	bne.n	8008baa <_strtod_l+0xd2>
 8008b54:	3601      	adds	r6, #1
 8008b56:	2300      	movs	r3, #0
 8008b58:	961d      	str	r6, [sp, #116]	; 0x74
 8008b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 8596 	bne.w	8009690 <_strtod_l+0xbb8>
 8008b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b66:	b1db      	cbz	r3, 8008ba0 <_strtod_l+0xc8>
 8008b68:	4652      	mov	r2, sl
 8008b6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b6e:	ec43 2b10 	vmov	d0, r2, r3
 8008b72:	b023      	add	sp, #140	; 0x8c
 8008b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	2a20      	cmp	r2, #32
 8008b7a:	d1ce      	bne.n	8008b1a <_strtod_l+0x42>
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	931d      	str	r3, [sp, #116]	; 0x74
 8008b80:	e7c0      	b.n	8008b04 <_strtod_l+0x2c>
 8008b82:	2a2d      	cmp	r2, #45	; 0x2d
 8008b84:	d1c9      	bne.n	8008b1a <_strtod_l+0x42>
 8008b86:	2201      	movs	r2, #1
 8008b88:	920e      	str	r2, [sp, #56]	; 0x38
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	921d      	str	r2, [sp, #116]	; 0x74
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1c4      	bne.n	8008b1e <_strtod_l+0x46>
 8008b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 8576 	bne.w	800968c <_strtod_l+0xbb4>
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	465b      	mov	r3, fp
 8008ba4:	e7e3      	b.n	8008b6e <_strtod_l+0x96>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	e7ee      	b.n	8008b88 <_strtod_l+0xb0>
 8008baa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008bac:	b13a      	cbz	r2, 8008bbe <_strtod_l+0xe6>
 8008bae:	2135      	movs	r1, #53	; 0x35
 8008bb0:	a820      	add	r0, sp, #128	; 0x80
 8008bb2:	f002 fcb4 	bl	800b51e <__copybits>
 8008bb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f002 f879 	bl	800acb0 <_Bfree>
 8008bbe:	3f01      	subs	r7, #1
 8008bc0:	2f05      	cmp	r7, #5
 8008bc2:	d807      	bhi.n	8008bd4 <_strtod_l+0xfc>
 8008bc4:	e8df f007 	tbb	[pc, r7]
 8008bc8:	1d180b0e 	.word	0x1d180b0e
 8008bcc:	030e      	.short	0x030e
 8008bce:	f04f 0b00 	mov.w	fp, #0
 8008bd2:	46da      	mov	sl, fp
 8008bd4:	0728      	lsls	r0, r5, #28
 8008bd6:	d5c1      	bpl.n	8008b5c <_strtod_l+0x84>
 8008bd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008bdc:	e7be      	b.n	8008b5c <_strtod_l+0x84>
 8008bde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008be2:	e7f7      	b.n	8008bd4 <_strtod_l+0xfc>
 8008be4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008be8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008bea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bf6:	e7ed      	b.n	8008bd4 <_strtod_l+0xfc>
 8008bf8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008d80 <_strtod_l+0x2a8>
 8008bfc:	f04f 0a00 	mov.w	sl, #0
 8008c00:	e7e8      	b.n	8008bd4 <_strtod_l+0xfc>
 8008c02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c06:	f04f 3aff 	mov.w	sl, #4294967295
 8008c0a:	e7e3      	b.n	8008bd4 <_strtod_l+0xfc>
 8008c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	921d      	str	r2, [sp, #116]	; 0x74
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	2b30      	cmp	r3, #48	; 0x30
 8008c16:	d0f9      	beq.n	8008c0c <_strtod_l+0x134>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d09f      	beq.n	8008b5c <_strtod_l+0x84>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f04f 0900 	mov.w	r9, #0
 8008c22:	9304      	str	r3, [sp, #16]
 8008c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c26:	930a      	str	r3, [sp, #40]	; 0x28
 8008c28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008c2c:	464f      	mov	r7, r9
 8008c2e:	220a      	movs	r2, #10
 8008c30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008c32:	7806      	ldrb	r6, [r0, #0]
 8008c34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c38:	b2d9      	uxtb	r1, r3
 8008c3a:	2909      	cmp	r1, #9
 8008c3c:	d92a      	bls.n	8008c94 <_strtod_l+0x1bc>
 8008c3e:	9907      	ldr	r1, [sp, #28]
 8008c40:	462a      	mov	r2, r5
 8008c42:	f002 fedd 	bl	800ba00 <strncmp>
 8008c46:	b398      	cbz	r0, 8008cb0 <_strtod_l+0x1d8>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	4633      	mov	r3, r6
 8008c4c:	463d      	mov	r5, r7
 8008c4e:	9007      	str	r0, [sp, #28]
 8008c50:	4602      	mov	r2, r0
 8008c52:	2b65      	cmp	r3, #101	; 0x65
 8008c54:	d001      	beq.n	8008c5a <_strtod_l+0x182>
 8008c56:	2b45      	cmp	r3, #69	; 0x45
 8008c58:	d118      	bne.n	8008c8c <_strtod_l+0x1b4>
 8008c5a:	b91d      	cbnz	r5, 8008c64 <_strtod_l+0x18c>
 8008c5c:	9b04      	ldr	r3, [sp, #16]
 8008c5e:	4303      	orrs	r3, r0
 8008c60:	d098      	beq.n	8008b94 <_strtod_l+0xbc>
 8008c62:	2500      	movs	r5, #0
 8008c64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008c68:	f108 0301 	add.w	r3, r8, #1
 8008c6c:	931d      	str	r3, [sp, #116]	; 0x74
 8008c6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c72:	2b2b      	cmp	r3, #43	; 0x2b
 8008c74:	d075      	beq.n	8008d62 <_strtod_l+0x28a>
 8008c76:	2b2d      	cmp	r3, #45	; 0x2d
 8008c78:	d07b      	beq.n	8008d72 <_strtod_l+0x29a>
 8008c7a:	f04f 0c00 	mov.w	ip, #0
 8008c7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c82:	2909      	cmp	r1, #9
 8008c84:	f240 8082 	bls.w	8008d8c <_strtod_l+0x2b4>
 8008c88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	e09d      	b.n	8008dcc <_strtod_l+0x2f4>
 8008c90:	2300      	movs	r3, #0
 8008c92:	e7c4      	b.n	8008c1e <_strtod_l+0x146>
 8008c94:	2f08      	cmp	r7, #8
 8008c96:	bfd8      	it	le
 8008c98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c9a:	f100 0001 	add.w	r0, r0, #1
 8008c9e:	bfda      	itte	le
 8008ca0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ca4:	9309      	strle	r3, [sp, #36]	; 0x24
 8008ca6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008caa:	3701      	adds	r7, #1
 8008cac:	901d      	str	r0, [sp, #116]	; 0x74
 8008cae:	e7bf      	b.n	8008c30 <_strtod_l+0x158>
 8008cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cb2:	195a      	adds	r2, r3, r5
 8008cb4:	921d      	str	r2, [sp, #116]	; 0x74
 8008cb6:	5d5b      	ldrb	r3, [r3, r5]
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	d037      	beq.n	8008d2c <_strtod_l+0x254>
 8008cbc:	9007      	str	r0, [sp, #28]
 8008cbe:	463d      	mov	r5, r7
 8008cc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008cc4:	2a09      	cmp	r2, #9
 8008cc6:	d912      	bls.n	8008cee <_strtod_l+0x216>
 8008cc8:	2201      	movs	r2, #1
 8008cca:	e7c2      	b.n	8008c52 <_strtod_l+0x17a>
 8008ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	921d      	str	r2, [sp, #116]	; 0x74
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	2b30      	cmp	r3, #48	; 0x30
 8008cd8:	d0f8      	beq.n	8008ccc <_strtod_l+0x1f4>
 8008cda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008cde:	2a08      	cmp	r2, #8
 8008ce0:	f200 84db 	bhi.w	800969a <_strtod_l+0xbc2>
 8008ce4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008ce6:	9007      	str	r0, [sp, #28]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	920a      	str	r2, [sp, #40]	; 0x28
 8008cec:	4605      	mov	r5, r0
 8008cee:	3b30      	subs	r3, #48	; 0x30
 8008cf0:	f100 0201 	add.w	r2, r0, #1
 8008cf4:	d014      	beq.n	8008d20 <_strtod_l+0x248>
 8008cf6:	9907      	ldr	r1, [sp, #28]
 8008cf8:	4411      	add	r1, r2
 8008cfa:	9107      	str	r1, [sp, #28]
 8008cfc:	462a      	mov	r2, r5
 8008cfe:	eb00 0e05 	add.w	lr, r0, r5
 8008d02:	210a      	movs	r1, #10
 8008d04:	4572      	cmp	r2, lr
 8008d06:	d113      	bne.n	8008d30 <_strtod_l+0x258>
 8008d08:	182a      	adds	r2, r5, r0
 8008d0a:	2a08      	cmp	r2, #8
 8008d0c:	f105 0501 	add.w	r5, r5, #1
 8008d10:	4405      	add	r5, r0
 8008d12:	dc1c      	bgt.n	8008d4e <_strtod_l+0x276>
 8008d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d16:	220a      	movs	r2, #10
 8008d18:	fb02 3301 	mla	r3, r2, r1, r3
 8008d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1e:	2200      	movs	r2, #0
 8008d20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d22:	1c59      	adds	r1, r3, #1
 8008d24:	911d      	str	r1, [sp, #116]	; 0x74
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	4610      	mov	r0, r2
 8008d2a:	e7c9      	b.n	8008cc0 <_strtod_l+0x1e8>
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	e7d2      	b.n	8008cd6 <_strtod_l+0x1fe>
 8008d30:	2a08      	cmp	r2, #8
 8008d32:	dc04      	bgt.n	8008d3e <_strtod_l+0x266>
 8008d34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d36:	434e      	muls	r6, r1
 8008d38:	9609      	str	r6, [sp, #36]	; 0x24
 8008d3a:	3201      	adds	r2, #1
 8008d3c:	e7e2      	b.n	8008d04 <_strtod_l+0x22c>
 8008d3e:	f102 0c01 	add.w	ip, r2, #1
 8008d42:	f1bc 0f10 	cmp.w	ip, #16
 8008d46:	bfd8      	it	le
 8008d48:	fb01 f909 	mulle.w	r9, r1, r9
 8008d4c:	e7f5      	b.n	8008d3a <_strtod_l+0x262>
 8008d4e:	2d10      	cmp	r5, #16
 8008d50:	bfdc      	itt	le
 8008d52:	220a      	movle	r2, #10
 8008d54:	fb02 3909 	mlale	r9, r2, r9, r3
 8008d58:	e7e1      	b.n	8008d1e <_strtod_l+0x246>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	e77c      	b.n	8008c5c <_strtod_l+0x184>
 8008d62:	f04f 0c00 	mov.w	ip, #0
 8008d66:	f108 0302 	add.w	r3, r8, #2
 8008d6a:	931d      	str	r3, [sp, #116]	; 0x74
 8008d6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008d70:	e785      	b.n	8008c7e <_strtod_l+0x1a6>
 8008d72:	f04f 0c01 	mov.w	ip, #1
 8008d76:	e7f6      	b.n	8008d66 <_strtod_l+0x28e>
 8008d78:	0800f438 	.word	0x0800f438
 8008d7c:	0800f1e4 	.word	0x0800f1e4
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d86:	1c59      	adds	r1, r3, #1
 8008d88:	911d      	str	r1, [sp, #116]	; 0x74
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b30      	cmp	r3, #48	; 0x30
 8008d8e:	d0f9      	beq.n	8008d84 <_strtod_l+0x2ac>
 8008d90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008d94:	2908      	cmp	r1, #8
 8008d96:	f63f af79 	bhi.w	8008c8c <_strtod_l+0x1b4>
 8008d9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008da4:	1c59      	adds	r1, r3, #1
 8008da6:	911d      	str	r1, [sp, #116]	; 0x74
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008dae:	2e09      	cmp	r6, #9
 8008db0:	d937      	bls.n	8008e22 <_strtod_l+0x34a>
 8008db2:	9e08      	ldr	r6, [sp, #32]
 8008db4:	1b89      	subs	r1, r1, r6
 8008db6:	2908      	cmp	r1, #8
 8008db8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008dbc:	dc02      	bgt.n	8008dc4 <_strtod_l+0x2ec>
 8008dbe:	4576      	cmp	r6, lr
 8008dc0:	bfa8      	it	ge
 8008dc2:	4676      	movge	r6, lr
 8008dc4:	f1bc 0f00 	cmp.w	ip, #0
 8008dc8:	d000      	beq.n	8008dcc <_strtod_l+0x2f4>
 8008dca:	4276      	negs	r6, r6
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	d14f      	bne.n	8008e70 <_strtod_l+0x398>
 8008dd0:	9904      	ldr	r1, [sp, #16]
 8008dd2:	4301      	orrs	r1, r0
 8008dd4:	f47f aec2 	bne.w	8008b5c <_strtod_l+0x84>
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	f47f aedb 	bne.w	8008b94 <_strtod_l+0xbc>
 8008dde:	2b69      	cmp	r3, #105	; 0x69
 8008de0:	d027      	beq.n	8008e32 <_strtod_l+0x35a>
 8008de2:	dc24      	bgt.n	8008e2e <_strtod_l+0x356>
 8008de4:	2b49      	cmp	r3, #73	; 0x49
 8008de6:	d024      	beq.n	8008e32 <_strtod_l+0x35a>
 8008de8:	2b4e      	cmp	r3, #78	; 0x4e
 8008dea:	f47f aed3 	bne.w	8008b94 <_strtod_l+0xbc>
 8008dee:	499e      	ldr	r1, [pc, #632]	; (8009068 <_strtod_l+0x590>)
 8008df0:	a81d      	add	r0, sp, #116	; 0x74
 8008df2:	f001 fe41 	bl	800aa78 <__match>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f43f aecc 	beq.w	8008b94 <_strtod_l+0xbc>
 8008dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b28      	cmp	r3, #40	; 0x28
 8008e02:	d12d      	bne.n	8008e60 <_strtod_l+0x388>
 8008e04:	4999      	ldr	r1, [pc, #612]	; (800906c <_strtod_l+0x594>)
 8008e06:	aa20      	add	r2, sp, #128	; 0x80
 8008e08:	a81d      	add	r0, sp, #116	; 0x74
 8008e0a:	f001 fe49 	bl	800aaa0 <__hexnan>
 8008e0e:	2805      	cmp	r0, #5
 8008e10:	d126      	bne.n	8008e60 <_strtod_l+0x388>
 8008e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008e18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008e1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008e20:	e69c      	b.n	8008b5c <_strtod_l+0x84>
 8008e22:	210a      	movs	r1, #10
 8008e24:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008e28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e2c:	e7b9      	b.n	8008da2 <_strtod_l+0x2ca>
 8008e2e:	2b6e      	cmp	r3, #110	; 0x6e
 8008e30:	e7db      	b.n	8008dea <_strtod_l+0x312>
 8008e32:	498f      	ldr	r1, [pc, #572]	; (8009070 <_strtod_l+0x598>)
 8008e34:	a81d      	add	r0, sp, #116	; 0x74
 8008e36:	f001 fe1f 	bl	800aa78 <__match>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	f43f aeaa 	beq.w	8008b94 <_strtod_l+0xbc>
 8008e40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e42:	498c      	ldr	r1, [pc, #560]	; (8009074 <_strtod_l+0x59c>)
 8008e44:	3b01      	subs	r3, #1
 8008e46:	a81d      	add	r0, sp, #116	; 0x74
 8008e48:	931d      	str	r3, [sp, #116]	; 0x74
 8008e4a:	f001 fe15 	bl	800aa78 <__match>
 8008e4e:	b910      	cbnz	r0, 8008e56 <_strtod_l+0x37e>
 8008e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e52:	3301      	adds	r3, #1
 8008e54:	931d      	str	r3, [sp, #116]	; 0x74
 8008e56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009084 <_strtod_l+0x5ac>
 8008e5a:	f04f 0a00 	mov.w	sl, #0
 8008e5e:	e67d      	b.n	8008b5c <_strtod_l+0x84>
 8008e60:	4885      	ldr	r0, [pc, #532]	; (8009078 <_strtod_l+0x5a0>)
 8008e62:	f002 fdb5 	bl	800b9d0 <nan>
 8008e66:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008e6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008e6e:	e675      	b.n	8008b5c <_strtod_l+0x84>
 8008e70:	9b07      	ldr	r3, [sp, #28]
 8008e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e74:	1af3      	subs	r3, r6, r3
 8008e76:	2f00      	cmp	r7, #0
 8008e78:	bf08      	it	eq
 8008e7a:	462f      	moveq	r7, r5
 8008e7c:	2d10      	cmp	r5, #16
 8008e7e:	9308      	str	r3, [sp, #32]
 8008e80:	46a8      	mov	r8, r5
 8008e82:	bfa8      	it	ge
 8008e84:	f04f 0810 	movge.w	r8, #16
 8008e88:	f7f7 fb3c 	bl	8000504 <__aeabi_ui2d>
 8008e8c:	2d09      	cmp	r5, #9
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	dd13      	ble.n	8008ebc <_strtod_l+0x3e4>
 8008e94:	4b79      	ldr	r3, [pc, #484]	; (800907c <_strtod_l+0x5a4>)
 8008e96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e9e:	f7f7 fbab 	bl	80005f8 <__aeabi_dmul>
 8008ea2:	4682      	mov	sl, r0
 8008ea4:	4648      	mov	r0, r9
 8008ea6:	468b      	mov	fp, r1
 8008ea8:	f7f7 fb2c 	bl	8000504 <__aeabi_ui2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 f9ea 	bl	800028c <__adddf3>
 8008eb8:	4682      	mov	sl, r0
 8008eba:	468b      	mov	fp, r1
 8008ebc:	2d0f      	cmp	r5, #15
 8008ebe:	dc38      	bgt.n	8008f32 <_strtod_l+0x45a>
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f43f ae4a 	beq.w	8008b5c <_strtod_l+0x84>
 8008ec8:	dd24      	ble.n	8008f14 <_strtod_l+0x43c>
 8008eca:	2b16      	cmp	r3, #22
 8008ecc:	dc0b      	bgt.n	8008ee6 <_strtod_l+0x40e>
 8008ece:	4d6b      	ldr	r5, [pc, #428]	; (800907c <_strtod_l+0x5a4>)
 8008ed0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008ed4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008ed8:	4652      	mov	r2, sl
 8008eda:	465b      	mov	r3, fp
 8008edc:	f7f7 fb8c 	bl	80005f8 <__aeabi_dmul>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	e63a      	b.n	8008b5c <_strtod_l+0x84>
 8008ee6:	9a08      	ldr	r2, [sp, #32]
 8008ee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008eec:	4293      	cmp	r3, r2
 8008eee:	db20      	blt.n	8008f32 <_strtod_l+0x45a>
 8008ef0:	4c62      	ldr	r4, [pc, #392]	; (800907c <_strtod_l+0x5a4>)
 8008ef2:	f1c5 050f 	rsb	r5, r5, #15
 8008ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008efa:	4652      	mov	r2, sl
 8008efc:	465b      	mov	r3, fp
 8008efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f02:	f7f7 fb79 	bl	80005f8 <__aeabi_dmul>
 8008f06:	9b08      	ldr	r3, [sp, #32]
 8008f08:	1b5d      	subs	r5, r3, r5
 8008f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f12:	e7e3      	b.n	8008edc <_strtod_l+0x404>
 8008f14:	9b08      	ldr	r3, [sp, #32]
 8008f16:	3316      	adds	r3, #22
 8008f18:	db0b      	blt.n	8008f32 <_strtod_l+0x45a>
 8008f1a:	9b07      	ldr	r3, [sp, #28]
 8008f1c:	4a57      	ldr	r2, [pc, #348]	; (800907c <_strtod_l+0x5a4>)
 8008f1e:	1b9e      	subs	r6, r3, r6
 8008f20:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	f7f7 fc8e 	bl	800084c <__aeabi_ddiv>
 8008f30:	e7d6      	b.n	8008ee0 <_strtod_l+0x408>
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	eba5 0808 	sub.w	r8, r5, r8
 8008f38:	4498      	add	r8, r3
 8008f3a:	f1b8 0f00 	cmp.w	r8, #0
 8008f3e:	dd71      	ble.n	8009024 <_strtod_l+0x54c>
 8008f40:	f018 030f 	ands.w	r3, r8, #15
 8008f44:	d00a      	beq.n	8008f5c <_strtod_l+0x484>
 8008f46:	494d      	ldr	r1, [pc, #308]	; (800907c <_strtod_l+0x5a4>)
 8008f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f54:	f7f7 fb50 	bl	80005f8 <__aeabi_dmul>
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	f038 080f 	bics.w	r8, r8, #15
 8008f60:	d04d      	beq.n	8008ffe <_strtod_l+0x526>
 8008f62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f66:	dd22      	ble.n	8008fae <_strtod_l+0x4d6>
 8008f68:	2500      	movs	r5, #0
 8008f6a:	462e      	mov	r6, r5
 8008f6c:	9509      	str	r5, [sp, #36]	; 0x24
 8008f6e:	9507      	str	r5, [sp, #28]
 8008f70:	2322      	movs	r3, #34	; 0x22
 8008f72:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009084 <_strtod_l+0x5ac>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f04f 0a00 	mov.w	sl, #0
 8008f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f43f adec 	beq.w	8008b5c <_strtod_l+0x84>
 8008f84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 fe92 	bl	800acb0 <_Bfree>
 8008f8c:	9907      	ldr	r1, [sp, #28]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f001 fe8e 	bl	800acb0 <_Bfree>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fe8a 	bl	800acb0 <_Bfree>
 8008f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f001 fe86 	bl	800acb0 <_Bfree>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f001 fe82 	bl	800acb0 <_Bfree>
 8008fac:	e5d6      	b.n	8008b5c <_strtod_l+0x84>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	4699      	mov	r9, r3
 8008fba:	f1b8 0f01 	cmp.w	r8, #1
 8008fbe:	dc21      	bgt.n	8009004 <_strtod_l+0x52c>
 8008fc0:	b10b      	cbz	r3, 8008fc6 <_strtod_l+0x4ee>
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	468b      	mov	fp, r1
 8008fc6:	4b2e      	ldr	r3, [pc, #184]	; (8009080 <_strtod_l+0x5a8>)
 8008fc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008fcc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	465b      	mov	r3, fp
 8008fd4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008fd8:	f7f7 fb0e 	bl	80005f8 <__aeabi_dmul>
 8008fdc:	4b29      	ldr	r3, [pc, #164]	; (8009084 <_strtod_l+0x5ac>)
 8008fde:	460a      	mov	r2, r1
 8008fe0:	400b      	ands	r3, r1
 8008fe2:	4929      	ldr	r1, [pc, #164]	; (8009088 <_strtod_l+0x5b0>)
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	4682      	mov	sl, r0
 8008fe8:	d8be      	bhi.n	8008f68 <_strtod_l+0x490>
 8008fea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fee:	428b      	cmp	r3, r1
 8008ff0:	bf86      	itte	hi
 8008ff2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800908c <_strtod_l+0x5b4>
 8008ff6:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ffa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ffe:	2300      	movs	r3, #0
 8009000:	9304      	str	r3, [sp, #16]
 8009002:	e081      	b.n	8009108 <_strtod_l+0x630>
 8009004:	f018 0f01 	tst.w	r8, #1
 8009008:	d007      	beq.n	800901a <_strtod_l+0x542>
 800900a:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <_strtod_l+0x5a8>)
 800900c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7f7 faf0 	bl	80005f8 <__aeabi_dmul>
 8009018:	2301      	movs	r3, #1
 800901a:	f109 0901 	add.w	r9, r9, #1
 800901e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009022:	e7ca      	b.n	8008fba <_strtod_l+0x4e2>
 8009024:	d0eb      	beq.n	8008ffe <_strtod_l+0x526>
 8009026:	f1c8 0800 	rsb	r8, r8, #0
 800902a:	f018 020f 	ands.w	r2, r8, #15
 800902e:	d00a      	beq.n	8009046 <_strtod_l+0x56e>
 8009030:	4b12      	ldr	r3, [pc, #72]	; (800907c <_strtod_l+0x5a4>)
 8009032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009036:	4650      	mov	r0, sl
 8009038:	4659      	mov	r1, fp
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 fc05 	bl	800084c <__aeabi_ddiv>
 8009042:	4682      	mov	sl, r0
 8009044:	468b      	mov	fp, r1
 8009046:	ea5f 1828 	movs.w	r8, r8, asr #4
 800904a:	d0d8      	beq.n	8008ffe <_strtod_l+0x526>
 800904c:	f1b8 0f1f 	cmp.w	r8, #31
 8009050:	dd1e      	ble.n	8009090 <_strtod_l+0x5b8>
 8009052:	2500      	movs	r5, #0
 8009054:	462e      	mov	r6, r5
 8009056:	9509      	str	r5, [sp, #36]	; 0x24
 8009058:	9507      	str	r5, [sp, #28]
 800905a:	2322      	movs	r3, #34	; 0x22
 800905c:	f04f 0a00 	mov.w	sl, #0
 8009060:	f04f 0b00 	mov.w	fp, #0
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	e789      	b.n	8008f7c <_strtod_l+0x4a4>
 8009068:	0800f1b5 	.word	0x0800f1b5
 800906c:	0800f1f8 	.word	0x0800f1f8
 8009070:	0800f1ad 	.word	0x0800f1ad
 8009074:	0800f33c 	.word	0x0800f33c
 8009078:	0800f5f8 	.word	0x0800f5f8
 800907c:	0800f4d8 	.word	0x0800f4d8
 8009080:	0800f4b0 	.word	0x0800f4b0
 8009084:	7ff00000 	.word	0x7ff00000
 8009088:	7ca00000 	.word	0x7ca00000
 800908c:	7fefffff 	.word	0x7fefffff
 8009090:	f018 0310 	ands.w	r3, r8, #16
 8009094:	bf18      	it	ne
 8009096:	236a      	movne	r3, #106	; 0x6a
 8009098:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009450 <_strtod_l+0x978>
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	4650      	mov	r0, sl
 80090a0:	4659      	mov	r1, fp
 80090a2:	2300      	movs	r3, #0
 80090a4:	f018 0f01 	tst.w	r8, #1
 80090a8:	d004      	beq.n	80090b4 <_strtod_l+0x5dc>
 80090aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	2301      	movs	r3, #1
 80090b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80090b8:	f109 0908 	add.w	r9, r9, #8
 80090bc:	d1f2      	bne.n	80090a4 <_strtod_l+0x5cc>
 80090be:	b10b      	cbz	r3, 80090c4 <_strtod_l+0x5ec>
 80090c0:	4682      	mov	sl, r0
 80090c2:	468b      	mov	fp, r1
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	b1bb      	cbz	r3, 80090f8 <_strtod_l+0x620>
 80090c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80090cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	4659      	mov	r1, fp
 80090d4:	dd10      	ble.n	80090f8 <_strtod_l+0x620>
 80090d6:	2b1f      	cmp	r3, #31
 80090d8:	f340 8128 	ble.w	800932c <_strtod_l+0x854>
 80090dc:	2b34      	cmp	r3, #52	; 0x34
 80090de:	bfde      	ittt	le
 80090e0:	3b20      	suble	r3, #32
 80090e2:	f04f 32ff 	movle.w	r2, #4294967295
 80090e6:	fa02 f303 	lslle.w	r3, r2, r3
 80090ea:	f04f 0a00 	mov.w	sl, #0
 80090ee:	bfcc      	ite	gt
 80090f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090f4:	ea03 0b01 	andle.w	fp, r3, r1
 80090f8:	2200      	movs	r2, #0
 80090fa:	2300      	movs	r3, #0
 80090fc:	4650      	mov	r0, sl
 80090fe:	4659      	mov	r1, fp
 8009100:	f7f7 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009104:	2800      	cmp	r0, #0
 8009106:	d1a4      	bne.n	8009052 <_strtod_l+0x57a>
 8009108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800910e:	462b      	mov	r3, r5
 8009110:	463a      	mov	r2, r7
 8009112:	4620      	mov	r0, r4
 8009114:	f001 fe38 	bl	800ad88 <__s2b>
 8009118:	9009      	str	r0, [sp, #36]	; 0x24
 800911a:	2800      	cmp	r0, #0
 800911c:	f43f af24 	beq.w	8008f68 <_strtod_l+0x490>
 8009120:	9b07      	ldr	r3, [sp, #28]
 8009122:	1b9e      	subs	r6, r3, r6
 8009124:	9b08      	ldr	r3, [sp, #32]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfb4      	ite	lt
 800912a:	4633      	movlt	r3, r6
 800912c:	2300      	movge	r3, #0
 800912e:	9310      	str	r3, [sp, #64]	; 0x40
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	2500      	movs	r5, #0
 8009134:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009138:	9318      	str	r3, [sp, #96]	; 0x60
 800913a:	462e      	mov	r6, r5
 800913c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913e:	4620      	mov	r0, r4
 8009140:	6859      	ldr	r1, [r3, #4]
 8009142:	f001 fd75 	bl	800ac30 <_Balloc>
 8009146:	9007      	str	r0, [sp, #28]
 8009148:	2800      	cmp	r0, #0
 800914a:	f43f af11 	beq.w	8008f70 <_strtod_l+0x498>
 800914e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009150:	691a      	ldr	r2, [r3, #16]
 8009152:	3202      	adds	r2, #2
 8009154:	f103 010c 	add.w	r1, r3, #12
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	300c      	adds	r0, #12
 800915c:	f001 fd5a 	bl	800ac14 <memcpy>
 8009160:	ec4b ab10 	vmov	d0, sl, fp
 8009164:	aa20      	add	r2, sp, #128	; 0x80
 8009166:	a91f      	add	r1, sp, #124	; 0x7c
 8009168:	4620      	mov	r0, r4
 800916a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800916e:	f002 f947 	bl	800b400 <__d2b>
 8009172:	901e      	str	r0, [sp, #120]	; 0x78
 8009174:	2800      	cmp	r0, #0
 8009176:	f43f aefb 	beq.w	8008f70 <_strtod_l+0x498>
 800917a:	2101      	movs	r1, #1
 800917c:	4620      	mov	r0, r4
 800917e:	f001 fe9d 	bl	800aebc <__i2b>
 8009182:	4606      	mov	r6, r0
 8009184:	2800      	cmp	r0, #0
 8009186:	f43f aef3 	beq.w	8008f70 <_strtod_l+0x498>
 800918a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800918c:	9904      	ldr	r1, [sp, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfab      	itete	ge
 8009192:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009194:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009196:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009198:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800919c:	bfac      	ite	ge
 800919e:	eb03 0902 	addge.w	r9, r3, r2
 80091a2:	1ad7      	sublt	r7, r2, r3
 80091a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091a6:	eba3 0801 	sub.w	r8, r3, r1
 80091aa:	4490      	add	r8, r2
 80091ac:	4ba3      	ldr	r3, [pc, #652]	; (800943c <_strtod_l+0x964>)
 80091ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80091b2:	4598      	cmp	r8, r3
 80091b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80091b8:	f280 80cc 	bge.w	8009354 <_strtod_l+0x87c>
 80091bc:	eba3 0308 	sub.w	r3, r3, r8
 80091c0:	2b1f      	cmp	r3, #31
 80091c2:	eba2 0203 	sub.w	r2, r2, r3
 80091c6:	f04f 0101 	mov.w	r1, #1
 80091ca:	f300 80b6 	bgt.w	800933a <_strtod_l+0x862>
 80091ce:	fa01 f303 	lsl.w	r3, r1, r3
 80091d2:	9311      	str	r3, [sp, #68]	; 0x44
 80091d4:	2300      	movs	r3, #0
 80091d6:	930c      	str	r3, [sp, #48]	; 0x30
 80091d8:	eb09 0802 	add.w	r8, r9, r2
 80091dc:	9b04      	ldr	r3, [sp, #16]
 80091de:	45c1      	cmp	r9, r8
 80091e0:	4417      	add	r7, r2
 80091e2:	441f      	add	r7, r3
 80091e4:	464b      	mov	r3, r9
 80091e6:	bfa8      	it	ge
 80091e8:	4643      	movge	r3, r8
 80091ea:	42bb      	cmp	r3, r7
 80091ec:	bfa8      	it	ge
 80091ee:	463b      	movge	r3, r7
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfc2      	ittt	gt
 80091f4:	eba8 0803 	subgt.w	r8, r8, r3
 80091f8:	1aff      	subgt	r7, r7, r3
 80091fa:	eba9 0903 	subgt.w	r9, r9, r3
 80091fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	dd17      	ble.n	8009234 <_strtod_l+0x75c>
 8009204:	4631      	mov	r1, r6
 8009206:	461a      	mov	r2, r3
 8009208:	4620      	mov	r0, r4
 800920a:	f001 ff13 	bl	800b034 <__pow5mult>
 800920e:	4606      	mov	r6, r0
 8009210:	2800      	cmp	r0, #0
 8009212:	f43f aead 	beq.w	8008f70 <_strtod_l+0x498>
 8009216:	4601      	mov	r1, r0
 8009218:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800921a:	4620      	mov	r0, r4
 800921c:	f001 fe64 	bl	800aee8 <__multiply>
 8009220:	900f      	str	r0, [sp, #60]	; 0x3c
 8009222:	2800      	cmp	r0, #0
 8009224:	f43f aea4 	beq.w	8008f70 <_strtod_l+0x498>
 8009228:	991e      	ldr	r1, [sp, #120]	; 0x78
 800922a:	4620      	mov	r0, r4
 800922c:	f001 fd40 	bl	800acb0 <_Bfree>
 8009230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009232:	931e      	str	r3, [sp, #120]	; 0x78
 8009234:	f1b8 0f00 	cmp.w	r8, #0
 8009238:	f300 8091 	bgt.w	800935e <_strtod_l+0x886>
 800923c:	9b08      	ldr	r3, [sp, #32]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dd08      	ble.n	8009254 <_strtod_l+0x77c>
 8009242:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009244:	9907      	ldr	r1, [sp, #28]
 8009246:	4620      	mov	r0, r4
 8009248:	f001 fef4 	bl	800b034 <__pow5mult>
 800924c:	9007      	str	r0, [sp, #28]
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f ae8e 	beq.w	8008f70 <_strtod_l+0x498>
 8009254:	2f00      	cmp	r7, #0
 8009256:	dd08      	ble.n	800926a <_strtod_l+0x792>
 8009258:	9907      	ldr	r1, [sp, #28]
 800925a:	463a      	mov	r2, r7
 800925c:	4620      	mov	r0, r4
 800925e:	f001 ff43 	bl	800b0e8 <__lshift>
 8009262:	9007      	str	r0, [sp, #28]
 8009264:	2800      	cmp	r0, #0
 8009266:	f43f ae83 	beq.w	8008f70 <_strtod_l+0x498>
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	dd08      	ble.n	8009282 <_strtod_l+0x7aa>
 8009270:	4631      	mov	r1, r6
 8009272:	464a      	mov	r2, r9
 8009274:	4620      	mov	r0, r4
 8009276:	f001 ff37 	bl	800b0e8 <__lshift>
 800927a:	4606      	mov	r6, r0
 800927c:	2800      	cmp	r0, #0
 800927e:	f43f ae77 	beq.w	8008f70 <_strtod_l+0x498>
 8009282:	9a07      	ldr	r2, [sp, #28]
 8009284:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009286:	4620      	mov	r0, r4
 8009288:	f001 ffb6 	bl	800b1f8 <__mdiff>
 800928c:	4605      	mov	r5, r0
 800928e:	2800      	cmp	r0, #0
 8009290:	f43f ae6e 	beq.w	8008f70 <_strtod_l+0x498>
 8009294:	68c3      	ldr	r3, [r0, #12]
 8009296:	930f      	str	r3, [sp, #60]	; 0x3c
 8009298:	2300      	movs	r3, #0
 800929a:	60c3      	str	r3, [r0, #12]
 800929c:	4631      	mov	r1, r6
 800929e:	f001 ff8f 	bl	800b1c0 <__mcmp>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	da65      	bge.n	8009372 <_strtod_l+0x89a>
 80092a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a8:	ea53 030a 	orrs.w	r3, r3, sl
 80092ac:	f040 8087 	bne.w	80093be <_strtod_l+0x8e6>
 80092b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 8082 	bne.w	80093be <_strtod_l+0x8e6>
 80092ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092be:	0d1b      	lsrs	r3, r3, #20
 80092c0:	051b      	lsls	r3, r3, #20
 80092c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092c6:	d97a      	bls.n	80093be <_strtod_l+0x8e6>
 80092c8:	696b      	ldr	r3, [r5, #20]
 80092ca:	b913      	cbnz	r3, 80092d2 <_strtod_l+0x7fa>
 80092cc:	692b      	ldr	r3, [r5, #16]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	dd75      	ble.n	80093be <_strtod_l+0x8e6>
 80092d2:	4629      	mov	r1, r5
 80092d4:	2201      	movs	r2, #1
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 ff06 	bl	800b0e8 <__lshift>
 80092dc:	4631      	mov	r1, r6
 80092de:	4605      	mov	r5, r0
 80092e0:	f001 ff6e 	bl	800b1c0 <__mcmp>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	dd6a      	ble.n	80093be <_strtod_l+0x8e6>
 80092e8:	9904      	ldr	r1, [sp, #16]
 80092ea:	4a55      	ldr	r2, [pc, #340]	; (8009440 <_strtod_l+0x968>)
 80092ec:	465b      	mov	r3, fp
 80092ee:	2900      	cmp	r1, #0
 80092f0:	f000 8085 	beq.w	80093fe <_strtod_l+0x926>
 80092f4:	ea02 010b 	and.w	r1, r2, fp
 80092f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092fc:	dc7f      	bgt.n	80093fe <_strtod_l+0x926>
 80092fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009302:	f77f aeaa 	ble.w	800905a <_strtod_l+0x582>
 8009306:	4a4f      	ldr	r2, [pc, #316]	; (8009444 <_strtod_l+0x96c>)
 8009308:	2300      	movs	r3, #0
 800930a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800930e:	4650      	mov	r0, sl
 8009310:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009314:	4659      	mov	r1, fp
 8009316:	f7f7 f96f 	bl	80005f8 <__aeabi_dmul>
 800931a:	460b      	mov	r3, r1
 800931c:	4303      	orrs	r3, r0
 800931e:	bf08      	it	eq
 8009320:	2322      	moveq	r3, #34	; 0x22
 8009322:	4682      	mov	sl, r0
 8009324:	468b      	mov	fp, r1
 8009326:	bf08      	it	eq
 8009328:	6023      	streq	r3, [r4, #0]
 800932a:	e62b      	b.n	8008f84 <_strtod_l+0x4ac>
 800932c:	f04f 32ff 	mov.w	r2, #4294967295
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	ea03 0a0a 	and.w	sl, r3, sl
 8009338:	e6de      	b.n	80090f8 <_strtod_l+0x620>
 800933a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800933e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009342:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009346:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800934a:	fa01 f308 	lsl.w	r3, r1, r8
 800934e:	930c      	str	r3, [sp, #48]	; 0x30
 8009350:	9111      	str	r1, [sp, #68]	; 0x44
 8009352:	e741      	b.n	80091d8 <_strtod_l+0x700>
 8009354:	2300      	movs	r3, #0
 8009356:	930c      	str	r3, [sp, #48]	; 0x30
 8009358:	2301      	movs	r3, #1
 800935a:	9311      	str	r3, [sp, #68]	; 0x44
 800935c:	e73c      	b.n	80091d8 <_strtod_l+0x700>
 800935e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009360:	4642      	mov	r2, r8
 8009362:	4620      	mov	r0, r4
 8009364:	f001 fec0 	bl	800b0e8 <__lshift>
 8009368:	901e      	str	r0, [sp, #120]	; 0x78
 800936a:	2800      	cmp	r0, #0
 800936c:	f47f af66 	bne.w	800923c <_strtod_l+0x764>
 8009370:	e5fe      	b.n	8008f70 <_strtod_l+0x498>
 8009372:	465f      	mov	r7, fp
 8009374:	d16e      	bne.n	8009454 <_strtod_l+0x97c>
 8009376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800937c:	b342      	cbz	r2, 80093d0 <_strtod_l+0x8f8>
 800937e:	4a32      	ldr	r2, [pc, #200]	; (8009448 <_strtod_l+0x970>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d128      	bne.n	80093d6 <_strtod_l+0x8fe>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	4650      	mov	r0, sl
 8009388:	b1eb      	cbz	r3, 80093c6 <_strtod_l+0x8ee>
 800938a:	4a2d      	ldr	r2, [pc, #180]	; (8009440 <_strtod_l+0x968>)
 800938c:	403a      	ands	r2, r7
 800938e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009392:	f04f 31ff 	mov.w	r1, #4294967295
 8009396:	d819      	bhi.n	80093cc <_strtod_l+0x8f4>
 8009398:	0d12      	lsrs	r2, r2, #20
 800939a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800939e:	fa01 f303 	lsl.w	r3, r1, r3
 80093a2:	4298      	cmp	r0, r3
 80093a4:	d117      	bne.n	80093d6 <_strtod_l+0x8fe>
 80093a6:	4b29      	ldr	r3, [pc, #164]	; (800944c <_strtod_l+0x974>)
 80093a8:	429f      	cmp	r7, r3
 80093aa:	d102      	bne.n	80093b2 <_strtod_l+0x8da>
 80093ac:	3001      	adds	r0, #1
 80093ae:	f43f addf 	beq.w	8008f70 <_strtod_l+0x498>
 80093b2:	4b23      	ldr	r3, [pc, #140]	; (8009440 <_strtod_l+0x968>)
 80093b4:	403b      	ands	r3, r7
 80093b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80093ba:	f04f 0a00 	mov.w	sl, #0
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1a0      	bne.n	8009306 <_strtod_l+0x82e>
 80093c4:	e5de      	b.n	8008f84 <_strtod_l+0x4ac>
 80093c6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ca:	e7ea      	b.n	80093a2 <_strtod_l+0x8ca>
 80093cc:	460b      	mov	r3, r1
 80093ce:	e7e8      	b.n	80093a2 <_strtod_l+0x8ca>
 80093d0:	ea53 030a 	orrs.w	r3, r3, sl
 80093d4:	d088      	beq.n	80092e8 <_strtod_l+0x810>
 80093d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d8:	b1db      	cbz	r3, 8009412 <_strtod_l+0x93a>
 80093da:	423b      	tst	r3, r7
 80093dc:	d0ef      	beq.n	80093be <_strtod_l+0x8e6>
 80093de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093e0:	9a04      	ldr	r2, [sp, #16]
 80093e2:	4650      	mov	r0, sl
 80093e4:	4659      	mov	r1, fp
 80093e6:	b1c3      	cbz	r3, 800941a <_strtod_l+0x942>
 80093e8:	f7ff fb5a 	bl	8008aa0 <sulp>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093f4:	f7f6 ff4a 	bl	800028c <__adddf3>
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	e7df      	b.n	80093be <_strtod_l+0x8e6>
 80093fe:	4013      	ands	r3, r2
 8009400:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800940c:	f04f 3aff 	mov.w	sl, #4294967295
 8009410:	e7d5      	b.n	80093be <_strtod_l+0x8e6>
 8009412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009414:	ea13 0f0a 	tst.w	r3, sl
 8009418:	e7e0      	b.n	80093dc <_strtod_l+0x904>
 800941a:	f7ff fb41 	bl	8008aa0 <sulp>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009426:	f7f6 ff2f 	bl	8000288 <__aeabi_dsub>
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	4682      	mov	sl, r0
 8009430:	468b      	mov	fp, r1
 8009432:	f7f7 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8009436:	2800      	cmp	r0, #0
 8009438:	d0c1      	beq.n	80093be <_strtod_l+0x8e6>
 800943a:	e60e      	b.n	800905a <_strtod_l+0x582>
 800943c:	fffffc02 	.word	0xfffffc02
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	39500000 	.word	0x39500000
 8009448:	000fffff 	.word	0x000fffff
 800944c:	7fefffff 	.word	0x7fefffff
 8009450:	0800f210 	.word	0x0800f210
 8009454:	4631      	mov	r1, r6
 8009456:	4628      	mov	r0, r5
 8009458:	f002 f82e 	bl	800b4b8 <__ratio>
 800945c:	ec59 8b10 	vmov	r8, r9, d0
 8009460:	ee10 0a10 	vmov	r0, s0
 8009464:	2200      	movs	r2, #0
 8009466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800946a:	4649      	mov	r1, r9
 800946c:	f7f7 fb40 	bl	8000af0 <__aeabi_dcmple>
 8009470:	2800      	cmp	r0, #0
 8009472:	d07c      	beq.n	800956e <_strtod_l+0xa96>
 8009474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d04c      	beq.n	8009514 <_strtod_l+0xa3c>
 800947a:	4b95      	ldr	r3, [pc, #596]	; (80096d0 <_strtod_l+0xbf8>)
 800947c:	2200      	movs	r2, #0
 800947e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009482:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80096d0 <_strtod_l+0xbf8>
 8009486:	f04f 0800 	mov.w	r8, #0
 800948a:	4b92      	ldr	r3, [pc, #584]	; (80096d4 <_strtod_l+0xbfc>)
 800948c:	403b      	ands	r3, r7
 800948e:	9311      	str	r3, [sp, #68]	; 0x44
 8009490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009492:	4b91      	ldr	r3, [pc, #580]	; (80096d8 <_strtod_l+0xc00>)
 8009494:	429a      	cmp	r2, r3
 8009496:	f040 80b2 	bne.w	80095fe <_strtod_l+0xb26>
 800949a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800949e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80094a6:	ec4b ab10 	vmov	d0, sl, fp
 80094aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80094ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094b2:	f001 ff29 	bl	800b308 <__ulp>
 80094b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094ba:	ec53 2b10 	vmov	r2, r3, d0
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	4652      	mov	r2, sl
 80094c4:	465b      	mov	r3, fp
 80094c6:	f7f6 fee1 	bl	800028c <__adddf3>
 80094ca:	460b      	mov	r3, r1
 80094cc:	4981      	ldr	r1, [pc, #516]	; (80096d4 <_strtod_l+0xbfc>)
 80094ce:	4a83      	ldr	r2, [pc, #524]	; (80096dc <_strtod_l+0xc04>)
 80094d0:	4019      	ands	r1, r3
 80094d2:	4291      	cmp	r1, r2
 80094d4:	4682      	mov	sl, r0
 80094d6:	d95e      	bls.n	8009596 <_strtod_l+0xabe>
 80094d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80094de:	4293      	cmp	r3, r2
 80094e0:	d103      	bne.n	80094ea <_strtod_l+0xa12>
 80094e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e4:	3301      	adds	r3, #1
 80094e6:	f43f ad43 	beq.w	8008f70 <_strtod_l+0x498>
 80094ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80096e8 <_strtod_l+0xc10>
 80094ee:	f04f 3aff 	mov.w	sl, #4294967295
 80094f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094f4:	4620      	mov	r0, r4
 80094f6:	f001 fbdb 	bl	800acb0 <_Bfree>
 80094fa:	9907      	ldr	r1, [sp, #28]
 80094fc:	4620      	mov	r0, r4
 80094fe:	f001 fbd7 	bl	800acb0 <_Bfree>
 8009502:	4631      	mov	r1, r6
 8009504:	4620      	mov	r0, r4
 8009506:	f001 fbd3 	bl	800acb0 <_Bfree>
 800950a:	4629      	mov	r1, r5
 800950c:	4620      	mov	r0, r4
 800950e:	f001 fbcf 	bl	800acb0 <_Bfree>
 8009512:	e613      	b.n	800913c <_strtod_l+0x664>
 8009514:	f1ba 0f00 	cmp.w	sl, #0
 8009518:	d11b      	bne.n	8009552 <_strtod_l+0xa7a>
 800951a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800951e:	b9f3      	cbnz	r3, 800955e <_strtod_l+0xa86>
 8009520:	4b6b      	ldr	r3, [pc, #428]	; (80096d0 <_strtod_l+0xbf8>)
 8009522:	2200      	movs	r2, #0
 8009524:	4640      	mov	r0, r8
 8009526:	4649      	mov	r1, r9
 8009528:	f7f7 fad8 	bl	8000adc <__aeabi_dcmplt>
 800952c:	b9d0      	cbnz	r0, 8009564 <_strtod_l+0xa8c>
 800952e:	4640      	mov	r0, r8
 8009530:	4649      	mov	r1, r9
 8009532:	4b6b      	ldr	r3, [pc, #428]	; (80096e0 <_strtod_l+0xc08>)
 8009534:	2200      	movs	r2, #0
 8009536:	f7f7 f85f 	bl	80005f8 <__aeabi_dmul>
 800953a:	4680      	mov	r8, r0
 800953c:	4689      	mov	r9, r1
 800953e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009542:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009546:	931b      	str	r3, [sp, #108]	; 0x6c
 8009548:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800954c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009550:	e79b      	b.n	800948a <_strtod_l+0x9b2>
 8009552:	f1ba 0f01 	cmp.w	sl, #1
 8009556:	d102      	bne.n	800955e <_strtod_l+0xa86>
 8009558:	2f00      	cmp	r7, #0
 800955a:	f43f ad7e 	beq.w	800905a <_strtod_l+0x582>
 800955e:	4b61      	ldr	r3, [pc, #388]	; (80096e4 <_strtod_l+0xc0c>)
 8009560:	2200      	movs	r2, #0
 8009562:	e78c      	b.n	800947e <_strtod_l+0x9a6>
 8009564:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80096e0 <_strtod_l+0xc08>
 8009568:	f04f 0800 	mov.w	r8, #0
 800956c:	e7e7      	b.n	800953e <_strtod_l+0xa66>
 800956e:	4b5c      	ldr	r3, [pc, #368]	; (80096e0 <_strtod_l+0xc08>)
 8009570:	4640      	mov	r0, r8
 8009572:	4649      	mov	r1, r9
 8009574:	2200      	movs	r2, #0
 8009576:	f7f7 f83f 	bl	80005f8 <__aeabi_dmul>
 800957a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800957c:	4680      	mov	r8, r0
 800957e:	4689      	mov	r9, r1
 8009580:	b933      	cbnz	r3, 8009590 <_strtod_l+0xab8>
 8009582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009586:	9012      	str	r0, [sp, #72]	; 0x48
 8009588:	9313      	str	r3, [sp, #76]	; 0x4c
 800958a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800958e:	e7dd      	b.n	800954c <_strtod_l+0xa74>
 8009590:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009594:	e7f9      	b.n	800958a <_strtod_l+0xab2>
 8009596:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800959a:	9b04      	ldr	r3, [sp, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1a8      	bne.n	80094f2 <_strtod_l+0xa1a>
 80095a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095a6:	0d1b      	lsrs	r3, r3, #20
 80095a8:	051b      	lsls	r3, r3, #20
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d1a1      	bne.n	80094f2 <_strtod_l+0xa1a>
 80095ae:	4640      	mov	r0, r8
 80095b0:	4649      	mov	r1, r9
 80095b2:	f7f7 fb81 	bl	8000cb8 <__aeabi_d2lz>
 80095b6:	f7f6 fff1 	bl	800059c <__aeabi_l2d>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f6 fe61 	bl	8000288 <__aeabi_dsub>
 80095c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095cc:	ea43 030a 	orr.w	r3, r3, sl
 80095d0:	4313      	orrs	r3, r2
 80095d2:	4680      	mov	r8, r0
 80095d4:	4689      	mov	r9, r1
 80095d6:	d053      	beq.n	8009680 <_strtod_l+0xba8>
 80095d8:	a335      	add	r3, pc, #212	; (adr r3, 80096b0 <_strtod_l+0xbd8>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f7f7 fa7d 	bl	8000adc <__aeabi_dcmplt>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f47f acce 	bne.w	8008f84 <_strtod_l+0x4ac>
 80095e8:	a333      	add	r3, pc, #204	; (adr r3, 80096b8 <_strtod_l+0xbe0>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	4640      	mov	r0, r8
 80095f0:	4649      	mov	r1, r9
 80095f2:	f7f7 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f af7b 	beq.w	80094f2 <_strtod_l+0xa1a>
 80095fc:	e4c2      	b.n	8008f84 <_strtod_l+0x4ac>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	b333      	cbz	r3, 8009650 <_strtod_l+0xb78>
 8009602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009604:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009608:	d822      	bhi.n	8009650 <_strtod_l+0xb78>
 800960a:	a32d      	add	r3, pc, #180	; (adr r3, 80096c0 <_strtod_l+0xbe8>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f7 fa6c 	bl	8000af0 <__aeabi_dcmple>
 8009618:	b1a0      	cbz	r0, 8009644 <_strtod_l+0xb6c>
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	f7f7 fac3 	bl	8000ba8 <__aeabi_d2uiz>
 8009622:	2801      	cmp	r0, #1
 8009624:	bf38      	it	cc
 8009626:	2001      	movcc	r0, #1
 8009628:	f7f6 ff6c 	bl	8000504 <__aeabi_ui2d>
 800962c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800962e:	4680      	mov	r8, r0
 8009630:	4689      	mov	r9, r1
 8009632:	bb13      	cbnz	r3, 800967a <_strtod_l+0xba2>
 8009634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009638:	9014      	str	r0, [sp, #80]	; 0x50
 800963a:	9315      	str	r3, [sp, #84]	; 0x54
 800963c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009640:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009646:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009648:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	930d      	str	r3, [sp, #52]	; 0x34
 8009650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009654:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800965c:	f001 fe54 	bl	800b308 <__ulp>
 8009660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009664:	ec53 2b10 	vmov	r2, r3, d0
 8009668:	f7f6 ffc6 	bl	80005f8 <__aeabi_dmul>
 800966c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009670:	f7f6 fe0c 	bl	800028c <__adddf3>
 8009674:	4682      	mov	sl, r0
 8009676:	468b      	mov	fp, r1
 8009678:	e78f      	b.n	800959a <_strtod_l+0xac2>
 800967a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800967e:	e7dd      	b.n	800963c <_strtod_l+0xb64>
 8009680:	a311      	add	r3, pc, #68	; (adr r3, 80096c8 <_strtod_l+0xbf0>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f7 fa29 	bl	8000adc <__aeabi_dcmplt>
 800968a:	e7b4      	b.n	80095f6 <_strtod_l+0xb1e>
 800968c:	2300      	movs	r3, #0
 800968e:	930e      	str	r3, [sp, #56]	; 0x38
 8009690:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009692:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	f7ff ba65 	b.w	8008b64 <_strtod_l+0x8c>
 800969a:	2b65      	cmp	r3, #101	; 0x65
 800969c:	f43f ab5d 	beq.w	8008d5a <_strtod_l+0x282>
 80096a0:	2b45      	cmp	r3, #69	; 0x45
 80096a2:	f43f ab5a 	beq.w	8008d5a <_strtod_l+0x282>
 80096a6:	2201      	movs	r2, #1
 80096a8:	f7ff bb92 	b.w	8008dd0 <_strtod_l+0x2f8>
 80096ac:	f3af 8000 	nop.w
 80096b0:	94a03595 	.word	0x94a03595
 80096b4:	3fdfffff 	.word	0x3fdfffff
 80096b8:	35afe535 	.word	0x35afe535
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	ffc00000 	.word	0xffc00000
 80096c4:	41dfffff 	.word	0x41dfffff
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fcfffff 	.word	0x3fcfffff
 80096d0:	3ff00000 	.word	0x3ff00000
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	7fe00000 	.word	0x7fe00000
 80096dc:	7c9fffff 	.word	0x7c9fffff
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	bff00000 	.word	0xbff00000
 80096e8:	7fefffff 	.word	0x7fefffff

080096ec <_strtod_r>:
 80096ec:	4b01      	ldr	r3, [pc, #4]	; (80096f4 <_strtod_r+0x8>)
 80096ee:	f7ff b9f3 	b.w	8008ad8 <_strtod_l>
 80096f2:	bf00      	nop
 80096f4:	200001c8 	.word	0x200001c8

080096f8 <_strtol_l.isra.0>:
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fe:	d001      	beq.n	8009704 <_strtol_l.isra.0+0xc>
 8009700:	2b24      	cmp	r3, #36	; 0x24
 8009702:	d906      	bls.n	8009712 <_strtol_l.isra.0+0x1a>
 8009704:	f7fe fafa 	bl	8007cfc <__errno>
 8009708:	2316      	movs	r3, #22
 800970a:	6003      	str	r3, [r0, #0]
 800970c:	2000      	movs	r0, #0
 800970e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009712:	4f3a      	ldr	r7, [pc, #232]	; (80097fc <_strtol_l.isra.0+0x104>)
 8009714:	468e      	mov	lr, r1
 8009716:	4676      	mov	r6, lr
 8009718:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800971c:	5de5      	ldrb	r5, [r4, r7]
 800971e:	f015 0508 	ands.w	r5, r5, #8
 8009722:	d1f8      	bne.n	8009716 <_strtol_l.isra.0+0x1e>
 8009724:	2c2d      	cmp	r4, #45	; 0x2d
 8009726:	d134      	bne.n	8009792 <_strtol_l.isra.0+0x9a>
 8009728:	f89e 4000 	ldrb.w	r4, [lr]
 800972c:	f04f 0801 	mov.w	r8, #1
 8009730:	f106 0e02 	add.w	lr, r6, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d05c      	beq.n	80097f2 <_strtol_l.isra.0+0xfa>
 8009738:	2b10      	cmp	r3, #16
 800973a:	d10c      	bne.n	8009756 <_strtol_l.isra.0+0x5e>
 800973c:	2c30      	cmp	r4, #48	; 0x30
 800973e:	d10a      	bne.n	8009756 <_strtol_l.isra.0+0x5e>
 8009740:	f89e 4000 	ldrb.w	r4, [lr]
 8009744:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009748:	2c58      	cmp	r4, #88	; 0x58
 800974a:	d14d      	bne.n	80097e8 <_strtol_l.isra.0+0xf0>
 800974c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009750:	2310      	movs	r3, #16
 8009752:	f10e 0e02 	add.w	lr, lr, #2
 8009756:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800975a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800975e:	2600      	movs	r6, #0
 8009760:	fbbc f9f3 	udiv	r9, ip, r3
 8009764:	4635      	mov	r5, r6
 8009766:	fb03 ca19 	mls	sl, r3, r9, ip
 800976a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800976e:	2f09      	cmp	r7, #9
 8009770:	d818      	bhi.n	80097a4 <_strtol_l.isra.0+0xac>
 8009772:	463c      	mov	r4, r7
 8009774:	42a3      	cmp	r3, r4
 8009776:	dd24      	ble.n	80097c2 <_strtol_l.isra.0+0xca>
 8009778:	2e00      	cmp	r6, #0
 800977a:	db1f      	blt.n	80097bc <_strtol_l.isra.0+0xc4>
 800977c:	45a9      	cmp	r9, r5
 800977e:	d31d      	bcc.n	80097bc <_strtol_l.isra.0+0xc4>
 8009780:	d101      	bne.n	8009786 <_strtol_l.isra.0+0x8e>
 8009782:	45a2      	cmp	sl, r4
 8009784:	db1a      	blt.n	80097bc <_strtol_l.isra.0+0xc4>
 8009786:	fb05 4503 	mla	r5, r5, r3, r4
 800978a:	2601      	movs	r6, #1
 800978c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009790:	e7eb      	b.n	800976a <_strtol_l.isra.0+0x72>
 8009792:	2c2b      	cmp	r4, #43	; 0x2b
 8009794:	bf08      	it	eq
 8009796:	f89e 4000 	ldrbeq.w	r4, [lr]
 800979a:	46a8      	mov	r8, r5
 800979c:	bf08      	it	eq
 800979e:	f106 0e02 	addeq.w	lr, r6, #2
 80097a2:	e7c7      	b.n	8009734 <_strtol_l.isra.0+0x3c>
 80097a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80097a8:	2f19      	cmp	r7, #25
 80097aa:	d801      	bhi.n	80097b0 <_strtol_l.isra.0+0xb8>
 80097ac:	3c37      	subs	r4, #55	; 0x37
 80097ae:	e7e1      	b.n	8009774 <_strtol_l.isra.0+0x7c>
 80097b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80097b4:	2f19      	cmp	r7, #25
 80097b6:	d804      	bhi.n	80097c2 <_strtol_l.isra.0+0xca>
 80097b8:	3c57      	subs	r4, #87	; 0x57
 80097ba:	e7db      	b.n	8009774 <_strtol_l.isra.0+0x7c>
 80097bc:	f04f 36ff 	mov.w	r6, #4294967295
 80097c0:	e7e4      	b.n	800978c <_strtol_l.isra.0+0x94>
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	da05      	bge.n	80097d2 <_strtol_l.isra.0+0xda>
 80097c6:	2322      	movs	r3, #34	; 0x22
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	4665      	mov	r5, ip
 80097cc:	b942      	cbnz	r2, 80097e0 <_strtol_l.isra.0+0xe8>
 80097ce:	4628      	mov	r0, r5
 80097d0:	e79d      	b.n	800970e <_strtol_l.isra.0+0x16>
 80097d2:	f1b8 0f00 	cmp.w	r8, #0
 80097d6:	d000      	beq.n	80097da <_strtol_l.isra.0+0xe2>
 80097d8:	426d      	negs	r5, r5
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d0f7      	beq.n	80097ce <_strtol_l.isra.0+0xd6>
 80097de:	b10e      	cbz	r6, 80097e4 <_strtol_l.isra.0+0xec>
 80097e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80097e4:	6011      	str	r1, [r2, #0]
 80097e6:	e7f2      	b.n	80097ce <_strtol_l.isra.0+0xd6>
 80097e8:	2430      	movs	r4, #48	; 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1b3      	bne.n	8009756 <_strtol_l.isra.0+0x5e>
 80097ee:	2308      	movs	r3, #8
 80097f0:	e7b1      	b.n	8009756 <_strtol_l.isra.0+0x5e>
 80097f2:	2c30      	cmp	r4, #48	; 0x30
 80097f4:	d0a4      	beq.n	8009740 <_strtol_l.isra.0+0x48>
 80097f6:	230a      	movs	r3, #10
 80097f8:	e7ad      	b.n	8009756 <_strtol_l.isra.0+0x5e>
 80097fa:	bf00      	nop
 80097fc:	0800f239 	.word	0x0800f239

08009800 <_strtol_r>:
 8009800:	f7ff bf7a 	b.w	80096f8 <_strtol_l.isra.0>

08009804 <quorem>:
 8009804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	6903      	ldr	r3, [r0, #16]
 800980a:	690c      	ldr	r4, [r1, #16]
 800980c:	42a3      	cmp	r3, r4
 800980e:	4607      	mov	r7, r0
 8009810:	f2c0 8081 	blt.w	8009916 <quorem+0x112>
 8009814:	3c01      	subs	r4, #1
 8009816:	f101 0814 	add.w	r8, r1, #20
 800981a:	f100 0514 	add.w	r5, r0, #20
 800981e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800982c:	3301      	adds	r3, #1
 800982e:	429a      	cmp	r2, r3
 8009830:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009834:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009838:	fbb2 f6f3 	udiv	r6, r2, r3
 800983c:	d331      	bcc.n	80098a2 <quorem+0x9e>
 800983e:	f04f 0e00 	mov.w	lr, #0
 8009842:	4640      	mov	r0, r8
 8009844:	46ac      	mov	ip, r5
 8009846:	46f2      	mov	sl, lr
 8009848:	f850 2b04 	ldr.w	r2, [r0], #4
 800984c:	b293      	uxth	r3, r2
 800984e:	fb06 e303 	mla	r3, r6, r3, lr
 8009852:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009856:	b29b      	uxth	r3, r3
 8009858:	ebaa 0303 	sub.w	r3, sl, r3
 800985c:	0c12      	lsrs	r2, r2, #16
 800985e:	f8dc a000 	ldr.w	sl, [ip]
 8009862:	fb06 e202 	mla	r2, r6, r2, lr
 8009866:	fa13 f38a 	uxtah	r3, r3, sl
 800986a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800986e:	fa1f fa82 	uxth.w	sl, r2
 8009872:	f8dc 2000 	ldr.w	r2, [ip]
 8009876:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800987a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800987e:	b29b      	uxth	r3, r3
 8009880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009884:	4581      	cmp	r9, r0
 8009886:	f84c 3b04 	str.w	r3, [ip], #4
 800988a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800988e:	d2db      	bcs.n	8009848 <quorem+0x44>
 8009890:	f855 300b 	ldr.w	r3, [r5, fp]
 8009894:	b92b      	cbnz	r3, 80098a2 <quorem+0x9e>
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	3b04      	subs	r3, #4
 800989a:	429d      	cmp	r5, r3
 800989c:	461a      	mov	r2, r3
 800989e:	d32e      	bcc.n	80098fe <quorem+0xfa>
 80098a0:	613c      	str	r4, [r7, #16]
 80098a2:	4638      	mov	r0, r7
 80098a4:	f001 fc8c 	bl	800b1c0 <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	db24      	blt.n	80098f6 <quorem+0xf2>
 80098ac:	3601      	adds	r6, #1
 80098ae:	4628      	mov	r0, r5
 80098b0:	f04f 0c00 	mov.w	ip, #0
 80098b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80098b8:	f8d0 e000 	ldr.w	lr, [r0]
 80098bc:	b293      	uxth	r3, r2
 80098be:	ebac 0303 	sub.w	r3, ip, r3
 80098c2:	0c12      	lsrs	r2, r2, #16
 80098c4:	fa13 f38e 	uxtah	r3, r3, lr
 80098c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098d6:	45c1      	cmp	r9, r8
 80098d8:	f840 3b04 	str.w	r3, [r0], #4
 80098dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098e0:	d2e8      	bcs.n	80098b4 <quorem+0xb0>
 80098e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ea:	b922      	cbnz	r2, 80098f6 <quorem+0xf2>
 80098ec:	3b04      	subs	r3, #4
 80098ee:	429d      	cmp	r5, r3
 80098f0:	461a      	mov	r2, r3
 80098f2:	d30a      	bcc.n	800990a <quorem+0x106>
 80098f4:	613c      	str	r4, [r7, #16]
 80098f6:	4630      	mov	r0, r6
 80098f8:	b003      	add	sp, #12
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	3b04      	subs	r3, #4
 8009902:	2a00      	cmp	r2, #0
 8009904:	d1cc      	bne.n	80098a0 <quorem+0x9c>
 8009906:	3c01      	subs	r4, #1
 8009908:	e7c7      	b.n	800989a <quorem+0x96>
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	3b04      	subs	r3, #4
 800990e:	2a00      	cmp	r2, #0
 8009910:	d1f0      	bne.n	80098f4 <quorem+0xf0>
 8009912:	3c01      	subs	r4, #1
 8009914:	e7eb      	b.n	80098ee <quorem+0xea>
 8009916:	2000      	movs	r0, #0
 8009918:	e7ee      	b.n	80098f8 <quorem+0xf4>
 800991a:	0000      	movs	r0, r0
 800991c:	0000      	movs	r0, r0
	...

08009920 <_dtoa_r>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	ed2d 8b02 	vpush	{d8}
 8009928:	ec57 6b10 	vmov	r6, r7, d0
 800992c:	b095      	sub	sp, #84	; 0x54
 800992e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009934:	9105      	str	r1, [sp, #20]
 8009936:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800993a:	4604      	mov	r4, r0
 800993c:	9209      	str	r2, [sp, #36]	; 0x24
 800993e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009940:	b975      	cbnz	r5, 8009960 <_dtoa_r+0x40>
 8009942:	2010      	movs	r0, #16
 8009944:	f001 f94c 	bl	800abe0 <malloc>
 8009948:	4602      	mov	r2, r0
 800994a:	6260      	str	r0, [r4, #36]	; 0x24
 800994c:	b920      	cbnz	r0, 8009958 <_dtoa_r+0x38>
 800994e:	4bb2      	ldr	r3, [pc, #712]	; (8009c18 <_dtoa_r+0x2f8>)
 8009950:	21ea      	movs	r1, #234	; 0xea
 8009952:	48b2      	ldr	r0, [pc, #712]	; (8009c1c <_dtoa_r+0x2fc>)
 8009954:	f002 f874 	bl	800ba40 <__assert_func>
 8009958:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800995c:	6005      	str	r5, [r0, #0]
 800995e:	60c5      	str	r5, [r0, #12]
 8009960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	b151      	cbz	r1, 800997c <_dtoa_r+0x5c>
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	604a      	str	r2, [r1, #4]
 800996a:	2301      	movs	r3, #1
 800996c:	4093      	lsls	r3, r2
 800996e:	608b      	str	r3, [r1, #8]
 8009970:	4620      	mov	r0, r4
 8009972:	f001 f99d 	bl	800acb0 <_Bfree>
 8009976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	1e3b      	subs	r3, r7, #0
 800997e:	bfb9      	ittee	lt
 8009980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009984:	9303      	strlt	r3, [sp, #12]
 8009986:	2300      	movge	r3, #0
 8009988:	f8c8 3000 	strge.w	r3, [r8]
 800998c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009990:	4ba3      	ldr	r3, [pc, #652]	; (8009c20 <_dtoa_r+0x300>)
 8009992:	bfbc      	itt	lt
 8009994:	2201      	movlt	r2, #1
 8009996:	f8c8 2000 	strlt.w	r2, [r8]
 800999a:	ea33 0309 	bics.w	r3, r3, r9
 800999e:	d11b      	bne.n	80099d8 <_dtoa_r+0xb8>
 80099a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ac:	4333      	orrs	r3, r6
 80099ae:	f000 857a 	beq.w	800a4a6 <_dtoa_r+0xb86>
 80099b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099b4:	b963      	cbnz	r3, 80099d0 <_dtoa_r+0xb0>
 80099b6:	4b9b      	ldr	r3, [pc, #620]	; (8009c24 <_dtoa_r+0x304>)
 80099b8:	e024      	b.n	8009a04 <_dtoa_r+0xe4>
 80099ba:	4b9b      	ldr	r3, [pc, #620]	; (8009c28 <_dtoa_r+0x308>)
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	3308      	adds	r3, #8
 80099c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	9800      	ldr	r0, [sp, #0]
 80099c6:	b015      	add	sp, #84	; 0x54
 80099c8:	ecbd 8b02 	vpop	{d8}
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	4b94      	ldr	r3, [pc, #592]	; (8009c24 <_dtoa_r+0x304>)
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	3303      	adds	r3, #3
 80099d6:	e7f3      	b.n	80099c0 <_dtoa_r+0xa0>
 80099d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099dc:	2200      	movs	r2, #0
 80099de:	ec51 0b17 	vmov	r0, r1, d7
 80099e2:	2300      	movs	r3, #0
 80099e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80099e8:	f7f7 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ec:	4680      	mov	r8, r0
 80099ee:	b158      	cbz	r0, 8009a08 <_dtoa_r+0xe8>
 80099f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099f2:	2301      	movs	r3, #1
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 8551 	beq.w	800a4a0 <_dtoa_r+0xb80>
 80099fe:	488b      	ldr	r0, [pc, #556]	; (8009c2c <_dtoa_r+0x30c>)
 8009a00:	6018      	str	r0, [r3, #0]
 8009a02:	1e43      	subs	r3, r0, #1
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	e7dd      	b.n	80099c4 <_dtoa_r+0xa4>
 8009a08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a0c:	aa12      	add	r2, sp, #72	; 0x48
 8009a0e:	a913      	add	r1, sp, #76	; 0x4c
 8009a10:	4620      	mov	r0, r4
 8009a12:	f001 fcf5 	bl	800b400 <__d2b>
 8009a16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a1a:	4683      	mov	fp, r0
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	d07c      	beq.n	8009b1a <_dtoa_r+0x1fa>
 8009a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a3a:	4b7d      	ldr	r3, [pc, #500]	; (8009c30 <_dtoa_r+0x310>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f6 fc21 	bl	8000288 <__aeabi_dsub>
 8009a46:	a36e      	add	r3, pc, #440	; (adr r3, 8009c00 <_dtoa_r+0x2e0>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fdd4 	bl	80005f8 <__aeabi_dmul>
 8009a50:	a36d      	add	r3, pc, #436	; (adr r3, 8009c08 <_dtoa_r+0x2e8>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fc19 	bl	800028c <__adddf3>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	460f      	mov	r7, r1
 8009a60:	f7f6 fd60 	bl	8000524 <__aeabi_i2d>
 8009a64:	a36a      	add	r3, pc, #424	; (adr r3, 8009c10 <_dtoa_r+0x2f0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fdc5 	bl	80005f8 <__aeabi_dmul>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4630      	mov	r0, r6
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f6 fc09 	bl	800028c <__adddf3>
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	f7f7 f86b 	bl	8000b58 <__aeabi_d2iz>
 8009a82:	2200      	movs	r2, #0
 8009a84:	4682      	mov	sl, r0
 8009a86:	2300      	movs	r3, #0
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f7f7 f826 	bl	8000adc <__aeabi_dcmplt>
 8009a90:	b148      	cbz	r0, 8009aa6 <_dtoa_r+0x186>
 8009a92:	4650      	mov	r0, sl
 8009a94:	f7f6 fd46 	bl	8000524 <__aeabi_i2d>
 8009a98:	4632      	mov	r2, r6
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	f7f7 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aa0:	b908      	cbnz	r0, 8009aa6 <_dtoa_r+0x186>
 8009aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aa6:	f1ba 0f16 	cmp.w	sl, #22
 8009aaa:	d854      	bhi.n	8009b56 <_dtoa_r+0x236>
 8009aac:	4b61      	ldr	r3, [pc, #388]	; (8009c34 <_dtoa_r+0x314>)
 8009aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009aba:	f7f7 f80f 	bl	8000adc <__aeabi_dcmplt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d04b      	beq.n	8009b5a <_dtoa_r+0x23a>
 8009ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	930e      	str	r3, [sp, #56]	; 0x38
 8009aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009acc:	1b5d      	subs	r5, r3, r5
 8009ace:	1e6b      	subs	r3, r5, #1
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	bf43      	ittte	mi
 8009ad4:	2300      	movmi	r3, #0
 8009ad6:	f1c5 0801 	rsbmi	r8, r5, #1
 8009ada:	9304      	strmi	r3, [sp, #16]
 8009adc:	f04f 0800 	movpl.w	r8, #0
 8009ae0:	f1ba 0f00 	cmp.w	sl, #0
 8009ae4:	db3b      	blt.n	8009b5e <_dtoa_r+0x23e>
 8009ae6:	9b04      	ldr	r3, [sp, #16]
 8009ae8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009aec:	4453      	add	r3, sl
 8009aee:	9304      	str	r3, [sp, #16]
 8009af0:	2300      	movs	r3, #0
 8009af2:	9306      	str	r3, [sp, #24]
 8009af4:	9b05      	ldr	r3, [sp, #20]
 8009af6:	2b09      	cmp	r3, #9
 8009af8:	d869      	bhi.n	8009bce <_dtoa_r+0x2ae>
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	bfc4      	itt	gt
 8009afe:	3b04      	subgt	r3, #4
 8009b00:	9305      	strgt	r3, [sp, #20]
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	f1a3 0302 	sub.w	r3, r3, #2
 8009b08:	bfcc      	ite	gt
 8009b0a:	2500      	movgt	r5, #0
 8009b0c:	2501      	movle	r5, #1
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d869      	bhi.n	8009be6 <_dtoa_r+0x2c6>
 8009b12:	e8df f003 	tbb	[pc, r3]
 8009b16:	4e2c      	.short	0x4e2c
 8009b18:	5a4c      	.short	0x5a4c
 8009b1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b1e:	441d      	add	r5, r3
 8009b20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b24:	2b20      	cmp	r3, #32
 8009b26:	bfc1      	itttt	gt
 8009b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b30:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b38:	bfda      	itte	le
 8009b3a:	f1c3 0320 	rsble	r3, r3, #32
 8009b3e:	fa06 f003 	lslle.w	r0, r6, r3
 8009b42:	4318      	orrgt	r0, r3
 8009b44:	f7f6 fcde 	bl	8000504 <__aeabi_ui2d>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b50:	3d01      	subs	r5, #1
 8009b52:	9310      	str	r3, [sp, #64]	; 0x40
 8009b54:	e771      	b.n	8009a3a <_dtoa_r+0x11a>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e7b6      	b.n	8009ac8 <_dtoa_r+0x1a8>
 8009b5a:	900e      	str	r0, [sp, #56]	; 0x38
 8009b5c:	e7b5      	b.n	8009aca <_dtoa_r+0x1aa>
 8009b5e:	f1ca 0300 	rsb	r3, sl, #0
 8009b62:	9306      	str	r3, [sp, #24]
 8009b64:	2300      	movs	r3, #0
 8009b66:	eba8 080a 	sub.w	r8, r8, sl
 8009b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b6c:	e7c2      	b.n	8009af4 <_dtoa_r+0x1d4>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9308      	str	r3, [sp, #32]
 8009b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dc39      	bgt.n	8009bec <_dtoa_r+0x2cc>
 8009b78:	f04f 0901 	mov.w	r9, #1
 8009b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b80:	464b      	mov	r3, r9
 8009b82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b88:	2200      	movs	r2, #0
 8009b8a:	6042      	str	r2, [r0, #4]
 8009b8c:	2204      	movs	r2, #4
 8009b8e:	f102 0614 	add.w	r6, r2, #20
 8009b92:	429e      	cmp	r6, r3
 8009b94:	6841      	ldr	r1, [r0, #4]
 8009b96:	d92f      	bls.n	8009bf8 <_dtoa_r+0x2d8>
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 f849 	bl	800ac30 <_Balloc>
 8009b9e:	9000      	str	r0, [sp, #0]
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d14b      	bne.n	8009c3c <_dtoa_r+0x31c>
 8009ba4:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <_dtoa_r+0x318>)
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bac:	e6d1      	b.n	8009952 <_dtoa_r+0x32>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e7de      	b.n	8009b70 <_dtoa_r+0x250>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9308      	str	r3, [sp, #32]
 8009bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb8:	eb0a 0903 	add.w	r9, sl, r3
 8009bbc:	f109 0301 	add.w	r3, r9, #1
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	bfb8      	it	lt
 8009bc6:	2301      	movlt	r3, #1
 8009bc8:	e7dd      	b.n	8009b86 <_dtoa_r+0x266>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e7f2      	b.n	8009bb4 <_dtoa_r+0x294>
 8009bce:	2501      	movs	r5, #1
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	9508      	str	r5, [sp, #32]
 8009bd6:	f04f 39ff 	mov.w	r9, #4294967295
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009be0:	2312      	movs	r3, #18
 8009be2:	9209      	str	r2, [sp, #36]	; 0x24
 8009be4:	e7cf      	b.n	8009b86 <_dtoa_r+0x266>
 8009be6:	2301      	movs	r3, #1
 8009be8:	9308      	str	r3, [sp, #32]
 8009bea:	e7f4      	b.n	8009bd6 <_dtoa_r+0x2b6>
 8009bec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009bf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	e7c6      	b.n	8009b86 <_dtoa_r+0x266>
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	6041      	str	r1, [r0, #4]
 8009bfc:	0052      	lsls	r2, r2, #1
 8009bfe:	e7c6      	b.n	8009b8e <_dtoa_r+0x26e>
 8009c00:	636f4361 	.word	0x636f4361
 8009c04:	3fd287a7 	.word	0x3fd287a7
 8009c08:	8b60c8b3 	.word	0x8b60c8b3
 8009c0c:	3fc68a28 	.word	0x3fc68a28
 8009c10:	509f79fb 	.word	0x509f79fb
 8009c14:	3fd34413 	.word	0x3fd34413
 8009c18:	0800f346 	.word	0x0800f346
 8009c1c:	0800f35d 	.word	0x0800f35d
 8009c20:	7ff00000 	.word	0x7ff00000
 8009c24:	0800f342 	.word	0x0800f342
 8009c28:	0800f339 	.word	0x0800f339
 8009c2c:	0800f1b9 	.word	0x0800f1b9
 8009c30:	3ff80000 	.word	0x3ff80000
 8009c34:	0800f4d8 	.word	0x0800f4d8
 8009c38:	0800f3bc 	.word	0x0800f3bc
 8009c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c3e:	9a00      	ldr	r2, [sp, #0]
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	2b0e      	cmp	r3, #14
 8009c46:	f200 80ad 	bhi.w	8009da4 <_dtoa_r+0x484>
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	f000 80aa 	beq.w	8009da4 <_dtoa_r+0x484>
 8009c50:	f1ba 0f00 	cmp.w	sl, #0
 8009c54:	dd36      	ble.n	8009cc4 <_dtoa_r+0x3a4>
 8009c56:	4ac3      	ldr	r2, [pc, #780]	; (8009f64 <_dtoa_r+0x644>)
 8009c58:	f00a 030f 	and.w	r3, sl, #15
 8009c5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c60:	ed93 7b00 	vldr	d7, [r3]
 8009c64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c6c:	eeb0 8a47 	vmov.f32	s16, s14
 8009c70:	eef0 8a67 	vmov.f32	s17, s15
 8009c74:	d016      	beq.n	8009ca4 <_dtoa_r+0x384>
 8009c76:	4bbc      	ldr	r3, [pc, #752]	; (8009f68 <_dtoa_r+0x648>)
 8009c78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c80:	f7f6 fde4 	bl	800084c <__aeabi_ddiv>
 8009c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c88:	f007 070f 	and.w	r7, r7, #15
 8009c8c:	2503      	movs	r5, #3
 8009c8e:	4eb6      	ldr	r6, [pc, #728]	; (8009f68 <_dtoa_r+0x648>)
 8009c90:	b957      	cbnz	r7, 8009ca8 <_dtoa_r+0x388>
 8009c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c96:	ec53 2b18 	vmov	r2, r3, d8
 8009c9a:	f7f6 fdd7 	bl	800084c <__aeabi_ddiv>
 8009c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca2:	e029      	b.n	8009cf8 <_dtoa_r+0x3d8>
 8009ca4:	2502      	movs	r5, #2
 8009ca6:	e7f2      	b.n	8009c8e <_dtoa_r+0x36e>
 8009ca8:	07f9      	lsls	r1, r7, #31
 8009caa:	d508      	bpl.n	8009cbe <_dtoa_r+0x39e>
 8009cac:	ec51 0b18 	vmov	r0, r1, d8
 8009cb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	ec41 0b18 	vmov	d8, r0, r1
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	107f      	asrs	r7, r7, #1
 8009cc0:	3608      	adds	r6, #8
 8009cc2:	e7e5      	b.n	8009c90 <_dtoa_r+0x370>
 8009cc4:	f000 80a6 	beq.w	8009e14 <_dtoa_r+0x4f4>
 8009cc8:	f1ca 0600 	rsb	r6, sl, #0
 8009ccc:	4ba5      	ldr	r3, [pc, #660]	; (8009f64 <_dtoa_r+0x644>)
 8009cce:	4fa6      	ldr	r7, [pc, #664]	; (8009f68 <_dtoa_r+0x648>)
 8009cd0:	f006 020f 	and.w	r2, r6, #15
 8009cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ce0:	f7f6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8009ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce8:	1136      	asrs	r6, r6, #4
 8009cea:	2300      	movs	r3, #0
 8009cec:	2502      	movs	r5, #2
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	f040 8085 	bne.w	8009dfe <_dtoa_r+0x4de>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1d2      	bne.n	8009c9e <_dtoa_r+0x37e>
 8009cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 808c 	beq.w	8009e18 <_dtoa_r+0x4f8>
 8009d00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d04:	4b99      	ldr	r3, [pc, #612]	; (8009f6c <_dtoa_r+0x64c>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	4630      	mov	r0, r6
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	f7f6 fee6 	bl	8000adc <__aeabi_dcmplt>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	f000 8081 	beq.w	8009e18 <_dtoa_r+0x4f8>
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d07d      	beq.n	8009e18 <_dtoa_r+0x4f8>
 8009d1c:	f1b9 0f00 	cmp.w	r9, #0
 8009d20:	dd3c      	ble.n	8009d9c <_dtoa_r+0x47c>
 8009d22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d26:	9307      	str	r3, [sp, #28]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4b91      	ldr	r3, [pc, #580]	; (8009f70 <_dtoa_r+0x650>)
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	4639      	mov	r1, r7
 8009d30:	f7f6 fc62 	bl	80005f8 <__aeabi_dmul>
 8009d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d38:	3501      	adds	r5, #1
 8009d3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7f6 fbee 	bl	8000524 <__aeabi_i2d>
 8009d48:	4632      	mov	r2, r6
 8009d4a:	463b      	mov	r3, r7
 8009d4c:	f7f6 fc54 	bl	80005f8 <__aeabi_dmul>
 8009d50:	4b88      	ldr	r3, [pc, #544]	; (8009f74 <_dtoa_r+0x654>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	f7f6 fa9a 	bl	800028c <__adddf3>
 8009d58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d15c      	bne.n	8009e22 <_dtoa_r+0x502>
 8009d68:	4b83      	ldr	r3, [pc, #524]	; (8009f78 <_dtoa_r+0x658>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f7f6 fa8a 	bl	8000288 <__aeabi_dsub>
 8009d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d78:	4606      	mov	r6, r0
 8009d7a:	460f      	mov	r7, r1
 8009d7c:	f7f6 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f040 8296 	bne.w	800a2b2 <_dtoa_r+0x992>
 8009d86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fea3 	bl	8000adc <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f040 8288 	bne.w	800a2ac <_dtoa_r+0x98c>
 8009d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009da0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f2c0 8158 	blt.w	800a05c <_dtoa_r+0x73c>
 8009dac:	f1ba 0f0e 	cmp.w	sl, #14
 8009db0:	f300 8154 	bgt.w	800a05c <_dtoa_r+0x73c>
 8009db4:	4b6b      	ldr	r3, [pc, #428]	; (8009f64 <_dtoa_r+0x644>)
 8009db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f280 80e3 	bge.w	8009f8c <_dtoa_r+0x66c>
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f300 80df 	bgt.w	8009f8c <_dtoa_r+0x66c>
 8009dce:	f040 826d 	bne.w	800a2ac <_dtoa_r+0x98c>
 8009dd2:	4b69      	ldr	r3, [pc, #420]	; (8009f78 <_dtoa_r+0x658>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de2:	f7f6 fe8f 	bl	8000b04 <__aeabi_dcmpge>
 8009de6:	9e01      	ldr	r6, [sp, #4]
 8009de8:	4637      	mov	r7, r6
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f040 8243 	bne.w	800a276 <_dtoa_r+0x956>
 8009df0:	9d00      	ldr	r5, [sp, #0]
 8009df2:	2331      	movs	r3, #49	; 0x31
 8009df4:	f805 3b01 	strb.w	r3, [r5], #1
 8009df8:	f10a 0a01 	add.w	sl, sl, #1
 8009dfc:	e23f      	b.n	800a27e <_dtoa_r+0x95e>
 8009dfe:	07f2      	lsls	r2, r6, #31
 8009e00:	d505      	bpl.n	8009e0e <_dtoa_r+0x4ee>
 8009e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e06:	f7f6 fbf7 	bl	80005f8 <__aeabi_dmul>
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	1076      	asrs	r6, r6, #1
 8009e10:	3708      	adds	r7, #8
 8009e12:	e76c      	b.n	8009cee <_dtoa_r+0x3ce>
 8009e14:	2502      	movs	r5, #2
 8009e16:	e76f      	b.n	8009cf8 <_dtoa_r+0x3d8>
 8009e18:	9b01      	ldr	r3, [sp, #4]
 8009e1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e20:	e78d      	b.n	8009d3e <_dtoa_r+0x41e>
 8009e22:	9900      	ldr	r1, [sp, #0]
 8009e24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e28:	4b4e      	ldr	r3, [pc, #312]	; (8009f64 <_dtoa_r+0x644>)
 8009e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e2e:	4401      	add	r1, r0
 8009e30:	9102      	str	r1, [sp, #8]
 8009e32:	9908      	ldr	r1, [sp, #32]
 8009e34:	eeb0 8a47 	vmov.f32	s16, s14
 8009e38:	eef0 8a67 	vmov.f32	s17, s15
 8009e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e44:	2900      	cmp	r1, #0
 8009e46:	d045      	beq.n	8009ed4 <_dtoa_r+0x5b4>
 8009e48:	494c      	ldr	r1, [pc, #304]	; (8009f7c <_dtoa_r+0x65c>)
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f7f6 fcfe 	bl	800084c <__aeabi_ddiv>
 8009e50:	ec53 2b18 	vmov	r2, r3, d8
 8009e54:	f7f6 fa18 	bl	8000288 <__aeabi_dsub>
 8009e58:	9d00      	ldr	r5, [sp, #0]
 8009e5a:	ec41 0b18 	vmov	d8, r0, r1
 8009e5e:	4639      	mov	r1, r7
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7f6 fe79 	bl	8000b58 <__aeabi_d2iz>
 8009e66:	900c      	str	r0, [sp, #48]	; 0x30
 8009e68:	f7f6 fb5c 	bl	8000524 <__aeabi_i2d>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fa08 	bl	8000288 <__aeabi_dsub>
 8009e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e7a:	3330      	adds	r3, #48	; 0x30
 8009e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8009e80:	ec53 2b18 	vmov	r2, r3, d8
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	f7f6 fe28 	bl	8000adc <__aeabi_dcmplt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d165      	bne.n	8009f5c <_dtoa_r+0x63c>
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	4935      	ldr	r1, [pc, #212]	; (8009f6c <_dtoa_r+0x64c>)
 8009e96:	2000      	movs	r0, #0
 8009e98:	f7f6 f9f6 	bl	8000288 <__aeabi_dsub>
 8009e9c:	ec53 2b18 	vmov	r2, r3, d8
 8009ea0:	f7f6 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f040 80b9 	bne.w	800a01c <_dtoa_r+0x6fc>
 8009eaa:	9b02      	ldr	r3, [sp, #8]
 8009eac:	429d      	cmp	r5, r3
 8009eae:	f43f af75 	beq.w	8009d9c <_dtoa_r+0x47c>
 8009eb2:	4b2f      	ldr	r3, [pc, #188]	; (8009f70 <_dtoa_r+0x650>)
 8009eb4:	ec51 0b18 	vmov	r0, r1, d8
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	4b2c      	ldr	r3, [pc, #176]	; (8009f70 <_dtoa_r+0x650>)
 8009ec0:	ec41 0b18 	vmov	d8, r0, r1
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7f6 fb95 	bl	80005f8 <__aeabi_dmul>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	e7c4      	b.n	8009e5e <_dtoa_r+0x53e>
 8009ed4:	ec51 0b17 	vmov	r0, r1, d7
 8009ed8:	f7f6 fb8e 	bl	80005f8 <__aeabi_dmul>
 8009edc:	9b02      	ldr	r3, [sp, #8]
 8009ede:	9d00      	ldr	r5, [sp, #0]
 8009ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee2:	ec41 0b18 	vmov	d8, r0, r1
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7f6 fe35 	bl	8000b58 <__aeabi_d2iz>
 8009eee:	9011      	str	r0, [sp, #68]	; 0x44
 8009ef0:	f7f6 fb18 	bl	8000524 <__aeabi_i2d>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 f9c4 	bl	8000288 <__aeabi_dsub>
 8009f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f02:	3330      	adds	r3, #48	; 0x30
 8009f04:	f805 3b01 	strb.w	r3, [r5], #1
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	429d      	cmp	r5, r3
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	460f      	mov	r7, r1
 8009f10:	f04f 0200 	mov.w	r2, #0
 8009f14:	d134      	bne.n	8009f80 <_dtoa_r+0x660>
 8009f16:	4b19      	ldr	r3, [pc, #100]	; (8009f7c <_dtoa_r+0x65c>)
 8009f18:	ec51 0b18 	vmov	r0, r1, d8
 8009f1c:	f7f6 f9b6 	bl	800028c <__adddf3>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d175      	bne.n	800a01c <_dtoa_r+0x6fc>
 8009f30:	ec53 2b18 	vmov	r2, r3, d8
 8009f34:	4911      	ldr	r1, [pc, #68]	; (8009f7c <_dtoa_r+0x65c>)
 8009f36:	2000      	movs	r0, #0
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fdca 	bl	8000adc <__aeabi_dcmplt>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f43f af27 	beq.w	8009d9c <_dtoa_r+0x47c>
 8009f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f50:	1e6b      	subs	r3, r5, #1
 8009f52:	930c      	str	r3, [sp, #48]	; 0x30
 8009f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	d0f8      	beq.n	8009f4e <_dtoa_r+0x62e>
 8009f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f60:	e04a      	b.n	8009ff8 <_dtoa_r+0x6d8>
 8009f62:	bf00      	nop
 8009f64:	0800f4d8 	.word	0x0800f4d8
 8009f68:	0800f4b0 	.word	0x0800f4b0
 8009f6c:	3ff00000 	.word	0x3ff00000
 8009f70:	40240000 	.word	0x40240000
 8009f74:	401c0000 	.word	0x401c0000
 8009f78:	40140000 	.word	0x40140000
 8009f7c:	3fe00000 	.word	0x3fe00000
 8009f80:	4baf      	ldr	r3, [pc, #700]	; (800a240 <_dtoa_r+0x920>)
 8009f82:	f7f6 fb39 	bl	80005f8 <__aeabi_dmul>
 8009f86:	4606      	mov	r6, r0
 8009f88:	460f      	mov	r7, r1
 8009f8a:	e7ac      	b.n	8009ee6 <_dtoa_r+0x5c6>
 8009f8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f90:	9d00      	ldr	r5, [sp, #0]
 8009f92:	4642      	mov	r2, r8
 8009f94:	464b      	mov	r3, r9
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 fc57 	bl	800084c <__aeabi_ddiv>
 8009f9e:	f7f6 fddb 	bl	8000b58 <__aeabi_d2iz>
 8009fa2:	9002      	str	r0, [sp, #8]
 8009fa4:	f7f6 fabe 	bl	8000524 <__aeabi_i2d>
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	f7f6 f966 	bl	8000288 <__aeabi_dsub>
 8009fbc:	9e02      	ldr	r6, [sp, #8]
 8009fbe:	9f01      	ldr	r7, [sp, #4]
 8009fc0:	3630      	adds	r6, #48	; 0x30
 8009fc2:	f805 6b01 	strb.w	r6, [r5], #1
 8009fc6:	9e00      	ldr	r6, [sp, #0]
 8009fc8:	1bae      	subs	r6, r5, r6
 8009fca:	42b7      	cmp	r7, r6
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	d137      	bne.n	800a042 <_dtoa_r+0x722>
 8009fd2:	f7f6 f95b 	bl	800028c <__adddf3>
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	464b      	mov	r3, r9
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	f7f6 fd9b 	bl	8000b18 <__aeabi_dcmpgt>
 8009fe2:	b9c8      	cbnz	r0, 800a018 <_dtoa_r+0x6f8>
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	4630      	mov	r0, r6
 8009fea:	4639      	mov	r1, r7
 8009fec:	f7f6 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff0:	b110      	cbz	r0, 8009ff8 <_dtoa_r+0x6d8>
 8009ff2:	9b02      	ldr	r3, [sp, #8]
 8009ff4:	07d9      	lsls	r1, r3, #31
 8009ff6:	d40f      	bmi.n	800a018 <_dtoa_r+0x6f8>
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	4659      	mov	r1, fp
 8009ffc:	f000 fe58 	bl	800acb0 <_Bfree>
 800a000:	2300      	movs	r3, #0
 800a002:	702b      	strb	r3, [r5, #0]
 800a004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a006:	f10a 0001 	add.w	r0, sl, #1
 800a00a:	6018      	str	r0, [r3, #0]
 800a00c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f43f acd8 	beq.w	80099c4 <_dtoa_r+0xa4>
 800a014:	601d      	str	r5, [r3, #0]
 800a016:	e4d5      	b.n	80099c4 <_dtoa_r+0xa4>
 800a018:	f8cd a01c 	str.w	sl, [sp, #28]
 800a01c:	462b      	mov	r3, r5
 800a01e:	461d      	mov	r5, r3
 800a020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a024:	2a39      	cmp	r2, #57	; 0x39
 800a026:	d108      	bne.n	800a03a <_dtoa_r+0x71a>
 800a028:	9a00      	ldr	r2, [sp, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d1f7      	bne.n	800a01e <_dtoa_r+0x6fe>
 800a02e:	9a07      	ldr	r2, [sp, #28]
 800a030:	9900      	ldr	r1, [sp, #0]
 800a032:	3201      	adds	r2, #1
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	2230      	movs	r2, #48	; 0x30
 800a038:	700a      	strb	r2, [r1, #0]
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	3201      	adds	r2, #1
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	e78c      	b.n	8009f5c <_dtoa_r+0x63c>
 800a042:	4b7f      	ldr	r3, [pc, #508]	; (800a240 <_dtoa_r+0x920>)
 800a044:	2200      	movs	r2, #0
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	2200      	movs	r2, #0
 800a04c:	2300      	movs	r3, #0
 800a04e:	4606      	mov	r6, r0
 800a050:	460f      	mov	r7, r1
 800a052:	f7f6 fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 800a056:	2800      	cmp	r0, #0
 800a058:	d09b      	beq.n	8009f92 <_dtoa_r+0x672>
 800a05a:	e7cd      	b.n	8009ff8 <_dtoa_r+0x6d8>
 800a05c:	9a08      	ldr	r2, [sp, #32]
 800a05e:	2a00      	cmp	r2, #0
 800a060:	f000 80c4 	beq.w	800a1ec <_dtoa_r+0x8cc>
 800a064:	9a05      	ldr	r2, [sp, #20]
 800a066:	2a01      	cmp	r2, #1
 800a068:	f300 80a8 	bgt.w	800a1bc <_dtoa_r+0x89c>
 800a06c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a06e:	2a00      	cmp	r2, #0
 800a070:	f000 80a0 	beq.w	800a1b4 <_dtoa_r+0x894>
 800a074:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a078:	9e06      	ldr	r6, [sp, #24]
 800a07a:	4645      	mov	r5, r8
 800a07c:	9a04      	ldr	r2, [sp, #16]
 800a07e:	2101      	movs	r1, #1
 800a080:	441a      	add	r2, r3
 800a082:	4620      	mov	r0, r4
 800a084:	4498      	add	r8, r3
 800a086:	9204      	str	r2, [sp, #16]
 800a088:	f000 ff18 	bl	800aebc <__i2b>
 800a08c:	4607      	mov	r7, r0
 800a08e:	2d00      	cmp	r5, #0
 800a090:	dd0b      	ble.n	800a0aa <_dtoa_r+0x78a>
 800a092:	9b04      	ldr	r3, [sp, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	dd08      	ble.n	800a0aa <_dtoa_r+0x78a>
 800a098:	42ab      	cmp	r3, r5
 800a09a:	9a04      	ldr	r2, [sp, #16]
 800a09c:	bfa8      	it	ge
 800a09e:	462b      	movge	r3, r5
 800a0a0:	eba8 0803 	sub.w	r8, r8, r3
 800a0a4:	1aed      	subs	r5, r5, r3
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	b1fb      	cbz	r3, 800a0ee <_dtoa_r+0x7ce>
 800a0ae:	9b08      	ldr	r3, [sp, #32]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 809f 	beq.w	800a1f4 <_dtoa_r+0x8d4>
 800a0b6:	2e00      	cmp	r6, #0
 800a0b8:	dd11      	ble.n	800a0de <_dtoa_r+0x7be>
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	4632      	mov	r2, r6
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 ffb8 	bl	800b034 <__pow5mult>
 800a0c4:	465a      	mov	r2, fp
 800a0c6:	4601      	mov	r1, r0
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 ff0c 	bl	800aee8 <__multiply>
 800a0d0:	4659      	mov	r1, fp
 800a0d2:	9007      	str	r0, [sp, #28]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 fdeb 	bl	800acb0 <_Bfree>
 800a0da:	9b07      	ldr	r3, [sp, #28]
 800a0dc:	469b      	mov	fp, r3
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	1b9a      	subs	r2, r3, r6
 800a0e2:	d004      	beq.n	800a0ee <_dtoa_r+0x7ce>
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f000 ffa4 	bl	800b034 <__pow5mult>
 800a0ec:	4683      	mov	fp, r0
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fee3 	bl	800aebc <__i2b>
 800a0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	dd7c      	ble.n	800a1f8 <_dtoa_r+0x8d8>
 800a0fe:	461a      	mov	r2, r3
 800a100:	4601      	mov	r1, r0
 800a102:	4620      	mov	r0, r4
 800a104:	f000 ff96 	bl	800b034 <__pow5mult>
 800a108:	9b05      	ldr	r3, [sp, #20]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	4606      	mov	r6, r0
 800a10e:	dd76      	ble.n	800a1fe <_dtoa_r+0x8de>
 800a110:	2300      	movs	r3, #0
 800a112:	9306      	str	r3, [sp, #24]
 800a114:	6933      	ldr	r3, [r6, #16]
 800a116:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a11a:	6918      	ldr	r0, [r3, #16]
 800a11c:	f000 fe7e 	bl	800ae1c <__hi0bits>
 800a120:	f1c0 0020 	rsb	r0, r0, #32
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	4418      	add	r0, r3
 800a128:	f010 001f 	ands.w	r0, r0, #31
 800a12c:	f000 8086 	beq.w	800a23c <_dtoa_r+0x91c>
 800a130:	f1c0 0320 	rsb	r3, r0, #32
 800a134:	2b04      	cmp	r3, #4
 800a136:	dd7f      	ble.n	800a238 <_dtoa_r+0x918>
 800a138:	f1c0 001c 	rsb	r0, r0, #28
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	4403      	add	r3, r0
 800a140:	4480      	add	r8, r0
 800a142:	4405      	add	r5, r0
 800a144:	9304      	str	r3, [sp, #16]
 800a146:	f1b8 0f00 	cmp.w	r8, #0
 800a14a:	dd05      	ble.n	800a158 <_dtoa_r+0x838>
 800a14c:	4659      	mov	r1, fp
 800a14e:	4642      	mov	r2, r8
 800a150:	4620      	mov	r0, r4
 800a152:	f000 ffc9 	bl	800b0e8 <__lshift>
 800a156:	4683      	mov	fp, r0
 800a158:	9b04      	ldr	r3, [sp, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dd05      	ble.n	800a16a <_dtoa_r+0x84a>
 800a15e:	4631      	mov	r1, r6
 800a160:	461a      	mov	r2, r3
 800a162:	4620      	mov	r0, r4
 800a164:	f000 ffc0 	bl	800b0e8 <__lshift>
 800a168:	4606      	mov	r6, r0
 800a16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d069      	beq.n	800a244 <_dtoa_r+0x924>
 800a170:	4631      	mov	r1, r6
 800a172:	4658      	mov	r0, fp
 800a174:	f001 f824 	bl	800b1c0 <__mcmp>
 800a178:	2800      	cmp	r0, #0
 800a17a:	da63      	bge.n	800a244 <_dtoa_r+0x924>
 800a17c:	2300      	movs	r3, #0
 800a17e:	4659      	mov	r1, fp
 800a180:	220a      	movs	r2, #10
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fdb6 	bl	800acf4 <__multadd>
 800a188:	9b08      	ldr	r3, [sp, #32]
 800a18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a18e:	4683      	mov	fp, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 818f 	beq.w	800a4b4 <_dtoa_r+0xb94>
 800a196:	4639      	mov	r1, r7
 800a198:	2300      	movs	r3, #0
 800a19a:	220a      	movs	r2, #10
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fda9 	bl	800acf4 <__multadd>
 800a1a2:	f1b9 0f00 	cmp.w	r9, #0
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	f300 808e 	bgt.w	800a2c8 <_dtoa_r+0x9a8>
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	dc50      	bgt.n	800a254 <_dtoa_r+0x934>
 800a1b2:	e089      	b.n	800a2c8 <_dtoa_r+0x9a8>
 800a1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1ba:	e75d      	b.n	800a078 <_dtoa_r+0x758>
 800a1bc:	9b01      	ldr	r3, [sp, #4]
 800a1be:	1e5e      	subs	r6, r3, #1
 800a1c0:	9b06      	ldr	r3, [sp, #24]
 800a1c2:	42b3      	cmp	r3, r6
 800a1c4:	bfbf      	itttt	lt
 800a1c6:	9b06      	ldrlt	r3, [sp, #24]
 800a1c8:	9606      	strlt	r6, [sp, #24]
 800a1ca:	1af2      	sublt	r2, r6, r3
 800a1cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a1ce:	bfb6      	itet	lt
 800a1d0:	189b      	addlt	r3, r3, r2
 800a1d2:	1b9e      	subge	r6, r3, r6
 800a1d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a1d6:	9b01      	ldr	r3, [sp, #4]
 800a1d8:	bfb8      	it	lt
 800a1da:	2600      	movlt	r6, #0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfb5      	itete	lt
 800a1e0:	eba8 0503 	sublt.w	r5, r8, r3
 800a1e4:	9b01      	ldrge	r3, [sp, #4]
 800a1e6:	2300      	movlt	r3, #0
 800a1e8:	4645      	movge	r5, r8
 800a1ea:	e747      	b.n	800a07c <_dtoa_r+0x75c>
 800a1ec:	9e06      	ldr	r6, [sp, #24]
 800a1ee:	9f08      	ldr	r7, [sp, #32]
 800a1f0:	4645      	mov	r5, r8
 800a1f2:	e74c      	b.n	800a08e <_dtoa_r+0x76e>
 800a1f4:	9a06      	ldr	r2, [sp, #24]
 800a1f6:	e775      	b.n	800a0e4 <_dtoa_r+0x7c4>
 800a1f8:	9b05      	ldr	r3, [sp, #20]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	dc18      	bgt.n	800a230 <_dtoa_r+0x910>
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	b9b3      	cbnz	r3, 800a230 <_dtoa_r+0x910>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a208:	b9a3      	cbnz	r3, 800a234 <_dtoa_r+0x914>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a210:	0d1b      	lsrs	r3, r3, #20
 800a212:	051b      	lsls	r3, r3, #20
 800a214:	b12b      	cbz	r3, 800a222 <_dtoa_r+0x902>
 800a216:	9b04      	ldr	r3, [sp, #16]
 800a218:	3301      	adds	r3, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	f108 0801 	add.w	r8, r8, #1
 800a220:	2301      	movs	r3, #1
 800a222:	9306      	str	r3, [sp, #24]
 800a224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a226:	2b00      	cmp	r3, #0
 800a228:	f47f af74 	bne.w	800a114 <_dtoa_r+0x7f4>
 800a22c:	2001      	movs	r0, #1
 800a22e:	e779      	b.n	800a124 <_dtoa_r+0x804>
 800a230:	2300      	movs	r3, #0
 800a232:	e7f6      	b.n	800a222 <_dtoa_r+0x902>
 800a234:	9b02      	ldr	r3, [sp, #8]
 800a236:	e7f4      	b.n	800a222 <_dtoa_r+0x902>
 800a238:	d085      	beq.n	800a146 <_dtoa_r+0x826>
 800a23a:	4618      	mov	r0, r3
 800a23c:	301c      	adds	r0, #28
 800a23e:	e77d      	b.n	800a13c <_dtoa_r+0x81c>
 800a240:	40240000 	.word	0x40240000
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dc38      	bgt.n	800a2bc <_dtoa_r+0x99c>
 800a24a:	9b05      	ldr	r3, [sp, #20]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	dd35      	ble.n	800a2bc <_dtoa_r+0x99c>
 800a250:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a254:	f1b9 0f00 	cmp.w	r9, #0
 800a258:	d10d      	bne.n	800a276 <_dtoa_r+0x956>
 800a25a:	4631      	mov	r1, r6
 800a25c:	464b      	mov	r3, r9
 800a25e:	2205      	movs	r2, #5
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fd47 	bl	800acf4 <__multadd>
 800a266:	4601      	mov	r1, r0
 800a268:	4606      	mov	r6, r0
 800a26a:	4658      	mov	r0, fp
 800a26c:	f000 ffa8 	bl	800b1c0 <__mcmp>
 800a270:	2800      	cmp	r0, #0
 800a272:	f73f adbd 	bgt.w	8009df0 <_dtoa_r+0x4d0>
 800a276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a278:	9d00      	ldr	r5, [sp, #0]
 800a27a:	ea6f 0a03 	mvn.w	sl, r3
 800a27e:	f04f 0800 	mov.w	r8, #0
 800a282:	4631      	mov	r1, r6
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fd13 	bl	800acb0 <_Bfree>
 800a28a:	2f00      	cmp	r7, #0
 800a28c:	f43f aeb4 	beq.w	8009ff8 <_dtoa_r+0x6d8>
 800a290:	f1b8 0f00 	cmp.w	r8, #0
 800a294:	d005      	beq.n	800a2a2 <_dtoa_r+0x982>
 800a296:	45b8      	cmp	r8, r7
 800a298:	d003      	beq.n	800a2a2 <_dtoa_r+0x982>
 800a29a:	4641      	mov	r1, r8
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fd07 	bl	800acb0 <_Bfree>
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fd03 	bl	800acb0 <_Bfree>
 800a2aa:	e6a5      	b.n	8009ff8 <_dtoa_r+0x6d8>
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	4637      	mov	r7, r6
 800a2b0:	e7e1      	b.n	800a276 <_dtoa_r+0x956>
 800a2b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2b8:	4637      	mov	r7, r6
 800a2ba:	e599      	b.n	8009df0 <_dtoa_r+0x4d0>
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 80fd 	beq.w	800a4c2 <_dtoa_r+0xba2>
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	dd05      	ble.n	800a2d8 <_dtoa_r+0x9b8>
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 ff09 	bl	800b0e8 <__lshift>
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d05c      	beq.n	800a398 <_dtoa_r+0xa78>
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 fca5 	bl	800ac30 <_Balloc>
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	b928      	cbnz	r0, 800a2f6 <_dtoa_r+0x9d6>
 800a2ea:	4b80      	ldr	r3, [pc, #512]	; (800a4ec <_dtoa_r+0xbcc>)
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2f2:	f7ff bb2e 	b.w	8009952 <_dtoa_r+0x32>
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	3202      	adds	r2, #2
 800a2fa:	0092      	lsls	r2, r2, #2
 800a2fc:	f107 010c 	add.w	r1, r7, #12
 800a300:	300c      	adds	r0, #12
 800a302:	f000 fc87 	bl	800ac14 <memcpy>
 800a306:	2201      	movs	r2, #1
 800a308:	4629      	mov	r1, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 feec 	bl	800b0e8 <__lshift>
 800a310:	9b00      	ldr	r3, [sp, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	444b      	add	r3, r9
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	46b8      	mov	r8, r7
 800a324:	9306      	str	r3, [sp, #24]
 800a326:	4607      	mov	r7, r0
 800a328:	9b01      	ldr	r3, [sp, #4]
 800a32a:	4631      	mov	r1, r6
 800a32c:	3b01      	subs	r3, #1
 800a32e:	4658      	mov	r0, fp
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	f7ff fa67 	bl	8009804 <quorem>
 800a336:	4603      	mov	r3, r0
 800a338:	3330      	adds	r3, #48	; 0x30
 800a33a:	9004      	str	r0, [sp, #16]
 800a33c:	4641      	mov	r1, r8
 800a33e:	4658      	mov	r0, fp
 800a340:	9308      	str	r3, [sp, #32]
 800a342:	f000 ff3d 	bl	800b1c0 <__mcmp>
 800a346:	463a      	mov	r2, r7
 800a348:	4681      	mov	r9, r0
 800a34a:	4631      	mov	r1, r6
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 ff53 	bl	800b1f8 <__mdiff>
 800a352:	68c2      	ldr	r2, [r0, #12]
 800a354:	9b08      	ldr	r3, [sp, #32]
 800a356:	4605      	mov	r5, r0
 800a358:	bb02      	cbnz	r2, 800a39c <_dtoa_r+0xa7c>
 800a35a:	4601      	mov	r1, r0
 800a35c:	4658      	mov	r0, fp
 800a35e:	f000 ff2f 	bl	800b1c0 <__mcmp>
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	4602      	mov	r2, r0
 800a366:	4629      	mov	r1, r5
 800a368:	4620      	mov	r0, r4
 800a36a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a36e:	f000 fc9f 	bl	800acb0 <_Bfree>
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a376:	9d01      	ldr	r5, [sp, #4]
 800a378:	ea43 0102 	orr.w	r1, r3, r2
 800a37c:	9b06      	ldr	r3, [sp, #24]
 800a37e:	430b      	orrs	r3, r1
 800a380:	9b08      	ldr	r3, [sp, #32]
 800a382:	d10d      	bne.n	800a3a0 <_dtoa_r+0xa80>
 800a384:	2b39      	cmp	r3, #57	; 0x39
 800a386:	d029      	beq.n	800a3dc <_dtoa_r+0xabc>
 800a388:	f1b9 0f00 	cmp.w	r9, #0
 800a38c:	dd01      	ble.n	800a392 <_dtoa_r+0xa72>
 800a38e:	9b04      	ldr	r3, [sp, #16]
 800a390:	3331      	adds	r3, #49	; 0x31
 800a392:	9a02      	ldr	r2, [sp, #8]
 800a394:	7013      	strb	r3, [r2, #0]
 800a396:	e774      	b.n	800a282 <_dtoa_r+0x962>
 800a398:	4638      	mov	r0, r7
 800a39a:	e7b9      	b.n	800a310 <_dtoa_r+0x9f0>
 800a39c:	2201      	movs	r2, #1
 800a39e:	e7e2      	b.n	800a366 <_dtoa_r+0xa46>
 800a3a0:	f1b9 0f00 	cmp.w	r9, #0
 800a3a4:	db06      	blt.n	800a3b4 <_dtoa_r+0xa94>
 800a3a6:	9905      	ldr	r1, [sp, #20]
 800a3a8:	ea41 0909 	orr.w	r9, r1, r9
 800a3ac:	9906      	ldr	r1, [sp, #24]
 800a3ae:	ea59 0101 	orrs.w	r1, r9, r1
 800a3b2:	d120      	bne.n	800a3f6 <_dtoa_r+0xad6>
 800a3b4:	2a00      	cmp	r2, #0
 800a3b6:	ddec      	ble.n	800a392 <_dtoa_r+0xa72>
 800a3b8:	4659      	mov	r1, fp
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	f000 fe92 	bl	800b0e8 <__lshift>
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4683      	mov	fp, r0
 800a3c8:	f000 fefa 	bl	800b1c0 <__mcmp>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	9b01      	ldr	r3, [sp, #4]
 800a3d0:	dc02      	bgt.n	800a3d8 <_dtoa_r+0xab8>
 800a3d2:	d1de      	bne.n	800a392 <_dtoa_r+0xa72>
 800a3d4:	07da      	lsls	r2, r3, #31
 800a3d6:	d5dc      	bpl.n	800a392 <_dtoa_r+0xa72>
 800a3d8:	2b39      	cmp	r3, #57	; 0x39
 800a3da:	d1d8      	bne.n	800a38e <_dtoa_r+0xa6e>
 800a3dc:	9a02      	ldr	r2, [sp, #8]
 800a3de:	2339      	movs	r3, #57	; 0x39
 800a3e0:	7013      	strb	r3, [r2, #0]
 800a3e2:	462b      	mov	r3, r5
 800a3e4:	461d      	mov	r5, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3ec:	2a39      	cmp	r2, #57	; 0x39
 800a3ee:	d050      	beq.n	800a492 <_dtoa_r+0xb72>
 800a3f0:	3201      	adds	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	e745      	b.n	800a282 <_dtoa_r+0x962>
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	dd03      	ble.n	800a402 <_dtoa_r+0xae2>
 800a3fa:	2b39      	cmp	r3, #57	; 0x39
 800a3fc:	d0ee      	beq.n	800a3dc <_dtoa_r+0xabc>
 800a3fe:	3301      	adds	r3, #1
 800a400:	e7c7      	b.n	800a392 <_dtoa_r+0xa72>
 800a402:	9a01      	ldr	r2, [sp, #4]
 800a404:	9907      	ldr	r1, [sp, #28]
 800a406:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a40a:	428a      	cmp	r2, r1
 800a40c:	d02a      	beq.n	800a464 <_dtoa_r+0xb44>
 800a40e:	4659      	mov	r1, fp
 800a410:	2300      	movs	r3, #0
 800a412:	220a      	movs	r2, #10
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fc6d 	bl	800acf4 <__multadd>
 800a41a:	45b8      	cmp	r8, r7
 800a41c:	4683      	mov	fp, r0
 800a41e:	f04f 0300 	mov.w	r3, #0
 800a422:	f04f 020a 	mov.w	r2, #10
 800a426:	4641      	mov	r1, r8
 800a428:	4620      	mov	r0, r4
 800a42a:	d107      	bne.n	800a43c <_dtoa_r+0xb1c>
 800a42c:	f000 fc62 	bl	800acf4 <__multadd>
 800a430:	4680      	mov	r8, r0
 800a432:	4607      	mov	r7, r0
 800a434:	9b01      	ldr	r3, [sp, #4]
 800a436:	3301      	adds	r3, #1
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	e775      	b.n	800a328 <_dtoa_r+0xa08>
 800a43c:	f000 fc5a 	bl	800acf4 <__multadd>
 800a440:	4639      	mov	r1, r7
 800a442:	4680      	mov	r8, r0
 800a444:	2300      	movs	r3, #0
 800a446:	220a      	movs	r2, #10
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fc53 	bl	800acf4 <__multadd>
 800a44e:	4607      	mov	r7, r0
 800a450:	e7f0      	b.n	800a434 <_dtoa_r+0xb14>
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	9a00      	ldr	r2, [sp, #0]
 800a458:	bfcc      	ite	gt
 800a45a:	464d      	movgt	r5, r9
 800a45c:	2501      	movle	r5, #1
 800a45e:	4415      	add	r5, r2
 800a460:	f04f 0800 	mov.w	r8, #0
 800a464:	4659      	mov	r1, fp
 800a466:	2201      	movs	r2, #1
 800a468:	4620      	mov	r0, r4
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	f000 fe3c 	bl	800b0e8 <__lshift>
 800a470:	4631      	mov	r1, r6
 800a472:	4683      	mov	fp, r0
 800a474:	f000 fea4 	bl	800b1c0 <__mcmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	dcb2      	bgt.n	800a3e2 <_dtoa_r+0xac2>
 800a47c:	d102      	bne.n	800a484 <_dtoa_r+0xb64>
 800a47e:	9b01      	ldr	r3, [sp, #4]
 800a480:	07db      	lsls	r3, r3, #31
 800a482:	d4ae      	bmi.n	800a3e2 <_dtoa_r+0xac2>
 800a484:	462b      	mov	r3, r5
 800a486:	461d      	mov	r5, r3
 800a488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a48c:	2a30      	cmp	r2, #48	; 0x30
 800a48e:	d0fa      	beq.n	800a486 <_dtoa_r+0xb66>
 800a490:	e6f7      	b.n	800a282 <_dtoa_r+0x962>
 800a492:	9a00      	ldr	r2, [sp, #0]
 800a494:	429a      	cmp	r2, r3
 800a496:	d1a5      	bne.n	800a3e4 <_dtoa_r+0xac4>
 800a498:	f10a 0a01 	add.w	sl, sl, #1
 800a49c:	2331      	movs	r3, #49	; 0x31
 800a49e:	e779      	b.n	800a394 <_dtoa_r+0xa74>
 800a4a0:	4b13      	ldr	r3, [pc, #76]	; (800a4f0 <_dtoa_r+0xbd0>)
 800a4a2:	f7ff baaf 	b.w	8009a04 <_dtoa_r+0xe4>
 800a4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f47f aa86 	bne.w	80099ba <_dtoa_r+0x9a>
 800a4ae:	4b11      	ldr	r3, [pc, #68]	; (800a4f4 <_dtoa_r+0xbd4>)
 800a4b0:	f7ff baa8 	b.w	8009a04 <_dtoa_r+0xe4>
 800a4b4:	f1b9 0f00 	cmp.w	r9, #0
 800a4b8:	dc03      	bgt.n	800a4c2 <_dtoa_r+0xba2>
 800a4ba:	9b05      	ldr	r3, [sp, #20]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	f73f aec9 	bgt.w	800a254 <_dtoa_r+0x934>
 800a4c2:	9d00      	ldr	r5, [sp, #0]
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f7ff f99c 	bl	8009804 <quorem>
 800a4cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a4d4:	9a00      	ldr	r2, [sp, #0]
 800a4d6:	1aaa      	subs	r2, r5, r2
 800a4d8:	4591      	cmp	r9, r2
 800a4da:	ddba      	ble.n	800a452 <_dtoa_r+0xb32>
 800a4dc:	4659      	mov	r1, fp
 800a4de:	2300      	movs	r3, #0
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fc06 	bl	800acf4 <__multadd>
 800a4e8:	4683      	mov	fp, r0
 800a4ea:	e7eb      	b.n	800a4c4 <_dtoa_r+0xba4>
 800a4ec:	0800f3bc 	.word	0x0800f3bc
 800a4f0:	0800f1b8 	.word	0x0800f1b8
 800a4f4:	0800f339 	.word	0x0800f339

0800a4f8 <rshift>:
 800a4f8:	6903      	ldr	r3, [r0, #16]
 800a4fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a502:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a506:	f100 0414 	add.w	r4, r0, #20
 800a50a:	dd45      	ble.n	800a598 <rshift+0xa0>
 800a50c:	f011 011f 	ands.w	r1, r1, #31
 800a510:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a514:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a518:	d10c      	bne.n	800a534 <rshift+0x3c>
 800a51a:	f100 0710 	add.w	r7, r0, #16
 800a51e:	4629      	mov	r1, r5
 800a520:	42b1      	cmp	r1, r6
 800a522:	d334      	bcc.n	800a58e <rshift+0x96>
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	1eea      	subs	r2, r5, #3
 800a52a:	4296      	cmp	r6, r2
 800a52c:	bf38      	it	cc
 800a52e:	2300      	movcc	r3, #0
 800a530:	4423      	add	r3, r4
 800a532:	e015      	b.n	800a560 <rshift+0x68>
 800a534:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a538:	f1c1 0820 	rsb	r8, r1, #32
 800a53c:	40cf      	lsrs	r7, r1
 800a53e:	f105 0e04 	add.w	lr, r5, #4
 800a542:	46a1      	mov	r9, r4
 800a544:	4576      	cmp	r6, lr
 800a546:	46f4      	mov	ip, lr
 800a548:	d815      	bhi.n	800a576 <rshift+0x7e>
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	009a      	lsls	r2, r3, #2
 800a54e:	3a04      	subs	r2, #4
 800a550:	3501      	adds	r5, #1
 800a552:	42ae      	cmp	r6, r5
 800a554:	bf38      	it	cc
 800a556:	2200      	movcc	r2, #0
 800a558:	18a3      	adds	r3, r4, r2
 800a55a:	50a7      	str	r7, [r4, r2]
 800a55c:	b107      	cbz	r7, 800a560 <rshift+0x68>
 800a55e:	3304      	adds	r3, #4
 800a560:	1b1a      	subs	r2, r3, r4
 800a562:	42a3      	cmp	r3, r4
 800a564:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a568:	bf08      	it	eq
 800a56a:	2300      	moveq	r3, #0
 800a56c:	6102      	str	r2, [r0, #16]
 800a56e:	bf08      	it	eq
 800a570:	6143      	streq	r3, [r0, #20]
 800a572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a576:	f8dc c000 	ldr.w	ip, [ip]
 800a57a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a57e:	ea4c 0707 	orr.w	r7, ip, r7
 800a582:	f849 7b04 	str.w	r7, [r9], #4
 800a586:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a58a:	40cf      	lsrs	r7, r1
 800a58c:	e7da      	b.n	800a544 <rshift+0x4c>
 800a58e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a592:	f847 cf04 	str.w	ip, [r7, #4]!
 800a596:	e7c3      	b.n	800a520 <rshift+0x28>
 800a598:	4623      	mov	r3, r4
 800a59a:	e7e1      	b.n	800a560 <rshift+0x68>

0800a59c <__hexdig_fun>:
 800a59c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d802      	bhi.n	800a5aa <__hexdig_fun+0xe>
 800a5a4:	3820      	subs	r0, #32
 800a5a6:	b2c0      	uxtb	r0, r0
 800a5a8:	4770      	bx	lr
 800a5aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d801      	bhi.n	800a5b6 <__hexdig_fun+0x1a>
 800a5b2:	3847      	subs	r0, #71	; 0x47
 800a5b4:	e7f7      	b.n	800a5a6 <__hexdig_fun+0xa>
 800a5b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d801      	bhi.n	800a5c2 <__hexdig_fun+0x26>
 800a5be:	3827      	subs	r0, #39	; 0x27
 800a5c0:	e7f1      	b.n	800a5a6 <__hexdig_fun+0xa>
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <__gethex>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	ed2d 8b02 	vpush	{d8}
 800a5d0:	b089      	sub	sp, #36	; 0x24
 800a5d2:	ee08 0a10 	vmov	s16, r0
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	4bbc      	ldr	r3, [pc, #752]	; (800a8cc <__gethex+0x304>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	468b      	mov	fp, r1
 800a5e2:	4690      	mov	r8, r2
 800a5e4:	f7f5 fdf4 	bl	80001d0 <strlen>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f8db 2000 	ldr.w	r2, [fp]
 800a5ee:	4403      	add	r3, r0
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5f6:	9305      	str	r3, [sp, #20]
 800a5f8:	1c93      	adds	r3, r2, #2
 800a5fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a602:	32fe      	adds	r2, #254	; 0xfe
 800a604:	18d1      	adds	r1, r2, r3
 800a606:	461f      	mov	r7, r3
 800a608:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a60c:	9100      	str	r1, [sp, #0]
 800a60e:	2830      	cmp	r0, #48	; 0x30
 800a610:	d0f8      	beq.n	800a604 <__gethex+0x3c>
 800a612:	f7ff ffc3 	bl	800a59c <__hexdig_fun>
 800a616:	4604      	mov	r4, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	d13a      	bne.n	800a692 <__gethex+0xca>
 800a61c:	9901      	ldr	r1, [sp, #4]
 800a61e:	4652      	mov	r2, sl
 800a620:	4638      	mov	r0, r7
 800a622:	f001 f9ed 	bl	800ba00 <strncmp>
 800a626:	4605      	mov	r5, r0
 800a628:	2800      	cmp	r0, #0
 800a62a:	d168      	bne.n	800a6fe <__gethex+0x136>
 800a62c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a630:	eb07 060a 	add.w	r6, r7, sl
 800a634:	f7ff ffb2 	bl	800a59c <__hexdig_fun>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d062      	beq.n	800a702 <__gethex+0x13a>
 800a63c:	4633      	mov	r3, r6
 800a63e:	7818      	ldrb	r0, [r3, #0]
 800a640:	2830      	cmp	r0, #48	; 0x30
 800a642:	461f      	mov	r7, r3
 800a644:	f103 0301 	add.w	r3, r3, #1
 800a648:	d0f9      	beq.n	800a63e <__gethex+0x76>
 800a64a:	f7ff ffa7 	bl	800a59c <__hexdig_fun>
 800a64e:	2301      	movs	r3, #1
 800a650:	fab0 f480 	clz	r4, r0
 800a654:	0964      	lsrs	r4, r4, #5
 800a656:	4635      	mov	r5, r6
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	463a      	mov	r2, r7
 800a65c:	4616      	mov	r6, r2
 800a65e:	3201      	adds	r2, #1
 800a660:	7830      	ldrb	r0, [r6, #0]
 800a662:	f7ff ff9b 	bl	800a59c <__hexdig_fun>
 800a666:	2800      	cmp	r0, #0
 800a668:	d1f8      	bne.n	800a65c <__gethex+0x94>
 800a66a:	9901      	ldr	r1, [sp, #4]
 800a66c:	4652      	mov	r2, sl
 800a66e:	4630      	mov	r0, r6
 800a670:	f001 f9c6 	bl	800ba00 <strncmp>
 800a674:	b980      	cbnz	r0, 800a698 <__gethex+0xd0>
 800a676:	b94d      	cbnz	r5, 800a68c <__gethex+0xc4>
 800a678:	eb06 050a 	add.w	r5, r6, sl
 800a67c:	462a      	mov	r2, r5
 800a67e:	4616      	mov	r6, r2
 800a680:	3201      	adds	r2, #1
 800a682:	7830      	ldrb	r0, [r6, #0]
 800a684:	f7ff ff8a 	bl	800a59c <__hexdig_fun>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1f8      	bne.n	800a67e <__gethex+0xb6>
 800a68c:	1bad      	subs	r5, r5, r6
 800a68e:	00ad      	lsls	r5, r5, #2
 800a690:	e004      	b.n	800a69c <__gethex+0xd4>
 800a692:	2400      	movs	r4, #0
 800a694:	4625      	mov	r5, r4
 800a696:	e7e0      	b.n	800a65a <__gethex+0x92>
 800a698:	2d00      	cmp	r5, #0
 800a69a:	d1f7      	bne.n	800a68c <__gethex+0xc4>
 800a69c:	7833      	ldrb	r3, [r6, #0]
 800a69e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6a2:	2b50      	cmp	r3, #80	; 0x50
 800a6a4:	d13b      	bne.n	800a71e <__gethex+0x156>
 800a6a6:	7873      	ldrb	r3, [r6, #1]
 800a6a8:	2b2b      	cmp	r3, #43	; 0x2b
 800a6aa:	d02c      	beq.n	800a706 <__gethex+0x13e>
 800a6ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a6ae:	d02e      	beq.n	800a70e <__gethex+0x146>
 800a6b0:	1c71      	adds	r1, r6, #1
 800a6b2:	f04f 0900 	mov.w	r9, #0
 800a6b6:	7808      	ldrb	r0, [r1, #0]
 800a6b8:	f7ff ff70 	bl	800a59c <__hexdig_fun>
 800a6bc:	1e43      	subs	r3, r0, #1
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b18      	cmp	r3, #24
 800a6c2:	d82c      	bhi.n	800a71e <__gethex+0x156>
 800a6c4:	f1a0 0210 	sub.w	r2, r0, #16
 800a6c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6cc:	f7ff ff66 	bl	800a59c <__hexdig_fun>
 800a6d0:	1e43      	subs	r3, r0, #1
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b18      	cmp	r3, #24
 800a6d6:	d91d      	bls.n	800a714 <__gethex+0x14c>
 800a6d8:	f1b9 0f00 	cmp.w	r9, #0
 800a6dc:	d000      	beq.n	800a6e0 <__gethex+0x118>
 800a6de:	4252      	negs	r2, r2
 800a6e0:	4415      	add	r5, r2
 800a6e2:	f8cb 1000 	str.w	r1, [fp]
 800a6e6:	b1e4      	cbz	r4, 800a722 <__gethex+0x15a>
 800a6e8:	9b00      	ldr	r3, [sp, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bf14      	ite	ne
 800a6ee:	2700      	movne	r7, #0
 800a6f0:	2706      	moveq	r7, #6
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	b009      	add	sp, #36	; 0x24
 800a6f6:	ecbd 8b02 	vpop	{d8}
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	463e      	mov	r6, r7
 800a700:	4625      	mov	r5, r4
 800a702:	2401      	movs	r4, #1
 800a704:	e7ca      	b.n	800a69c <__gethex+0xd4>
 800a706:	f04f 0900 	mov.w	r9, #0
 800a70a:	1cb1      	adds	r1, r6, #2
 800a70c:	e7d3      	b.n	800a6b6 <__gethex+0xee>
 800a70e:	f04f 0901 	mov.w	r9, #1
 800a712:	e7fa      	b.n	800a70a <__gethex+0x142>
 800a714:	230a      	movs	r3, #10
 800a716:	fb03 0202 	mla	r2, r3, r2, r0
 800a71a:	3a10      	subs	r2, #16
 800a71c:	e7d4      	b.n	800a6c8 <__gethex+0x100>
 800a71e:	4631      	mov	r1, r6
 800a720:	e7df      	b.n	800a6e2 <__gethex+0x11a>
 800a722:	1bf3      	subs	r3, r6, r7
 800a724:	3b01      	subs	r3, #1
 800a726:	4621      	mov	r1, r4
 800a728:	2b07      	cmp	r3, #7
 800a72a:	dc0b      	bgt.n	800a744 <__gethex+0x17c>
 800a72c:	ee18 0a10 	vmov	r0, s16
 800a730:	f000 fa7e 	bl	800ac30 <_Balloc>
 800a734:	4604      	mov	r4, r0
 800a736:	b940      	cbnz	r0, 800a74a <__gethex+0x182>
 800a738:	4b65      	ldr	r3, [pc, #404]	; (800a8d0 <__gethex+0x308>)
 800a73a:	4602      	mov	r2, r0
 800a73c:	21de      	movs	r1, #222	; 0xde
 800a73e:	4865      	ldr	r0, [pc, #404]	; (800a8d4 <__gethex+0x30c>)
 800a740:	f001 f97e 	bl	800ba40 <__assert_func>
 800a744:	3101      	adds	r1, #1
 800a746:	105b      	asrs	r3, r3, #1
 800a748:	e7ee      	b.n	800a728 <__gethex+0x160>
 800a74a:	f100 0914 	add.w	r9, r0, #20
 800a74e:	f04f 0b00 	mov.w	fp, #0
 800a752:	f1ca 0301 	rsb	r3, sl, #1
 800a756:	f8cd 9008 	str.w	r9, [sp, #8]
 800a75a:	f8cd b000 	str.w	fp, [sp]
 800a75e:	9306      	str	r3, [sp, #24]
 800a760:	42b7      	cmp	r7, r6
 800a762:	d340      	bcc.n	800a7e6 <__gethex+0x21e>
 800a764:	9802      	ldr	r0, [sp, #8]
 800a766:	9b00      	ldr	r3, [sp, #0]
 800a768:	f840 3b04 	str.w	r3, [r0], #4
 800a76c:	eba0 0009 	sub.w	r0, r0, r9
 800a770:	1080      	asrs	r0, r0, #2
 800a772:	0146      	lsls	r6, r0, #5
 800a774:	6120      	str	r0, [r4, #16]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fb50 	bl	800ae1c <__hi0bits>
 800a77c:	1a30      	subs	r0, r6, r0
 800a77e:	f8d8 6000 	ldr.w	r6, [r8]
 800a782:	42b0      	cmp	r0, r6
 800a784:	dd63      	ble.n	800a84e <__gethex+0x286>
 800a786:	1b87      	subs	r7, r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 feea 	bl	800b564 <__any_on>
 800a790:	4682      	mov	sl, r0
 800a792:	b1a8      	cbz	r0, 800a7c0 <__gethex+0x1f8>
 800a794:	1e7b      	subs	r3, r7, #1
 800a796:	1159      	asrs	r1, r3, #5
 800a798:	f003 021f 	and.w	r2, r3, #31
 800a79c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7a0:	f04f 0a01 	mov.w	sl, #1
 800a7a4:	fa0a f202 	lsl.w	r2, sl, r2
 800a7a8:	420a      	tst	r2, r1
 800a7aa:	d009      	beq.n	800a7c0 <__gethex+0x1f8>
 800a7ac:	4553      	cmp	r3, sl
 800a7ae:	dd05      	ble.n	800a7bc <__gethex+0x1f4>
 800a7b0:	1eb9      	subs	r1, r7, #2
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fed6 	bl	800b564 <__any_on>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d145      	bne.n	800a848 <__gethex+0x280>
 800a7bc:	f04f 0a02 	mov.w	sl, #2
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fe98 	bl	800a4f8 <rshift>
 800a7c8:	443d      	add	r5, r7
 800a7ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	da4c      	bge.n	800a86c <__gethex+0x2a4>
 800a7d2:	ee18 0a10 	vmov	r0, s16
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f000 fa6a 	bl	800acb0 <_Bfree>
 800a7dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	27a3      	movs	r7, #163	; 0xa3
 800a7e4:	e785      	b.n	800a6f2 <__gethex+0x12a>
 800a7e6:	1e73      	subs	r3, r6, #1
 800a7e8:	9a05      	ldr	r2, [sp, #20]
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d019      	beq.n	800a828 <__gethex+0x260>
 800a7f4:	f1bb 0f20 	cmp.w	fp, #32
 800a7f8:	d107      	bne.n	800a80a <__gethex+0x242>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	9a00      	ldr	r2, [sp, #0]
 800a7fe:	f843 2b04 	str.w	r2, [r3], #4
 800a802:	9302      	str	r3, [sp, #8]
 800a804:	2300      	movs	r3, #0
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	469b      	mov	fp, r3
 800a80a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a80e:	f7ff fec5 	bl	800a59c <__hexdig_fun>
 800a812:	9b00      	ldr	r3, [sp, #0]
 800a814:	f000 000f 	and.w	r0, r0, #15
 800a818:	fa00 f00b 	lsl.w	r0, r0, fp
 800a81c:	4303      	orrs	r3, r0
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	f10b 0b04 	add.w	fp, fp, #4
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	e00d      	b.n	800a844 <__gethex+0x27c>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	9a06      	ldr	r2, [sp, #24]
 800a82c:	4413      	add	r3, r2
 800a82e:	42bb      	cmp	r3, r7
 800a830:	d3e0      	bcc.n	800a7f4 <__gethex+0x22c>
 800a832:	4618      	mov	r0, r3
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	9307      	str	r3, [sp, #28]
 800a838:	4652      	mov	r2, sl
 800a83a:	f001 f8e1 	bl	800ba00 <strncmp>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	2800      	cmp	r0, #0
 800a842:	d1d7      	bne.n	800a7f4 <__gethex+0x22c>
 800a844:	461e      	mov	r6, r3
 800a846:	e78b      	b.n	800a760 <__gethex+0x198>
 800a848:	f04f 0a03 	mov.w	sl, #3
 800a84c:	e7b8      	b.n	800a7c0 <__gethex+0x1f8>
 800a84e:	da0a      	bge.n	800a866 <__gethex+0x29e>
 800a850:	1a37      	subs	r7, r6, r0
 800a852:	4621      	mov	r1, r4
 800a854:	ee18 0a10 	vmov	r0, s16
 800a858:	463a      	mov	r2, r7
 800a85a:	f000 fc45 	bl	800b0e8 <__lshift>
 800a85e:	1bed      	subs	r5, r5, r7
 800a860:	4604      	mov	r4, r0
 800a862:	f100 0914 	add.w	r9, r0, #20
 800a866:	f04f 0a00 	mov.w	sl, #0
 800a86a:	e7ae      	b.n	800a7ca <__gethex+0x202>
 800a86c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a870:	42a8      	cmp	r0, r5
 800a872:	dd72      	ble.n	800a95a <__gethex+0x392>
 800a874:	1b45      	subs	r5, r0, r5
 800a876:	42ae      	cmp	r6, r5
 800a878:	dc36      	bgt.n	800a8e8 <__gethex+0x320>
 800a87a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d02a      	beq.n	800a8d8 <__gethex+0x310>
 800a882:	2b03      	cmp	r3, #3
 800a884:	d02c      	beq.n	800a8e0 <__gethex+0x318>
 800a886:	2b01      	cmp	r3, #1
 800a888:	d115      	bne.n	800a8b6 <__gethex+0x2ee>
 800a88a:	42ae      	cmp	r6, r5
 800a88c:	d113      	bne.n	800a8b6 <__gethex+0x2ee>
 800a88e:	2e01      	cmp	r6, #1
 800a890:	d10b      	bne.n	800a8aa <__gethex+0x2e2>
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	2301      	movs	r3, #1
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	f8c9 3000 	str.w	r3, [r9]
 800a8a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8a4:	2762      	movs	r7, #98	; 0x62
 800a8a6:	601c      	str	r4, [r3, #0]
 800a8a8:	e723      	b.n	800a6f2 <__gethex+0x12a>
 800a8aa:	1e71      	subs	r1, r6, #1
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fe59 	bl	800b564 <__any_on>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d1ed      	bne.n	800a892 <__gethex+0x2ca>
 800a8b6:	ee18 0a10 	vmov	r0, s16
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	f000 f9f8 	bl	800acb0 <_Bfree>
 800a8c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	2750      	movs	r7, #80	; 0x50
 800a8c8:	e713      	b.n	800a6f2 <__gethex+0x12a>
 800a8ca:	bf00      	nop
 800a8cc:	0800f438 	.word	0x0800f438
 800a8d0:	0800f3bc 	.word	0x0800f3bc
 800a8d4:	0800f3cd 	.word	0x0800f3cd
 800a8d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1eb      	bne.n	800a8b6 <__gethex+0x2ee>
 800a8de:	e7d8      	b.n	800a892 <__gethex+0x2ca>
 800a8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1d5      	bne.n	800a892 <__gethex+0x2ca>
 800a8e6:	e7e6      	b.n	800a8b6 <__gethex+0x2ee>
 800a8e8:	1e6f      	subs	r7, r5, #1
 800a8ea:	f1ba 0f00 	cmp.w	sl, #0
 800a8ee:	d131      	bne.n	800a954 <__gethex+0x38c>
 800a8f0:	b127      	cbz	r7, 800a8fc <__gethex+0x334>
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 fe35 	bl	800b564 <__any_on>
 800a8fa:	4682      	mov	sl, r0
 800a8fc:	117b      	asrs	r3, r7, #5
 800a8fe:	2101      	movs	r1, #1
 800a900:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a904:	f007 071f 	and.w	r7, r7, #31
 800a908:	fa01 f707 	lsl.w	r7, r1, r7
 800a90c:	421f      	tst	r7, r3
 800a90e:	4629      	mov	r1, r5
 800a910:	4620      	mov	r0, r4
 800a912:	bf18      	it	ne
 800a914:	f04a 0a02 	orrne.w	sl, sl, #2
 800a918:	1b76      	subs	r6, r6, r5
 800a91a:	f7ff fded 	bl	800a4f8 <rshift>
 800a91e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a922:	2702      	movs	r7, #2
 800a924:	f1ba 0f00 	cmp.w	sl, #0
 800a928:	d048      	beq.n	800a9bc <__gethex+0x3f4>
 800a92a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d015      	beq.n	800a95e <__gethex+0x396>
 800a932:	2b03      	cmp	r3, #3
 800a934:	d017      	beq.n	800a966 <__gethex+0x39e>
 800a936:	2b01      	cmp	r3, #1
 800a938:	d109      	bne.n	800a94e <__gethex+0x386>
 800a93a:	f01a 0f02 	tst.w	sl, #2
 800a93e:	d006      	beq.n	800a94e <__gethex+0x386>
 800a940:	f8d9 0000 	ldr.w	r0, [r9]
 800a944:	ea4a 0a00 	orr.w	sl, sl, r0
 800a948:	f01a 0f01 	tst.w	sl, #1
 800a94c:	d10e      	bne.n	800a96c <__gethex+0x3a4>
 800a94e:	f047 0710 	orr.w	r7, r7, #16
 800a952:	e033      	b.n	800a9bc <__gethex+0x3f4>
 800a954:	f04f 0a01 	mov.w	sl, #1
 800a958:	e7d0      	b.n	800a8fc <__gethex+0x334>
 800a95a:	2701      	movs	r7, #1
 800a95c:	e7e2      	b.n	800a924 <__gethex+0x35c>
 800a95e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a960:	f1c3 0301 	rsb	r3, r3, #1
 800a964:	9315      	str	r3, [sp, #84]	; 0x54
 800a966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <__gethex+0x386>
 800a96c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a970:	f104 0314 	add.w	r3, r4, #20
 800a974:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a978:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a97c:	f04f 0c00 	mov.w	ip, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f853 2b04 	ldr.w	r2, [r3], #4
 800a986:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a98a:	d01c      	beq.n	800a9c6 <__gethex+0x3fe>
 800a98c:	3201      	adds	r2, #1
 800a98e:	6002      	str	r2, [r0, #0]
 800a990:	2f02      	cmp	r7, #2
 800a992:	f104 0314 	add.w	r3, r4, #20
 800a996:	d13f      	bne.n	800aa18 <__gethex+0x450>
 800a998:	f8d8 2000 	ldr.w	r2, [r8]
 800a99c:	3a01      	subs	r2, #1
 800a99e:	42b2      	cmp	r2, r6
 800a9a0:	d10a      	bne.n	800a9b8 <__gethex+0x3f0>
 800a9a2:	1171      	asrs	r1, r6, #5
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9aa:	f006 061f 	and.w	r6, r6, #31
 800a9ae:	fa02 f606 	lsl.w	r6, r2, r6
 800a9b2:	421e      	tst	r6, r3
 800a9b4:	bf18      	it	ne
 800a9b6:	4617      	movne	r7, r2
 800a9b8:	f047 0720 	orr.w	r7, r7, #32
 800a9bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9be:	601c      	str	r4, [r3, #0]
 800a9c0:	9b04      	ldr	r3, [sp, #16]
 800a9c2:	601d      	str	r5, [r3, #0]
 800a9c4:	e695      	b.n	800a6f2 <__gethex+0x12a>
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9cc:	d8d8      	bhi.n	800a980 <__gethex+0x3b8>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	459b      	cmp	fp, r3
 800a9d2:	db19      	blt.n	800aa08 <__gethex+0x440>
 800a9d4:	6861      	ldr	r1, [r4, #4]
 800a9d6:	ee18 0a10 	vmov	r0, s16
 800a9da:	3101      	adds	r1, #1
 800a9dc:	f000 f928 	bl	800ac30 <_Balloc>
 800a9e0:	4681      	mov	r9, r0
 800a9e2:	b918      	cbnz	r0, 800a9ec <__gethex+0x424>
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <__gethex+0x488>)
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	2184      	movs	r1, #132	; 0x84
 800a9ea:	e6a8      	b.n	800a73e <__gethex+0x176>
 800a9ec:	6922      	ldr	r2, [r4, #16]
 800a9ee:	3202      	adds	r2, #2
 800a9f0:	f104 010c 	add.w	r1, r4, #12
 800a9f4:	0092      	lsls	r2, r2, #2
 800a9f6:	300c      	adds	r0, #12
 800a9f8:	f000 f90c 	bl	800ac14 <memcpy>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	ee18 0a10 	vmov	r0, s16
 800aa02:	f000 f955 	bl	800acb0 <_Bfree>
 800aa06:	464c      	mov	r4, r9
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa10:	6122      	str	r2, [r4, #16]
 800aa12:	2201      	movs	r2, #1
 800aa14:	615a      	str	r2, [r3, #20]
 800aa16:	e7bb      	b.n	800a990 <__gethex+0x3c8>
 800aa18:	6922      	ldr	r2, [r4, #16]
 800aa1a:	455a      	cmp	r2, fp
 800aa1c:	dd0b      	ble.n	800aa36 <__gethex+0x46e>
 800aa1e:	2101      	movs	r1, #1
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7ff fd69 	bl	800a4f8 <rshift>
 800aa26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	42ab      	cmp	r3, r5
 800aa2e:	f6ff aed0 	blt.w	800a7d2 <__gethex+0x20a>
 800aa32:	2701      	movs	r7, #1
 800aa34:	e7c0      	b.n	800a9b8 <__gethex+0x3f0>
 800aa36:	f016 061f 	ands.w	r6, r6, #31
 800aa3a:	d0fa      	beq.n	800aa32 <__gethex+0x46a>
 800aa3c:	449a      	add	sl, r3
 800aa3e:	f1c6 0620 	rsb	r6, r6, #32
 800aa42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aa46:	f000 f9e9 	bl	800ae1c <__hi0bits>
 800aa4a:	42b0      	cmp	r0, r6
 800aa4c:	dbe7      	blt.n	800aa1e <__gethex+0x456>
 800aa4e:	e7f0      	b.n	800aa32 <__gethex+0x46a>
 800aa50:	0800f3bc 	.word	0x0800f3bc

0800aa54 <L_shift>:
 800aa54:	f1c2 0208 	rsb	r2, r2, #8
 800aa58:	0092      	lsls	r2, r2, #2
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	f1c2 0620 	rsb	r6, r2, #32
 800aa60:	6843      	ldr	r3, [r0, #4]
 800aa62:	6804      	ldr	r4, [r0, #0]
 800aa64:	fa03 f506 	lsl.w	r5, r3, r6
 800aa68:	432c      	orrs	r4, r5
 800aa6a:	40d3      	lsrs	r3, r2
 800aa6c:	6004      	str	r4, [r0, #0]
 800aa6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa72:	4288      	cmp	r0, r1
 800aa74:	d3f4      	bcc.n	800aa60 <L_shift+0xc>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}

0800aa78 <__match>:
 800aa78:	b530      	push	{r4, r5, lr}
 800aa7a:	6803      	ldr	r3, [r0, #0]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa82:	b914      	cbnz	r4, 800aa8a <__match+0x12>
 800aa84:	6003      	str	r3, [r0, #0]
 800aa86:	2001      	movs	r0, #1
 800aa88:	bd30      	pop	{r4, r5, pc}
 800aa8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa92:	2d19      	cmp	r5, #25
 800aa94:	bf98      	it	ls
 800aa96:	3220      	addls	r2, #32
 800aa98:	42a2      	cmp	r2, r4
 800aa9a:	d0f0      	beq.n	800aa7e <__match+0x6>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e7f3      	b.n	800aa88 <__match+0x10>

0800aaa0 <__hexnan>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	680b      	ldr	r3, [r1, #0]
 800aaa6:	6801      	ldr	r1, [r0, #0]
 800aaa8:	115e      	asrs	r6, r3, #5
 800aaaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaae:	f013 031f 	ands.w	r3, r3, #31
 800aab2:	b087      	sub	sp, #28
 800aab4:	bf18      	it	ne
 800aab6:	3604      	addne	r6, #4
 800aab8:	2500      	movs	r5, #0
 800aaba:	1f37      	subs	r7, r6, #4
 800aabc:	4682      	mov	sl, r0
 800aabe:	4690      	mov	r8, r2
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aac6:	46b9      	mov	r9, r7
 800aac8:	463c      	mov	r4, r7
 800aaca:	9502      	str	r5, [sp, #8]
 800aacc:	46ab      	mov	fp, r5
 800aace:	784a      	ldrb	r2, [r1, #1]
 800aad0:	1c4b      	adds	r3, r1, #1
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	b342      	cbz	r2, 800ab28 <__hexnan+0x88>
 800aad6:	4610      	mov	r0, r2
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	9204      	str	r2, [sp, #16]
 800aadc:	f7ff fd5e 	bl	800a59c <__hexdig_fun>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d14f      	bne.n	800ab84 <__hexnan+0xe4>
 800aae4:	9a04      	ldr	r2, [sp, #16]
 800aae6:	9905      	ldr	r1, [sp, #20]
 800aae8:	2a20      	cmp	r2, #32
 800aaea:	d818      	bhi.n	800ab1e <__hexnan+0x7e>
 800aaec:	9b02      	ldr	r3, [sp, #8]
 800aaee:	459b      	cmp	fp, r3
 800aaf0:	dd13      	ble.n	800ab1a <__hexnan+0x7a>
 800aaf2:	454c      	cmp	r4, r9
 800aaf4:	d206      	bcs.n	800ab04 <__hexnan+0x64>
 800aaf6:	2d07      	cmp	r5, #7
 800aaf8:	dc04      	bgt.n	800ab04 <__hexnan+0x64>
 800aafa:	462a      	mov	r2, r5
 800aafc:	4649      	mov	r1, r9
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7ff ffa8 	bl	800aa54 <L_shift>
 800ab04:	4544      	cmp	r4, r8
 800ab06:	d950      	bls.n	800abaa <__hexnan+0x10a>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab12:	f8cd b008 	str.w	fp, [sp, #8]
 800ab16:	464c      	mov	r4, r9
 800ab18:	461d      	mov	r5, r3
 800ab1a:	9903      	ldr	r1, [sp, #12]
 800ab1c:	e7d7      	b.n	800aace <__hexnan+0x2e>
 800ab1e:	2a29      	cmp	r2, #41	; 0x29
 800ab20:	d156      	bne.n	800abd0 <__hexnan+0x130>
 800ab22:	3102      	adds	r1, #2
 800ab24:	f8ca 1000 	str.w	r1, [sl]
 800ab28:	f1bb 0f00 	cmp.w	fp, #0
 800ab2c:	d050      	beq.n	800abd0 <__hexnan+0x130>
 800ab2e:	454c      	cmp	r4, r9
 800ab30:	d206      	bcs.n	800ab40 <__hexnan+0xa0>
 800ab32:	2d07      	cmp	r5, #7
 800ab34:	dc04      	bgt.n	800ab40 <__hexnan+0xa0>
 800ab36:	462a      	mov	r2, r5
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff ff8a 	bl	800aa54 <L_shift>
 800ab40:	4544      	cmp	r4, r8
 800ab42:	d934      	bls.n	800abae <__hexnan+0x10e>
 800ab44:	f1a8 0204 	sub.w	r2, r8, #4
 800ab48:	4623      	mov	r3, r4
 800ab4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab52:	429f      	cmp	r7, r3
 800ab54:	d2f9      	bcs.n	800ab4a <__hexnan+0xaa>
 800ab56:	1b3b      	subs	r3, r7, r4
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	3401      	adds	r4, #1
 800ab60:	3e03      	subs	r6, #3
 800ab62:	42b4      	cmp	r4, r6
 800ab64:	bf88      	it	hi
 800ab66:	2304      	movhi	r3, #4
 800ab68:	4443      	add	r3, r8
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f843 2b04 	str.w	r2, [r3], #4
 800ab70:	429f      	cmp	r7, r3
 800ab72:	d2fb      	bcs.n	800ab6c <__hexnan+0xcc>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	b91b      	cbnz	r3, 800ab80 <__hexnan+0xe0>
 800ab78:	4547      	cmp	r7, r8
 800ab7a:	d127      	bne.n	800abcc <__hexnan+0x12c>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	2005      	movs	r0, #5
 800ab82:	e026      	b.n	800abd2 <__hexnan+0x132>
 800ab84:	3501      	adds	r5, #1
 800ab86:	2d08      	cmp	r5, #8
 800ab88:	f10b 0b01 	add.w	fp, fp, #1
 800ab8c:	dd06      	ble.n	800ab9c <__hexnan+0xfc>
 800ab8e:	4544      	cmp	r4, r8
 800ab90:	d9c3      	bls.n	800ab1a <__hexnan+0x7a>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab98:	2501      	movs	r5, #1
 800ab9a:	3c04      	subs	r4, #4
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f000 000f 	and.w	r0, r0, #15
 800aba2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aba6:	6022      	str	r2, [r4, #0]
 800aba8:	e7b7      	b.n	800ab1a <__hexnan+0x7a>
 800abaa:	2508      	movs	r5, #8
 800abac:	e7b5      	b.n	800ab1a <__hexnan+0x7a>
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0df      	beq.n	800ab74 <__hexnan+0xd4>
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	f1c3 0320 	rsb	r3, r3, #32
 800abbc:	fa22 f303 	lsr.w	r3, r2, r3
 800abc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abc4:	401a      	ands	r2, r3
 800abc6:	f846 2c04 	str.w	r2, [r6, #-4]
 800abca:	e7d3      	b.n	800ab74 <__hexnan+0xd4>
 800abcc:	3f04      	subs	r7, #4
 800abce:	e7d1      	b.n	800ab74 <__hexnan+0xd4>
 800abd0:	2004      	movs	r0, #4
 800abd2:	b007      	add	sp, #28
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd8 <_localeconv_r>:
 800abd8:	4800      	ldr	r0, [pc, #0]	; (800abdc <_localeconv_r+0x4>)
 800abda:	4770      	bx	lr
 800abdc:	200002b8 	.word	0x200002b8

0800abe0 <malloc>:
 800abe0:	4b02      	ldr	r3, [pc, #8]	; (800abec <malloc+0xc>)
 800abe2:	4601      	mov	r1, r0
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f000 bd3d 	b.w	800b664 <_malloc_r>
 800abea:	bf00      	nop
 800abec:	20000160 	.word	0x20000160

0800abf0 <__ascii_mbtowc>:
 800abf0:	b082      	sub	sp, #8
 800abf2:	b901      	cbnz	r1, 800abf6 <__ascii_mbtowc+0x6>
 800abf4:	a901      	add	r1, sp, #4
 800abf6:	b142      	cbz	r2, 800ac0a <__ascii_mbtowc+0x1a>
 800abf8:	b14b      	cbz	r3, 800ac0e <__ascii_mbtowc+0x1e>
 800abfa:	7813      	ldrb	r3, [r2, #0]
 800abfc:	600b      	str	r3, [r1, #0]
 800abfe:	7812      	ldrb	r2, [r2, #0]
 800ac00:	1e10      	subs	r0, r2, #0
 800ac02:	bf18      	it	ne
 800ac04:	2001      	movne	r0, #1
 800ac06:	b002      	add	sp, #8
 800ac08:	4770      	bx	lr
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	e7fb      	b.n	800ac06 <__ascii_mbtowc+0x16>
 800ac0e:	f06f 0001 	mvn.w	r0, #1
 800ac12:	e7f8      	b.n	800ac06 <__ascii_mbtowc+0x16>

0800ac14 <memcpy>:
 800ac14:	440a      	add	r2, r1
 800ac16:	4291      	cmp	r1, r2
 800ac18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac1c:	d100      	bne.n	800ac20 <memcpy+0xc>
 800ac1e:	4770      	bx	lr
 800ac20:	b510      	push	{r4, lr}
 800ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2a:	4291      	cmp	r1, r2
 800ac2c:	d1f9      	bne.n	800ac22 <memcpy+0xe>
 800ac2e:	bd10      	pop	{r4, pc}

0800ac30 <_Balloc>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac34:	4604      	mov	r4, r0
 800ac36:	460d      	mov	r5, r1
 800ac38:	b976      	cbnz	r6, 800ac58 <_Balloc+0x28>
 800ac3a:	2010      	movs	r0, #16
 800ac3c:	f7ff ffd0 	bl	800abe0 <malloc>
 800ac40:	4602      	mov	r2, r0
 800ac42:	6260      	str	r0, [r4, #36]	; 0x24
 800ac44:	b920      	cbnz	r0, 800ac50 <_Balloc+0x20>
 800ac46:	4b18      	ldr	r3, [pc, #96]	; (800aca8 <_Balloc+0x78>)
 800ac48:	4818      	ldr	r0, [pc, #96]	; (800acac <_Balloc+0x7c>)
 800ac4a:	2166      	movs	r1, #102	; 0x66
 800ac4c:	f000 fef8 	bl	800ba40 <__assert_func>
 800ac50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac54:	6006      	str	r6, [r0, #0]
 800ac56:	60c6      	str	r6, [r0, #12]
 800ac58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac5a:	68f3      	ldr	r3, [r6, #12]
 800ac5c:	b183      	cbz	r3, 800ac80 <_Balloc+0x50>
 800ac5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac66:	b9b8      	cbnz	r0, 800ac98 <_Balloc+0x68>
 800ac68:	2101      	movs	r1, #1
 800ac6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac6e:	1d72      	adds	r2, r6, #5
 800ac70:	0092      	lsls	r2, r2, #2
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 fc97 	bl	800b5a6 <_calloc_r>
 800ac78:	b160      	cbz	r0, 800ac94 <_Balloc+0x64>
 800ac7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac7e:	e00e      	b.n	800ac9e <_Balloc+0x6e>
 800ac80:	2221      	movs	r2, #33	; 0x21
 800ac82:	2104      	movs	r1, #4
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fc8e 	bl	800b5a6 <_calloc_r>
 800ac8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac8c:	60f0      	str	r0, [r6, #12]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e4      	bne.n	800ac5e <_Balloc+0x2e>
 800ac94:	2000      	movs	r0, #0
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	6802      	ldr	r2, [r0, #0]
 800ac9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aca4:	e7f7      	b.n	800ac96 <_Balloc+0x66>
 800aca6:	bf00      	nop
 800aca8:	0800f346 	.word	0x0800f346
 800acac:	0800f44c 	.word	0x0800f44c

0800acb0 <_Bfree>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b976      	cbnz	r6, 800acd8 <_Bfree+0x28>
 800acba:	2010      	movs	r0, #16
 800acbc:	f7ff ff90 	bl	800abe0 <malloc>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6268      	str	r0, [r5, #36]	; 0x24
 800acc4:	b920      	cbnz	r0, 800acd0 <_Bfree+0x20>
 800acc6:	4b09      	ldr	r3, [pc, #36]	; (800acec <_Bfree+0x3c>)
 800acc8:	4809      	ldr	r0, [pc, #36]	; (800acf0 <_Bfree+0x40>)
 800acca:	218a      	movs	r1, #138	; 0x8a
 800accc:	f000 feb8 	bl	800ba40 <__assert_func>
 800acd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd4:	6006      	str	r6, [r0, #0]
 800acd6:	60c6      	str	r6, [r0, #12]
 800acd8:	b13c      	cbz	r4, 800acea <_Bfree+0x3a>
 800acda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acdc:	6862      	ldr	r2, [r4, #4]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace4:	6021      	str	r1, [r4, #0]
 800ace6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	0800f346 	.word	0x0800f346
 800acf0:	0800f44c 	.word	0x0800f44c

0800acf4 <__multadd>:
 800acf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf8:	690e      	ldr	r6, [r1, #16]
 800acfa:	4607      	mov	r7, r0
 800acfc:	4698      	mov	r8, r3
 800acfe:	460c      	mov	r4, r1
 800ad00:	f101 0014 	add.w	r0, r1, #20
 800ad04:	2300      	movs	r3, #0
 800ad06:	6805      	ldr	r5, [r0, #0]
 800ad08:	b2a9      	uxth	r1, r5
 800ad0a:	fb02 8101 	mla	r1, r2, r1, r8
 800ad0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ad12:	0c2d      	lsrs	r5, r5, #16
 800ad14:	fb02 c505 	mla	r5, r2, r5, ip
 800ad18:	b289      	uxth	r1, r1
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ad20:	429e      	cmp	r6, r3
 800ad22:	f840 1b04 	str.w	r1, [r0], #4
 800ad26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ad2a:	dcec      	bgt.n	800ad06 <__multadd+0x12>
 800ad2c:	f1b8 0f00 	cmp.w	r8, #0
 800ad30:	d022      	beq.n	800ad78 <__multadd+0x84>
 800ad32:	68a3      	ldr	r3, [r4, #8]
 800ad34:	42b3      	cmp	r3, r6
 800ad36:	dc19      	bgt.n	800ad6c <__multadd+0x78>
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	3101      	adds	r1, #1
 800ad3e:	f7ff ff77 	bl	800ac30 <_Balloc>
 800ad42:	4605      	mov	r5, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <__multadd+0x5e>
 800ad46:	4602      	mov	r2, r0
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <__multadd+0x8c>)
 800ad4a:	480e      	ldr	r0, [pc, #56]	; (800ad84 <__multadd+0x90>)
 800ad4c:	21b5      	movs	r1, #181	; 0xb5
 800ad4e:	f000 fe77 	bl	800ba40 <__assert_func>
 800ad52:	6922      	ldr	r2, [r4, #16]
 800ad54:	3202      	adds	r2, #2
 800ad56:	f104 010c 	add.w	r1, r4, #12
 800ad5a:	0092      	lsls	r2, r2, #2
 800ad5c:	300c      	adds	r0, #12
 800ad5e:	f7ff ff59 	bl	800ac14 <memcpy>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff ffa3 	bl	800acb0 <_Bfree>
 800ad6a:	462c      	mov	r4, r5
 800ad6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ad70:	3601      	adds	r6, #1
 800ad72:	f8c3 8014 	str.w	r8, [r3, #20]
 800ad76:	6126      	str	r6, [r4, #16]
 800ad78:	4620      	mov	r0, r4
 800ad7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7e:	bf00      	nop
 800ad80:	0800f3bc 	.word	0x0800f3bc
 800ad84:	0800f44c 	.word	0x0800f44c

0800ad88 <__s2b>:
 800ad88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	4615      	mov	r5, r2
 800ad90:	461f      	mov	r7, r3
 800ad92:	2209      	movs	r2, #9
 800ad94:	3308      	adds	r3, #8
 800ad96:	4606      	mov	r6, r0
 800ad98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	2201      	movs	r2, #1
 800ada0:	429a      	cmp	r2, r3
 800ada2:	db09      	blt.n	800adb8 <__s2b+0x30>
 800ada4:	4630      	mov	r0, r6
 800ada6:	f7ff ff43 	bl	800ac30 <_Balloc>
 800adaa:	b940      	cbnz	r0, 800adbe <__s2b+0x36>
 800adac:	4602      	mov	r2, r0
 800adae:	4b19      	ldr	r3, [pc, #100]	; (800ae14 <__s2b+0x8c>)
 800adb0:	4819      	ldr	r0, [pc, #100]	; (800ae18 <__s2b+0x90>)
 800adb2:	21ce      	movs	r1, #206	; 0xce
 800adb4:	f000 fe44 	bl	800ba40 <__assert_func>
 800adb8:	0052      	lsls	r2, r2, #1
 800adba:	3101      	adds	r1, #1
 800adbc:	e7f0      	b.n	800ada0 <__s2b+0x18>
 800adbe:	9b08      	ldr	r3, [sp, #32]
 800adc0:	6143      	str	r3, [r0, #20]
 800adc2:	2d09      	cmp	r5, #9
 800adc4:	f04f 0301 	mov.w	r3, #1
 800adc8:	6103      	str	r3, [r0, #16]
 800adca:	dd16      	ble.n	800adfa <__s2b+0x72>
 800adcc:	f104 0909 	add.w	r9, r4, #9
 800add0:	46c8      	mov	r8, r9
 800add2:	442c      	add	r4, r5
 800add4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800add8:	4601      	mov	r1, r0
 800adda:	3b30      	subs	r3, #48	; 0x30
 800addc:	220a      	movs	r2, #10
 800adde:	4630      	mov	r0, r6
 800ade0:	f7ff ff88 	bl	800acf4 <__multadd>
 800ade4:	45a0      	cmp	r8, r4
 800ade6:	d1f5      	bne.n	800add4 <__s2b+0x4c>
 800ade8:	f1a5 0408 	sub.w	r4, r5, #8
 800adec:	444c      	add	r4, r9
 800adee:	1b2d      	subs	r5, r5, r4
 800adf0:	1963      	adds	r3, r4, r5
 800adf2:	42bb      	cmp	r3, r7
 800adf4:	db04      	blt.n	800ae00 <__s2b+0x78>
 800adf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adfa:	340a      	adds	r4, #10
 800adfc:	2509      	movs	r5, #9
 800adfe:	e7f6      	b.n	800adee <__s2b+0x66>
 800ae00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae04:	4601      	mov	r1, r0
 800ae06:	3b30      	subs	r3, #48	; 0x30
 800ae08:	220a      	movs	r2, #10
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f7ff ff72 	bl	800acf4 <__multadd>
 800ae10:	e7ee      	b.n	800adf0 <__s2b+0x68>
 800ae12:	bf00      	nop
 800ae14:	0800f3bc 	.word	0x0800f3bc
 800ae18:	0800f44c 	.word	0x0800f44c

0800ae1c <__hi0bits>:
 800ae1c:	0c03      	lsrs	r3, r0, #16
 800ae1e:	041b      	lsls	r3, r3, #16
 800ae20:	b9d3      	cbnz	r3, 800ae58 <__hi0bits+0x3c>
 800ae22:	0400      	lsls	r0, r0, #16
 800ae24:	2310      	movs	r3, #16
 800ae26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae2a:	bf04      	itt	eq
 800ae2c:	0200      	lsleq	r0, r0, #8
 800ae2e:	3308      	addeq	r3, #8
 800ae30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae34:	bf04      	itt	eq
 800ae36:	0100      	lsleq	r0, r0, #4
 800ae38:	3304      	addeq	r3, #4
 800ae3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae3e:	bf04      	itt	eq
 800ae40:	0080      	lsleq	r0, r0, #2
 800ae42:	3302      	addeq	r3, #2
 800ae44:	2800      	cmp	r0, #0
 800ae46:	db05      	blt.n	800ae54 <__hi0bits+0x38>
 800ae48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae4c:	f103 0301 	add.w	r3, r3, #1
 800ae50:	bf08      	it	eq
 800ae52:	2320      	moveq	r3, #32
 800ae54:	4618      	mov	r0, r3
 800ae56:	4770      	bx	lr
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e7e4      	b.n	800ae26 <__hi0bits+0xa>

0800ae5c <__lo0bits>:
 800ae5c:	6803      	ldr	r3, [r0, #0]
 800ae5e:	f013 0207 	ands.w	r2, r3, #7
 800ae62:	4601      	mov	r1, r0
 800ae64:	d00b      	beq.n	800ae7e <__lo0bits+0x22>
 800ae66:	07da      	lsls	r2, r3, #31
 800ae68:	d424      	bmi.n	800aeb4 <__lo0bits+0x58>
 800ae6a:	0798      	lsls	r0, r3, #30
 800ae6c:	bf49      	itett	mi
 800ae6e:	085b      	lsrmi	r3, r3, #1
 800ae70:	089b      	lsrpl	r3, r3, #2
 800ae72:	2001      	movmi	r0, #1
 800ae74:	600b      	strmi	r3, [r1, #0]
 800ae76:	bf5c      	itt	pl
 800ae78:	600b      	strpl	r3, [r1, #0]
 800ae7a:	2002      	movpl	r0, #2
 800ae7c:	4770      	bx	lr
 800ae7e:	b298      	uxth	r0, r3
 800ae80:	b9b0      	cbnz	r0, 800aeb0 <__lo0bits+0x54>
 800ae82:	0c1b      	lsrs	r3, r3, #16
 800ae84:	2010      	movs	r0, #16
 800ae86:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae8a:	bf04      	itt	eq
 800ae8c:	0a1b      	lsreq	r3, r3, #8
 800ae8e:	3008      	addeq	r0, #8
 800ae90:	071a      	lsls	r2, r3, #28
 800ae92:	bf04      	itt	eq
 800ae94:	091b      	lsreq	r3, r3, #4
 800ae96:	3004      	addeq	r0, #4
 800ae98:	079a      	lsls	r2, r3, #30
 800ae9a:	bf04      	itt	eq
 800ae9c:	089b      	lsreq	r3, r3, #2
 800ae9e:	3002      	addeq	r0, #2
 800aea0:	07da      	lsls	r2, r3, #31
 800aea2:	d403      	bmi.n	800aeac <__lo0bits+0x50>
 800aea4:	085b      	lsrs	r3, r3, #1
 800aea6:	f100 0001 	add.w	r0, r0, #1
 800aeaa:	d005      	beq.n	800aeb8 <__lo0bits+0x5c>
 800aeac:	600b      	str	r3, [r1, #0]
 800aeae:	4770      	bx	lr
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	e7e8      	b.n	800ae86 <__lo0bits+0x2a>
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	4770      	bx	lr
 800aeb8:	2020      	movs	r0, #32
 800aeba:	4770      	bx	lr

0800aebc <__i2b>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	460c      	mov	r4, r1
 800aec0:	2101      	movs	r1, #1
 800aec2:	f7ff feb5 	bl	800ac30 <_Balloc>
 800aec6:	4602      	mov	r2, r0
 800aec8:	b928      	cbnz	r0, 800aed6 <__i2b+0x1a>
 800aeca:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <__i2b+0x24>)
 800aecc:	4805      	ldr	r0, [pc, #20]	; (800aee4 <__i2b+0x28>)
 800aece:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aed2:	f000 fdb5 	bl	800ba40 <__assert_func>
 800aed6:	2301      	movs	r3, #1
 800aed8:	6144      	str	r4, [r0, #20]
 800aeda:	6103      	str	r3, [r0, #16]
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	bf00      	nop
 800aee0:	0800f3bc 	.word	0x0800f3bc
 800aee4:	0800f44c 	.word	0x0800f44c

0800aee8 <__multiply>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	4614      	mov	r4, r2
 800aeee:	690a      	ldr	r2, [r1, #16]
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	bfb8      	it	lt
 800aef6:	460b      	movlt	r3, r1
 800aef8:	460d      	mov	r5, r1
 800aefa:	bfbc      	itt	lt
 800aefc:	4625      	movlt	r5, r4
 800aefe:	461c      	movlt	r4, r3
 800af00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af08:	68ab      	ldr	r3, [r5, #8]
 800af0a:	6869      	ldr	r1, [r5, #4]
 800af0c:	eb0a 0709 	add.w	r7, sl, r9
 800af10:	42bb      	cmp	r3, r7
 800af12:	b085      	sub	sp, #20
 800af14:	bfb8      	it	lt
 800af16:	3101      	addlt	r1, #1
 800af18:	f7ff fe8a 	bl	800ac30 <_Balloc>
 800af1c:	b930      	cbnz	r0, 800af2c <__multiply+0x44>
 800af1e:	4602      	mov	r2, r0
 800af20:	4b42      	ldr	r3, [pc, #264]	; (800b02c <__multiply+0x144>)
 800af22:	4843      	ldr	r0, [pc, #268]	; (800b030 <__multiply+0x148>)
 800af24:	f240 115d 	movw	r1, #349	; 0x15d
 800af28:	f000 fd8a 	bl	800ba40 <__assert_func>
 800af2c:	f100 0614 	add.w	r6, r0, #20
 800af30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800af34:	4633      	mov	r3, r6
 800af36:	2200      	movs	r2, #0
 800af38:	4543      	cmp	r3, r8
 800af3a:	d31e      	bcc.n	800af7a <__multiply+0x92>
 800af3c:	f105 0c14 	add.w	ip, r5, #20
 800af40:	f104 0314 	add.w	r3, r4, #20
 800af44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800af48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800af4c:	9202      	str	r2, [sp, #8]
 800af4e:	ebac 0205 	sub.w	r2, ip, r5
 800af52:	3a15      	subs	r2, #21
 800af54:	f022 0203 	bic.w	r2, r2, #3
 800af58:	3204      	adds	r2, #4
 800af5a:	f105 0115 	add.w	r1, r5, #21
 800af5e:	458c      	cmp	ip, r1
 800af60:	bf38      	it	cc
 800af62:	2204      	movcc	r2, #4
 800af64:	9201      	str	r2, [sp, #4]
 800af66:	9a02      	ldr	r2, [sp, #8]
 800af68:	9303      	str	r3, [sp, #12]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d808      	bhi.n	800af80 <__multiply+0x98>
 800af6e:	2f00      	cmp	r7, #0
 800af70:	dc55      	bgt.n	800b01e <__multiply+0x136>
 800af72:	6107      	str	r7, [r0, #16]
 800af74:	b005      	add	sp, #20
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	f843 2b04 	str.w	r2, [r3], #4
 800af7e:	e7db      	b.n	800af38 <__multiply+0x50>
 800af80:	f8b3 a000 	ldrh.w	sl, [r3]
 800af84:	f1ba 0f00 	cmp.w	sl, #0
 800af88:	d020      	beq.n	800afcc <__multiply+0xe4>
 800af8a:	f105 0e14 	add.w	lr, r5, #20
 800af8e:	46b1      	mov	r9, r6
 800af90:	2200      	movs	r2, #0
 800af92:	f85e 4b04 	ldr.w	r4, [lr], #4
 800af96:	f8d9 b000 	ldr.w	fp, [r9]
 800af9a:	b2a1      	uxth	r1, r4
 800af9c:	fa1f fb8b 	uxth.w	fp, fp
 800afa0:	fb0a b101 	mla	r1, sl, r1, fp
 800afa4:	4411      	add	r1, r2
 800afa6:	f8d9 2000 	ldr.w	r2, [r9]
 800afaa:	0c24      	lsrs	r4, r4, #16
 800afac:	0c12      	lsrs	r2, r2, #16
 800afae:	fb0a 2404 	mla	r4, sl, r4, r2
 800afb2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800afb6:	b289      	uxth	r1, r1
 800afb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800afbc:	45f4      	cmp	ip, lr
 800afbe:	f849 1b04 	str.w	r1, [r9], #4
 800afc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800afc6:	d8e4      	bhi.n	800af92 <__multiply+0xaa>
 800afc8:	9901      	ldr	r1, [sp, #4]
 800afca:	5072      	str	r2, [r6, r1]
 800afcc:	9a03      	ldr	r2, [sp, #12]
 800afce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afd2:	3304      	adds	r3, #4
 800afd4:	f1b9 0f00 	cmp.w	r9, #0
 800afd8:	d01f      	beq.n	800b01a <__multiply+0x132>
 800afda:	6834      	ldr	r4, [r6, #0]
 800afdc:	f105 0114 	add.w	r1, r5, #20
 800afe0:	46b6      	mov	lr, r6
 800afe2:	f04f 0a00 	mov.w	sl, #0
 800afe6:	880a      	ldrh	r2, [r1, #0]
 800afe8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800afec:	fb09 b202 	mla	r2, r9, r2, fp
 800aff0:	4492      	add	sl, r2
 800aff2:	b2a4      	uxth	r4, r4
 800aff4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aff8:	f84e 4b04 	str.w	r4, [lr], #4
 800affc:	f851 4b04 	ldr.w	r4, [r1], #4
 800b000:	f8be 2000 	ldrh.w	r2, [lr]
 800b004:	0c24      	lsrs	r4, r4, #16
 800b006:	fb09 2404 	mla	r4, r9, r4, r2
 800b00a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b00e:	458c      	cmp	ip, r1
 800b010:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b014:	d8e7      	bhi.n	800afe6 <__multiply+0xfe>
 800b016:	9a01      	ldr	r2, [sp, #4]
 800b018:	50b4      	str	r4, [r6, r2]
 800b01a:	3604      	adds	r6, #4
 800b01c:	e7a3      	b.n	800af66 <__multiply+0x7e>
 800b01e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1a5      	bne.n	800af72 <__multiply+0x8a>
 800b026:	3f01      	subs	r7, #1
 800b028:	e7a1      	b.n	800af6e <__multiply+0x86>
 800b02a:	bf00      	nop
 800b02c:	0800f3bc 	.word	0x0800f3bc
 800b030:	0800f44c 	.word	0x0800f44c

0800b034 <__pow5mult>:
 800b034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b038:	4615      	mov	r5, r2
 800b03a:	f012 0203 	ands.w	r2, r2, #3
 800b03e:	4606      	mov	r6, r0
 800b040:	460f      	mov	r7, r1
 800b042:	d007      	beq.n	800b054 <__pow5mult+0x20>
 800b044:	4c25      	ldr	r4, [pc, #148]	; (800b0dc <__pow5mult+0xa8>)
 800b046:	3a01      	subs	r2, #1
 800b048:	2300      	movs	r3, #0
 800b04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b04e:	f7ff fe51 	bl	800acf4 <__multadd>
 800b052:	4607      	mov	r7, r0
 800b054:	10ad      	asrs	r5, r5, #2
 800b056:	d03d      	beq.n	800b0d4 <__pow5mult+0xa0>
 800b058:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b05a:	b97c      	cbnz	r4, 800b07c <__pow5mult+0x48>
 800b05c:	2010      	movs	r0, #16
 800b05e:	f7ff fdbf 	bl	800abe0 <malloc>
 800b062:	4602      	mov	r2, r0
 800b064:	6270      	str	r0, [r6, #36]	; 0x24
 800b066:	b928      	cbnz	r0, 800b074 <__pow5mult+0x40>
 800b068:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <__pow5mult+0xac>)
 800b06a:	481e      	ldr	r0, [pc, #120]	; (800b0e4 <__pow5mult+0xb0>)
 800b06c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b070:	f000 fce6 	bl	800ba40 <__assert_func>
 800b074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b078:	6004      	str	r4, [r0, #0]
 800b07a:	60c4      	str	r4, [r0, #12]
 800b07c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b084:	b94c      	cbnz	r4, 800b09a <__pow5mult+0x66>
 800b086:	f240 2171 	movw	r1, #625	; 0x271
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7ff ff16 	bl	800aebc <__i2b>
 800b090:	2300      	movs	r3, #0
 800b092:	f8c8 0008 	str.w	r0, [r8, #8]
 800b096:	4604      	mov	r4, r0
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	f04f 0900 	mov.w	r9, #0
 800b09e:	07eb      	lsls	r3, r5, #31
 800b0a0:	d50a      	bpl.n	800b0b8 <__pow5mult+0x84>
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7ff ff1e 	bl	800aee8 <__multiply>
 800b0ac:	4639      	mov	r1, r7
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f7ff fdfd 	bl	800acb0 <_Bfree>
 800b0b6:	4647      	mov	r7, r8
 800b0b8:	106d      	asrs	r5, r5, #1
 800b0ba:	d00b      	beq.n	800b0d4 <__pow5mult+0xa0>
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	b938      	cbnz	r0, 800b0d0 <__pow5mult+0x9c>
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f7ff ff0f 	bl	800aee8 <__multiply>
 800b0ca:	6020      	str	r0, [r4, #0]
 800b0cc:	f8c0 9000 	str.w	r9, [r0]
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	e7e4      	b.n	800b09e <__pow5mult+0x6a>
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	bf00      	nop
 800b0dc:	0800f5a0 	.word	0x0800f5a0
 800b0e0:	0800f346 	.word	0x0800f346
 800b0e4:	0800f44c 	.word	0x0800f44c

0800b0e8 <__lshift>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	6849      	ldr	r1, [r1, #4]
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0f6:	68a3      	ldr	r3, [r4, #8]
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	4691      	mov	r9, r2
 800b0fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b100:	f108 0601 	add.w	r6, r8, #1
 800b104:	42b3      	cmp	r3, r6
 800b106:	db0b      	blt.n	800b120 <__lshift+0x38>
 800b108:	4638      	mov	r0, r7
 800b10a:	f7ff fd91 	bl	800ac30 <_Balloc>
 800b10e:	4605      	mov	r5, r0
 800b110:	b948      	cbnz	r0, 800b126 <__lshift+0x3e>
 800b112:	4602      	mov	r2, r0
 800b114:	4b28      	ldr	r3, [pc, #160]	; (800b1b8 <__lshift+0xd0>)
 800b116:	4829      	ldr	r0, [pc, #164]	; (800b1bc <__lshift+0xd4>)
 800b118:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b11c:	f000 fc90 	bl	800ba40 <__assert_func>
 800b120:	3101      	adds	r1, #1
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	e7ee      	b.n	800b104 <__lshift+0x1c>
 800b126:	2300      	movs	r3, #0
 800b128:	f100 0114 	add.w	r1, r0, #20
 800b12c:	f100 0210 	add.w	r2, r0, #16
 800b130:	4618      	mov	r0, r3
 800b132:	4553      	cmp	r3, sl
 800b134:	db33      	blt.n	800b19e <__lshift+0xb6>
 800b136:	6920      	ldr	r0, [r4, #16]
 800b138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b13c:	f104 0314 	add.w	r3, r4, #20
 800b140:	f019 091f 	ands.w	r9, r9, #31
 800b144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b148:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b14c:	d02b      	beq.n	800b1a6 <__lshift+0xbe>
 800b14e:	f1c9 0e20 	rsb	lr, r9, #32
 800b152:	468a      	mov	sl, r1
 800b154:	2200      	movs	r2, #0
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	fa00 f009 	lsl.w	r0, r0, r9
 800b15c:	4302      	orrs	r2, r0
 800b15e:	f84a 2b04 	str.w	r2, [sl], #4
 800b162:	f853 2b04 	ldr.w	r2, [r3], #4
 800b166:	459c      	cmp	ip, r3
 800b168:	fa22 f20e 	lsr.w	r2, r2, lr
 800b16c:	d8f3      	bhi.n	800b156 <__lshift+0x6e>
 800b16e:	ebac 0304 	sub.w	r3, ip, r4
 800b172:	3b15      	subs	r3, #21
 800b174:	f023 0303 	bic.w	r3, r3, #3
 800b178:	3304      	adds	r3, #4
 800b17a:	f104 0015 	add.w	r0, r4, #21
 800b17e:	4584      	cmp	ip, r0
 800b180:	bf38      	it	cc
 800b182:	2304      	movcc	r3, #4
 800b184:	50ca      	str	r2, [r1, r3]
 800b186:	b10a      	cbz	r2, 800b18c <__lshift+0xa4>
 800b188:	f108 0602 	add.w	r6, r8, #2
 800b18c:	3e01      	subs	r6, #1
 800b18e:	4638      	mov	r0, r7
 800b190:	612e      	str	r6, [r5, #16]
 800b192:	4621      	mov	r1, r4
 800b194:	f7ff fd8c 	bl	800acb0 <_Bfree>
 800b198:	4628      	mov	r0, r5
 800b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	e7c5      	b.n	800b132 <__lshift+0x4a>
 800b1a6:	3904      	subs	r1, #4
 800b1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1b0:	459c      	cmp	ip, r3
 800b1b2:	d8f9      	bhi.n	800b1a8 <__lshift+0xc0>
 800b1b4:	e7ea      	b.n	800b18c <__lshift+0xa4>
 800b1b6:	bf00      	nop
 800b1b8:	0800f3bc 	.word	0x0800f3bc
 800b1bc:	0800f44c 	.word	0x0800f44c

0800b1c0 <__mcmp>:
 800b1c0:	b530      	push	{r4, r5, lr}
 800b1c2:	6902      	ldr	r2, [r0, #16]
 800b1c4:	690c      	ldr	r4, [r1, #16]
 800b1c6:	1b12      	subs	r2, r2, r4
 800b1c8:	d10e      	bne.n	800b1e8 <__mcmp+0x28>
 800b1ca:	f100 0314 	add.w	r3, r0, #20
 800b1ce:	3114      	adds	r1, #20
 800b1d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1e0:	42a5      	cmp	r5, r4
 800b1e2:	d003      	beq.n	800b1ec <__mcmp+0x2c>
 800b1e4:	d305      	bcc.n	800b1f2 <__mcmp+0x32>
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	bd30      	pop	{r4, r5, pc}
 800b1ec:	4283      	cmp	r3, r0
 800b1ee:	d3f3      	bcc.n	800b1d8 <__mcmp+0x18>
 800b1f0:	e7fa      	b.n	800b1e8 <__mcmp+0x28>
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	e7f7      	b.n	800b1e8 <__mcmp+0x28>

0800b1f8 <__mdiff>:
 800b1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	4606      	mov	r6, r0
 800b200:	4611      	mov	r1, r2
 800b202:	4620      	mov	r0, r4
 800b204:	4617      	mov	r7, r2
 800b206:	f7ff ffdb 	bl	800b1c0 <__mcmp>
 800b20a:	1e05      	subs	r5, r0, #0
 800b20c:	d110      	bne.n	800b230 <__mdiff+0x38>
 800b20e:	4629      	mov	r1, r5
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff fd0d 	bl	800ac30 <_Balloc>
 800b216:	b930      	cbnz	r0, 800b226 <__mdiff+0x2e>
 800b218:	4b39      	ldr	r3, [pc, #228]	; (800b300 <__mdiff+0x108>)
 800b21a:	4602      	mov	r2, r0
 800b21c:	f240 2132 	movw	r1, #562	; 0x232
 800b220:	4838      	ldr	r0, [pc, #224]	; (800b304 <__mdiff+0x10c>)
 800b222:	f000 fc0d 	bl	800ba40 <__assert_func>
 800b226:	2301      	movs	r3, #1
 800b228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b230:	bfa4      	itt	ge
 800b232:	463b      	movge	r3, r7
 800b234:	4627      	movge	r7, r4
 800b236:	4630      	mov	r0, r6
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	bfa6      	itte	ge
 800b23c:	461c      	movge	r4, r3
 800b23e:	2500      	movge	r5, #0
 800b240:	2501      	movlt	r5, #1
 800b242:	f7ff fcf5 	bl	800ac30 <_Balloc>
 800b246:	b920      	cbnz	r0, 800b252 <__mdiff+0x5a>
 800b248:	4b2d      	ldr	r3, [pc, #180]	; (800b300 <__mdiff+0x108>)
 800b24a:	4602      	mov	r2, r0
 800b24c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b250:	e7e6      	b.n	800b220 <__mdiff+0x28>
 800b252:	693e      	ldr	r6, [r7, #16]
 800b254:	60c5      	str	r5, [r0, #12]
 800b256:	6925      	ldr	r5, [r4, #16]
 800b258:	f107 0114 	add.w	r1, r7, #20
 800b25c:	f104 0914 	add.w	r9, r4, #20
 800b260:	f100 0e14 	add.w	lr, r0, #20
 800b264:	f107 0210 	add.w	r2, r7, #16
 800b268:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b26c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b270:	46f2      	mov	sl, lr
 800b272:	2700      	movs	r7, #0
 800b274:	f859 3b04 	ldr.w	r3, [r9], #4
 800b278:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b27c:	fa1f f883 	uxth.w	r8, r3
 800b280:	fa17 f78b 	uxtah	r7, r7, fp
 800b284:	0c1b      	lsrs	r3, r3, #16
 800b286:	eba7 0808 	sub.w	r8, r7, r8
 800b28a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b28e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b292:	fa1f f888 	uxth.w	r8, r8
 800b296:	141f      	asrs	r7, r3, #16
 800b298:	454d      	cmp	r5, r9
 800b29a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b29e:	f84a 3b04 	str.w	r3, [sl], #4
 800b2a2:	d8e7      	bhi.n	800b274 <__mdiff+0x7c>
 800b2a4:	1b2b      	subs	r3, r5, r4
 800b2a6:	3b15      	subs	r3, #21
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	3415      	adds	r4, #21
 800b2b0:	42a5      	cmp	r5, r4
 800b2b2:	bf38      	it	cc
 800b2b4:	2304      	movcc	r3, #4
 800b2b6:	4419      	add	r1, r3
 800b2b8:	4473      	add	r3, lr
 800b2ba:	469e      	mov	lr, r3
 800b2bc:	460d      	mov	r5, r1
 800b2be:	4565      	cmp	r5, ip
 800b2c0:	d30e      	bcc.n	800b2e0 <__mdiff+0xe8>
 800b2c2:	f10c 0203 	add.w	r2, ip, #3
 800b2c6:	1a52      	subs	r2, r2, r1
 800b2c8:	f022 0203 	bic.w	r2, r2, #3
 800b2cc:	3903      	subs	r1, #3
 800b2ce:	458c      	cmp	ip, r1
 800b2d0:	bf38      	it	cc
 800b2d2:	2200      	movcc	r2, #0
 800b2d4:	441a      	add	r2, r3
 800b2d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b2da:	b17b      	cbz	r3, 800b2fc <__mdiff+0x104>
 800b2dc:	6106      	str	r6, [r0, #16]
 800b2de:	e7a5      	b.n	800b22c <__mdiff+0x34>
 800b2e0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b2e4:	fa17 f488 	uxtah	r4, r7, r8
 800b2e8:	1422      	asrs	r2, r4, #16
 800b2ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b2ee:	b2a4      	uxth	r4, r4
 800b2f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b2f4:	f84e 4b04 	str.w	r4, [lr], #4
 800b2f8:	1417      	asrs	r7, r2, #16
 800b2fa:	e7e0      	b.n	800b2be <__mdiff+0xc6>
 800b2fc:	3e01      	subs	r6, #1
 800b2fe:	e7ea      	b.n	800b2d6 <__mdiff+0xde>
 800b300:	0800f3bc 	.word	0x0800f3bc
 800b304:	0800f44c 	.word	0x0800f44c

0800b308 <__ulp>:
 800b308:	b082      	sub	sp, #8
 800b30a:	ed8d 0b00 	vstr	d0, [sp]
 800b30e:	9b01      	ldr	r3, [sp, #4]
 800b310:	4912      	ldr	r1, [pc, #72]	; (800b35c <__ulp+0x54>)
 800b312:	4019      	ands	r1, r3
 800b314:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b318:	2900      	cmp	r1, #0
 800b31a:	dd05      	ble.n	800b328 <__ulp+0x20>
 800b31c:	2200      	movs	r2, #0
 800b31e:	460b      	mov	r3, r1
 800b320:	ec43 2b10 	vmov	d0, r2, r3
 800b324:	b002      	add	sp, #8
 800b326:	4770      	bx	lr
 800b328:	4249      	negs	r1, r1
 800b32a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b32e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b332:	f04f 0200 	mov.w	r2, #0
 800b336:	f04f 0300 	mov.w	r3, #0
 800b33a:	da04      	bge.n	800b346 <__ulp+0x3e>
 800b33c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b340:	fa41 f300 	asr.w	r3, r1, r0
 800b344:	e7ec      	b.n	800b320 <__ulp+0x18>
 800b346:	f1a0 0114 	sub.w	r1, r0, #20
 800b34a:	291e      	cmp	r1, #30
 800b34c:	bfda      	itte	le
 800b34e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b352:	fa20 f101 	lsrle.w	r1, r0, r1
 800b356:	2101      	movgt	r1, #1
 800b358:	460a      	mov	r2, r1
 800b35a:	e7e1      	b.n	800b320 <__ulp+0x18>
 800b35c:	7ff00000 	.word	0x7ff00000

0800b360 <__b2d>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	6905      	ldr	r5, [r0, #16]
 800b364:	f100 0714 	add.w	r7, r0, #20
 800b368:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b36c:	1f2e      	subs	r6, r5, #4
 800b36e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b372:	4620      	mov	r0, r4
 800b374:	f7ff fd52 	bl	800ae1c <__hi0bits>
 800b378:	f1c0 0320 	rsb	r3, r0, #32
 800b37c:	280a      	cmp	r0, #10
 800b37e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b3fc <__b2d+0x9c>
 800b382:	600b      	str	r3, [r1, #0]
 800b384:	dc14      	bgt.n	800b3b0 <__b2d+0x50>
 800b386:	f1c0 0e0b 	rsb	lr, r0, #11
 800b38a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b38e:	42b7      	cmp	r7, r6
 800b390:	ea41 030c 	orr.w	r3, r1, ip
 800b394:	bf34      	ite	cc
 800b396:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b39a:	2100      	movcs	r1, #0
 800b39c:	3015      	adds	r0, #21
 800b39e:	fa04 f000 	lsl.w	r0, r4, r0
 800b3a2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3a6:	ea40 0201 	orr.w	r2, r0, r1
 800b3aa:	ec43 2b10 	vmov	d0, r2, r3
 800b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b0:	42b7      	cmp	r7, r6
 800b3b2:	bf3a      	itte	cc
 800b3b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b3bc:	2100      	movcs	r1, #0
 800b3be:	380b      	subs	r0, #11
 800b3c0:	d017      	beq.n	800b3f2 <__b2d+0x92>
 800b3c2:	f1c0 0c20 	rsb	ip, r0, #32
 800b3c6:	fa04 f500 	lsl.w	r5, r4, r0
 800b3ca:	42be      	cmp	r6, r7
 800b3cc:	fa21 f40c 	lsr.w	r4, r1, ip
 800b3d0:	ea45 0504 	orr.w	r5, r5, r4
 800b3d4:	bf8c      	ite	hi
 800b3d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b3da:	2400      	movls	r4, #0
 800b3dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b3e0:	fa01 f000 	lsl.w	r0, r1, r0
 800b3e4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b3e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b3ec:	ea40 0204 	orr.w	r2, r0, r4
 800b3f0:	e7db      	b.n	800b3aa <__b2d+0x4a>
 800b3f2:	ea44 030c 	orr.w	r3, r4, ip
 800b3f6:	460a      	mov	r2, r1
 800b3f8:	e7d7      	b.n	800b3aa <__b2d+0x4a>
 800b3fa:	bf00      	nop
 800b3fc:	3ff00000 	.word	0x3ff00000

0800b400 <__d2b>:
 800b400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b404:	4689      	mov	r9, r1
 800b406:	2101      	movs	r1, #1
 800b408:	ec57 6b10 	vmov	r6, r7, d0
 800b40c:	4690      	mov	r8, r2
 800b40e:	f7ff fc0f 	bl	800ac30 <_Balloc>
 800b412:	4604      	mov	r4, r0
 800b414:	b930      	cbnz	r0, 800b424 <__d2b+0x24>
 800b416:	4602      	mov	r2, r0
 800b418:	4b25      	ldr	r3, [pc, #148]	; (800b4b0 <__d2b+0xb0>)
 800b41a:	4826      	ldr	r0, [pc, #152]	; (800b4b4 <__d2b+0xb4>)
 800b41c:	f240 310a 	movw	r1, #778	; 0x30a
 800b420:	f000 fb0e 	bl	800ba40 <__assert_func>
 800b424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b42c:	bb35      	cbnz	r5, 800b47c <__d2b+0x7c>
 800b42e:	2e00      	cmp	r6, #0
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	d028      	beq.n	800b486 <__d2b+0x86>
 800b434:	4668      	mov	r0, sp
 800b436:	9600      	str	r6, [sp, #0]
 800b438:	f7ff fd10 	bl	800ae5c <__lo0bits>
 800b43c:	9900      	ldr	r1, [sp, #0]
 800b43e:	b300      	cbz	r0, 800b482 <__d2b+0x82>
 800b440:	9a01      	ldr	r2, [sp, #4]
 800b442:	f1c0 0320 	rsb	r3, r0, #32
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	430b      	orrs	r3, r1
 800b44c:	40c2      	lsrs	r2, r0
 800b44e:	6163      	str	r3, [r4, #20]
 800b450:	9201      	str	r2, [sp, #4]
 800b452:	9b01      	ldr	r3, [sp, #4]
 800b454:	61a3      	str	r3, [r4, #24]
 800b456:	2b00      	cmp	r3, #0
 800b458:	bf14      	ite	ne
 800b45a:	2202      	movne	r2, #2
 800b45c:	2201      	moveq	r2, #1
 800b45e:	6122      	str	r2, [r4, #16]
 800b460:	b1d5      	cbz	r5, 800b498 <__d2b+0x98>
 800b462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b466:	4405      	add	r5, r0
 800b468:	f8c9 5000 	str.w	r5, [r9]
 800b46c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b470:	f8c8 0000 	str.w	r0, [r8]
 800b474:	4620      	mov	r0, r4
 800b476:	b003      	add	sp, #12
 800b478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b480:	e7d5      	b.n	800b42e <__d2b+0x2e>
 800b482:	6161      	str	r1, [r4, #20]
 800b484:	e7e5      	b.n	800b452 <__d2b+0x52>
 800b486:	a801      	add	r0, sp, #4
 800b488:	f7ff fce8 	bl	800ae5c <__lo0bits>
 800b48c:	9b01      	ldr	r3, [sp, #4]
 800b48e:	6163      	str	r3, [r4, #20]
 800b490:	2201      	movs	r2, #1
 800b492:	6122      	str	r2, [r4, #16]
 800b494:	3020      	adds	r0, #32
 800b496:	e7e3      	b.n	800b460 <__d2b+0x60>
 800b498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b49c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4a0:	f8c9 0000 	str.w	r0, [r9]
 800b4a4:	6918      	ldr	r0, [r3, #16]
 800b4a6:	f7ff fcb9 	bl	800ae1c <__hi0bits>
 800b4aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4ae:	e7df      	b.n	800b470 <__d2b+0x70>
 800b4b0:	0800f3bc 	.word	0x0800f3bc
 800b4b4:	0800f44c 	.word	0x0800f44c

0800b4b8 <__ratio>:
 800b4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	4688      	mov	r8, r1
 800b4be:	4669      	mov	r1, sp
 800b4c0:	4681      	mov	r9, r0
 800b4c2:	f7ff ff4d 	bl	800b360 <__b2d>
 800b4c6:	a901      	add	r1, sp, #4
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	ec55 4b10 	vmov	r4, r5, d0
 800b4ce:	f7ff ff47 	bl	800b360 <__b2d>
 800b4d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4da:	eba3 0c02 	sub.w	ip, r3, r2
 800b4de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4e8:	ec51 0b10 	vmov	r0, r1, d0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bfd6      	itet	le
 800b4f0:	460a      	movle	r2, r1
 800b4f2:	462a      	movgt	r2, r5
 800b4f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4f8:	468b      	mov	fp, r1
 800b4fa:	462f      	mov	r7, r5
 800b4fc:	bfd4      	ite	le
 800b4fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b502:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b506:	4620      	mov	r0, r4
 800b508:	ee10 2a10 	vmov	r2, s0
 800b50c:	465b      	mov	r3, fp
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f5 f99c 	bl	800084c <__aeabi_ddiv>
 800b514:	ec41 0b10 	vmov	d0, r0, r1
 800b518:	b003      	add	sp, #12
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b51e <__copybits>:
 800b51e:	3901      	subs	r1, #1
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	1149      	asrs	r1, r1, #5
 800b524:	6914      	ldr	r4, [r2, #16]
 800b526:	3101      	adds	r1, #1
 800b528:	f102 0314 	add.w	r3, r2, #20
 800b52c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b530:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b534:	1f05      	subs	r5, r0, #4
 800b536:	42a3      	cmp	r3, r4
 800b538:	d30c      	bcc.n	800b554 <__copybits+0x36>
 800b53a:	1aa3      	subs	r3, r4, r2
 800b53c:	3b11      	subs	r3, #17
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	3211      	adds	r2, #17
 800b544:	42a2      	cmp	r2, r4
 800b546:	bf88      	it	hi
 800b548:	2300      	movhi	r3, #0
 800b54a:	4418      	add	r0, r3
 800b54c:	2300      	movs	r3, #0
 800b54e:	4288      	cmp	r0, r1
 800b550:	d305      	bcc.n	800b55e <__copybits+0x40>
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	f853 6b04 	ldr.w	r6, [r3], #4
 800b558:	f845 6f04 	str.w	r6, [r5, #4]!
 800b55c:	e7eb      	b.n	800b536 <__copybits+0x18>
 800b55e:	f840 3b04 	str.w	r3, [r0], #4
 800b562:	e7f4      	b.n	800b54e <__copybits+0x30>

0800b564 <__any_on>:
 800b564:	f100 0214 	add.w	r2, r0, #20
 800b568:	6900      	ldr	r0, [r0, #16]
 800b56a:	114b      	asrs	r3, r1, #5
 800b56c:	4298      	cmp	r0, r3
 800b56e:	b510      	push	{r4, lr}
 800b570:	db11      	blt.n	800b596 <__any_on+0x32>
 800b572:	dd0a      	ble.n	800b58a <__any_on+0x26>
 800b574:	f011 011f 	ands.w	r1, r1, #31
 800b578:	d007      	beq.n	800b58a <__any_on+0x26>
 800b57a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b57e:	fa24 f001 	lsr.w	r0, r4, r1
 800b582:	fa00 f101 	lsl.w	r1, r0, r1
 800b586:	428c      	cmp	r4, r1
 800b588:	d10b      	bne.n	800b5a2 <__any_on+0x3e>
 800b58a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b58e:	4293      	cmp	r3, r2
 800b590:	d803      	bhi.n	800b59a <__any_on+0x36>
 800b592:	2000      	movs	r0, #0
 800b594:	bd10      	pop	{r4, pc}
 800b596:	4603      	mov	r3, r0
 800b598:	e7f7      	b.n	800b58a <__any_on+0x26>
 800b59a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b59e:	2900      	cmp	r1, #0
 800b5a0:	d0f5      	beq.n	800b58e <__any_on+0x2a>
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	e7f6      	b.n	800b594 <__any_on+0x30>

0800b5a6 <_calloc_r>:
 800b5a6:	b513      	push	{r0, r1, r4, lr}
 800b5a8:	434a      	muls	r2, r1
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	9201      	str	r2, [sp, #4]
 800b5ae:	f000 f859 	bl	800b664 <_malloc_r>
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	b118      	cbz	r0, 800b5be <_calloc_r+0x18>
 800b5b6:	9a01      	ldr	r2, [sp, #4]
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f7fc fbc9 	bl	8007d50 <memset>
 800b5be:	4620      	mov	r0, r4
 800b5c0:	b002      	add	sp, #8
 800b5c2:	bd10      	pop	{r4, pc}

0800b5c4 <_free_r>:
 800b5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5c6:	2900      	cmp	r1, #0
 800b5c8:	d048      	beq.n	800b65c <_free_r+0x98>
 800b5ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ce:	9001      	str	r0, [sp, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b5d6:	bfb8      	it	lt
 800b5d8:	18e4      	addlt	r4, r4, r3
 800b5da:	f000 fa7b 	bl	800bad4 <__malloc_lock>
 800b5de:	4a20      	ldr	r2, [pc, #128]	; (800b660 <_free_r+0x9c>)
 800b5e0:	9801      	ldr	r0, [sp, #4]
 800b5e2:	6813      	ldr	r3, [r2, #0]
 800b5e4:	4615      	mov	r5, r2
 800b5e6:	b933      	cbnz	r3, 800b5f6 <_free_r+0x32>
 800b5e8:	6063      	str	r3, [r4, #4]
 800b5ea:	6014      	str	r4, [r2, #0]
 800b5ec:	b003      	add	sp, #12
 800b5ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5f2:	f000 ba75 	b.w	800bae0 <__malloc_unlock>
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	d90b      	bls.n	800b612 <_free_r+0x4e>
 800b5fa:	6821      	ldr	r1, [r4, #0]
 800b5fc:	1862      	adds	r2, r4, r1
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bf04      	itt	eq
 800b602:	681a      	ldreq	r2, [r3, #0]
 800b604:	685b      	ldreq	r3, [r3, #4]
 800b606:	6063      	str	r3, [r4, #4]
 800b608:	bf04      	itt	eq
 800b60a:	1852      	addeq	r2, r2, r1
 800b60c:	6022      	streq	r2, [r4, #0]
 800b60e:	602c      	str	r4, [r5, #0]
 800b610:	e7ec      	b.n	800b5ec <_free_r+0x28>
 800b612:	461a      	mov	r2, r3
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	b10b      	cbz	r3, 800b61c <_free_r+0x58>
 800b618:	42a3      	cmp	r3, r4
 800b61a:	d9fa      	bls.n	800b612 <_free_r+0x4e>
 800b61c:	6811      	ldr	r1, [r2, #0]
 800b61e:	1855      	adds	r5, r2, r1
 800b620:	42a5      	cmp	r5, r4
 800b622:	d10b      	bne.n	800b63c <_free_r+0x78>
 800b624:	6824      	ldr	r4, [r4, #0]
 800b626:	4421      	add	r1, r4
 800b628:	1854      	adds	r4, r2, r1
 800b62a:	42a3      	cmp	r3, r4
 800b62c:	6011      	str	r1, [r2, #0]
 800b62e:	d1dd      	bne.n	800b5ec <_free_r+0x28>
 800b630:	681c      	ldr	r4, [r3, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	6053      	str	r3, [r2, #4]
 800b636:	4421      	add	r1, r4
 800b638:	6011      	str	r1, [r2, #0]
 800b63a:	e7d7      	b.n	800b5ec <_free_r+0x28>
 800b63c:	d902      	bls.n	800b644 <_free_r+0x80>
 800b63e:	230c      	movs	r3, #12
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	e7d3      	b.n	800b5ec <_free_r+0x28>
 800b644:	6825      	ldr	r5, [r4, #0]
 800b646:	1961      	adds	r1, r4, r5
 800b648:	428b      	cmp	r3, r1
 800b64a:	bf04      	itt	eq
 800b64c:	6819      	ldreq	r1, [r3, #0]
 800b64e:	685b      	ldreq	r3, [r3, #4]
 800b650:	6063      	str	r3, [r4, #4]
 800b652:	bf04      	itt	eq
 800b654:	1949      	addeq	r1, r1, r5
 800b656:	6021      	streq	r1, [r4, #0]
 800b658:	6054      	str	r4, [r2, #4]
 800b65a:	e7c7      	b.n	800b5ec <_free_r+0x28>
 800b65c:	b003      	add	sp, #12
 800b65e:	bd30      	pop	{r4, r5, pc}
 800b660:	20000364 	.word	0x20000364

0800b664 <_malloc_r>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	1ccd      	adds	r5, r1, #3
 800b668:	f025 0503 	bic.w	r5, r5, #3
 800b66c:	3508      	adds	r5, #8
 800b66e:	2d0c      	cmp	r5, #12
 800b670:	bf38      	it	cc
 800b672:	250c      	movcc	r5, #12
 800b674:	2d00      	cmp	r5, #0
 800b676:	4606      	mov	r6, r0
 800b678:	db01      	blt.n	800b67e <_malloc_r+0x1a>
 800b67a:	42a9      	cmp	r1, r5
 800b67c:	d903      	bls.n	800b686 <_malloc_r+0x22>
 800b67e:	230c      	movs	r3, #12
 800b680:	6033      	str	r3, [r6, #0]
 800b682:	2000      	movs	r0, #0
 800b684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b686:	f000 fa25 	bl	800bad4 <__malloc_lock>
 800b68a:	4921      	ldr	r1, [pc, #132]	; (800b710 <_malloc_r+0xac>)
 800b68c:	680a      	ldr	r2, [r1, #0]
 800b68e:	4614      	mov	r4, r2
 800b690:	b99c      	cbnz	r4, 800b6ba <_malloc_r+0x56>
 800b692:	4f20      	ldr	r7, [pc, #128]	; (800b714 <_malloc_r+0xb0>)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	b923      	cbnz	r3, 800b6a2 <_malloc_r+0x3e>
 800b698:	4621      	mov	r1, r4
 800b69a:	4630      	mov	r0, r6
 800b69c:	f000 f9a0 	bl	800b9e0 <_sbrk_r>
 800b6a0:	6038      	str	r0, [r7, #0]
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f000 f99b 	bl	800b9e0 <_sbrk_r>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d123      	bne.n	800b6f6 <_malloc_r+0x92>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	6033      	str	r3, [r6, #0]
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f000 fa14 	bl	800bae0 <__malloc_unlock>
 800b6b8:	e7e3      	b.n	800b682 <_malloc_r+0x1e>
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	1b5b      	subs	r3, r3, r5
 800b6be:	d417      	bmi.n	800b6f0 <_malloc_r+0x8c>
 800b6c0:	2b0b      	cmp	r3, #11
 800b6c2:	d903      	bls.n	800b6cc <_malloc_r+0x68>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	441c      	add	r4, r3
 800b6c8:	6025      	str	r5, [r4, #0]
 800b6ca:	e004      	b.n	800b6d6 <_malloc_r+0x72>
 800b6cc:	6863      	ldr	r3, [r4, #4]
 800b6ce:	42a2      	cmp	r2, r4
 800b6d0:	bf0c      	ite	eq
 800b6d2:	600b      	streq	r3, [r1, #0]
 800b6d4:	6053      	strne	r3, [r2, #4]
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f000 fa02 	bl	800bae0 <__malloc_unlock>
 800b6dc:	f104 000b 	add.w	r0, r4, #11
 800b6e0:	1d23      	adds	r3, r4, #4
 800b6e2:	f020 0007 	bic.w	r0, r0, #7
 800b6e6:	1ac2      	subs	r2, r0, r3
 800b6e8:	d0cc      	beq.n	800b684 <_malloc_r+0x20>
 800b6ea:	1a1b      	subs	r3, r3, r0
 800b6ec:	50a3      	str	r3, [r4, r2]
 800b6ee:	e7c9      	b.n	800b684 <_malloc_r+0x20>
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	6864      	ldr	r4, [r4, #4]
 800b6f4:	e7cc      	b.n	800b690 <_malloc_r+0x2c>
 800b6f6:	1cc4      	adds	r4, r0, #3
 800b6f8:	f024 0403 	bic.w	r4, r4, #3
 800b6fc:	42a0      	cmp	r0, r4
 800b6fe:	d0e3      	beq.n	800b6c8 <_malloc_r+0x64>
 800b700:	1a21      	subs	r1, r4, r0
 800b702:	4630      	mov	r0, r6
 800b704:	f000 f96c 	bl	800b9e0 <_sbrk_r>
 800b708:	3001      	adds	r0, #1
 800b70a:	d1dd      	bne.n	800b6c8 <_malloc_r+0x64>
 800b70c:	e7cf      	b.n	800b6ae <_malloc_r+0x4a>
 800b70e:	bf00      	nop
 800b710:	20000364 	.word	0x20000364
 800b714:	20000368 	.word	0x20000368

0800b718 <__ssputs_r>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	688e      	ldr	r6, [r1, #8]
 800b71e:	429e      	cmp	r6, r3
 800b720:	4682      	mov	sl, r0
 800b722:	460c      	mov	r4, r1
 800b724:	4690      	mov	r8, r2
 800b726:	461f      	mov	r7, r3
 800b728:	d838      	bhi.n	800b79c <__ssputs_r+0x84>
 800b72a:	898a      	ldrh	r2, [r1, #12]
 800b72c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b730:	d032      	beq.n	800b798 <__ssputs_r+0x80>
 800b732:	6825      	ldr	r5, [r4, #0]
 800b734:	6909      	ldr	r1, [r1, #16]
 800b736:	eba5 0901 	sub.w	r9, r5, r1
 800b73a:	6965      	ldr	r5, [r4, #20]
 800b73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b744:	3301      	adds	r3, #1
 800b746:	444b      	add	r3, r9
 800b748:	106d      	asrs	r5, r5, #1
 800b74a:	429d      	cmp	r5, r3
 800b74c:	bf38      	it	cc
 800b74e:	461d      	movcc	r5, r3
 800b750:	0553      	lsls	r3, r2, #21
 800b752:	d531      	bpl.n	800b7b8 <__ssputs_r+0xa0>
 800b754:	4629      	mov	r1, r5
 800b756:	f7ff ff85 	bl	800b664 <_malloc_r>
 800b75a:	4606      	mov	r6, r0
 800b75c:	b950      	cbnz	r0, 800b774 <__ssputs_r+0x5c>
 800b75e:	230c      	movs	r3, #12
 800b760:	f8ca 3000 	str.w	r3, [sl]
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	6921      	ldr	r1, [r4, #16]
 800b776:	464a      	mov	r2, r9
 800b778:	f7ff fa4c 	bl	800ac14 <memcpy>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	6126      	str	r6, [r4, #16]
 800b78a:	6165      	str	r5, [r4, #20]
 800b78c:	444e      	add	r6, r9
 800b78e:	eba5 0509 	sub.w	r5, r5, r9
 800b792:	6026      	str	r6, [r4, #0]
 800b794:	60a5      	str	r5, [r4, #8]
 800b796:	463e      	mov	r6, r7
 800b798:	42be      	cmp	r6, r7
 800b79a:	d900      	bls.n	800b79e <__ssputs_r+0x86>
 800b79c:	463e      	mov	r6, r7
 800b79e:	4632      	mov	r2, r6
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	f000 f97c 	bl	800baa0 <memmove>
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	1b9b      	subs	r3, r3, r6
 800b7ae:	4432      	add	r2, r6
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e7db      	b.n	800b770 <__ssputs_r+0x58>
 800b7b8:	462a      	mov	r2, r5
 800b7ba:	f000 f997 	bl	800baec <_realloc_r>
 800b7be:	4606      	mov	r6, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1e1      	bne.n	800b788 <__ssputs_r+0x70>
 800b7c4:	6921      	ldr	r1, [r4, #16]
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f7ff fefc 	bl	800b5c4 <_free_r>
 800b7cc:	e7c7      	b.n	800b75e <__ssputs_r+0x46>
	...

0800b7d0 <_svfiprintf_r>:
 800b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	4698      	mov	r8, r3
 800b7d6:	898b      	ldrh	r3, [r1, #12]
 800b7d8:	061b      	lsls	r3, r3, #24
 800b7da:	b09d      	sub	sp, #116	; 0x74
 800b7dc:	4607      	mov	r7, r0
 800b7de:	460d      	mov	r5, r1
 800b7e0:	4614      	mov	r4, r2
 800b7e2:	d50e      	bpl.n	800b802 <_svfiprintf_r+0x32>
 800b7e4:	690b      	ldr	r3, [r1, #16]
 800b7e6:	b963      	cbnz	r3, 800b802 <_svfiprintf_r+0x32>
 800b7e8:	2140      	movs	r1, #64	; 0x40
 800b7ea:	f7ff ff3b 	bl	800b664 <_malloc_r>
 800b7ee:	6028      	str	r0, [r5, #0]
 800b7f0:	6128      	str	r0, [r5, #16]
 800b7f2:	b920      	cbnz	r0, 800b7fe <_svfiprintf_r+0x2e>
 800b7f4:	230c      	movs	r3, #12
 800b7f6:	603b      	str	r3, [r7, #0]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e0d1      	b.n	800b9a2 <_svfiprintf_r+0x1d2>
 800b7fe:	2340      	movs	r3, #64	; 0x40
 800b800:	616b      	str	r3, [r5, #20]
 800b802:	2300      	movs	r3, #0
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	2320      	movs	r3, #32
 800b808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b810:	2330      	movs	r3, #48	; 0x30
 800b812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9bc <_svfiprintf_r+0x1ec>
 800b816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81a:	f04f 0901 	mov.w	r9, #1
 800b81e:	4623      	mov	r3, r4
 800b820:	469a      	mov	sl, r3
 800b822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b826:	b10a      	cbz	r2, 800b82c <_svfiprintf_r+0x5c>
 800b828:	2a25      	cmp	r2, #37	; 0x25
 800b82a:	d1f9      	bne.n	800b820 <_svfiprintf_r+0x50>
 800b82c:	ebba 0b04 	subs.w	fp, sl, r4
 800b830:	d00b      	beq.n	800b84a <_svfiprintf_r+0x7a>
 800b832:	465b      	mov	r3, fp
 800b834:	4622      	mov	r2, r4
 800b836:	4629      	mov	r1, r5
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ff6d 	bl	800b718 <__ssputs_r>
 800b83e:	3001      	adds	r0, #1
 800b840:	f000 80aa 	beq.w	800b998 <_svfiprintf_r+0x1c8>
 800b844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b846:	445a      	add	r2, fp
 800b848:	9209      	str	r2, [sp, #36]	; 0x24
 800b84a:	f89a 3000 	ldrb.w	r3, [sl]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80a2 	beq.w	800b998 <_svfiprintf_r+0x1c8>
 800b854:	2300      	movs	r3, #0
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b85e:	f10a 0a01 	add.w	sl, sl, #1
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	9307      	str	r3, [sp, #28]
 800b866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b86a:	931a      	str	r3, [sp, #104]	; 0x68
 800b86c:	4654      	mov	r4, sl
 800b86e:	2205      	movs	r2, #5
 800b870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b874:	4851      	ldr	r0, [pc, #324]	; (800b9bc <_svfiprintf_r+0x1ec>)
 800b876:	f7f4 fcb3 	bl	80001e0 <memchr>
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	b9d8      	cbnz	r0, 800b8b6 <_svfiprintf_r+0xe6>
 800b87e:	06d0      	lsls	r0, r2, #27
 800b880:	bf44      	itt	mi
 800b882:	2320      	movmi	r3, #32
 800b884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b888:	0711      	lsls	r1, r2, #28
 800b88a:	bf44      	itt	mi
 800b88c:	232b      	movmi	r3, #43	; 0x2b
 800b88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b892:	f89a 3000 	ldrb.w	r3, [sl]
 800b896:	2b2a      	cmp	r3, #42	; 0x2a
 800b898:	d015      	beq.n	800b8c6 <_svfiprintf_r+0xf6>
 800b89a:	9a07      	ldr	r2, [sp, #28]
 800b89c:	4654      	mov	r4, sl
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f04f 0c0a 	mov.w	ip, #10
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8aa:	3b30      	subs	r3, #48	; 0x30
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	d94e      	bls.n	800b94e <_svfiprintf_r+0x17e>
 800b8b0:	b1b0      	cbz	r0, 800b8e0 <_svfiprintf_r+0x110>
 800b8b2:	9207      	str	r2, [sp, #28]
 800b8b4:	e014      	b.n	800b8e0 <_svfiprintf_r+0x110>
 800b8b6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	9304      	str	r3, [sp, #16]
 800b8c2:	46a2      	mov	sl, r4
 800b8c4:	e7d2      	b.n	800b86c <_svfiprintf_r+0x9c>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	1d19      	adds	r1, r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	9103      	str	r1, [sp, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfbb      	ittet	lt
 800b8d2:	425b      	neglt	r3, r3
 800b8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8d8:	9307      	strge	r3, [sp, #28]
 800b8da:	9307      	strlt	r3, [sp, #28]
 800b8dc:	bfb8      	it	lt
 800b8de:	9204      	strlt	r2, [sp, #16]
 800b8e0:	7823      	ldrb	r3, [r4, #0]
 800b8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e4:	d10c      	bne.n	800b900 <_svfiprintf_r+0x130>
 800b8e6:	7863      	ldrb	r3, [r4, #1]
 800b8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ea:	d135      	bne.n	800b958 <_svfiprintf_r+0x188>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	9203      	str	r2, [sp, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bfb8      	it	lt
 800b8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8fc:	3402      	adds	r4, #2
 800b8fe:	9305      	str	r3, [sp, #20]
 800b900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9cc <_svfiprintf_r+0x1fc>
 800b904:	7821      	ldrb	r1, [r4, #0]
 800b906:	2203      	movs	r2, #3
 800b908:	4650      	mov	r0, sl
 800b90a:	f7f4 fc69 	bl	80001e0 <memchr>
 800b90e:	b140      	cbz	r0, 800b922 <_svfiprintf_r+0x152>
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	eba0 000a 	sub.w	r0, r0, sl
 800b916:	fa03 f000 	lsl.w	r0, r3, r0
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	4303      	orrs	r3, r0
 800b91e:	3401      	adds	r4, #1
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b926:	4826      	ldr	r0, [pc, #152]	; (800b9c0 <_svfiprintf_r+0x1f0>)
 800b928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b92c:	2206      	movs	r2, #6
 800b92e:	f7f4 fc57 	bl	80001e0 <memchr>
 800b932:	2800      	cmp	r0, #0
 800b934:	d038      	beq.n	800b9a8 <_svfiprintf_r+0x1d8>
 800b936:	4b23      	ldr	r3, [pc, #140]	; (800b9c4 <_svfiprintf_r+0x1f4>)
 800b938:	bb1b      	cbnz	r3, 800b982 <_svfiprintf_r+0x1b2>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	3307      	adds	r3, #7
 800b93e:	f023 0307 	bic.w	r3, r3, #7
 800b942:	3308      	adds	r3, #8
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b948:	4433      	add	r3, r6
 800b94a:	9309      	str	r3, [sp, #36]	; 0x24
 800b94c:	e767      	b.n	800b81e <_svfiprintf_r+0x4e>
 800b94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b952:	460c      	mov	r4, r1
 800b954:	2001      	movs	r0, #1
 800b956:	e7a5      	b.n	800b8a4 <_svfiprintf_r+0xd4>
 800b958:	2300      	movs	r3, #0
 800b95a:	3401      	adds	r4, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	4619      	mov	r1, r3
 800b960:	f04f 0c0a 	mov.w	ip, #10
 800b964:	4620      	mov	r0, r4
 800b966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96a:	3a30      	subs	r2, #48	; 0x30
 800b96c:	2a09      	cmp	r2, #9
 800b96e:	d903      	bls.n	800b978 <_svfiprintf_r+0x1a8>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0c5      	beq.n	800b900 <_svfiprintf_r+0x130>
 800b974:	9105      	str	r1, [sp, #20]
 800b976:	e7c3      	b.n	800b900 <_svfiprintf_r+0x130>
 800b978:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97c:	4604      	mov	r4, r0
 800b97e:	2301      	movs	r3, #1
 800b980:	e7f0      	b.n	800b964 <_svfiprintf_r+0x194>
 800b982:	ab03      	add	r3, sp, #12
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	462a      	mov	r2, r5
 800b988:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <_svfiprintf_r+0x1f8>)
 800b98a:	a904      	add	r1, sp, #16
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7fc fa87 	bl	8007ea0 <_printf_float>
 800b992:	1c42      	adds	r2, r0, #1
 800b994:	4606      	mov	r6, r0
 800b996:	d1d6      	bne.n	800b946 <_svfiprintf_r+0x176>
 800b998:	89ab      	ldrh	r3, [r5, #12]
 800b99a:	065b      	lsls	r3, r3, #25
 800b99c:	f53f af2c 	bmi.w	800b7f8 <_svfiprintf_r+0x28>
 800b9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9a2:	b01d      	add	sp, #116	; 0x74
 800b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a8:	ab03      	add	r3, sp, #12
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <_svfiprintf_r+0x1f8>)
 800b9b0:	a904      	add	r1, sp, #16
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	f7fc fd18 	bl	80083e8 <_printf_i>
 800b9b8:	e7eb      	b.n	800b992 <_svfiprintf_r+0x1c2>
 800b9ba:	bf00      	nop
 800b9bc:	0800f5ac 	.word	0x0800f5ac
 800b9c0:	0800f5b6 	.word	0x0800f5b6
 800b9c4:	08007ea1 	.word	0x08007ea1
 800b9c8:	0800b719 	.word	0x0800b719
 800b9cc:	0800f5b2 	.word	0x0800f5b2

0800b9d0 <nan>:
 800b9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9d8 <nan+0x8>
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	00000000 	.word	0x00000000
 800b9dc:	7ff80000 	.word	0x7ff80000

0800b9e0 <_sbrk_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	; (800b9fc <_sbrk_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7f7 f91a 	bl	8002c24 <_sbrk>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_sbrk_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_sbrk_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20000934 	.word	0x20000934

0800ba00 <strncmp>:
 800ba00:	b510      	push	{r4, lr}
 800ba02:	b16a      	cbz	r2, 800ba20 <strncmp+0x20>
 800ba04:	3901      	subs	r1, #1
 800ba06:	1884      	adds	r4, r0, r2
 800ba08:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ba0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d103      	bne.n	800ba1c <strncmp+0x1c>
 800ba14:	42a0      	cmp	r0, r4
 800ba16:	d001      	beq.n	800ba1c <strncmp+0x1c>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1f5      	bne.n	800ba08 <strncmp+0x8>
 800ba1c:	1a98      	subs	r0, r3, r2
 800ba1e:	bd10      	pop	{r4, pc}
 800ba20:	4610      	mov	r0, r2
 800ba22:	e7fc      	b.n	800ba1e <strncmp+0x1e>

0800ba24 <__ascii_wctomb>:
 800ba24:	b149      	cbz	r1, 800ba3a <__ascii_wctomb+0x16>
 800ba26:	2aff      	cmp	r2, #255	; 0xff
 800ba28:	bf85      	ittet	hi
 800ba2a:	238a      	movhi	r3, #138	; 0x8a
 800ba2c:	6003      	strhi	r3, [r0, #0]
 800ba2e:	700a      	strbls	r2, [r1, #0]
 800ba30:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba34:	bf98      	it	ls
 800ba36:	2001      	movls	r0, #1
 800ba38:	4770      	bx	lr
 800ba3a:	4608      	mov	r0, r1
 800ba3c:	4770      	bx	lr
	...

0800ba40 <__assert_func>:
 800ba40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba42:	4614      	mov	r4, r2
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <__assert_func+0x2c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	68d8      	ldr	r0, [r3, #12]
 800ba4e:	b14c      	cbz	r4, 800ba64 <__assert_func+0x24>
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <__assert_func+0x30>)
 800ba52:	9100      	str	r1, [sp, #0]
 800ba54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba58:	4906      	ldr	r1, [pc, #24]	; (800ba74 <__assert_func+0x34>)
 800ba5a:	462b      	mov	r3, r5
 800ba5c:	f000 f80e 	bl	800ba7c <fiprintf>
 800ba60:	f000 fa84 	bl	800bf6c <abort>
 800ba64:	4b04      	ldr	r3, [pc, #16]	; (800ba78 <__assert_func+0x38>)
 800ba66:	461c      	mov	r4, r3
 800ba68:	e7f3      	b.n	800ba52 <__assert_func+0x12>
 800ba6a:	bf00      	nop
 800ba6c:	20000160 	.word	0x20000160
 800ba70:	0800f5bd 	.word	0x0800f5bd
 800ba74:	0800f5ca 	.word	0x0800f5ca
 800ba78:	0800f5f8 	.word	0x0800f5f8

0800ba7c <fiprintf>:
 800ba7c:	b40e      	push	{r1, r2, r3}
 800ba7e:	b503      	push	{r0, r1, lr}
 800ba80:	4601      	mov	r1, r0
 800ba82:	ab03      	add	r3, sp, #12
 800ba84:	4805      	ldr	r0, [pc, #20]	; (800ba9c <fiprintf+0x20>)
 800ba86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	f000 f87d 	bl	800bb8c <_vfiprintf_r>
 800ba92:	b002      	add	sp, #8
 800ba94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba98:	b003      	add	sp, #12
 800ba9a:	4770      	bx	lr
 800ba9c:	20000160 	.word	0x20000160

0800baa0 <memmove>:
 800baa0:	4288      	cmp	r0, r1
 800baa2:	b510      	push	{r4, lr}
 800baa4:	eb01 0402 	add.w	r4, r1, r2
 800baa8:	d902      	bls.n	800bab0 <memmove+0x10>
 800baaa:	4284      	cmp	r4, r0
 800baac:	4623      	mov	r3, r4
 800baae:	d807      	bhi.n	800bac0 <memmove+0x20>
 800bab0:	1e43      	subs	r3, r0, #1
 800bab2:	42a1      	cmp	r1, r4
 800bab4:	d008      	beq.n	800bac8 <memmove+0x28>
 800bab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800babe:	e7f8      	b.n	800bab2 <memmove+0x12>
 800bac0:	4402      	add	r2, r0
 800bac2:	4601      	mov	r1, r0
 800bac4:	428a      	cmp	r2, r1
 800bac6:	d100      	bne.n	800baca <memmove+0x2a>
 800bac8:	bd10      	pop	{r4, pc}
 800baca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bad2:	e7f7      	b.n	800bac4 <memmove+0x24>

0800bad4 <__malloc_lock>:
 800bad4:	4801      	ldr	r0, [pc, #4]	; (800badc <__malloc_lock+0x8>)
 800bad6:	f000 bc09 	b.w	800c2ec <__retarget_lock_acquire_recursive>
 800bada:	bf00      	nop
 800badc:	2000093c 	.word	0x2000093c

0800bae0 <__malloc_unlock>:
 800bae0:	4801      	ldr	r0, [pc, #4]	; (800bae8 <__malloc_unlock+0x8>)
 800bae2:	f000 bc04 	b.w	800c2ee <__retarget_lock_release_recursive>
 800bae6:	bf00      	nop
 800bae8:	2000093c 	.word	0x2000093c

0800baec <_realloc_r>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	4607      	mov	r7, r0
 800baf0:	4614      	mov	r4, r2
 800baf2:	460e      	mov	r6, r1
 800baf4:	b921      	cbnz	r1, 800bb00 <_realloc_r+0x14>
 800baf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bafa:	4611      	mov	r1, r2
 800bafc:	f7ff bdb2 	b.w	800b664 <_malloc_r>
 800bb00:	b922      	cbnz	r2, 800bb0c <_realloc_r+0x20>
 800bb02:	f7ff fd5f 	bl	800b5c4 <_free_r>
 800bb06:	4625      	mov	r5, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb0c:	f000 fc54 	bl	800c3b8 <_malloc_usable_size_r>
 800bb10:	42a0      	cmp	r0, r4
 800bb12:	d20f      	bcs.n	800bb34 <_realloc_r+0x48>
 800bb14:	4621      	mov	r1, r4
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7ff fda4 	bl	800b664 <_malloc_r>
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d0f2      	beq.n	800bb08 <_realloc_r+0x1c>
 800bb22:	4631      	mov	r1, r6
 800bb24:	4622      	mov	r2, r4
 800bb26:	f7ff f875 	bl	800ac14 <memcpy>
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f7ff fd49 	bl	800b5c4 <_free_r>
 800bb32:	e7e9      	b.n	800bb08 <_realloc_r+0x1c>
 800bb34:	4635      	mov	r5, r6
 800bb36:	e7e7      	b.n	800bb08 <_realloc_r+0x1c>

0800bb38 <__sfputc_r>:
 800bb38:	6893      	ldr	r3, [r2, #8]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	b410      	push	{r4}
 800bb40:	6093      	str	r3, [r2, #8]
 800bb42:	da08      	bge.n	800bb56 <__sfputc_r+0x1e>
 800bb44:	6994      	ldr	r4, [r2, #24]
 800bb46:	42a3      	cmp	r3, r4
 800bb48:	db01      	blt.n	800bb4e <__sfputc_r+0x16>
 800bb4a:	290a      	cmp	r1, #10
 800bb4c:	d103      	bne.n	800bb56 <__sfputc_r+0x1e>
 800bb4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb52:	f000 b94b 	b.w	800bdec <__swbuf_r>
 800bb56:	6813      	ldr	r3, [r2, #0]
 800bb58:	1c58      	adds	r0, r3, #1
 800bb5a:	6010      	str	r0, [r2, #0]
 800bb5c:	7019      	strb	r1, [r3, #0]
 800bb5e:	4608      	mov	r0, r1
 800bb60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <__sfputs_r>:
 800bb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb68:	4606      	mov	r6, r0
 800bb6a:	460f      	mov	r7, r1
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	18d5      	adds	r5, r2, r3
 800bb70:	42ac      	cmp	r4, r5
 800bb72:	d101      	bne.n	800bb78 <__sfputs_r+0x12>
 800bb74:	2000      	movs	r0, #0
 800bb76:	e007      	b.n	800bb88 <__sfputs_r+0x22>
 800bb78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7c:	463a      	mov	r2, r7
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ffda 	bl	800bb38 <__sfputc_r>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d1f3      	bne.n	800bb70 <__sfputs_r+0xa>
 800bb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb8c <_vfiprintf_r>:
 800bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	460d      	mov	r5, r1
 800bb92:	b09d      	sub	sp, #116	; 0x74
 800bb94:	4614      	mov	r4, r2
 800bb96:	4698      	mov	r8, r3
 800bb98:	4606      	mov	r6, r0
 800bb9a:	b118      	cbz	r0, 800bba4 <_vfiprintf_r+0x18>
 800bb9c:	6983      	ldr	r3, [r0, #24]
 800bb9e:	b90b      	cbnz	r3, 800bba4 <_vfiprintf_r+0x18>
 800bba0:	f000 fb06 	bl	800c1b0 <__sinit>
 800bba4:	4b89      	ldr	r3, [pc, #548]	; (800bdcc <_vfiprintf_r+0x240>)
 800bba6:	429d      	cmp	r5, r3
 800bba8:	d11b      	bne.n	800bbe2 <_vfiprintf_r+0x56>
 800bbaa:	6875      	ldr	r5, [r6, #4]
 800bbac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbae:	07d9      	lsls	r1, r3, #31
 800bbb0:	d405      	bmi.n	800bbbe <_vfiprintf_r+0x32>
 800bbb2:	89ab      	ldrh	r3, [r5, #12]
 800bbb4:	059a      	lsls	r2, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_vfiprintf_r+0x32>
 800bbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbba:	f000 fb97 	bl	800c2ec <__retarget_lock_acquire_recursive>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	071b      	lsls	r3, r3, #28
 800bbc2:	d501      	bpl.n	800bbc8 <_vfiprintf_r+0x3c>
 800bbc4:	692b      	ldr	r3, [r5, #16]
 800bbc6:	b9eb      	cbnz	r3, 800bc04 <_vfiprintf_r+0x78>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f000 f960 	bl	800be90 <__swsetup_r>
 800bbd0:	b1c0      	cbz	r0, 800bc04 <_vfiprintf_r+0x78>
 800bbd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd4:	07dc      	lsls	r4, r3, #31
 800bbd6:	d50e      	bpl.n	800bbf6 <_vfiprintf_r+0x6a>
 800bbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbdc:	b01d      	add	sp, #116	; 0x74
 800bbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe2:	4b7b      	ldr	r3, [pc, #492]	; (800bdd0 <_vfiprintf_r+0x244>)
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	d101      	bne.n	800bbec <_vfiprintf_r+0x60>
 800bbe8:	68b5      	ldr	r5, [r6, #8]
 800bbea:	e7df      	b.n	800bbac <_vfiprintf_r+0x20>
 800bbec:	4b79      	ldr	r3, [pc, #484]	; (800bdd4 <_vfiprintf_r+0x248>)
 800bbee:	429d      	cmp	r5, r3
 800bbf0:	bf08      	it	eq
 800bbf2:	68f5      	ldreq	r5, [r6, #12]
 800bbf4:	e7da      	b.n	800bbac <_vfiprintf_r+0x20>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	0598      	lsls	r0, r3, #22
 800bbfa:	d4ed      	bmi.n	800bbd8 <_vfiprintf_r+0x4c>
 800bbfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbfe:	f000 fb76 	bl	800c2ee <__retarget_lock_release_recursive>
 800bc02:	e7e9      	b.n	800bbd8 <_vfiprintf_r+0x4c>
 800bc04:	2300      	movs	r3, #0
 800bc06:	9309      	str	r3, [sp, #36]	; 0x24
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc12:	2330      	movs	r3, #48	; 0x30
 800bc14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdd8 <_vfiprintf_r+0x24c>
 800bc18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc1c:	f04f 0901 	mov.w	r9, #1
 800bc20:	4623      	mov	r3, r4
 800bc22:	469a      	mov	sl, r3
 800bc24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc28:	b10a      	cbz	r2, 800bc2e <_vfiprintf_r+0xa2>
 800bc2a:	2a25      	cmp	r2, #37	; 0x25
 800bc2c:	d1f9      	bne.n	800bc22 <_vfiprintf_r+0x96>
 800bc2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc32:	d00b      	beq.n	800bc4c <_vfiprintf_r+0xc0>
 800bc34:	465b      	mov	r3, fp
 800bc36:	4622      	mov	r2, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff ff93 	bl	800bb66 <__sfputs_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	f000 80aa 	beq.w	800bd9a <_vfiprintf_r+0x20e>
 800bc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc48:	445a      	add	r2, fp
 800bc4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 80a2 	beq.w	800bd9a <_vfiprintf_r+0x20e>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc60:	f10a 0a01 	add.w	sl, sl, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc6c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2205      	movs	r2, #5
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	4858      	ldr	r0, [pc, #352]	; (800bdd8 <_vfiprintf_r+0x24c>)
 800bc78:	f7f4 fab2 	bl	80001e0 <memchr>
 800bc7c:	9a04      	ldr	r2, [sp, #16]
 800bc7e:	b9d8      	cbnz	r0, 800bcb8 <_vfiprintf_r+0x12c>
 800bc80:	06d1      	lsls	r1, r2, #27
 800bc82:	bf44      	itt	mi
 800bc84:	2320      	movmi	r3, #32
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8a:	0713      	lsls	r3, r2, #28
 800bc8c:	bf44      	itt	mi
 800bc8e:	232b      	movmi	r3, #43	; 0x2b
 800bc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc94:	f89a 3000 	ldrb.w	r3, [sl]
 800bc98:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9a:	d015      	beq.n	800bcc8 <_vfiprintf_r+0x13c>
 800bc9c:	9a07      	ldr	r2, [sp, #28]
 800bc9e:	4654      	mov	r4, sl
 800bca0:	2000      	movs	r0, #0
 800bca2:	f04f 0c0a 	mov.w	ip, #10
 800bca6:	4621      	mov	r1, r4
 800bca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcac:	3b30      	subs	r3, #48	; 0x30
 800bcae:	2b09      	cmp	r3, #9
 800bcb0:	d94e      	bls.n	800bd50 <_vfiprintf_r+0x1c4>
 800bcb2:	b1b0      	cbz	r0, 800bce2 <_vfiprintf_r+0x156>
 800bcb4:	9207      	str	r2, [sp, #28]
 800bcb6:	e014      	b.n	800bce2 <_vfiprintf_r+0x156>
 800bcb8:	eba0 0308 	sub.w	r3, r0, r8
 800bcbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	46a2      	mov	sl, r4
 800bcc6:	e7d2      	b.n	800bc6e <_vfiprintf_r+0xe2>
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	9103      	str	r1, [sp, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfbb      	ittet	lt
 800bcd4:	425b      	neglt	r3, r3
 800bcd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcda:	9307      	strge	r3, [sp, #28]
 800bcdc:	9307      	strlt	r3, [sp, #28]
 800bcde:	bfb8      	it	lt
 800bce0:	9204      	strlt	r2, [sp, #16]
 800bce2:	7823      	ldrb	r3, [r4, #0]
 800bce4:	2b2e      	cmp	r3, #46	; 0x2e
 800bce6:	d10c      	bne.n	800bd02 <_vfiprintf_r+0x176>
 800bce8:	7863      	ldrb	r3, [r4, #1]
 800bcea:	2b2a      	cmp	r3, #42	; 0x2a
 800bcec:	d135      	bne.n	800bd5a <_vfiprintf_r+0x1ce>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	1d1a      	adds	r2, r3, #4
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	9203      	str	r2, [sp, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bfb8      	it	lt
 800bcfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcfe:	3402      	adds	r4, #2
 800bd00:	9305      	str	r3, [sp, #20]
 800bd02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bde8 <_vfiprintf_r+0x25c>
 800bd06:	7821      	ldrb	r1, [r4, #0]
 800bd08:	2203      	movs	r2, #3
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	f7f4 fa68 	bl	80001e0 <memchr>
 800bd10:	b140      	cbz	r0, 800bd24 <_vfiprintf_r+0x198>
 800bd12:	2340      	movs	r3, #64	; 0x40
 800bd14:	eba0 000a 	sub.w	r0, r0, sl
 800bd18:	fa03 f000 	lsl.w	r0, r3, r0
 800bd1c:	9b04      	ldr	r3, [sp, #16]
 800bd1e:	4303      	orrs	r3, r0
 800bd20:	3401      	adds	r4, #1
 800bd22:	9304      	str	r3, [sp, #16]
 800bd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd28:	482c      	ldr	r0, [pc, #176]	; (800bddc <_vfiprintf_r+0x250>)
 800bd2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd2e:	2206      	movs	r2, #6
 800bd30:	f7f4 fa56 	bl	80001e0 <memchr>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d03f      	beq.n	800bdb8 <_vfiprintf_r+0x22c>
 800bd38:	4b29      	ldr	r3, [pc, #164]	; (800bde0 <_vfiprintf_r+0x254>)
 800bd3a:	bb1b      	cbnz	r3, 800bd84 <_vfiprintf_r+0x1f8>
 800bd3c:	9b03      	ldr	r3, [sp, #12]
 800bd3e:	3307      	adds	r3, #7
 800bd40:	f023 0307 	bic.w	r3, r3, #7
 800bd44:	3308      	adds	r3, #8
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	443b      	add	r3, r7
 800bd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4e:	e767      	b.n	800bc20 <_vfiprintf_r+0x94>
 800bd50:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd54:	460c      	mov	r4, r1
 800bd56:	2001      	movs	r0, #1
 800bd58:	e7a5      	b.n	800bca6 <_vfiprintf_r+0x11a>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	3401      	adds	r4, #1
 800bd5e:	9305      	str	r3, [sp, #20]
 800bd60:	4619      	mov	r1, r3
 800bd62:	f04f 0c0a 	mov.w	ip, #10
 800bd66:	4620      	mov	r0, r4
 800bd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd6c:	3a30      	subs	r2, #48	; 0x30
 800bd6e:	2a09      	cmp	r2, #9
 800bd70:	d903      	bls.n	800bd7a <_vfiprintf_r+0x1ee>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0c5      	beq.n	800bd02 <_vfiprintf_r+0x176>
 800bd76:	9105      	str	r1, [sp, #20]
 800bd78:	e7c3      	b.n	800bd02 <_vfiprintf_r+0x176>
 800bd7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7e:	4604      	mov	r4, r0
 800bd80:	2301      	movs	r3, #1
 800bd82:	e7f0      	b.n	800bd66 <_vfiprintf_r+0x1da>
 800bd84:	ab03      	add	r3, sp, #12
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	462a      	mov	r2, r5
 800bd8a:	4b16      	ldr	r3, [pc, #88]	; (800bde4 <_vfiprintf_r+0x258>)
 800bd8c:	a904      	add	r1, sp, #16
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7fc f886 	bl	8007ea0 <_printf_float>
 800bd94:	4607      	mov	r7, r0
 800bd96:	1c78      	adds	r0, r7, #1
 800bd98:	d1d6      	bne.n	800bd48 <_vfiprintf_r+0x1bc>
 800bd9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9c:	07d9      	lsls	r1, r3, #31
 800bd9e:	d405      	bmi.n	800bdac <_vfiprintf_r+0x220>
 800bda0:	89ab      	ldrh	r3, [r5, #12]
 800bda2:	059a      	lsls	r2, r3, #22
 800bda4:	d402      	bmi.n	800bdac <_vfiprintf_r+0x220>
 800bda6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda8:	f000 faa1 	bl	800c2ee <__retarget_lock_release_recursive>
 800bdac:	89ab      	ldrh	r3, [r5, #12]
 800bdae:	065b      	lsls	r3, r3, #25
 800bdb0:	f53f af12 	bmi.w	800bbd8 <_vfiprintf_r+0x4c>
 800bdb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb6:	e711      	b.n	800bbdc <_vfiprintf_r+0x50>
 800bdb8:	ab03      	add	r3, sp, #12
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <_vfiprintf_r+0x258>)
 800bdc0:	a904      	add	r1, sp, #16
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f7fc fb10 	bl	80083e8 <_printf_i>
 800bdc8:	e7e4      	b.n	800bd94 <_vfiprintf_r+0x208>
 800bdca:	bf00      	nop
 800bdcc:	0800f61c 	.word	0x0800f61c
 800bdd0:	0800f63c 	.word	0x0800f63c
 800bdd4:	0800f5fc 	.word	0x0800f5fc
 800bdd8:	0800f5ac 	.word	0x0800f5ac
 800bddc:	0800f5b6 	.word	0x0800f5b6
 800bde0:	08007ea1 	.word	0x08007ea1
 800bde4:	0800bb67 	.word	0x0800bb67
 800bde8:	0800f5b2 	.word	0x0800f5b2

0800bdec <__swbuf_r>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	460e      	mov	r6, r1
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	b118      	cbz	r0, 800bdfe <__swbuf_r+0x12>
 800bdf6:	6983      	ldr	r3, [r0, #24]
 800bdf8:	b90b      	cbnz	r3, 800bdfe <__swbuf_r+0x12>
 800bdfa:	f000 f9d9 	bl	800c1b0 <__sinit>
 800bdfe:	4b21      	ldr	r3, [pc, #132]	; (800be84 <__swbuf_r+0x98>)
 800be00:	429c      	cmp	r4, r3
 800be02:	d12b      	bne.n	800be5c <__swbuf_r+0x70>
 800be04:	686c      	ldr	r4, [r5, #4]
 800be06:	69a3      	ldr	r3, [r4, #24]
 800be08:	60a3      	str	r3, [r4, #8]
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	071a      	lsls	r2, r3, #28
 800be0e:	d52f      	bpl.n	800be70 <__swbuf_r+0x84>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	b36b      	cbz	r3, 800be70 <__swbuf_r+0x84>
 800be14:	6923      	ldr	r3, [r4, #16]
 800be16:	6820      	ldr	r0, [r4, #0]
 800be18:	1ac0      	subs	r0, r0, r3
 800be1a:	6963      	ldr	r3, [r4, #20]
 800be1c:	b2f6      	uxtb	r6, r6
 800be1e:	4283      	cmp	r3, r0
 800be20:	4637      	mov	r7, r6
 800be22:	dc04      	bgt.n	800be2e <__swbuf_r+0x42>
 800be24:	4621      	mov	r1, r4
 800be26:	4628      	mov	r0, r5
 800be28:	f000 f92e 	bl	800c088 <_fflush_r>
 800be2c:	bb30      	cbnz	r0, 800be7c <__swbuf_r+0x90>
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	3b01      	subs	r3, #1
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	6022      	str	r2, [r4, #0]
 800be3a:	701e      	strb	r6, [r3, #0]
 800be3c:	6963      	ldr	r3, [r4, #20]
 800be3e:	3001      	adds	r0, #1
 800be40:	4283      	cmp	r3, r0
 800be42:	d004      	beq.n	800be4e <__swbuf_r+0x62>
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	07db      	lsls	r3, r3, #31
 800be48:	d506      	bpl.n	800be58 <__swbuf_r+0x6c>
 800be4a:	2e0a      	cmp	r6, #10
 800be4c:	d104      	bne.n	800be58 <__swbuf_r+0x6c>
 800be4e:	4621      	mov	r1, r4
 800be50:	4628      	mov	r0, r5
 800be52:	f000 f919 	bl	800c088 <_fflush_r>
 800be56:	b988      	cbnz	r0, 800be7c <__swbuf_r+0x90>
 800be58:	4638      	mov	r0, r7
 800be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5c:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <__swbuf_r+0x9c>)
 800be5e:	429c      	cmp	r4, r3
 800be60:	d101      	bne.n	800be66 <__swbuf_r+0x7a>
 800be62:	68ac      	ldr	r4, [r5, #8]
 800be64:	e7cf      	b.n	800be06 <__swbuf_r+0x1a>
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <__swbuf_r+0xa0>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	bf08      	it	eq
 800be6c:	68ec      	ldreq	r4, [r5, #12]
 800be6e:	e7ca      	b.n	800be06 <__swbuf_r+0x1a>
 800be70:	4621      	mov	r1, r4
 800be72:	4628      	mov	r0, r5
 800be74:	f000 f80c 	bl	800be90 <__swsetup_r>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d0cb      	beq.n	800be14 <__swbuf_r+0x28>
 800be7c:	f04f 37ff 	mov.w	r7, #4294967295
 800be80:	e7ea      	b.n	800be58 <__swbuf_r+0x6c>
 800be82:	bf00      	nop
 800be84:	0800f61c 	.word	0x0800f61c
 800be88:	0800f63c 	.word	0x0800f63c
 800be8c:	0800f5fc 	.word	0x0800f5fc

0800be90 <__swsetup_r>:
 800be90:	4b32      	ldr	r3, [pc, #200]	; (800bf5c <__swsetup_r+0xcc>)
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	681d      	ldr	r5, [r3, #0]
 800be96:	4606      	mov	r6, r0
 800be98:	460c      	mov	r4, r1
 800be9a:	b125      	cbz	r5, 800bea6 <__swsetup_r+0x16>
 800be9c:	69ab      	ldr	r3, [r5, #24]
 800be9e:	b913      	cbnz	r3, 800bea6 <__swsetup_r+0x16>
 800bea0:	4628      	mov	r0, r5
 800bea2:	f000 f985 	bl	800c1b0 <__sinit>
 800bea6:	4b2e      	ldr	r3, [pc, #184]	; (800bf60 <__swsetup_r+0xd0>)
 800bea8:	429c      	cmp	r4, r3
 800beaa:	d10f      	bne.n	800becc <__swsetup_r+0x3c>
 800beac:	686c      	ldr	r4, [r5, #4]
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb4:	0719      	lsls	r1, r3, #28
 800beb6:	d42c      	bmi.n	800bf12 <__swsetup_r+0x82>
 800beb8:	06dd      	lsls	r5, r3, #27
 800beba:	d411      	bmi.n	800bee0 <__swsetup_r+0x50>
 800bebc:	2309      	movs	r3, #9
 800bebe:	6033      	str	r3, [r6, #0]
 800bec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	e03e      	b.n	800bf4a <__swsetup_r+0xba>
 800becc:	4b25      	ldr	r3, [pc, #148]	; (800bf64 <__swsetup_r+0xd4>)
 800bece:	429c      	cmp	r4, r3
 800bed0:	d101      	bne.n	800bed6 <__swsetup_r+0x46>
 800bed2:	68ac      	ldr	r4, [r5, #8]
 800bed4:	e7eb      	b.n	800beae <__swsetup_r+0x1e>
 800bed6:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <__swsetup_r+0xd8>)
 800bed8:	429c      	cmp	r4, r3
 800beda:	bf08      	it	eq
 800bedc:	68ec      	ldreq	r4, [r5, #12]
 800bede:	e7e6      	b.n	800beae <__swsetup_r+0x1e>
 800bee0:	0758      	lsls	r0, r3, #29
 800bee2:	d512      	bpl.n	800bf0a <__swsetup_r+0x7a>
 800bee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee6:	b141      	cbz	r1, 800befa <__swsetup_r+0x6a>
 800bee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beec:	4299      	cmp	r1, r3
 800beee:	d002      	beq.n	800bef6 <__swsetup_r+0x66>
 800bef0:	4630      	mov	r0, r6
 800bef2:	f7ff fb67 	bl	800b5c4 <_free_r>
 800bef6:	2300      	movs	r3, #0
 800bef8:	6363      	str	r3, [r4, #52]	; 0x34
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf00:	81a3      	strh	r3, [r4, #12]
 800bf02:	2300      	movs	r3, #0
 800bf04:	6063      	str	r3, [r4, #4]
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f043 0308 	orr.w	r3, r3, #8
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	b94b      	cbnz	r3, 800bf2a <__swsetup_r+0x9a>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf20:	d003      	beq.n	800bf2a <__swsetup_r+0x9a>
 800bf22:	4621      	mov	r1, r4
 800bf24:	4630      	mov	r0, r6
 800bf26:	f000 fa07 	bl	800c338 <__smakebuf_r>
 800bf2a:	89a0      	ldrh	r0, [r4, #12]
 800bf2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf30:	f010 0301 	ands.w	r3, r0, #1
 800bf34:	d00a      	beq.n	800bf4c <__swsetup_r+0xbc>
 800bf36:	2300      	movs	r3, #0
 800bf38:	60a3      	str	r3, [r4, #8]
 800bf3a:	6963      	ldr	r3, [r4, #20]
 800bf3c:	425b      	negs	r3, r3
 800bf3e:	61a3      	str	r3, [r4, #24]
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	b943      	cbnz	r3, 800bf56 <__swsetup_r+0xc6>
 800bf44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf48:	d1ba      	bne.n	800bec0 <__swsetup_r+0x30>
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	0781      	lsls	r1, r0, #30
 800bf4e:	bf58      	it	pl
 800bf50:	6963      	ldrpl	r3, [r4, #20]
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	e7f4      	b.n	800bf40 <__swsetup_r+0xb0>
 800bf56:	2000      	movs	r0, #0
 800bf58:	e7f7      	b.n	800bf4a <__swsetup_r+0xba>
 800bf5a:	bf00      	nop
 800bf5c:	20000160 	.word	0x20000160
 800bf60:	0800f61c 	.word	0x0800f61c
 800bf64:	0800f63c 	.word	0x0800f63c
 800bf68:	0800f5fc 	.word	0x0800f5fc

0800bf6c <abort>:
 800bf6c:	b508      	push	{r3, lr}
 800bf6e:	2006      	movs	r0, #6
 800bf70:	f000 fa52 	bl	800c418 <raise>
 800bf74:	2001      	movs	r0, #1
 800bf76:	f7f6 fddd 	bl	8002b34 <_exit>
	...

0800bf7c <__sflush_r>:
 800bf7c:	898a      	ldrh	r2, [r1, #12]
 800bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	4605      	mov	r5, r0
 800bf84:	0710      	lsls	r0, r2, #28
 800bf86:	460c      	mov	r4, r1
 800bf88:	d458      	bmi.n	800c03c <__sflush_r+0xc0>
 800bf8a:	684b      	ldr	r3, [r1, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dc05      	bgt.n	800bf9c <__sflush_r+0x20>
 800bf90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	dc02      	bgt.n	800bf9c <__sflush_r+0x20>
 800bf96:	2000      	movs	r0, #0
 800bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf9e:	2e00      	cmp	r6, #0
 800bfa0:	d0f9      	beq.n	800bf96 <__sflush_r+0x1a>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfa8:	682f      	ldr	r7, [r5, #0]
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	d032      	beq.n	800c014 <__sflush_r+0x98>
 800bfae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	075a      	lsls	r2, r3, #29
 800bfb4:	d505      	bpl.n	800bfc2 <__sflush_r+0x46>
 800bfb6:	6863      	ldr	r3, [r4, #4]
 800bfb8:	1ac0      	subs	r0, r0, r3
 800bfba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfbc:	b10b      	cbz	r3, 800bfc2 <__sflush_r+0x46>
 800bfbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc0:	1ac0      	subs	r0, r0, r3
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfc8:	6a21      	ldr	r1, [r4, #32]
 800bfca:	4628      	mov	r0, r5
 800bfcc:	47b0      	blx	r6
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	d106      	bne.n	800bfe2 <__sflush_r+0x66>
 800bfd4:	6829      	ldr	r1, [r5, #0]
 800bfd6:	291d      	cmp	r1, #29
 800bfd8:	d82c      	bhi.n	800c034 <__sflush_r+0xb8>
 800bfda:	4a2a      	ldr	r2, [pc, #168]	; (800c084 <__sflush_r+0x108>)
 800bfdc:	40ca      	lsrs	r2, r1
 800bfde:	07d6      	lsls	r6, r2, #31
 800bfe0:	d528      	bpl.n	800c034 <__sflush_r+0xb8>
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	6062      	str	r2, [r4, #4]
 800bfe6:	04d9      	lsls	r1, r3, #19
 800bfe8:	6922      	ldr	r2, [r4, #16]
 800bfea:	6022      	str	r2, [r4, #0]
 800bfec:	d504      	bpl.n	800bff8 <__sflush_r+0x7c>
 800bfee:	1c42      	adds	r2, r0, #1
 800bff0:	d101      	bne.n	800bff6 <__sflush_r+0x7a>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	b903      	cbnz	r3, 800bff8 <__sflush_r+0x7c>
 800bff6:	6560      	str	r0, [r4, #84]	; 0x54
 800bff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bffa:	602f      	str	r7, [r5, #0]
 800bffc:	2900      	cmp	r1, #0
 800bffe:	d0ca      	beq.n	800bf96 <__sflush_r+0x1a>
 800c000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c004:	4299      	cmp	r1, r3
 800c006:	d002      	beq.n	800c00e <__sflush_r+0x92>
 800c008:	4628      	mov	r0, r5
 800c00a:	f7ff fadb 	bl	800b5c4 <_free_r>
 800c00e:	2000      	movs	r0, #0
 800c010:	6360      	str	r0, [r4, #52]	; 0x34
 800c012:	e7c1      	b.n	800bf98 <__sflush_r+0x1c>
 800c014:	6a21      	ldr	r1, [r4, #32]
 800c016:	2301      	movs	r3, #1
 800c018:	4628      	mov	r0, r5
 800c01a:	47b0      	blx	r6
 800c01c:	1c41      	adds	r1, r0, #1
 800c01e:	d1c7      	bne.n	800bfb0 <__sflush_r+0x34>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0c4      	beq.n	800bfb0 <__sflush_r+0x34>
 800c026:	2b1d      	cmp	r3, #29
 800c028:	d001      	beq.n	800c02e <__sflush_r+0xb2>
 800c02a:	2b16      	cmp	r3, #22
 800c02c:	d101      	bne.n	800c032 <__sflush_r+0xb6>
 800c02e:	602f      	str	r7, [r5, #0]
 800c030:	e7b1      	b.n	800bf96 <__sflush_r+0x1a>
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	e7ad      	b.n	800bf98 <__sflush_r+0x1c>
 800c03c:	690f      	ldr	r7, [r1, #16]
 800c03e:	2f00      	cmp	r7, #0
 800c040:	d0a9      	beq.n	800bf96 <__sflush_r+0x1a>
 800c042:	0793      	lsls	r3, r2, #30
 800c044:	680e      	ldr	r6, [r1, #0]
 800c046:	bf08      	it	eq
 800c048:	694b      	ldreq	r3, [r1, #20]
 800c04a:	600f      	str	r7, [r1, #0]
 800c04c:	bf18      	it	ne
 800c04e:	2300      	movne	r3, #0
 800c050:	eba6 0807 	sub.w	r8, r6, r7
 800c054:	608b      	str	r3, [r1, #8]
 800c056:	f1b8 0f00 	cmp.w	r8, #0
 800c05a:	dd9c      	ble.n	800bf96 <__sflush_r+0x1a>
 800c05c:	6a21      	ldr	r1, [r4, #32]
 800c05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c060:	4643      	mov	r3, r8
 800c062:	463a      	mov	r2, r7
 800c064:	4628      	mov	r0, r5
 800c066:	47b0      	blx	r6
 800c068:	2800      	cmp	r0, #0
 800c06a:	dc06      	bgt.n	800c07a <__sflush_r+0xfe>
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	e78e      	b.n	800bf98 <__sflush_r+0x1c>
 800c07a:	4407      	add	r7, r0
 800c07c:	eba8 0800 	sub.w	r8, r8, r0
 800c080:	e7e9      	b.n	800c056 <__sflush_r+0xda>
 800c082:	bf00      	nop
 800c084:	20400001 	.word	0x20400001

0800c088 <_fflush_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	690b      	ldr	r3, [r1, #16]
 800c08c:	4605      	mov	r5, r0
 800c08e:	460c      	mov	r4, r1
 800c090:	b913      	cbnz	r3, 800c098 <_fflush_r+0x10>
 800c092:	2500      	movs	r5, #0
 800c094:	4628      	mov	r0, r5
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	b118      	cbz	r0, 800c0a2 <_fflush_r+0x1a>
 800c09a:	6983      	ldr	r3, [r0, #24]
 800c09c:	b90b      	cbnz	r3, 800c0a2 <_fflush_r+0x1a>
 800c09e:	f000 f887 	bl	800c1b0 <__sinit>
 800c0a2:	4b14      	ldr	r3, [pc, #80]	; (800c0f4 <_fflush_r+0x6c>)
 800c0a4:	429c      	cmp	r4, r3
 800c0a6:	d11b      	bne.n	800c0e0 <_fflush_r+0x58>
 800c0a8:	686c      	ldr	r4, [r5, #4]
 800c0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d0ef      	beq.n	800c092 <_fflush_r+0xa>
 800c0b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0b4:	07d0      	lsls	r0, r2, #31
 800c0b6:	d404      	bmi.n	800c0c2 <_fflush_r+0x3a>
 800c0b8:	0599      	lsls	r1, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_fflush_r+0x3a>
 800c0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0be:	f000 f915 	bl	800c2ec <__retarget_lock_acquire_recursive>
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	f7ff ff59 	bl	800bf7c <__sflush_r>
 800c0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0cc:	07da      	lsls	r2, r3, #31
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	d4e0      	bmi.n	800c094 <_fflush_r+0xc>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	059b      	lsls	r3, r3, #22
 800c0d6:	d4dd      	bmi.n	800c094 <_fflush_r+0xc>
 800c0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0da:	f000 f908 	bl	800c2ee <__retarget_lock_release_recursive>
 800c0de:	e7d9      	b.n	800c094 <_fflush_r+0xc>
 800c0e0:	4b05      	ldr	r3, [pc, #20]	; (800c0f8 <_fflush_r+0x70>)
 800c0e2:	429c      	cmp	r4, r3
 800c0e4:	d101      	bne.n	800c0ea <_fflush_r+0x62>
 800c0e6:	68ac      	ldr	r4, [r5, #8]
 800c0e8:	e7df      	b.n	800c0aa <_fflush_r+0x22>
 800c0ea:	4b04      	ldr	r3, [pc, #16]	; (800c0fc <_fflush_r+0x74>)
 800c0ec:	429c      	cmp	r4, r3
 800c0ee:	bf08      	it	eq
 800c0f0:	68ec      	ldreq	r4, [r5, #12]
 800c0f2:	e7da      	b.n	800c0aa <_fflush_r+0x22>
 800c0f4:	0800f61c 	.word	0x0800f61c
 800c0f8:	0800f63c 	.word	0x0800f63c
 800c0fc:	0800f5fc 	.word	0x0800f5fc

0800c100 <std>:
 800c100:	2300      	movs	r3, #0
 800c102:	b510      	push	{r4, lr}
 800c104:	4604      	mov	r4, r0
 800c106:	e9c0 3300 	strd	r3, r3, [r0]
 800c10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c10e:	6083      	str	r3, [r0, #8]
 800c110:	8181      	strh	r1, [r0, #12]
 800c112:	6643      	str	r3, [r0, #100]	; 0x64
 800c114:	81c2      	strh	r2, [r0, #14]
 800c116:	6183      	str	r3, [r0, #24]
 800c118:	4619      	mov	r1, r3
 800c11a:	2208      	movs	r2, #8
 800c11c:	305c      	adds	r0, #92	; 0x5c
 800c11e:	f7fb fe17 	bl	8007d50 <memset>
 800c122:	4b05      	ldr	r3, [pc, #20]	; (800c138 <std+0x38>)
 800c124:	6263      	str	r3, [r4, #36]	; 0x24
 800c126:	4b05      	ldr	r3, [pc, #20]	; (800c13c <std+0x3c>)
 800c128:	62a3      	str	r3, [r4, #40]	; 0x28
 800c12a:	4b05      	ldr	r3, [pc, #20]	; (800c140 <std+0x40>)
 800c12c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c12e:	4b05      	ldr	r3, [pc, #20]	; (800c144 <std+0x44>)
 800c130:	6224      	str	r4, [r4, #32]
 800c132:	6323      	str	r3, [r4, #48]	; 0x30
 800c134:	bd10      	pop	{r4, pc}
 800c136:	bf00      	nop
 800c138:	0800c451 	.word	0x0800c451
 800c13c:	0800c473 	.word	0x0800c473
 800c140:	0800c4ab 	.word	0x0800c4ab
 800c144:	0800c4cf 	.word	0x0800c4cf

0800c148 <_cleanup_r>:
 800c148:	4901      	ldr	r1, [pc, #4]	; (800c150 <_cleanup_r+0x8>)
 800c14a:	f000 b8af 	b.w	800c2ac <_fwalk_reent>
 800c14e:	bf00      	nop
 800c150:	0800c089 	.word	0x0800c089

0800c154 <__sfmoreglue>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	1e4a      	subs	r2, r1, #1
 800c158:	2568      	movs	r5, #104	; 0x68
 800c15a:	4355      	muls	r5, r2
 800c15c:	460e      	mov	r6, r1
 800c15e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c162:	f7ff fa7f 	bl	800b664 <_malloc_r>
 800c166:	4604      	mov	r4, r0
 800c168:	b140      	cbz	r0, 800c17c <__sfmoreglue+0x28>
 800c16a:	2100      	movs	r1, #0
 800c16c:	e9c0 1600 	strd	r1, r6, [r0]
 800c170:	300c      	adds	r0, #12
 800c172:	60a0      	str	r0, [r4, #8]
 800c174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c178:	f7fb fdea 	bl	8007d50 <memset>
 800c17c:	4620      	mov	r0, r4
 800c17e:	bd70      	pop	{r4, r5, r6, pc}

0800c180 <__sfp_lock_acquire>:
 800c180:	4801      	ldr	r0, [pc, #4]	; (800c188 <__sfp_lock_acquire+0x8>)
 800c182:	f000 b8b3 	b.w	800c2ec <__retarget_lock_acquire_recursive>
 800c186:	bf00      	nop
 800c188:	20000940 	.word	0x20000940

0800c18c <__sfp_lock_release>:
 800c18c:	4801      	ldr	r0, [pc, #4]	; (800c194 <__sfp_lock_release+0x8>)
 800c18e:	f000 b8ae 	b.w	800c2ee <__retarget_lock_release_recursive>
 800c192:	bf00      	nop
 800c194:	20000940 	.word	0x20000940

0800c198 <__sinit_lock_acquire>:
 800c198:	4801      	ldr	r0, [pc, #4]	; (800c1a0 <__sinit_lock_acquire+0x8>)
 800c19a:	f000 b8a7 	b.w	800c2ec <__retarget_lock_acquire_recursive>
 800c19e:	bf00      	nop
 800c1a0:	2000093b 	.word	0x2000093b

0800c1a4 <__sinit_lock_release>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	; (800c1ac <__sinit_lock_release+0x8>)
 800c1a6:	f000 b8a2 	b.w	800c2ee <__retarget_lock_release_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	2000093b 	.word	0x2000093b

0800c1b0 <__sinit>:
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	f7ff fff0 	bl	800c198 <__sinit_lock_acquire>
 800c1b8:	69a3      	ldr	r3, [r4, #24]
 800c1ba:	b11b      	cbz	r3, 800c1c4 <__sinit+0x14>
 800c1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c0:	f7ff bff0 	b.w	800c1a4 <__sinit_lock_release>
 800c1c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800c1ca:	4b13      	ldr	r3, [pc, #76]	; (800c218 <__sinit+0x68>)
 800c1cc:	4a13      	ldr	r2, [pc, #76]	; (800c21c <__sinit+0x6c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	bf04      	itt	eq
 800c1d6:	2301      	moveq	r3, #1
 800c1d8:	61a3      	streq	r3, [r4, #24]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 f820 	bl	800c220 <__sfp>
 800c1e0:	6060      	str	r0, [r4, #4]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f000 f81c 	bl	800c220 <__sfp>
 800c1e8:	60a0      	str	r0, [r4, #8]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 f818 	bl	800c220 <__sfp>
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	60e0      	str	r0, [r4, #12]
 800c1f4:	2104      	movs	r1, #4
 800c1f6:	6860      	ldr	r0, [r4, #4]
 800c1f8:	f7ff ff82 	bl	800c100 <std>
 800c1fc:	68a0      	ldr	r0, [r4, #8]
 800c1fe:	2201      	movs	r2, #1
 800c200:	2109      	movs	r1, #9
 800c202:	f7ff ff7d 	bl	800c100 <std>
 800c206:	68e0      	ldr	r0, [r4, #12]
 800c208:	2202      	movs	r2, #2
 800c20a:	2112      	movs	r1, #18
 800c20c:	f7ff ff78 	bl	800c100 <std>
 800c210:	2301      	movs	r3, #1
 800c212:	61a3      	str	r3, [r4, #24]
 800c214:	e7d2      	b.n	800c1bc <__sinit+0xc>
 800c216:	bf00      	nop
 800c218:	0800f1a4 	.word	0x0800f1a4
 800c21c:	0800c149 	.word	0x0800c149

0800c220 <__sfp>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	4607      	mov	r7, r0
 800c224:	f7ff ffac 	bl	800c180 <__sfp_lock_acquire>
 800c228:	4b1e      	ldr	r3, [pc, #120]	; (800c2a4 <__sfp+0x84>)
 800c22a:	681e      	ldr	r6, [r3, #0]
 800c22c:	69b3      	ldr	r3, [r6, #24]
 800c22e:	b913      	cbnz	r3, 800c236 <__sfp+0x16>
 800c230:	4630      	mov	r0, r6
 800c232:	f7ff ffbd 	bl	800c1b0 <__sinit>
 800c236:	3648      	adds	r6, #72	; 0x48
 800c238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	d503      	bpl.n	800c248 <__sfp+0x28>
 800c240:	6833      	ldr	r3, [r6, #0]
 800c242:	b30b      	cbz	r3, 800c288 <__sfp+0x68>
 800c244:	6836      	ldr	r6, [r6, #0]
 800c246:	e7f7      	b.n	800c238 <__sfp+0x18>
 800c248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c24c:	b9d5      	cbnz	r5, 800c284 <__sfp+0x64>
 800c24e:	4b16      	ldr	r3, [pc, #88]	; (800c2a8 <__sfp+0x88>)
 800c250:	60e3      	str	r3, [r4, #12]
 800c252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c256:	6665      	str	r5, [r4, #100]	; 0x64
 800c258:	f000 f847 	bl	800c2ea <__retarget_lock_init_recursive>
 800c25c:	f7ff ff96 	bl	800c18c <__sfp_lock_release>
 800c260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c268:	6025      	str	r5, [r4, #0]
 800c26a:	61a5      	str	r5, [r4, #24]
 800c26c:	2208      	movs	r2, #8
 800c26e:	4629      	mov	r1, r5
 800c270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c274:	f7fb fd6c 	bl	8007d50 <memset>
 800c278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c27c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c280:	4620      	mov	r0, r4
 800c282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c284:	3468      	adds	r4, #104	; 0x68
 800c286:	e7d9      	b.n	800c23c <__sfp+0x1c>
 800c288:	2104      	movs	r1, #4
 800c28a:	4638      	mov	r0, r7
 800c28c:	f7ff ff62 	bl	800c154 <__sfmoreglue>
 800c290:	4604      	mov	r4, r0
 800c292:	6030      	str	r0, [r6, #0]
 800c294:	2800      	cmp	r0, #0
 800c296:	d1d5      	bne.n	800c244 <__sfp+0x24>
 800c298:	f7ff ff78 	bl	800c18c <__sfp_lock_release>
 800c29c:	230c      	movs	r3, #12
 800c29e:	603b      	str	r3, [r7, #0]
 800c2a0:	e7ee      	b.n	800c280 <__sfp+0x60>
 800c2a2:	bf00      	nop
 800c2a4:	0800f1a4 	.word	0x0800f1a4
 800c2a8:	ffff0001 	.word	0xffff0001

0800c2ac <_fwalk_reent>:
 800c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	4606      	mov	r6, r0
 800c2b2:	4688      	mov	r8, r1
 800c2b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2b8:	2700      	movs	r7, #0
 800c2ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2be:	f1b9 0901 	subs.w	r9, r9, #1
 800c2c2:	d505      	bpl.n	800c2d0 <_fwalk_reent+0x24>
 800c2c4:	6824      	ldr	r4, [r4, #0]
 800c2c6:	2c00      	cmp	r4, #0
 800c2c8:	d1f7      	bne.n	800c2ba <_fwalk_reent+0xe>
 800c2ca:	4638      	mov	r0, r7
 800c2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d0:	89ab      	ldrh	r3, [r5, #12]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d907      	bls.n	800c2e6 <_fwalk_reent+0x3a>
 800c2d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	d003      	beq.n	800c2e6 <_fwalk_reent+0x3a>
 800c2de:	4629      	mov	r1, r5
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	47c0      	blx	r8
 800c2e4:	4307      	orrs	r7, r0
 800c2e6:	3568      	adds	r5, #104	; 0x68
 800c2e8:	e7e9      	b.n	800c2be <_fwalk_reent+0x12>

0800c2ea <__retarget_lock_init_recursive>:
 800c2ea:	4770      	bx	lr

0800c2ec <__retarget_lock_acquire_recursive>:
 800c2ec:	4770      	bx	lr

0800c2ee <__retarget_lock_release_recursive>:
 800c2ee:	4770      	bx	lr

0800c2f0 <__swhatbuf_r>:
 800c2f0:	b570      	push	{r4, r5, r6, lr}
 800c2f2:	460e      	mov	r6, r1
 800c2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f8:	2900      	cmp	r1, #0
 800c2fa:	b096      	sub	sp, #88	; 0x58
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	461d      	mov	r5, r3
 800c300:	da07      	bge.n	800c312 <__swhatbuf_r+0x22>
 800c302:	2300      	movs	r3, #0
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	89b3      	ldrh	r3, [r6, #12]
 800c308:	061a      	lsls	r2, r3, #24
 800c30a:	d410      	bmi.n	800c32e <__swhatbuf_r+0x3e>
 800c30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c310:	e00e      	b.n	800c330 <__swhatbuf_r+0x40>
 800c312:	466a      	mov	r2, sp
 800c314:	f000 f902 	bl	800c51c <_fstat_r>
 800c318:	2800      	cmp	r0, #0
 800c31a:	dbf2      	blt.n	800c302 <__swhatbuf_r+0x12>
 800c31c:	9a01      	ldr	r2, [sp, #4]
 800c31e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c322:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c326:	425a      	negs	r2, r3
 800c328:	415a      	adcs	r2, r3
 800c32a:	602a      	str	r2, [r5, #0]
 800c32c:	e7ee      	b.n	800c30c <__swhatbuf_r+0x1c>
 800c32e:	2340      	movs	r3, #64	; 0x40
 800c330:	2000      	movs	r0, #0
 800c332:	6023      	str	r3, [r4, #0]
 800c334:	b016      	add	sp, #88	; 0x58
 800c336:	bd70      	pop	{r4, r5, r6, pc}

0800c338 <__smakebuf_r>:
 800c338:	898b      	ldrh	r3, [r1, #12]
 800c33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c33c:	079d      	lsls	r5, r3, #30
 800c33e:	4606      	mov	r6, r0
 800c340:	460c      	mov	r4, r1
 800c342:	d507      	bpl.n	800c354 <__smakebuf_r+0x1c>
 800c344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	2301      	movs	r3, #1
 800c34e:	6163      	str	r3, [r4, #20]
 800c350:	b002      	add	sp, #8
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	ab01      	add	r3, sp, #4
 800c356:	466a      	mov	r2, sp
 800c358:	f7ff ffca 	bl	800c2f0 <__swhatbuf_r>
 800c35c:	9900      	ldr	r1, [sp, #0]
 800c35e:	4605      	mov	r5, r0
 800c360:	4630      	mov	r0, r6
 800c362:	f7ff f97f 	bl	800b664 <_malloc_r>
 800c366:	b948      	cbnz	r0, 800c37c <__smakebuf_r+0x44>
 800c368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36c:	059a      	lsls	r2, r3, #22
 800c36e:	d4ef      	bmi.n	800c350 <__smakebuf_r+0x18>
 800c370:	f023 0303 	bic.w	r3, r3, #3
 800c374:	f043 0302 	orr.w	r3, r3, #2
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	e7e3      	b.n	800c344 <__smakebuf_r+0xc>
 800c37c:	4b0d      	ldr	r3, [pc, #52]	; (800c3b4 <__smakebuf_r+0x7c>)
 800c37e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	6020      	str	r0, [r4, #0]
 800c384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	9b00      	ldr	r3, [sp, #0]
 800c38c:	6163      	str	r3, [r4, #20]
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	6120      	str	r0, [r4, #16]
 800c392:	b15b      	cbz	r3, 800c3ac <__smakebuf_r+0x74>
 800c394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f8d1 	bl	800c540 <_isatty_r>
 800c39e:	b128      	cbz	r0, 800c3ac <__smakebuf_r+0x74>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	89a0      	ldrh	r0, [r4, #12]
 800c3ae:	4305      	orrs	r5, r0
 800c3b0:	81a5      	strh	r5, [r4, #12]
 800c3b2:	e7cd      	b.n	800c350 <__smakebuf_r+0x18>
 800c3b4:	0800c149 	.word	0x0800c149

0800c3b8 <_malloc_usable_size_r>:
 800c3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3bc:	1f18      	subs	r0, r3, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfbc      	itt	lt
 800c3c2:	580b      	ldrlt	r3, [r1, r0]
 800c3c4:	18c0      	addlt	r0, r0, r3
 800c3c6:	4770      	bx	lr

0800c3c8 <_raise_r>:
 800c3c8:	291f      	cmp	r1, #31
 800c3ca:	b538      	push	{r3, r4, r5, lr}
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	d904      	bls.n	800c3dc <_raise_r+0x14>
 800c3d2:	2316      	movs	r3, #22
 800c3d4:	6003      	str	r3, [r0, #0]
 800c3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3de:	b112      	cbz	r2, 800c3e6 <_raise_r+0x1e>
 800c3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3e4:	b94b      	cbnz	r3, 800c3fa <_raise_r+0x32>
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 f830 	bl	800c44c <_getpid_r>
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f6:	f000 b817 	b.w	800c428 <_kill_r>
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d00a      	beq.n	800c414 <_raise_r+0x4c>
 800c3fe:	1c59      	adds	r1, r3, #1
 800c400:	d103      	bne.n	800c40a <_raise_r+0x42>
 800c402:	2316      	movs	r3, #22
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	2001      	movs	r0, #1
 800c408:	e7e7      	b.n	800c3da <_raise_r+0x12>
 800c40a:	2400      	movs	r4, #0
 800c40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c410:	4628      	mov	r0, r5
 800c412:	4798      	blx	r3
 800c414:	2000      	movs	r0, #0
 800c416:	e7e0      	b.n	800c3da <_raise_r+0x12>

0800c418 <raise>:
 800c418:	4b02      	ldr	r3, [pc, #8]	; (800c424 <raise+0xc>)
 800c41a:	4601      	mov	r1, r0
 800c41c:	6818      	ldr	r0, [r3, #0]
 800c41e:	f7ff bfd3 	b.w	800c3c8 <_raise_r>
 800c422:	bf00      	nop
 800c424:	20000160 	.word	0x20000160

0800c428 <_kill_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d07      	ldr	r5, [pc, #28]	; (800c448 <_kill_r+0x20>)
 800c42c:	2300      	movs	r3, #0
 800c42e:	4604      	mov	r4, r0
 800c430:	4608      	mov	r0, r1
 800c432:	4611      	mov	r1, r2
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	f7f6 fb6d 	bl	8002b14 <_kill>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d102      	bne.n	800c444 <_kill_r+0x1c>
 800c43e:	682b      	ldr	r3, [r5, #0]
 800c440:	b103      	cbz	r3, 800c444 <_kill_r+0x1c>
 800c442:	6023      	str	r3, [r4, #0]
 800c444:	bd38      	pop	{r3, r4, r5, pc}
 800c446:	bf00      	nop
 800c448:	20000934 	.word	0x20000934

0800c44c <_getpid_r>:
 800c44c:	f7f6 bb5a 	b.w	8002b04 <_getpid>

0800c450 <__sread>:
 800c450:	b510      	push	{r4, lr}
 800c452:	460c      	mov	r4, r1
 800c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c458:	f000 f894 	bl	800c584 <_read_r>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	bfab      	itete	ge
 800c460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c462:	89a3      	ldrhlt	r3, [r4, #12]
 800c464:	181b      	addge	r3, r3, r0
 800c466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c46a:	bfac      	ite	ge
 800c46c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c46e:	81a3      	strhlt	r3, [r4, #12]
 800c470:	bd10      	pop	{r4, pc}

0800c472 <__swrite>:
 800c472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c476:	461f      	mov	r7, r3
 800c478:	898b      	ldrh	r3, [r1, #12]
 800c47a:	05db      	lsls	r3, r3, #23
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	4616      	mov	r6, r2
 800c482:	d505      	bpl.n	800c490 <__swrite+0x1e>
 800c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c488:	2302      	movs	r3, #2
 800c48a:	2200      	movs	r2, #0
 800c48c:	f000 f868 	bl	800c560 <_lseek_r>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	4632      	mov	r2, r6
 800c49e:	463b      	mov	r3, r7
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	f000 b817 	b.w	800c4d8 <_write_r>

0800c4aa <__sseek>:
 800c4aa:	b510      	push	{r4, lr}
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b2:	f000 f855 	bl	800c560 <_lseek_r>
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	bf15      	itete	ne
 800c4bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4c6:	81a3      	strheq	r3, [r4, #12]
 800c4c8:	bf18      	it	ne
 800c4ca:	81a3      	strhne	r3, [r4, #12]
 800c4cc:	bd10      	pop	{r4, pc}

0800c4ce <__sclose>:
 800c4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d2:	f000 b813 	b.w	800c4fc <_close_r>
	...

0800c4d8 <_write_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4d07      	ldr	r5, [pc, #28]	; (800c4f8 <_write_r+0x20>)
 800c4dc:	4604      	mov	r4, r0
 800c4de:	4608      	mov	r0, r1
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	602a      	str	r2, [r5, #0]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	f7f6 fb4b 	bl	8002b82 <_write>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d102      	bne.n	800c4f6 <_write_r+0x1e>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	b103      	cbz	r3, 800c4f6 <_write_r+0x1e>
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	20000934 	.word	0x20000934

0800c4fc <_close_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d06      	ldr	r5, [pc, #24]	; (800c518 <_close_r+0x1c>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f6 fb57 	bl	8002bba <_close>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_close_r+0x1a>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_close_r+0x1a>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20000934 	.word	0x20000934

0800c51c <_fstat_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d07      	ldr	r5, [pc, #28]	; (800c53c <_fstat_r+0x20>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	4611      	mov	r1, r2
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	f7f6 fb52 	bl	8002bd2 <_fstat>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	d102      	bne.n	800c538 <_fstat_r+0x1c>
 800c532:	682b      	ldr	r3, [r5, #0]
 800c534:	b103      	cbz	r3, 800c538 <_fstat_r+0x1c>
 800c536:	6023      	str	r3, [r4, #0]
 800c538:	bd38      	pop	{r3, r4, r5, pc}
 800c53a:	bf00      	nop
 800c53c:	20000934 	.word	0x20000934

0800c540 <_isatty_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4d06      	ldr	r5, [pc, #24]	; (800c55c <_isatty_r+0x1c>)
 800c544:	2300      	movs	r3, #0
 800c546:	4604      	mov	r4, r0
 800c548:	4608      	mov	r0, r1
 800c54a:	602b      	str	r3, [r5, #0]
 800c54c:	f7f6 fb51 	bl	8002bf2 <_isatty>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_isatty_r+0x1a>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_isatty_r+0x1a>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	20000934 	.word	0x20000934

0800c560 <_lseek_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4d07      	ldr	r5, [pc, #28]	; (800c580 <_lseek_r+0x20>)
 800c564:	4604      	mov	r4, r0
 800c566:	4608      	mov	r0, r1
 800c568:	4611      	mov	r1, r2
 800c56a:	2200      	movs	r2, #0
 800c56c:	602a      	str	r2, [r5, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	f7f6 fb4a 	bl	8002c08 <_lseek>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d102      	bne.n	800c57e <_lseek_r+0x1e>
 800c578:	682b      	ldr	r3, [r5, #0]
 800c57a:	b103      	cbz	r3, 800c57e <_lseek_r+0x1e>
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	20000934 	.word	0x20000934

0800c584 <_read_r>:
 800c584:	b538      	push	{r3, r4, r5, lr}
 800c586:	4d07      	ldr	r5, [pc, #28]	; (800c5a4 <_read_r+0x20>)
 800c588:	4604      	mov	r4, r0
 800c58a:	4608      	mov	r0, r1
 800c58c:	4611      	mov	r1, r2
 800c58e:	2200      	movs	r2, #0
 800c590:	602a      	str	r2, [r5, #0]
 800c592:	461a      	mov	r2, r3
 800c594:	f7f6 fad8 	bl	8002b48 <_read>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d102      	bne.n	800c5a2 <_read_r+0x1e>
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	b103      	cbz	r3, 800c5a2 <_read_r+0x1e>
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	20000934 	.word	0x20000934

0800c5a8 <exp>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	ed2d 8b02 	vpush	{d8}
 800c5ae:	ec55 4b10 	vmov	r4, r5, d0
 800c5b2:	f000 f87d 	bl	800c6b0 <__ieee754_exp>
 800c5b6:	4b22      	ldr	r3, [pc, #136]	; (800c640 <exp+0x98>)
 800c5b8:	eeb0 8a40 	vmov.f32	s16, s0
 800c5bc:	eef0 8a60 	vmov.f32	s17, s1
 800c5c0:	f993 3000 	ldrsb.w	r3, [r3]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	d012      	beq.n	800c5ee <exp+0x46>
 800c5c8:	ec45 4b10 	vmov	d0, r4, r5
 800c5cc:	f000 fada 	bl	800cb84 <finite>
 800c5d0:	b168      	cbz	r0, 800c5ee <exp+0x46>
 800c5d2:	a313      	add	r3, pc, #76	; (adr r3, 800c620 <exp+0x78>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f4 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 800c5e0:	b160      	cbz	r0, 800c5fc <exp+0x54>
 800c5e2:	f7fb fb8b 	bl	8007cfc <__errno>
 800c5e6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800c628 <exp+0x80>
 800c5ea:	2322      	movs	r3, #34	; 0x22
 800c5ec:	6003      	str	r3, [r0, #0]
 800c5ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c5f2:	eef0 0a68 	vmov.f32	s1, s17
 800c5f6:	ecbd 8b02 	vpop	{d8}
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	a30c      	add	r3, pc, #48	; (adr r3, 800c630 <exp+0x88>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	4620      	mov	r0, r4
 800c604:	4629      	mov	r1, r5
 800c606:	f7f4 fa69 	bl	8000adc <__aeabi_dcmplt>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d0ef      	beq.n	800c5ee <exp+0x46>
 800c60e:	f7fb fb75 	bl	8007cfc <__errno>
 800c612:	2322      	movs	r3, #34	; 0x22
 800c614:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800c638 <exp+0x90>
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	e7e8      	b.n	800c5ee <exp+0x46>
 800c61c:	f3af 8000 	nop.w
 800c620:	fefa39ef 	.word	0xfefa39ef
 800c624:	40862e42 	.word	0x40862e42
 800c628:	00000000 	.word	0x00000000
 800c62c:	7ff00000 	.word	0x7ff00000
 800c630:	d52d3051 	.word	0xd52d3051
 800c634:	c0874910 	.word	0xc0874910
	...
 800c640:	20000334 	.word	0x20000334

0800c644 <logf>:
 800c644:	b508      	push	{r3, lr}
 800c646:	ed2d 8b02 	vpush	{d8}
 800c64a:	eeb0 8a40 	vmov.f32	s16, s0
 800c64e:	f000 f9a9 	bl	800c9a4 <__ieee754_logf>
 800c652:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <logf+0x60>)
 800c654:	f993 3000 	ldrsb.w	r3, [r3]
 800c658:	3301      	adds	r3, #1
 800c65a:	d014      	beq.n	800c686 <logf+0x42>
 800c65c:	eeb4 8a48 	vcmp.f32	s16, s16
 800c660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c664:	d60f      	bvs.n	800c686 <logf+0x42>
 800c666:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66e:	dc0a      	bgt.n	800c686 <logf+0x42>
 800c670:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c678:	d108      	bne.n	800c68c <logf+0x48>
 800c67a:	f7fb fb3f 	bl	8007cfc <__errno>
 800c67e:	2322      	movs	r3, #34	; 0x22
 800c680:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c6a8 <logf+0x64>
 800c684:	6003      	str	r3, [r0, #0]
 800c686:	ecbd 8b02 	vpop	{d8}
 800c68a:	bd08      	pop	{r3, pc}
 800c68c:	f7fb fb36 	bl	8007cfc <__errno>
 800c690:	ecbd 8b02 	vpop	{d8}
 800c694:	2321      	movs	r3, #33	; 0x21
 800c696:	6003      	str	r3, [r0, #0]
 800c698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c69c:	4803      	ldr	r0, [pc, #12]	; (800c6ac <logf+0x68>)
 800c69e:	f7fc b9d9 	b.w	8008a54 <nanf>
 800c6a2:	bf00      	nop
 800c6a4:	20000334 	.word	0x20000334
 800c6a8:	ff800000 	.word	0xff800000
 800c6ac:	0800f5f8 	.word	0x0800f5f8

0800c6b0 <__ieee754_exp>:
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	ec55 4b10 	vmov	r4, r5, d0
 800c6b8:	49b1      	ldr	r1, [pc, #708]	; (800c980 <__ieee754_exp+0x2d0>)
 800c6ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6be:	428b      	cmp	r3, r1
 800c6c0:	ed2d 8b04 	vpush	{d8-d9}
 800c6c4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800c6c8:	d937      	bls.n	800c73a <__ieee754_exp+0x8a>
 800c6ca:	49ae      	ldr	r1, [pc, #696]	; (800c984 <__ieee754_exp+0x2d4>)
 800c6cc:	428b      	cmp	r3, r1
 800c6ce:	d916      	bls.n	800c6fe <__ieee754_exp+0x4e>
 800c6d0:	ee10 3a10 	vmov	r3, s0
 800c6d4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	d009      	beq.n	800c6f0 <__ieee754_exp+0x40>
 800c6dc:	ee10 2a10 	vmov	r2, s0
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	f7f3 fdd1 	bl	800028c <__adddf3>
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	e000      	b.n	800c6f2 <__ieee754_exp+0x42>
 800c6f0:	bb06      	cbnz	r6, 800c734 <__ieee754_exp+0x84>
 800c6f2:	ecbd 8b04 	vpop	{d8-d9}
 800c6f6:	ec45 4b10 	vmov	d0, r4, r5
 800c6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fe:	a38a      	add	r3, pc, #552	; (adr r3, 800c928 <__ieee754_exp+0x278>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	ee10 0a10 	vmov	r0, s0
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f4 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800c70e:	b138      	cbz	r0, 800c720 <__ieee754_exp+0x70>
 800c710:	a387      	add	r3, pc, #540	; (adr r3, 800c930 <__ieee754_exp+0x280>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	4610      	mov	r0, r2
 800c718:	4619      	mov	r1, r3
 800c71a:	f7f3 ff6d 	bl	80005f8 <__aeabi_dmul>
 800c71e:	e7e4      	b.n	800c6ea <__ieee754_exp+0x3a>
 800c720:	a385      	add	r3, pc, #532	; (adr r3, 800c938 <__ieee754_exp+0x288>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f4 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	f000 8087 	beq.w	800c842 <__ieee754_exp+0x192>
 800c734:	2400      	movs	r4, #0
 800c736:	2500      	movs	r5, #0
 800c738:	e7db      	b.n	800c6f2 <__ieee754_exp+0x42>
 800c73a:	4a93      	ldr	r2, [pc, #588]	; (800c988 <__ieee754_exp+0x2d8>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	f240 80ac 	bls.w	800c89a <__ieee754_exp+0x1ea>
 800c742:	4a92      	ldr	r2, [pc, #584]	; (800c98c <__ieee754_exp+0x2dc>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d87c      	bhi.n	800c842 <__ieee754_exp+0x192>
 800c748:	4b91      	ldr	r3, [pc, #580]	; (800c990 <__ieee754_exp+0x2e0>)
 800c74a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c752:	ee10 0a10 	vmov	r0, s0
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 fd96 	bl	8000288 <__aeabi_dsub>
 800c75c:	4b8d      	ldr	r3, [pc, #564]	; (800c994 <__ieee754_exp+0x2e4>)
 800c75e:	00f7      	lsls	r7, r6, #3
 800c760:	443b      	add	r3, r7
 800c762:	ed93 7b00 	vldr	d7, [r3]
 800c766:	f1c6 0a01 	rsb	sl, r6, #1
 800c76a:	4680      	mov	r8, r0
 800c76c:	4689      	mov	r9, r1
 800c76e:	ebaa 0a06 	sub.w	sl, sl, r6
 800c772:	eeb0 8a47 	vmov.f32	s16, s14
 800c776:	eef0 8a67 	vmov.f32	s17, s15
 800c77a:	ec53 2b18 	vmov	r2, r3, d8
 800c77e:	4640      	mov	r0, r8
 800c780:	4649      	mov	r1, r9
 800c782:	f7f3 fd81 	bl	8000288 <__aeabi_dsub>
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	4622      	mov	r2, r4
 800c78c:	462b      	mov	r3, r5
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 ff31 	bl	80005f8 <__aeabi_dmul>
 800c796:	a36a      	add	r3, pc, #424	; (adr r3, 800c940 <__ieee754_exp+0x290>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	4606      	mov	r6, r0
 800c79e:	460f      	mov	r7, r1
 800c7a0:	f7f3 ff2a 	bl	80005f8 <__aeabi_dmul>
 800c7a4:	a368      	add	r3, pc, #416	; (adr r3, 800c948 <__ieee754_exp+0x298>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	f7f3 fd6d 	bl	8000288 <__aeabi_dsub>
 800c7ae:	4632      	mov	r2, r6
 800c7b0:	463b      	mov	r3, r7
 800c7b2:	f7f3 ff21 	bl	80005f8 <__aeabi_dmul>
 800c7b6:	a366      	add	r3, pc, #408	; (adr r3, 800c950 <__ieee754_exp+0x2a0>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f7f3 fd66 	bl	800028c <__adddf3>
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	463b      	mov	r3, r7
 800c7c4:	f7f3 ff18 	bl	80005f8 <__aeabi_dmul>
 800c7c8:	a363      	add	r3, pc, #396	; (adr r3, 800c958 <__ieee754_exp+0x2a8>)
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	f7f3 fd5b 	bl	8000288 <__aeabi_dsub>
 800c7d2:	4632      	mov	r2, r6
 800c7d4:	463b      	mov	r3, r7
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	a361      	add	r3, pc, #388	; (adr r3, 800c960 <__ieee754_exp+0x2b0>)
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f7f3 fd54 	bl	800028c <__adddf3>
 800c7e4:	4632      	mov	r2, r6
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	f7f3 ff06 	bl	80005f8 <__aeabi_dmul>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 fd48 	bl	8000288 <__aeabi_dsub>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	4620      	mov	r0, r4
 800c802:	4629      	mov	r1, r5
 800c804:	f7f3 fef8 	bl	80005f8 <__aeabi_dmul>
 800c808:	ec41 0b19 	vmov	d9, r0, r1
 800c80c:	f1ba 0f00 	cmp.w	sl, #0
 800c810:	d15d      	bne.n	800c8ce <__ieee754_exp+0x21e>
 800c812:	2200      	movs	r2, #0
 800c814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c818:	4630      	mov	r0, r6
 800c81a:	4639      	mov	r1, r7
 800c81c:	f7f3 fd34 	bl	8000288 <__aeabi_dsub>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	ec51 0b19 	vmov	r0, r1, d9
 800c828:	f7f4 f810 	bl	800084c <__aeabi_ddiv>
 800c82c:	4622      	mov	r2, r4
 800c82e:	462b      	mov	r3, r5
 800c830:	f7f3 fd2a 	bl	8000288 <__aeabi_dsub>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	2000      	movs	r0, #0
 800c83a:	4957      	ldr	r1, [pc, #348]	; (800c998 <__ieee754_exp+0x2e8>)
 800c83c:	f7f3 fd24 	bl	8000288 <__aeabi_dsub>
 800c840:	e753      	b.n	800c6ea <__ieee754_exp+0x3a>
 800c842:	4856      	ldr	r0, [pc, #344]	; (800c99c <__ieee754_exp+0x2ec>)
 800c844:	a348      	add	r3, pc, #288	; (adr r3, 800c968 <__ieee754_exp+0x2b8>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c84e:	4629      	mov	r1, r5
 800c850:	4620      	mov	r0, r4
 800c852:	f7f3 fed1 	bl	80005f8 <__aeabi_dmul>
 800c856:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c85a:	f7f3 fd17 	bl	800028c <__adddf3>
 800c85e:	f7f4 f97b 	bl	8000b58 <__aeabi_d2iz>
 800c862:	4682      	mov	sl, r0
 800c864:	f7f3 fe5e 	bl	8000524 <__aeabi_i2d>
 800c868:	a341      	add	r3, pc, #260	; (adr r3, 800c970 <__ieee754_exp+0x2c0>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	4606      	mov	r6, r0
 800c870:	460f      	mov	r7, r1
 800c872:	f7f3 fec1 	bl	80005f8 <__aeabi_dmul>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4620      	mov	r0, r4
 800c87c:	4629      	mov	r1, r5
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	a33d      	add	r3, pc, #244	; (adr r3, 800c978 <__ieee754_exp+0x2c8>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	4680      	mov	r8, r0
 800c88a:	4689      	mov	r9, r1
 800c88c:	4630      	mov	r0, r6
 800c88e:	4639      	mov	r1, r7
 800c890:	f7f3 feb2 	bl	80005f8 <__aeabi_dmul>
 800c894:	ec41 0b18 	vmov	d8, r0, r1
 800c898:	e76f      	b.n	800c77a <__ieee754_exp+0xca>
 800c89a:	4a41      	ldr	r2, [pc, #260]	; (800c9a0 <__ieee754_exp+0x2f0>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d811      	bhi.n	800c8c4 <__ieee754_exp+0x214>
 800c8a0:	a323      	add	r3, pc, #140	; (adr r3, 800c930 <__ieee754_exp+0x280>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	ee10 0a10 	vmov	r0, s0
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 fcee 	bl	800028c <__adddf3>
 800c8b0:	4b39      	ldr	r3, [pc, #228]	; (800c998 <__ieee754_exp+0x2e8>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f7f4 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800c8b8:	b138      	cbz	r0, 800c8ca <__ieee754_exp+0x21a>
 800c8ba:	4b37      	ldr	r3, [pc, #220]	; (800c998 <__ieee754_exp+0x2e8>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	e710      	b.n	800c6e6 <__ieee754_exp+0x36>
 800c8c4:	f04f 0a00 	mov.w	sl, #0
 800c8c8:	e75f      	b.n	800c78a <__ieee754_exp+0xda>
 800c8ca:	4682      	mov	sl, r0
 800c8cc:	e75d      	b.n	800c78a <__ieee754_exp+0xda>
 800c8ce:	4632      	mov	r2, r6
 800c8d0:	463b      	mov	r3, r7
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c8d8:	f7f3 fcd6 	bl	8000288 <__aeabi_dsub>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	ec51 0b19 	vmov	r0, r1, d9
 800c8e4:	f7f3 ffb2 	bl	800084c <__aeabi_ddiv>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	ec51 0b18 	vmov	r0, r1, d8
 800c8f0:	f7f3 fcca 	bl	8000288 <__aeabi_dsub>
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	f7f3 fcc6 	bl	8000288 <__aeabi_dsub>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	2000      	movs	r0, #0
 800c902:	4925      	ldr	r1, [pc, #148]	; (800c998 <__ieee754_exp+0x2e8>)
 800c904:	f7f3 fcc0 	bl	8000288 <__aeabi_dsub>
 800c908:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c90c:	4592      	cmp	sl, r2
 800c90e:	db02      	blt.n	800c916 <__ieee754_exp+0x266>
 800c910:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c914:	e6e9      	b.n	800c6ea <__ieee754_exp+0x3a>
 800c916:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c91a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c91e:	2200      	movs	r2, #0
 800c920:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c924:	e6f9      	b.n	800c71a <__ieee754_exp+0x6a>
 800c926:	bf00      	nop
 800c928:	fefa39ef 	.word	0xfefa39ef
 800c92c:	40862e42 	.word	0x40862e42
 800c930:	8800759c 	.word	0x8800759c
 800c934:	7e37e43c 	.word	0x7e37e43c
 800c938:	d52d3051 	.word	0xd52d3051
 800c93c:	c0874910 	.word	0xc0874910
 800c940:	72bea4d0 	.word	0x72bea4d0
 800c944:	3e663769 	.word	0x3e663769
 800c948:	c5d26bf1 	.word	0xc5d26bf1
 800c94c:	3ebbbd41 	.word	0x3ebbbd41
 800c950:	af25de2c 	.word	0xaf25de2c
 800c954:	3f11566a 	.word	0x3f11566a
 800c958:	16bebd93 	.word	0x16bebd93
 800c95c:	3f66c16c 	.word	0x3f66c16c
 800c960:	5555553e 	.word	0x5555553e
 800c964:	3fc55555 	.word	0x3fc55555
 800c968:	652b82fe 	.word	0x652b82fe
 800c96c:	3ff71547 	.word	0x3ff71547
 800c970:	fee00000 	.word	0xfee00000
 800c974:	3fe62e42 	.word	0x3fe62e42
 800c978:	35793c76 	.word	0x35793c76
 800c97c:	3dea39ef 	.word	0x3dea39ef
 800c980:	40862e41 	.word	0x40862e41
 800c984:	7fefffff 	.word	0x7fefffff
 800c988:	3fd62e42 	.word	0x3fd62e42
 800c98c:	3ff0a2b1 	.word	0x3ff0a2b1
 800c990:	0800f670 	.word	0x0800f670
 800c994:	0800f680 	.word	0x0800f680
 800c998:	3ff00000 	.word	0x3ff00000
 800c99c:	0800f660 	.word	0x0800f660
 800c9a0:	3e2fffff 	.word	0x3e2fffff

0800c9a4 <__ieee754_logf>:
 800c9a4:	ee10 3a10 	vmov	r3, s0
 800c9a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c9ac:	d106      	bne.n	800c9bc <__ieee754_logf+0x18>
 800c9ae:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800cb44 <__ieee754_logf+0x1a0>
 800c9b2:	eddf 7a65 	vldr	s15, [pc, #404]	; 800cb48 <__ieee754_logf+0x1a4>
 800c9b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c9ba:	4770      	bx	lr
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	da02      	bge.n	800c9c6 <__ieee754_logf+0x22>
 800c9c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c9c4:	e7f5      	b.n	800c9b2 <__ieee754_logf+0xe>
 800c9c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c9ca:	db02      	blt.n	800c9d2 <__ieee754_logf+0x2e>
 800c9cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9d0:	4770      	bx	lr
 800c9d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c9d6:	bfb8      	it	lt
 800c9d8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800cb4c <__ieee754_logf+0x1a8>
 800c9dc:	485c      	ldr	r0, [pc, #368]	; (800cb50 <__ieee754_logf+0x1ac>)
 800c9de:	bfbe      	ittt	lt
 800c9e0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c9e4:	f06f 0118 	mvnlt.w	r1, #24
 800c9e8:	ee17 3a90 	vmovlt	r3, s15
 800c9ec:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800c9f0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c9f4:	4418      	add	r0, r3
 800c9f6:	bfa8      	it	ge
 800c9f8:	2100      	movge	r1, #0
 800c9fa:	3a7f      	subs	r2, #127	; 0x7f
 800c9fc:	440a      	add	r2, r1
 800c9fe:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800ca02:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800ca06:	4319      	orrs	r1, r3
 800ca08:	ee00 1a10 	vmov	s0, r1
 800ca0c:	4951      	ldr	r1, [pc, #324]	; (800cb54 <__ieee754_logf+0x1b0>)
 800ca0e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800ca12:	f103 000f 	add.w	r0, r3, #15
 800ca16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca1a:	4001      	ands	r1, r0
 800ca1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca20:	bb89      	cbnz	r1, 800ca86 <__ieee754_logf+0xe2>
 800ca22:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2a:	d10f      	bne.n	800ca4c <__ieee754_logf+0xa8>
 800ca2c:	2a00      	cmp	r2, #0
 800ca2e:	f000 8085 	beq.w	800cb3c <__ieee754_logf+0x198>
 800ca32:	ee07 2a90 	vmov	s15, r2
 800ca36:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800cb58 <__ieee754_logf+0x1b4>
 800ca3a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cb5c <__ieee754_logf+0x1b8>
 800ca3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca42:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca46:	eea7 0a87 	vfma.f32	s0, s15, s14
 800ca4a:	4770      	bx	lr
 800ca4c:	eddf 6a44 	vldr	s13, [pc, #272]	; 800cb60 <__ieee754_logf+0x1bc>
 800ca50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca54:	eee0 7a66 	vfms.f32	s15, s0, s13
 800ca58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ca5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca60:	b912      	cbnz	r2, 800ca68 <__ieee754_logf+0xc4>
 800ca62:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca66:	4770      	bx	lr
 800ca68:	ee07 2a90 	vmov	s15, r2
 800ca6c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800cb58 <__ieee754_logf+0x1b4>
 800ca70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca74:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ca78:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ca7c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800cb5c <__ieee754_logf+0x1b8>
 800ca80:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800ca84:	4770      	bx	lr
 800ca86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ca8a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ca8e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cb64 <__ieee754_logf+0x1c0>
 800ca92:	eddf 4a35 	vldr	s9, [pc, #212]	; 800cb68 <__ieee754_logf+0x1c4>
 800ca96:	4935      	ldr	r1, [pc, #212]	; (800cb6c <__ieee754_logf+0x1c8>)
 800ca98:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800ca9c:	4419      	add	r1, r3
 800ca9e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800caa2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800caa6:	430b      	orrs	r3, r1
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	ee07 2a90 	vmov	s15, r2
 800caae:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cab2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cab6:	ee25 7a05 	vmul.f32	s14, s10, s10
 800caba:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800cb70 <__ieee754_logf+0x1cc>
 800cabe:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cac2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800cb74 <__ieee754_logf+0x1d0>
 800cac6:	eee7 5a87 	vfma.f32	s11, s15, s14
 800caca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cb78 <__ieee754_logf+0x1d4>
 800cace:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cad2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800cb7c <__ieee754_logf+0x1d8>
 800cad6:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cada:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cb80 <__ieee754_logf+0x1dc>
 800cade:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cae2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cae6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800caea:	dd1c      	ble.n	800cb26 <__ieee754_logf+0x182>
 800caec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800caf0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800caf4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800caf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cafc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cb00:	b922      	cbnz	r2, 800cb0c <__ieee754_logf+0x168>
 800cb02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb0a:	4770      	bx	lr
 800cb0c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800cb58 <__ieee754_logf+0x1b4>
 800cb10:	eee6 7a86 	vfma.f32	s15, s13, s12
 800cb14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cb1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cb5c <__ieee754_logf+0x1b8>
 800cb20:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800cb24:	4770      	bx	lr
 800cb26:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cb2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cb2e:	2a00      	cmp	r2, #0
 800cb30:	d0e9      	beq.n	800cb06 <__ieee754_logf+0x162>
 800cb32:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800cb58 <__ieee754_logf+0x1b4>
 800cb36:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cb3a:	e7ed      	b.n	800cb18 <__ieee754_logf+0x174>
 800cb3c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800cb48 <__ieee754_logf+0x1a4>
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	cc000000 	.word	0xcc000000
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	4c000000 	.word	0x4c000000
 800cb50:	004afb20 	.word	0x004afb20
 800cb54:	007ffff0 	.word	0x007ffff0
 800cb58:	3717f7d1 	.word	0x3717f7d1
 800cb5c:	3f317180 	.word	0x3f317180
 800cb60:	3eaaaaab 	.word	0x3eaaaaab
 800cb64:	3e1cd04f 	.word	0x3e1cd04f
 800cb68:	3e178897 	.word	0x3e178897
 800cb6c:	ffcf5c30 	.word	0xffcf5c30
 800cb70:	3e638e29 	.word	0x3e638e29
 800cb74:	3ecccccd 	.word	0x3ecccccd
 800cb78:	3e3a3325 	.word	0x3e3a3325
 800cb7c:	3e924925 	.word	0x3e924925
 800cb80:	3f2aaaab 	.word	0x3f2aaaab

0800cb84 <finite>:
 800cb84:	b082      	sub	sp, #8
 800cb86:	ed8d 0b00 	vstr	d0, [sp]
 800cb8a:	9801      	ldr	r0, [sp, #4]
 800cb8c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cb90:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb94:	0fc0      	lsrs	r0, r0, #31
 800cb96:	b002      	add	sp, #8
 800cb98:	4770      	bx	lr
	...

0800cb9c <_init>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	bf00      	nop
 800cba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba2:	bc08      	pop	{r3}
 800cba4:	469e      	mov	lr, r3
 800cba6:	4770      	bx	lr

0800cba8 <_fini>:
 800cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbaa:	bf00      	nop
 800cbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbae:	bc08      	pop	{r3}
 800cbb0:	469e      	mov	lr, r3
 800cbb2:	4770      	bx	lr


discovery-stm32f407vg-shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a4  0800c260  0800c260  0001c260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da04  0800da04  00020318  2**0
                  CONTENTS
  4 .ARM          00000008  0800da04  0800da04  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da0c  0800da0c  00020318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da0c  0800da0c  0001da0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0800da14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df8  20000318  0800dd2c  00020318  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001110  0800dd2c  00021110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022fb9  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004423  00000000  00000000  00043301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00047728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  000491c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026970  00000000  00000000  0004aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201c7  00000000  00000000  00071450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0d4c  00000000  00000000  00091617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085e4  00000000  00000000  001723b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000318 	.word	0x20000318
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c248 	.word	0x0800c248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000031c 	.word	0x2000031c
 80001cc:	0800c248 	.word	0x0800c248

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <MX_ADC1_Init+0x178>)
 8001000:	4a59      	ldr	r2, [pc, #356]	; (8001168 <MX_ADC1_Init+0x17c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <MX_ADC1_Init+0x178>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b55      	ldr	r3, [pc, #340]	; (8001164 <MX_ADC1_Init+0x178>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <MX_ADC1_Init+0x178>)
 8001014:	2201      	movs	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001018:	4b52      	ldr	r3, [pc, #328]	; (8001164 <MX_ADC1_Init+0x178>)
 800101a:	2201      	movs	r2, #1
 800101c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <MX_ADC1_Init+0x178>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <MX_ADC1_Init+0x178>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <MX_ADC1_Init+0x178>)
 800102e:	4a4f      	ldr	r2, [pc, #316]	; (800116c <MX_ADC1_Init+0x180>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <MX_ADC1_Init+0x178>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <MX_ADC1_Init+0x178>)
 800103a:	2209      	movs	r2, #9
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <MX_ADC1_Init+0x178>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_ADC1_Init+0x178>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104c:	4845      	ldr	r0, [pc, #276]	; (8001164 <MX_ADC1_Init+0x178>)
 800104e:	f001 fbbf 	bl	80027d0 <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 fe78 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001064:	2303      	movs	r3, #3
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	483d      	ldr	r0, [pc, #244]	; (8001164 <MX_ADC1_Init+0x178>)
 800106e:	f001 fd17 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 fe68 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800107c:	2301      	movs	r3, #1
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4836      	ldr	r0, [pc, #216]	; (8001164 <MX_ADC1_Init+0x178>)
 800108a:	f001 fd09 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001094:	f000 fe5a 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001098:	2302      	movs	r3, #2
 800109a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800109c:	2303      	movs	r3, #3
 800109e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	482f      	ldr	r0, [pc, #188]	; (8001164 <MX_ADC1_Init+0x178>)
 80010a6:	f001 fcfb 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010b0:	f000 fe4c 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b4:	2303      	movs	r3, #3
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <MX_ADC1_Init+0x178>)
 80010c2:	f001 fced 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010cc:	f000 fe3e 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010d4:	2305      	movs	r3, #5
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4821      	ldr	r0, [pc, #132]	; (8001164 <MX_ADC1_Init+0x178>)
 80010de:	f001 fcdf 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010e8:	f000 fe30 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010ec:	2305      	movs	r3, #5
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80010f0:	2306      	movs	r3, #6
 80010f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	481a      	ldr	r0, [pc, #104]	; (8001164 <MX_ADC1_Init+0x178>)
 80010fa:	f001 fcd1 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001104:	f000 fe22 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001108:	2306      	movs	r3, #6
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800110c:	2307      	movs	r3, #7
 800110e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_ADC1_Init+0x178>)
 8001116:	f001 fcc3 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001120:	f000 fe14 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001124:	2307      	movs	r3, #7
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_ADC1_Init+0x178>)
 8001132:	f001 fcb5 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800113c:	f000 fe06 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001140:	2311      	movs	r3, #17
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001144:	2309      	movs	r3, #9
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC1_Init+0x178>)
 800114e:	f001 fca7 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001158:	f000 fdf8 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000370 	.word	0x20000370
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_ADC_MspInit+0xdc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d158      	bne.n	8001244 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_ADC_MspInit+0xe0>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_ADC_MspInit+0xe0>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_ADC_MspInit+0xe0>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_MspInit+0xe0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_ADC_MspInit+0xe0>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_ADC_MspInit+0xe0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011ca:	23ff      	movs	r3, #255	; 0xff
 80011cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <HAL_ADC_MspInit+0xe4>)
 80011de:	f002 fb81 	bl	80038e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_ADC_MspInit+0xec>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001200:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 8001204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001208:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 800120c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001210:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 800121c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001220:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 800122a:	f001 ffeb 	bl	8003204 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001234:	f000 fd8a 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012000 	.word	0x40012000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	200003b8 	.word	0x200003b8
 800125c:	40026410 	.word	0x40026410

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_DMA_Init+0x5c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <MX_DMA_Init+0x5c>)
 8001270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_DMA_Init+0x5c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2038      	movs	r0, #56	; 0x38
 8001288:	f001 ff85 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800128c:	2038      	movs	r0, #56	; 0x38
 800128e:	f001 ff9e 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2044      	movs	r0, #68	; 0x44
 8001298:	f001 ff7d 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800129c:	2044      	movs	r0, #68	; 0x44
 800129e:	f001 ff96 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2046      	movs	r0, #70	; 0x46
 80012a8:	f001 ff75 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012ac:	2046      	movs	r0, #70	; 0x46
 80012ae:	f001 ff8e 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <MX_GPIO_Init+0x188>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a5a      	ldr	r2, [pc, #360]	; (8001448 <MX_GPIO_Init+0x188>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b58      	ldr	r3, [pc, #352]	; (8001448 <MX_GPIO_Init+0x188>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	4b54      	ldr	r3, [pc, #336]	; (8001448 <MX_GPIO_Init+0x188>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a53      	ldr	r2, [pc, #332]	; (8001448 <MX_GPIO_Init+0x188>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <MX_GPIO_Init+0x188>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <MX_GPIO_Init+0x188>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <MX_GPIO_Init+0x188>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <MX_GPIO_Init+0x188>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b46      	ldr	r3, [pc, #280]	; (8001448 <MX_GPIO_Init+0x188>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a45      	ldr	r2, [pc, #276]	; (8001448 <MX_GPIO_Init+0x188>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b43      	ldr	r3, [pc, #268]	; (8001448 <MX_GPIO_Init+0x188>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <MX_GPIO_Init+0x188>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <MX_GPIO_Init+0x188>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <MX_GPIO_Init+0x188>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <MX_GPIO_Init+0x188>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a37      	ldr	r2, [pc, #220]	; (8001448 <MX_GPIO_Init+0x188>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <MX_GPIO_Init+0x188>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001384:	4831      	ldr	r0, [pc, #196]	; (800144c <MX_GPIO_Init+0x18c>)
 8001386:	f002 fc49 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001390:	482f      	ldr	r0, [pc, #188]	; (8001450 <MX_GPIO_Init+0x190>)
 8001392:	f002 fc43 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001396:	2200      	movs	r2, #0
 8001398:	218f      	movs	r1, #143	; 0x8f
 800139a:	482e      	ldr	r0, [pc, #184]	; (8001454 <MX_GPIO_Init+0x194>)
 800139c:	f002 fc3e 	bl	8003c1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 80013a0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4824      	ldr	r0, [pc, #144]	; (800144c <MX_GPIO_Init+0x18c>)
 80013ba:	f002 fa93 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_GPIO_Init+0x198>)
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4822      	ldr	r0, [pc, #136]	; (800145c <MX_GPIO_Init+0x19c>)
 80013d4:	f002 fa86 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	; (8001450 <MX_GPIO_Init+0x190>)
 80013f2:	f002 fa77 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013f6:	230f      	movs	r3, #15
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_GPIO_Init+0x194>)
 800140e:	f002 fa69 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <MX_GPIO_Init+0x194>)
 800142a:	f002 fa5b 	bl	80038e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2028      	movs	r0, #40	; 0x28
 8001434:	f001 feaf 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001438:	2028      	movs	r0, #40	; 0x28
 800143a:	f001 fec8 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40020800 	.word	0x40020800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020c00 	.word	0x40020c00
 8001458:	10110000 	.word	0x10110000
 800145c:	40021000 	.word	0x40021000

08001460 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_I2C2_Init+0x50>)
 8001466:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <MX_I2C2_Init+0x54>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_I2C2_Init+0x50>)
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MX_I2C2_Init+0x58>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_I2C2_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_I2C2_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_I2C2_Init+0x50>)
 800147e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001482:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_I2C2_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_I2C2_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <MX_I2C2_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_I2C2_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_I2C2_Init+0x50>)
 800149e:	f002 fbef 	bl	8003c80 <HAL_I2C_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 fc50 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000418 	.word	0x20000418
 80014b4:	40005800 	.word	0x40005800
 80014b8:	000186a0 	.word	0x000186a0

080014bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_I2C_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12c      	bne.n	8001538 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001504:	2301      	movs	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800150c:	2304      	movs	r3, #4
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	480c      	ldr	r0, [pc, #48]	; (8001548 <HAL_I2C_MspInit+0x8c>)
 8001518:	f002 f9e4 	bl	80038e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_I2C_MspInit+0x88>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_I2C_MspInit+0x88>)
 8001526:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_I2C_MspInit+0x88>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005800 	.word	0x40005800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001550:	f001 f8a8 	bl	80026a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001554:	f000 f884 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001558:	f7ff feb2 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800155c:	f7ff fe80 	bl	8001260 <MX_DMA_Init>
  MX_ADC1_Init();
 8001560:	f7ff fd44 	bl	8000fec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001564:	f000 ff9e 	bl	80024a4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001568:	f7ff ff7a 	bl	8001460 <MX_I2C2_Init>
  MX_SPI3_Init();
 800156c:	f000 fd12 	bl	8001f94 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001570:	f000 fef2 	bl	8002358 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

/* -------------------------------------------------------------------------------- */
/* -- TIMERS START -- */
/* -------------------------------------------------------------------------------- */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001574:	213c      	movs	r1, #60	; 0x3c
 8001576:	482d      	ldr	r0, [pc, #180]	; (800162c <main+0xe0>)
 8001578:	f003 fc70 	bl	8004e5c <HAL_TIM_Encoder_Start>
 // HAL_TIM_Base_Start_IT(&htim10);

/* -------------------------------------------------------------------------------- */
/* -- USART Rx DMA START -- */
/* -------------------------------------------------------------------------------- */
  HAL_UART_Receive_DMA(&huart1, Received, 13);
 800157c:	220d      	movs	r2, #13
 800157e:	492c      	ldr	r1, [pc, #176]	; (8001630 <main+0xe4>)
 8001580:	482c      	ldr	r0, [pc, #176]	; (8001634 <main+0xe8>)
 8001582:	f004 f843 	bl	800560c <HAL_UART_Receive_DMA>

/* -------------------------------------------------------------------------------- */
/* -- CREATE ENCODER -- */
/* -------------------------------------------------------------------------------- */
  encoder_struct_init(&encoder_1, &htim1);
 8001586:	4929      	ldr	r1, [pc, #164]	; (800162c <main+0xe0>)
 8001588:	482b      	ldr	r0, [pc, #172]	; (8001638 <main+0xec>)
 800158a:	f004 ff5d 	bl	8006448 <encoder_struct_init>

/* -------------------------------------------------------------------------------- */
/* -- LCD ST7735 SCREEN INIT -- */
/* -------------------------------------------------------------------------------- */
  ST7735_Init(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f004 fcec 	bl	8005f6c <ST7735_Init>

/* -------------------------------------------------------------------------------- */
/* -- MENU INIT -- */
/* -------------------------------------------------------------------------------- */
  GUI_init();
 8001594:	f005 fa68 	bl	8006a68 <GUI_init>
  Menu_Show();
 8001598:	f005 f884 	bl	80066a4 <Menu_Show>

/* -------------------------------------------------------------------------------- */
/* -- ADC1 START 9 channels -- */
/* -------------------------------------------------------------------------------- */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1read, 9);   // frequency > 10kHz( 0.1 ms/100us )
 800159c:	2209      	movs	r2, #9
 800159e:	4927      	ldr	r1, [pc, #156]	; (800163c <main+0xf0>)
 80015a0:	4827      	ldr	r0, [pc, #156]	; (8001640 <main+0xf4>)
 80015a2:	f001 f959 	bl	8002858 <HAL_ADC_Start_DMA>


/* -------------------------------------------------------------------------------- */
/* -- Initialise channels (enable & max values for ph and th) -- */
/* -------------------------------------------------------------------------------- */
HAL_Delay(500);
 80015a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015aa:	f001 f8ed 	bl	8002788 <HAL_Delay>
DAQ_channel_init( 500.0, 25, DAQ_CH1);
 80015ae:	2000      	movs	r0, #0
 80015b0:	eef3 0a09 	vmov.f32	s1, #57	; 0x41c80000  25.0
 80015b4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001644 <main+0xf8>
 80015b8:	f005 fa74 	bl	8006aa4 <DAQ_channel_init>
DAQ_channel_init( 200.0, 107.8, DAQ_CH2);
 80015bc:	2001      	movs	r0, #1
 80015be:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001648 <main+0xfc>
 80015c2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800164c <main+0x100>
 80015c6:	f005 fa6d 	bl	8006aa4 <DAQ_channel_init>
DAQ_channel_init( 300.0, 107.8, DAQ_CH3);
 80015ca:	2002      	movs	r0, #2
 80015cc:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001648 <main+0xfc>
 80015d0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001650 <main+0x104>
 80015d4:	f005 fa66 	bl	8006aa4 <DAQ_channel_init>
DAQ_channel_init( 400.0, 107.8, DAQ_CH4);
 80015d8:	2003      	movs	r0, #3
 80015da:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001648 <main+0xfc>
 80015de:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001654 <main+0x108>
 80015e2:	f005 fa5f 	bl	8006aa4 <DAQ_channel_init>

//To set the maximum values manually:
// thermistor_1.ADC_max_val = 'value from 0 to 4095'
// photodiode_1.ADC_max_val = 'value from 0 to 4095'
 thermistor[0].ADC_max_val = 2500;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <main+0x10c>)
 80015e8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015ec:	601a      	str	r2, [r3, #0]
 photodiode[0].ADC_max_val = 2500;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <main+0x110>)
 80015f0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015f4:	601a      	str	r2, [r3, #0]

 thermistor[1].ADC_max_val = 2500;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <main+0x10c>)
 80015f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015fc:	60da      	str	r2, [r3, #12]
 photodiode[1].ADC_max_val = 2500;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <main+0x110>)
 8001600:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001604:	60da      	str	r2, [r3, #12]

 thermistor[2].ADC_max_val = 2500;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <main+0x10c>)
 8001608:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800160c:	619a      	str	r2, [r3, #24]
 photodiode[2].ADC_max_val = 2500;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <main+0x110>)
 8001610:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001614:	619a      	str	r2, [r3, #24]

 thermistor[3].ADC_max_val = 2500;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <main+0x10c>)
 8001618:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
 photodiode[3].ADC_max_val = 2500;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <main+0x110>)
 8001620:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	menu_encoder_event();
 8001626:	f000 f885 	bl	8001734 <menu_encoder_event>
 800162a:	e7fc      	b.n	8001626 <main+0xda>
 800162c:	20000fb0 	.word	0x20000fb0
 8001630:	200004cc 	.word	0x200004cc
 8001634:	200010b8 	.word	0x200010b8
 8001638:	20000ab8 	.word	0x20000ab8
 800163c:	2000034c 	.word	0x2000034c
 8001640:	20000370 	.word	0x20000370
 8001644:	43fa0000 	.word	0x43fa0000
 8001648:	42d7999a 	.word	0x42d7999a
 800164c:	43480000 	.word	0x43480000
 8001650:	43960000 	.word	0x43960000
 8001654:	43c80000 	.word	0x43c80000
 8001658:	20000de8 	.word	0x20000de8
 800165c:	20000ac8 	.word	0x20000ac8

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	; 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	; 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f006 f89e 	bl	80077b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <SystemClock_Config+0xcc>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <SystemClock_Config+0xcc>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	; 0x40
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <SystemClock_Config+0xd0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <SystemClock_Config+0xd0>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c4:	2310      	movs	r3, #16
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d4:	23a8      	movs	r3, #168	; 0xa8
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fc0f 	bl	8003f08 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f0:	f000 fb2c 	bl	8001d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2105      	movs	r1, #5
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fe70 	bl	80043f8 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800171e:	f000 fb15 	bl	8001d4c <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <menu_encoder_event>:

/* USER CODE BEGIN 4 */
void menu_encoder_event(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

	  if( encoder_step_clockwise(&encoder_1) == true) {
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <menu_encoder_event+0x38>)
 800173a:	f004 ff31 	bl	80065a0 <encoder_step_clockwise>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <menu_encoder_event+0x14>
		Menu_SelectNext();
 8001744:	f005 f88a 	bl	800685c <Menu_SelectNext>

	  }
	  if(encoder_step_counterclockwise(&encoder_1) == true) {
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <menu_encoder_event+0x38>)
 800174a:	f004 ff3e 	bl	80065ca <encoder_step_counterclockwise>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <menu_encoder_event+0x24>
		Menu_SelectPrev();
 8001754:	f005 f8f0 	bl	8006938 <Menu_SelectPrev>
	  }
	  if(encoder_enter(&encoder_1) == true) {
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <menu_encoder_event+0x38>)
 800175a:	f004 ff4b 	bl	80065f4 <encoder_enter>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <menu_encoder_event+0x34>
	  		Menu_Click();
 8001764:	f005 f94e 	bl	8006a04 <Menu_Click>
	  }
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000ab8 	.word	0x20000ab8

08001770 <display_values>:

void display_values(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b09e      	sub	sp, #120	; 0x78
 8001774:	af04      	add	r7, sp, #16

		uint8_t text[8][12];

		for (int i = 0; i<4; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	667b      	str	r3, [r7, #100]	; 0x64
 800177a:	e0bb      	b.n	80018f4 <display_values+0x184>
			sprintf(text[i], "|T%d>%d  ", i, ADC1read[i]);
 800177c:	1d39      	adds	r1, r7, #4
 800177e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	18c8      	adds	r0, r1, r3
 800178a:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <display_values+0x198>)
 800178c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001794:	495d      	ldr	r1, [pc, #372]	; (800190c <display_values+0x19c>)
 8001796:	f006 fe93 	bl	80084c0 <siprintf>
			ST7735_WriteString(25, 0+(30*i), text[i], Font_7x10, WHITE, BLACK);
 800179a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	b298      	uxth	r0, r3
 80017a8:	1d39      	adds	r1, r7, #4
 80017aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4419      	add	r1, r3
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <display_values+0x1a0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	9202      	str	r2, [sp, #8]
 80017bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c0:	9201      	str	r2, [sp, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	460a      	mov	r2, r1
 80017ca:	4601      	mov	r1, r0
 80017cc:	2019      	movs	r0, #25
 80017ce:	f004 fd2f 	bl	8006230 <ST7735_WriteString>

			sprintf(text[i], "|L%d<%d  ", i, thermistor[i].ADC_max_val);
 80017d2:	1d39      	adds	r1, r7, #4
 80017d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	18c8      	adds	r0, r1, r3
 80017e0:	494c      	ldr	r1, [pc, #304]	; (8001914 <display_values+0x1a4>)
 80017e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017f2:	4949      	ldr	r1, [pc, #292]	; (8001918 <display_values+0x1a8>)
 80017f4:	f006 fe64 	bl	80084c0 <siprintf>
			ST7735_WriteString(95, 0+(30*i), text[i], Font_7x10, WHITE, BLACK);
 80017f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b298      	uxth	r0, r3
 8001806:	1d39      	adds	r1, r7, #4
 8001808:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4419      	add	r1, r3
 8001814:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <display_values+0x1a0>)
 8001816:	2200      	movs	r2, #0
 8001818:	9202      	str	r2, [sp, #8]
 800181a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181e:	9201      	str	r2, [sp, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	460a      	mov	r2, r1
 8001828:	4601      	mov	r1, r0
 800182a:	205f      	movs	r0, #95	; 0x5f
 800182c:	f004 fd00 	bl	8006230 <ST7735_WriteString>

			sprintf(text[i], "|P%d>%d  ", i, ADC1read[i+4]);
 8001830:	1d39      	adds	r1, r7, #4
 8001832:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	18c8      	adds	r0, r1, r3
 800183e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001840:	3304      	adds	r3, #4
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <display_values+0x198>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800184a:	4934      	ldr	r1, [pc, #208]	; (800191c <display_values+0x1ac>)
 800184c:	f006 fe38 	bl	80084c0 <siprintf>
			ST7735_WriteString(25, 15+(30*i), text[i], Font_7x10, WHITE, BLACK);
 8001850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	b29b      	uxth	r3, r3
 800185e:	330f      	adds	r3, #15
 8001860:	b298      	uxth	r0, r3
 8001862:	1d39      	adds	r1, r7, #4
 8001864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4419      	add	r1, r3
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <display_values+0x1a0>)
 8001872:	2200      	movs	r2, #0
 8001874:	9202      	str	r2, [sp, #8]
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	9201      	str	r2, [sp, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	460a      	mov	r2, r1
 8001884:	4601      	mov	r1, r0
 8001886:	2019      	movs	r0, #25
 8001888:	f004 fcd2 	bl	8006230 <ST7735_WriteString>

			sprintf(text[i], "|L%d<%d  ", i, photodiode[i].ADC_max_val);
 800188c:	1d39      	adds	r1, r7, #4
 800188e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	18c8      	adds	r0, r1, r3
 800189a:	4921      	ldr	r1, [pc, #132]	; (8001920 <display_values+0x1b0>)
 800189c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018ac:	491a      	ldr	r1, [pc, #104]	; (8001918 <display_values+0x1a8>)
 80018ae:	f006 fe07 	bl	80084c0 <siprintf>
			ST7735_WriteString(95, 15+(30*i), text[i], Font_7x10, WHITE, BLACK);
 80018b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	330f      	adds	r3, #15
 80018c2:	b298      	uxth	r0, r3
 80018c4:	1d39      	adds	r1, r7, #4
 80018c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4419      	add	r1, r3
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <display_values+0x1a0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	9202      	str	r2, [sp, #8]
 80018d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	460a      	mov	r2, r1
 80018e6:	4601      	mov	r1, r0
 80018e8:	205f      	movs	r0, #95	; 0x5f
 80018ea:	f004 fca1 	bl	8006230 <ST7735_WriteString>
		for (int i = 0; i<4; i++) {
 80018ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f0:	3301      	adds	r3, #1
 80018f2:	667b      	str	r3, [r7, #100]	; 0x64
 80018f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	f77f af40 	ble.w	800177c <display_values+0xc>
//			sprintf(text[i], "|L%d>%d  ", i, photodiode[i-4].ADC_max_val);
//			ST7735_WriteString(95, 0+(15*i), text[i], Font_7x10, WHITE, BLACK);
//		}


}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3768      	adds	r7, #104	; 0x68
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000034c 	.word	0x2000034c
 800190c:	0800c260 	.word	0x0800c260
 8001910:	2000001c 	.word	0x2000001c
 8001914:	20000de8 	.word	0x20000de8
 8001918:	0800c26c 	.word	0x0800c26c
 800191c:	0800c278 	.word	0x0800c278
 8001920:	20000ac8 	.word	0x20000ac8

08001924 <HAL_UART_RxCpltCallback>:
//	}
//}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	static float result = 0;

	 if(Received[0] == '1' && Received[1] == '0' && Received[2] == '1' && Received[3] == '0' && Received[4] == '1' && Received[5] == '0' && Received[6] == '1')
 800192c:	4bb7      	ldr	r3, [pc, #732]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b31      	cmp	r3, #49	; 0x31
 8001932:	f040 8190 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
 8001936:	4bb5      	ldr	r3, [pc, #724]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	2b30      	cmp	r3, #48	; 0x30
 800193c:	f040 818b 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
 8001940:	4bb2      	ldr	r3, [pc, #712]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001942:	789b      	ldrb	r3, [r3, #2]
 8001944:	2b31      	cmp	r3, #49	; 0x31
 8001946:	f040 8186 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
 800194a:	4bb0      	ldr	r3, [pc, #704]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	2b30      	cmp	r3, #48	; 0x30
 8001950:	f040 8181 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
 8001954:	4bad      	ldr	r3, [pc, #692]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001956:	791b      	ldrb	r3, [r3, #4]
 8001958:	2b31      	cmp	r3, #49	; 0x31
 800195a:	f040 817c 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
 800195e:	4bab      	ldr	r3, [pc, #684]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001960:	795b      	ldrb	r3, [r3, #5]
 8001962:	2b30      	cmp	r3, #48	; 0x30
 8001964:	f040 8177 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
 8001968:	4ba8      	ldr	r3, [pc, #672]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 800196a:	799b      	ldrb	r3, [r3, #6]
 800196c:	2b31      	cmp	r3, #49	; 0x31
 800196e:	f040 8172 	bne.w	8001c56 <HAL_UART_RxCpltCallback+0x332>
	 {

		 switch(Received[7])
 8001972:	4ba6      	ldr	r3, [pc, #664]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001974:	79db      	ldrb	r3, [r3, #7]
 8001976:	3b31      	subs	r3, #49	; 0x31
 8001978:	2b07      	cmp	r3, #7
 800197a:	f200 8162 	bhi.w	8001c42 <HAL_UART_RxCpltCallback+0x31e>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <HAL_UART_RxCpltCallback+0x60>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	080019a5 	.word	0x080019a5
 8001988:	08001a0b 	.word	0x08001a0b
 800198c:	08001a71 	.word	0x08001a71
 8001990:	08001ad7 	.word	0x08001ad7
 8001994:	08001b3d 	.word	0x08001b3d
 8001998:	08001b77 	.word	0x08001b77
 800199c:	08001bb1 	.word	0x08001bb1
 80019a0:	08001beb 	.word	0x08001beb
		 {
		 case '1':

			 for(int i=8; i<13; i++){
 80019a4:	2308      	movs	r3, #8
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e017      	b.n	80019da <HAL_UART_RxCpltCallback+0xb6>
				 result = result * 10 + ( Received[i] - '0' );
 80019aa:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019b8:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3b30      	subs	r3, #48	; 0x30
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ce:	4b90      	ldr	r3, [pc, #576]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
			 for(int i=8; i<13; i++){
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	dde4      	ble.n	80019aa <HAL_UART_RxCpltCallback+0x86>
				 }

			 thermistor[0].temperature_C_max = result/100;
 80019e0:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 80019e2:	ed93 7a00 	vldr	s14, [r3]
 80019e6:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001c14 <HAL_UART_RxCpltCallback+0x2f0>
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f2:	ee17 2a90 	vmov	r2, s15
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_UART_RxCpltCallback+0x2f4>)
 80019f8:	605a      	str	r2, [r3, #4]
			 result = 0;
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

			 flag_eeprom[0] = 1;
 8001a02:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <HAL_UART_RxCpltCallback+0x2f8>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]

		     break;
 8001a08:	e124      	b.n	8001c54 <HAL_UART_RxCpltCallback+0x330>

		 case '2':

			 for(int i=8; i<13; i++){
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e017      	b.n	8001a40 <HAL_UART_RxCpltCallback+0x11c>
				 result = result * 10 + ( Received[i] - '0' );
 8001a10:	4b7f      	ldr	r3, [pc, #508]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a1e:	4a7b      	ldr	r2, [pc, #492]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3b30      	subs	r3, #48	; 0x30
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
			 for(int i=8; i<13; i++){
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	dde4      	ble.n	8001a10 <HAL_UART_RxCpltCallback+0xec>
				 }

			 thermistor[1].temperature_C_max = result/100;
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001c14 <HAL_UART_RxCpltCallback+0x2f0>
 8001a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 2a90 	vmov	r2, s15
 8001a5c:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <HAL_UART_RxCpltCallback+0x2f4>)
 8001a5e:	611a      	str	r2, [r3, #16]
			 result = 0;
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

			 flag_eeprom[1] = 1;
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_UART_RxCpltCallback+0x2f8>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	705a      	strb	r2, [r3, #1]

		     break;
 8001a6e:	e0f1      	b.n	8001c54 <HAL_UART_RxCpltCallback+0x330>

		 case '3':

			 for(int i=8; i<13; i++){
 8001a70:	2308      	movs	r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e017      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x182>
				 result = result * 10 + ( Received[i] - '0' );
 8001a76:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a84:	4a61      	ldr	r2, [pc, #388]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	3b30      	subs	r3, #48	; 0x30
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
			 for(int i=8; i<13; i++){
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	dde4      	ble.n	8001a76 <HAL_UART_RxCpltCallback+0x152>
				 }

			 thermistor[2].temperature_C_max = result/100;
 8001aac:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001c14 <HAL_UART_RxCpltCallback+0x2f0>
 8001ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001abe:	ee17 2a90 	vmov	r2, s15
 8001ac2:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <HAL_UART_RxCpltCallback+0x2f4>)
 8001ac4:	61da      	str	r2, [r3, #28]
			 result = 0;
 8001ac6:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

			 flag_eeprom[2] = 1;
 8001ace:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_UART_RxCpltCallback+0x2f8>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	709a      	strb	r2, [r3, #2]

		     break;
 8001ad4:	e0be      	b.n	8001c54 <HAL_UART_RxCpltCallback+0x330>

		 case '4':

			 for(int i=8; i<13; i++){
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	e017      	b.n	8001b0c <HAL_UART_RxCpltCallback+0x1e8>
				 result = result * 10 + ( Received[i] - '0' );
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aea:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_UART_RxCpltCallback+0x2e8>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	3b30      	subs	r3, #48	; 0x30
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001b02:	edc3 7a00 	vstr	s15, [r3]
			 for(int i=8; i<13; i++){
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	dde4      	ble.n	8001adc <HAL_UART_RxCpltCallback+0x1b8>
				 }

			 thermistor[3].temperature_C_max = result/100;
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001c14 <HAL_UART_RxCpltCallback+0x2f0>
 8001b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b24:	ee17 2a90 	vmov	r2, s15
 8001b28:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_UART_RxCpltCallback+0x2f4>)
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
			 result = 0;
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_UART_RxCpltCallback+0x2ec>)
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

			 flag_eeprom[3] = 1;
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_UART_RxCpltCallback+0x2f8>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	70da      	strb	r2, [r3, #3]

			 break;
 8001b3a:	e08b      	b.n	8001c54 <HAL_UART_RxCpltCallback+0x330>

		 case '5':

			 if(flag_channel[0] == 0)
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_UART_RxCpltCallback+0x238>
			 {
				 flag_channel[0] = 1; //channel open/high
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET); //transistor closed
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	4833      	ldr	r0, [pc, #204]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001b56:	f002 f861 	bl	8003c1c <HAL_GPIO_WritePin>
			 else if(flag_channel[0] == 1)
			 {
				 flag_channel[0] = 0; //channel closed/low
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET);  //transistor open
			 }
			 break;
 8001b5a:	e074      	b.n	8001c46 <HAL_UART_RxCpltCallback+0x322>
			 else if(flag_channel[0] == 1)
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d070      	beq.n	8001c46 <HAL_UART_RxCpltCallback+0x322>
				 flag_channel[0] = 0; //channel closed/low
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET);  //transistor open
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	482d      	ldr	r0, [pc, #180]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001b70:	f002 f854 	bl	8003c1c <HAL_GPIO_WritePin>
			 break;
 8001b74:	e067      	b.n	8001c46 <HAL_UART_RxCpltCallback+0x322>

		 case '6':

			 if(flag_channel[1] == 0)
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_UART_RxCpltCallback+0x272>
			 {
				 flag_channel[1] = 1;
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	705a      	strb	r2, [r3, #1]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4825      	ldr	r0, [pc, #148]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001b90:	f002 f844 	bl	8003c1c <HAL_GPIO_WritePin>
			 else if(flag_channel[1] == 1)
			 {
				 flag_channel[1] = 0;
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_SET);
			 }
			 break;
 8001b94:	e059      	b.n	8001c4a <HAL_UART_RxCpltCallback+0x326>
			 else if(flag_channel[1] == 1)
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d055      	beq.n	8001c4a <HAL_UART_RxCpltCallback+0x326>
				 flag_channel[1] = 0;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	705a      	strb	r2, [r3, #1]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	481e      	ldr	r0, [pc, #120]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001baa:	f002 f837 	bl	8003c1c <HAL_GPIO_WritePin>
			 break;
 8001bae:	e04c      	b.n	8001c4a <HAL_UART_RxCpltCallback+0x326>

		 case '7':

			 if(flag_channel[2] == 0)
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001bb2:	789b      	ldrb	r3, [r3, #2]
 8001bb4:	f083 0301 	eor.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_UART_RxCpltCallback+0x2ac>
			 {
				 flag_channel[2] = 1;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	709a      	strb	r2, [r3, #2]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	4816      	ldr	r0, [pc, #88]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001bca:	f002 f827 	bl	8003c1c <HAL_GPIO_WritePin>
			 else if(flag_channel[2] == 1)
			 {
				 flag_channel[2] = 0;
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
			 }
			 break;
 8001bce:	e03e      	b.n	8001c4e <HAL_UART_RxCpltCallback+0x32a>
			 else if(flag_channel[2] == 1)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001bd2:	789b      	ldrb	r3, [r3, #2]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <HAL_UART_RxCpltCallback+0x32a>
				 flag_channel[2] = 0;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	709a      	strb	r2, [r3, #2]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2104      	movs	r1, #4
 8001be2:	4810      	ldr	r0, [pc, #64]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001be4:	f002 f81a 	bl	8003c1c <HAL_GPIO_WritePin>
			 break;
 8001be8:	e031      	b.n	8001c4e <HAL_UART_RxCpltCallback+0x32a>

		 case '8':

			 if(flag_channel[3] == 0)
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_UART_RxCpltCallback+0x304>
			 {
				 flag_channel[3] = 1;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_UART_RxCpltCallback+0x2fc>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	70da      	strb	r2, [r3, #3]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2108      	movs	r1, #8
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <HAL_UART_RxCpltCallback+0x300>)
 8001c04:	f002 f80a 	bl	8003c1c <HAL_GPIO_WritePin>
			 else if(flag_channel[3] == 1)
			 {
				 flag_channel[3] = 0;
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_SET);
			 }
			 break;
 8001c08:	e023      	b.n	8001c52 <HAL_UART_RxCpltCallback+0x32e>
 8001c0a:	bf00      	nop
 8001c0c:	200004cc 	.word	0x200004cc
 8001c10:	20000334 	.word	0x20000334
 8001c14:	42c80000 	.word	0x42c80000
 8001c18:	20000de8 	.word	0x20000de8
 8001c1c:	20000d7c 	.word	0x20000d7c
 8001c20:	20000824 	.word	0x20000824
 8001c24:	40020c00 	.word	0x40020c00
			 else if(flag_channel[3] == 1)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_UART_RxCpltCallback+0x350>)
 8001c2a:	78db      	ldrb	r3, [r3, #3]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <HAL_UART_RxCpltCallback+0x32e>
				 flag_channel[3] = 0;
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_UART_RxCpltCallback+0x350>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	70da      	strb	r2, [r3, #3]
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_SET);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2108      	movs	r1, #8
 8001c3a:	480f      	ldr	r0, [pc, #60]	; (8001c78 <HAL_UART_RxCpltCallback+0x354>)
 8001c3c:	f001 ffee 	bl	8003c1c <HAL_GPIO_WritePin>
			 break;
 8001c40:	e007      	b.n	8001c52 <HAL_UART_RxCpltCallback+0x32e>

		 default:

		     break;
 8001c42:	bf00      	nop
 8001c44:	e00c      	b.n	8001c60 <HAL_UART_RxCpltCallback+0x33c>
			 break;
 8001c46:	bf00      	nop
 8001c48:	e00a      	b.n	8001c60 <HAL_UART_RxCpltCallback+0x33c>
			 break;
 8001c4a:	bf00      	nop
 8001c4c:	e008      	b.n	8001c60 <HAL_UART_RxCpltCallback+0x33c>
			 break;
 8001c4e:	bf00      	nop
 8001c50:	e006      	b.n	8001c60 <HAL_UART_RxCpltCallback+0x33c>
			 break;
 8001c52:	bf00      	nop
		 switch(Received[7])
 8001c54:	e004      	b.n	8001c60 <HAL_UART_RxCpltCallback+0x33c>
		 }
	 }
	 else
	 {
		 HAL_UART_Transmit_DMA(&huart1, (uint8_t*)error_msg, 12);
 8001c56:	220c      	movs	r2, #12
 8001c58:	4908      	ldr	r1, [pc, #32]	; (8001c7c <HAL_UART_RxCpltCallback+0x358>)
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_UART_RxCpltCallback+0x35c>)
 8001c5c:	f003 fc6a 	bl	8005534 <HAL_UART_Transmit_DMA>
	 }


	 HAL_UART_Receive_DMA(&huart1, Received, 13); // Ponowne włączenie nasłuchiwania
 8001c60:	220d      	movs	r2, #13
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <HAL_UART_RxCpltCallback+0x360>)
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <HAL_UART_RxCpltCallback+0x35c>)
 8001c66:	f003 fcd1 	bl	800560c <HAL_UART_Receive_DMA>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000824 	.word	0x20000824
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	200010b8 	.word	0x200010b8
 8001c84:	200004cc 	.word	0x200004cc

08001c88 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	 if(ADC1read[4] >= photodiode[0].ADC_max_val || ADC1read[0] >= thermistor[0].ADC_max_val)
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_ADC_ConvCpltCallback+0xb4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d205      	bcs.n	8001ca8 <HAL_ADC_ConvCpltCallback+0x20>
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d307      	bcc.n	8001cb8 <HAL_ADC_ConvCpltCallback+0x30>
	 {
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2101      	movs	r1, #1
 8001cac:	4825      	ldr	r0, [pc, #148]	; (8001d44 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001cae:	f001 ffb5 	bl	8003c1c <HAL_GPIO_WritePin>
		 flag_channel[0] = 0;
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]

	 }
	 if(ADC1read[5] >= photodiode[1].ADC_max_val || ADC1read[1] >= thermistor[1].ADC_max_val)
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_ADC_ConvCpltCallback+0xb4>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d205      	bcs.n	8001cd0 <HAL_ADC_ConvCpltCallback+0x48>
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d307      	bcc.n	8001ce0 <HAL_ADC_ConvCpltCallback+0x58>
	 {
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	481b      	ldr	r0, [pc, #108]	; (8001d44 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001cd6:	f001 ffa1 	bl	8003c1c <HAL_GPIO_WritePin>
		 flag_channel[1] = 0;
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	705a      	strb	r2, [r3, #1]

	 }
	 if(ADC1read[6] >= photodiode[2].ADC_max_val || ADC1read[2] >= thermistor[2].ADC_max_val)
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_ADC_ConvCpltCallback+0xb4>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d205      	bcs.n	8001cf8 <HAL_ADC_ConvCpltCallback+0x70>
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d307      	bcc.n	8001d08 <HAL_ADC_ConvCpltCallback+0x80>
	 {
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4811      	ldr	r0, [pc, #68]	; (8001d44 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001cfe:	f001 ff8d 	bl	8003c1c <HAL_GPIO_WritePin>
		 flag_channel[2] = 0;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	709a      	strb	r2, [r3, #2]
	 }
	 if(ADC1read[7] >= photodiode[3].ADC_max_val || ADC1read[3] >= thermistor[3].ADC_max_val)
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_ADC_ConvCpltCallback+0xb4>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d205      	bcs.n	8001d20 <HAL_ADC_ConvCpltCallback+0x98>
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d307      	bcc.n	8001d30 <HAL_ADC_ConvCpltCallback+0xa8>
	 {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	2108      	movs	r1, #8
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001d26:	f001 ff79 	bl	8003c1c <HAL_GPIO_WritePin>
		flag_channel[3] = 0;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	70da      	strb	r2, [r3, #3]
	 }

}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000034c 	.word	0x2000034c
 8001d3c:	20000ac8 	.word	0x20000ac8
 8001d40:	20000de8 	.word	0x20000de8
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	20000824 	.word	0x20000824

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <thermistor_init>:
#include "stm32f4xx_hal.h"
#include "stdbool.h"
#include "math.h"
#include "main.h"

void thermistor_init(struct thermistor *th, float th_temp_C) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	ed87 0a00 	vstr	s0, [r7]
	th->temperature_C_max = (uint32_t) (th_temp_C*100);
 8001d68:	edd7 7a00 	vldr	s15, [r7]
 8001d6c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001d9c <thermistor_init+0x40>
 8001d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d78:	ee17 2a90 	vmov	r2, s15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]
	th->ADC_max_val = ntc3950_Celcius_to_ADC(th_temp_C, ADC1read[8]);
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <thermistor_init+0x44>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4618      	mov	r0, r3
 8001d86:	ed97 0a00 	vldr	s0, [r7]
 8001d8a:	f000 f80d 	bl	8001da8 <ntc3950_Celcius_to_ADC>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	42c80000 	.word	0x42c80000
 8001da0:	2000034c 	.word	0x2000034c
 8001da4:	00000000 	.word	0x00000000

08001da8 <ntc3950_Celcius_to_ADC>:

uint32_t ntc3950_Celcius_to_ADC(float th_temp_C, uint32_t ADC_VREFINT_value) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8001db2:	6038      	str	r0, [r7, #0]

	float vrefint = 0; 	//Reference internal voltage
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
	float vrefext = 0; 	//External voltage calculated based on vrefint
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
	float vmeas = 0; 	//Measured voltage in volts [V]
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
	float Rntc = 0; 	//Resistance of the thermistor
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]

	vrefint = VCAL * (*TEMP30_CAL_ADDR) / ADC_BUF_LEN;
 8001dcc:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <ntc3950_Celcius_to_ADC+0x148>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fba7 	bl	8000524 <__aeabi_i2d>
 8001dd6:	a342      	add	r3, pc, #264	; (adr r3, 8001ee0 <ntc3950_Celcius_to_ADC+0x138>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fc0c 	bl	80005f8 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	a33f      	add	r3, pc, #252	; (adr r3, 8001ee8 <ntc3950_Celcius_to_ADC+0x140>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fd2d 	bl	800084c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fef5 	bl	8000be8 <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	61fb      	str	r3, [r7, #28]
	vrefext = vrefint * ADC_BUF_LEN / ADC_VREFINT_value;
 8001e02:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e06:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ef4 <ntc3950_Celcius_to_ADC+0x14c>
 8001e0a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1c:	edc7 7a06 	vstr	s15, [r7, #24]

	float tmp_value = 0;
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]

	tmp_value = th_temp_C + 273.15f;
 8001e26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001ef8 <ntc3950_Celcius_to_ADC+0x150>
 8001e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e32:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp_value = 1.0f / tmp_value;
 8001e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e42:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp_value -= 1.0f / ((float)_NTC_TEMP_NOMINAL + 273.15f);
 8001e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001efc <ntc3950_Celcius_to_ADC+0x154>
 8001e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e52:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp_value = tmp_value * (float)_NTC_BETA;
 8001e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e5a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f00 <ntc3950_Celcius_to_ADC+0x158>
 8001e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e62:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp_value = expf(tmp_value);
 8001e66:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e6a:	f00a f8cd 	bl	800c008 <expf>
 8001e6e:	ed87 0a03 	vstr	s0, [r7, #12]

	Rntc = (float)tmp_value * (float)_NTC_R_NOMINAL;
 8001e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e76:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f04 <ntc3950_Celcius_to_ADC+0x15c>
 8001e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7e:	edc7 7a04 	vstr	s15, [r7, #16]

	vmeas = ((Rntc * vrefext) / ((float)_NTC_R_NOMINAL))/(1+(Rntc/(float)_NTC_R_NOMINAL));
 8001e82:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001f04 <ntc3950_Celcius_to_ADC+0x15c>
 8001e92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e96:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e9a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001f04 <ntc3950_Celcius_to_ADC+0x15c>
 8001e9e:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8001ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eae:	edc7 7a05 	vstr	s15, [r7, #20]

	tmp_value = (vmeas * ADC_BUF_LEN) / vrefext;
 8001eb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ef4 <ntc3950_Celcius_to_ADC+0x14c>
 8001eba:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ebe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec6:	edc7 7a03 	vstr	s15, [r7, #12]

	return tmp_value;
 8001eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed2:	ee17 3a90 	vmov	r3, s15


}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	66666666 	.word	0x66666666
 8001ee4:	400a6666 	.word	0x400a6666
 8001ee8:	00000000 	.word	0x00000000
 8001eec:	40affe00 	.word	0x40affe00
 8001ef0:	1fff7a2a 	.word	0x1fff7a2a
 8001ef4:	457ff000 	.word	0x457ff000
 8001ef8:	43889333 	.word	0x43889333
 8001efc:	3b5bcf0f 	.word	0x3b5bcf0f
 8001f00:	4576e000 	.word	0x4576e000
 8001f04:	461c4000 	.word	0x461c4000

08001f08 <photodiode_init>:

#include "photodiode.h"
#include "stm32f4xx_hal.h"
#include "stdbool.h"

void photodiode_init(struct photodiode *ph, float ph_power) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	ed87 0a00 	vstr	s0, [r7]
	ph->optical_power_max = (uint32_t)(ph_power*100);
 8001f14:	edd7 7a00 	vldr	s15, [r7]
 8001f18:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001f44 <photodiode_init+0x3c>
 8001f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f24:	ee17 2a90 	vmov	r2, s15
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
	ph->ADC_max_val = photodiode_power_to_ADC(ph_power);
 8001f2c:	ed97 0a00 	vldr	s0, [r7]
 8001f30:	f000 f80a 	bl	8001f48 <photodiode_power_to_ADC>
 8001f34:	4602      	mov	r2, r0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	42c80000 	.word	0x42c80000

08001f48 <photodiode_power_to_ADC>:

uint32_t photodiode_power_to_ADC(float ph_power) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	ed87 0a01 	vstr	s0, [r7, #4]

	uint32_t ADC_value = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
	const float a = 7.84;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <photodiode_power_to_ADC+0x44>)
 8001f58:	613b      	str	r3, [r7, #16]
	const float b = 51.88;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <photodiode_power_to_ADC+0x48>)
 8001f5c:	60fb      	str	r3, [r7, #12]

	ADC_value = (uint32_t) (a * ph_power - b);
 8001f5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f76:	ee17 3a90 	vmov	r3, s15
 8001f7a:	617b      	str	r3, [r7, #20]

	return ADC_value;
 8001f7c:	697b      	ldr	r3, [r7, #20]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40fae148 	.word	0x40fae148
 8001f90:	424f851f 	.word	0x424f851f

08001f94 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001f9a:	4a19      	ldr	r2, [pc, #100]	; (8002000 <MX_SPI3_Init+0x6c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fe2:	220a      	movs	r2, #10
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_SPI3_Init+0x68>)
 8001fe8:	f002 fc02 	bl	80047f0 <HAL_SPI_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001ff2:	f7ff feab 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000f58 	.word	0x20000f58
 8002000:	40003c00 	.word	0x40003c00

08002004 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_SPI_MspInit+0x84>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_SPI_MspInit+0x88>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_SPI_MspInit+0x88>)
 8002030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_SPI_MspInit+0x88>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_SPI_MspInit+0x88>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_SPI_MspInit+0x88>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_SPI_MspInit+0x88>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800205e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002070:	2306      	movs	r3, #6
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 800207c:	f001 fc32 	bl	80038e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40003c00 	.word	0x40003c00
 800208c:	40023800 	.word	0x40023800
 8002090:	40020800 	.word	0x40020800

08002094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_MspInit+0x4c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_MspInit+0x4c>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_MspInit+0x4c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_MspInit+0x4c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_MspInit+0x4c>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_MspInit+0x4c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler+0x4>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <UsageFault_Handler+0x4>

0800210a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f000 fb06 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002146:	f002 ff17 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000fb0 	.word	0x20000fb0

08002154 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002158:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800215c:	f001 fd78 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <DMA2_Stream0_IRQHandler+0x10>)
 800216a:	f001 f951 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200003b8 	.word	0x200003b8

08002178 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <DMA2_Stream5_IRQHandler+0x10>)
 800217e:	f001 f947 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20001058 	.word	0x20001058

0800218c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <DMA2_Stream7_IRQHandler+0x10>)
 8002192:	f001 f93d 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000ff8 	.word	0x20000ff8

080021a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	return 1;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_kill>:

int _kill(int pid, int sig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ba:	f005 facf 	bl	800775c <__errno>
 80021be:	4603      	mov	r3, r0
 80021c0:	2216      	movs	r2, #22
 80021c2:	601a      	str	r2, [r3, #0]
	return -1;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_exit>:

void _exit (int status)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ffe7 	bl	80021b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021e2:	e7fe      	b.n	80021e2 <_exit+0x12>

080021e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e00a      	b.n	800220c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021f6:	f3af 8000 	nop.w
 80021fa:	4601      	mov	r1, r0
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf0      	blt.n	80021f6 <_read+0x12>
	}

return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e009      	b.n	8002244 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf1      	blt.n	8002230 <_write+0x12>
	}
	return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	605a      	str	r2, [r3, #4]
	return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_isatty>:

int _isatty(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f005 fa34 	bl	800775c <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20020000 	.word	0x20020000
 8002320:	00000400 	.word	0x00000400
 8002324:	20000338 	.word	0x20000338
 8002328:	20001110 	.word	0x20001110

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <SystemInit+0x28>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <SystemInit+0x28>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SystemInit+0x28>)
 8002342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002346:	609a      	str	r2, [r3, #8]
#endif
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f005 fa22 	bl	80077b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <MX_TIM1_Init+0xa4>)
 8002376:	4a22      	ldr	r2, [pc, #136]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <MX_TIM1_Init+0xa4>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <MX_TIM1_Init+0xa4>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_TIM1_Init+0xa4>)
 8002388:	2213      	movs	r2, #19
 800238a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <MX_TIM1_Init+0xa4>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MX_TIM1_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <MX_TIM1_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800239e:	2301      	movs	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023a6:	2301      	movs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023b6:	2301      	movs	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4619      	mov	r1, r3
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <MX_TIM1_Init+0xa4>)
 80023ca:	f002 fca1 	bl	8004d10 <HAL_TIM_Encoder_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80023d4:	f7ff fcba 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_TIM1_Init+0xa4>)
 80023e6:	f002 ffc7 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80023f0:	f7ff fcac 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	3730      	adds	r7, #48	; 0x30
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000fb0 	.word	0x20000fb0
 8002400:	40010000 	.word	0x40010000

08002404 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_TIM_Encoder_MspInit+0x94>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d134      	bne.n	8002490 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_TIM_Encoder_MspInit+0x98>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_TIM_Encoder_MspInit+0x98>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_TIM_Encoder_MspInit+0x98>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_TIM_Encoder_MspInit+0x98>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a14      	ldr	r2, [pc, #80]	; (800249c <HAL_TIM_Encoder_MspInit+0x98>)
 800244c:	f043 0310 	orr.w	r3, r3, #16
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_TIM_Encoder_MspInit+0x98>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800245e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002470:	2301      	movs	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x9c>)
 800247c:	f001 fa32 	bl	80038e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2019      	movs	r0, #25
 8002486:	f000 fe86 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800248a:	2019      	movs	r0, #25
 800248c:	f000 fe9f 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002490:	bf00      	nop
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40010000 	.word	0x40010000
 800249c:	40023800 	.word	0x40023800
 80024a0:	40021000 	.word	0x40021000

080024a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_USART1_UART_Init+0x4c>)
 80024dc:	f002 ffdc 	bl	8005498 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024e6:	f7ff fc31 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200010b8 	.word	0x200010b8
 80024f4:	40011000 	.word	0x40011000

080024f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a47      	ldr	r2, [pc, #284]	; (8002634 <HAL_UART_MspInit+0x13c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 8088 	bne.w	800262c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	4b45      	ldr	r3, [pc, #276]	; (8002638 <HAL_UART_MspInit+0x140>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	4a44      	ldr	r2, [pc, #272]	; (8002638 <HAL_UART_MspInit+0x140>)
 8002526:	f043 0310 	orr.w	r3, r3, #16
 800252a:	6453      	str	r3, [r2, #68]	; 0x44
 800252c:	4b42      	ldr	r3, [pc, #264]	; (8002638 <HAL_UART_MspInit+0x140>)
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_UART_MspInit+0x140>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <HAL_UART_MspInit+0x140>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_UART_MspInit+0x140>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002554:	23c0      	movs	r3, #192	; 0xc0
 8002556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002564:	2307      	movs	r3, #7
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	4833      	ldr	r0, [pc, #204]	; (800263c <HAL_UART_MspInit+0x144>)
 8002570:	f001 f9b8 	bl	80038e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_UART_MspInit+0x148>)
 8002576:	4a33      	ldr	r2, [pc, #204]	; (8002644 <HAL_UART_MspInit+0x14c>)
 8002578:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_UART_MspInit+0x148>)
 800257c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002580:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_UART_MspInit+0x148>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_UART_MspInit+0x148>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_UART_MspInit+0x148>)
 8002590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002594:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_UART_MspInit+0x148>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_UART_MspInit+0x148>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_UART_MspInit+0x148>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_UART_MspInit+0x148>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_UART_MspInit+0x148>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025b4:	4822      	ldr	r0, [pc, #136]	; (8002640 <HAL_UART_MspInit+0x148>)
 80025b6:	f000 fe25 	bl	8003204 <HAL_DMA_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80025c0:	f7ff fbc4 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_UART_MspInit+0x148>)
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
 80025ca:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <HAL_UART_MspInit+0x148>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_UART_MspInit+0x154>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025e0:	2240      	movs	r2, #64	; 0x40
 80025e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_UART_MspInit+0x150>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_UART_MspInit+0x150>)
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_UART_MspInit+0x150>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_UART_MspInit+0x150>)
 800260c:	2200      	movs	r2, #0
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <HAL_UART_MspInit+0x150>)
 8002612:	f000 fdf7 	bl	8003204 <HAL_DMA_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800261c:	f7ff fb96 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_UART_MspInit+0x150>)
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_UART_MspInit+0x150>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40011000 	.word	0x40011000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020400 	.word	0x40020400
 8002640:	20001058 	.word	0x20001058
 8002644:	40026488 	.word	0x40026488
 8002648:	20000ff8 	.word	0x20000ff8
 800264c:	400264b8 	.word	0x400264b8

08002650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002654:	480d      	ldr	r0, [pc, #52]	; (800268c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002656:	490e      	ldr	r1, [pc, #56]	; (8002690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800266c:	4c0b      	ldr	r4, [pc, #44]	; (800269c <LoopFillZerobss+0x26>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800267a:	f7ff fe57 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f005 f873 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002682:	f7fe ff63 	bl	800154c <main>
  bx  lr    
 8002686:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 8002694:	0800da14 	.word	0x0800da14
  ldr r2, =_sbss
 8002698:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 800269c:	20001110 	.word	0x20001110

080026a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC_IRQHandler>
	...

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <HAL_Init+0x40>)
 80026ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_Init+0x40>)
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_Init+0x40>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f000 fd57 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f000 f808 	bl	80026e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d8:	f7ff fcdc 	bl	8002094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x54>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x58>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd6f 	bl	80031ea <HAL_SYSTICK_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00e      	b.n	8002734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d80a      	bhi.n	8002732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 fd37 	bl	8003196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_InitTick+0x5c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000010 	.word	0x20000010
 8002740:	20000018 	.word	0x20000018
 8002744:	20000014 	.word	0x20000014

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000018 	.word	0x20000018
 800276c:	200010fc 	.word	0x200010fc

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200010fc 	.word	0x200010fc

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff ffee 	bl	8002770 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffde 	bl	8002770 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000018 	.word	0x20000018

080027d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e033      	b.n	800284e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fcbe 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d118      	bne.n	8002840 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002816:	f023 0302 	bic.w	r3, r3, #2
 800281a:	f043 0202 	orr.w	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa5e 	bl	8002ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
 800283e:	e001      	b.n	8002844 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Start_DMA+0x1e>
 8002872:	2302      	movs	r3, #2
 8002874:	e0e9      	b.n	8002a4a <HAL_ADC_Start_DMA+0x1f2>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d018      	beq.n	80028be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800289c:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_ADC_Start_DMA+0x1fc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6d      	ldr	r2, [pc, #436]	; (8002a58 <HAL_ADC_Start_DMA+0x200>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9a      	lsrs	r2, r3, #18
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028b0:	e002      	b.n	80028b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f9      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028cc:	d107      	bne.n	80028de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 80a1 	bne.w	8002a30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292c:	d106      	bne.n	800293c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f023 0206 	bic.w	r2, r3, #6
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
 800293a:	e002      	b.n	8002942 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294a:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <HAL_ADC_Start_DMA+0x204>)
 800294c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	4a43      	ldr	r2, [pc, #268]	; (8002a60 <HAL_ADC_Start_DMA+0x208>)
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <HAL_ADC_Start_DMA+0x20c>)
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4a41      	ldr	r2, [pc, #260]	; (8002a68 <HAL_ADC_Start_DMA+0x210>)
 8002964:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800296e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800297e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	334c      	adds	r3, #76	; 0x4c
 800299a:	4619      	mov	r1, r3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f000 fcde 	bl	8003360 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d12a      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <HAL_ADC_Start_DMA+0x214>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d015      	beq.n	80029e6 <HAL_ADC_Start_DMA+0x18e>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <HAL_ADC_Start_DMA+0x218>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_Start_DMA+0x178>
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_ADC_Start_DMA+0x204>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <HAL_ADC_Start_DMA+0x21c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d136      	bne.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_ADC_Start_DMA+0x204>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d130      	bne.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d129      	bne.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e020      	b.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_ADC_Start_DMA+0x214>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d11b      	bne.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d114      	bne.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	e00b      	b.n	8002a48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0210 	orr.w	r2, r3, #16
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000010 	.word	0x20000010
 8002a58:	431bde83 	.word	0x431bde83
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	08002edd 	.word	0x08002edd
 8002a64:	08002f97 	.word	0x08002f97
 8002a68:	08002fb3 	.word	0x08002fb3
 8002a6c:	40012000 	.word	0x40012000
 8002a70:	40012100 	.word	0x40012100
 8002a74:	40012200 	.word	0x40012200

08002a78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1c>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e105      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x228>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	d925      	bls.n	8002b18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b1e      	subs	r3, #30
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	400a      	ands	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68d9      	ldr	r1, [r3, #12]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	4603      	mov	r3, r0
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4403      	add	r3, r0
 8002b0a:	3b1e      	subs	r3, #30
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	e022      	b.n	8002b5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	400a      	ands	r2, r1
 8002b3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4403      	add	r3, r0
 8002b54:	409a      	lsls	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d824      	bhi.n	8002bb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	3b05      	subs	r3, #5
 8002b78:	221f      	movs	r2, #31
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	400a      	ands	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b05      	subs	r3, #5
 8002ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34
 8002bae:	e04c      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d824      	bhi.n	8002c02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b23      	subs	r3, #35	; 0x23
 8002bca:	221f      	movs	r2, #31
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b23      	subs	r3, #35	; 0x23
 8002bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8002c00:	e023      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	3b41      	subs	r3, #65	; 0x41
 8002c14:	221f      	movs	r2, #31
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	400a      	ands	r2, r1
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b41      	subs	r3, #65	; 0x41
 8002c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_ADC_ConfigChannel+0x234>)
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <HAL_ADC_ConfigChannel+0x238>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d109      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x1cc>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b12      	cmp	r3, #18
 8002c5e:	d105      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_ADC_ConfigChannel+0x238>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d123      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x21e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d003      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x1e6>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b11      	cmp	r3, #17
 8002c84:	d11b      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d111      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_ADC_ConfigChannel+0x23c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <HAL_ADC_ConfigChannel+0x240>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	0c9a      	lsrs	r2, r3, #18
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40012300 	.word	0x40012300
 8002cd8:	40012000 	.word	0x40012000
 8002cdc:	20000010 	.word	0x20000010
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cec:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <ADC_Init+0x1f0>)
 8002cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <ADC_Init+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e00f      	b.n	8002de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0202 	bic.w	r2, r2, #2
 8002df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	005a      	lsls	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	035a      	lsls	r2, r3, #13
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	e007      	b.n	8002e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	051a      	lsls	r2, r3, #20
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e9a:	025a      	lsls	r2, r3, #9
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	029a      	lsls	r2, r3, #10
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012300 	.word	0x40012300
 8002ed8:	0f000001 	.word	0x0f000001

08002edc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d13c      	bne.n	8002f70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d127      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d119      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0220 	bic.w	r2, r2, #32
 8002f42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7fe fe8d 	bl	8001c88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f6e:	e00e      	b.n	8002f8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fd85 	bl	8002a8c <HAL_ADC_ErrorCallback>
}
 8002f82:	e004      	b.n	8002f8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fd67 	bl	8002a78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fd5a 	bl	8002a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	; (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f7ff ff8e 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff29 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff3e 	bl	8003028 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff8e 	bl	80030d4 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5d 	bl	8003080 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff31 	bl	8003044 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa2 	bl	800313c <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff faae 	bl	8002770 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e099      	b.n	8003354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003240:	e00f      	b.n	8003262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003242:	f7ff fa95 	bl	8002770 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b05      	cmp	r3, #5
 800324e:	d908      	bls.n	8003262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e078      	b.n	8003354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e8      	bne.n	8003242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_DMA_Init+0x158>)
 800327c:	4013      	ands	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4313      	orrs	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0307 	bic.w	r3, r3, #7
 80032e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d117      	bne.n	8003326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fa6f 	bl	80037ec <DMA_CheckFifoParam>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003322:	2301      	movs	r3, #1
 8003324:	e016      	b.n	8003354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa26 	bl	8003780 <DMA_CalcBaseAndBitshift>
 8003334:	4603      	mov	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	223f      	movs	r2, #63	; 0x3f
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	f010803f 	.word	0xf010803f

08003360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_DMA_Start_IT+0x26>
 8003382:	2302      	movs	r3, #2
 8003384:	e040      	b.n	8003408 <HAL_DMA_Start_IT+0xa8>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d12f      	bne.n	80033fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f9b8 	bl	8003724 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	223f      	movs	r2, #63	; 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0216 	orr.w	r2, r2, #22
 80033ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e005      	b.n	8003406 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800341c:	4b92      	ldr	r3, [pc, #584]	; (8003668 <HAL_DMA_IRQHandler+0x258>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a92      	ldr	r2, [pc, #584]	; (800366c <HAL_DMA_IRQHandler+0x25c>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0a9b      	lsrs	r3, r3, #10
 8003428:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	2208      	movs	r2, #8
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01a      	beq.n	800347c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2208      	movs	r2, #8
 800346a:	409a      	lsls	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2201      	movs	r2, #1
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f043 0202 	orr.w	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	2204      	movs	r2, #4
 80034b8:	409a      	lsls	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2204      	movs	r2, #4
 80034d6:	409a      	lsls	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2210      	movs	r2, #16
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d043      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d03c      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	2210      	movs	r2, #16
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d024      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
 800353e:	e01f      	b.n	8003580 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e016      	b.n	8003580 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d107      	bne.n	8003570 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0208 	bic.w	r2, r2, #8
 800356e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2220      	movs	r2, #32
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 808e 	beq.w	80036ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8086 	beq.w	80036ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	2220      	movs	r2, #32
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d136      	bne.n	8003628 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0216 	bic.w	r2, r2, #22
 80035c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <HAL_DMA_IRQHandler+0x1da>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0208 	bic.w	r2, r2, #8
 80035f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	223f      	movs	r2, #63	; 0x3f
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	2b00      	cmp	r3, #0
 800361c:	d07d      	beq.n	800371a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
        }
        return;
 8003626:	e078      	b.n	800371a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01c      	beq.n	8003670 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d108      	bne.n	8003656 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	2b00      	cmp	r3, #0
 800364a:	d030      	beq.n	80036ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
 8003654:	e02b      	b.n	80036ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d027      	beq.n	80036ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
 8003666:	e022      	b.n	80036ae <HAL_DMA_IRQHandler+0x29e>
 8003668:	20000010 	.word	0x20000010
 800366c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0210 	bic.w	r2, r2, #16
 800368c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d032      	beq.n	800371c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2205      	movs	r2, #5
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	3301      	adds	r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d307      	bcc.n	80036f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f2      	bne.n	80036da <HAL_DMA_IRQHandler+0x2ca>
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
 8003718:	e000      	b.n	800371c <HAL_DMA_IRQHandler+0x30c>
        return;
 800371a:	bf00      	nop
    }
  }
}
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop

08003724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003740:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d108      	bne.n	8003764 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003762:	e007      	b.n	8003774 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	3b10      	subs	r3, #16
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800379a:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <DMA_CalcBaseAndBitshift+0x68>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d909      	bls.n	80037c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	659a      	str	r2, [r3, #88]	; 0x58
 80037c0:	e007      	b.n	80037d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	aaaaaaab 	.word	0xaaaaaaab
 80037e8:	0800c354 	.word	0x0800c354

080037ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11f      	bne.n	8003846 <DMA_CheckFifoParam+0x5a>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d856      	bhi.n	80038ba <DMA_CheckFifoParam+0xce>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <DMA_CheckFifoParam+0x28>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003825 	.word	0x08003825
 8003818:	08003837 	.word	0x08003837
 800381c:	08003825 	.word	0x08003825
 8003820:	080038bb 	.word	0x080038bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d046      	beq.n	80038be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e043      	b.n	80038be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800383e:	d140      	bne.n	80038c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e03d      	b.n	80038c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	d121      	bne.n	8003894 <DMA_CheckFifoParam+0xa8>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d837      	bhi.n	80038c6 <DMA_CheckFifoParam+0xda>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <DMA_CheckFifoParam+0x70>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	0800386d 	.word	0x0800386d
 8003860:	08003873 	.word	0x08003873
 8003864:	0800386d 	.word	0x0800386d
 8003868:	08003885 	.word	0x08003885
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e030      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d025      	beq.n	80038ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003882:	e022      	b.n	80038ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388c:	d11f      	bne.n	80038ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003892:	e01c      	b.n	80038ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d903      	bls.n	80038a2 <DMA_CheckFifoParam+0xb6>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d003      	beq.n	80038a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038a0:	e018      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      break;
 80038a6:	e015      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e00b      	b.n	80038d2 <DMA_CheckFifoParam+0xe6>
      break;
 80038ba:	bf00      	nop
 80038bc:	e00a      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e008      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e006      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
    }
  } 
  
  return status; 
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e16b      	b.n	8003bd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003900:	2201      	movs	r2, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	f040 815a 	bne.w	8003bd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d005      	beq.n	8003936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003932:	2b02      	cmp	r3, #2
 8003934:	d130      	bne.n	8003998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2203      	movs	r2, #3
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 0201 	and.w	r2, r3, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d017      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d123      	bne.n	8003a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	220f      	movs	r2, #15
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80b4 	beq.w	8003bd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <HAL_GPIO_Init+0x30c>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a5f      	ldr	r2, [pc, #380]	; (8003bf0 <HAL_GPIO_Init+0x30c>)
 8003a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_GPIO_Init+0x30c>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a86:	4a5b      	ldr	r2, [pc, #364]	; (8003bf4 <HAL_GPIO_Init+0x310>)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_GPIO_Init+0x314>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02b      	beq.n	8003b0a <HAL_GPIO_Init+0x226>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a51      	ldr	r2, [pc, #324]	; (8003bfc <HAL_GPIO_Init+0x318>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d025      	beq.n	8003b06 <HAL_GPIO_Init+0x222>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a50      	ldr	r2, [pc, #320]	; (8003c00 <HAL_GPIO_Init+0x31c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01f      	beq.n	8003b02 <HAL_GPIO_Init+0x21e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4f      	ldr	r2, [pc, #316]	; (8003c04 <HAL_GPIO_Init+0x320>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d019      	beq.n	8003afe <HAL_GPIO_Init+0x21a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <HAL_GPIO_Init+0x324>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_GPIO_Init+0x216>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4d      	ldr	r2, [pc, #308]	; (8003c0c <HAL_GPIO_Init+0x328>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00d      	beq.n	8003af6 <HAL_GPIO_Init+0x212>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <HAL_GPIO_Init+0x32c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <HAL_GPIO_Init+0x20e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <HAL_GPIO_Init+0x330>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_GPIO_Init+0x20a>
 8003aea:	2307      	movs	r3, #7
 8003aec:	e00e      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003aee:	2308      	movs	r3, #8
 8003af0:	e00c      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003af2:	2306      	movs	r3, #6
 8003af4:	e00a      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e008      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e004      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e002      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f002 0203 	and.w	r2, r2, #3
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4093      	lsls	r3, r2
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1c:	4935      	ldr	r1, [pc, #212]	; (8003bf4 <HAL_GPIO_Init+0x310>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b4e:	4a32      	ldr	r2, [pc, #200]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b54:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b78:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	f67f ae90 	bls.w	8003900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	40020800 	.word	0x40020800
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40021800 	.word	0x40021800
 8003c14:	40021c00 	.word	0x40021c00
 8003c18:	40013c00 	.word	0x40013c00

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c38:	e003      	b.n	8003c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	041a      	lsls	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	619a      	str	r2, [r3, #24]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c66:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 fbd6 	bl	8006420 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40013c00 	.word	0x40013c00

08003c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e12b      	b.n	8003eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd fc08 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f000 fd5c 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4a81      	ldr	r2, [pc, #516]	; (8003ef4 <HAL_I2C_Init+0x274>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d807      	bhi.n	8003d04 <HAL_I2C_Init+0x84>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_I2C_Init+0x278>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bf94      	ite	ls
 8003cfc:	2301      	movls	r3, #1
 8003cfe:	2300      	movhi	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e006      	b.n	8003d12 <HAL_I2C_Init+0x92>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a7d      	ldr	r2, [pc, #500]	; (8003efc <HAL_I2C_Init+0x27c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	bf94      	ite	ls
 8003d0c:	2301      	movls	r3, #1
 8003d0e:	2300      	movhi	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0e7      	b.n	8003eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a78      	ldr	r2, [pc, #480]	; (8003f00 <HAL_I2C_Init+0x280>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0c9b      	lsrs	r3, r3, #18
 8003d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a6a      	ldr	r2, [pc, #424]	; (8003ef4 <HAL_I2C_Init+0x274>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d802      	bhi.n	8003d54 <HAL_I2C_Init+0xd4>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3301      	adds	r3, #1
 8003d52:	e009      	b.n	8003d68 <HAL_I2C_Init+0xe8>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	4a69      	ldr	r2, [pc, #420]	; (8003f04 <HAL_I2C_Init+0x284>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	3301      	adds	r3, #1
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	495c      	ldr	r1, [pc, #368]	; (8003ef4 <HAL_I2C_Init+0x274>)
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d819      	bhi.n	8003dbc <HAL_I2C_Init+0x13c>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e59      	subs	r1, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_I2C_Init+0x138>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1e59      	subs	r1, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	e051      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003db8:	2304      	movs	r3, #4
 8003dba:	e04f      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d111      	bne.n	8003de8 <HAL_I2C_Init+0x168>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	440b      	add	r3, r1
 8003dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e012      	b.n	8003e0e <HAL_I2C_Init+0x18e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e58      	subs	r0, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	0099      	lsls	r1, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Init+0x196>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e022      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10e      	bne.n	8003e3c <HAL_I2C_Init+0x1bc>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1e58      	subs	r0, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	440b      	add	r3, r1
 8003e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	e00f      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e58      	subs	r0, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	0099      	lsls	r1, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	6809      	ldr	r1, [r1, #0]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6911      	ldr	r1, [r2, #16]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	000186a0 	.word	0x000186a0
 8003ef8:	001e847f 	.word	0x001e847f
 8003efc:	003d08ff 	.word	0x003d08ff
 8003f00:	431bde83 	.word	0x431bde83
 8003f04:	10624dd3 	.word	0x10624dd3

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e264      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	4ba3      	ldr	r3, [pc, #652]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4ba0      	ldr	r3, [pc, #640]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d112      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b9d      	ldr	r3, [pc, #628]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b99      	ldr	r3, [pc, #612]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e23f      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b91      	ldr	r3, [pc, #580]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a90      	ldr	r2, [pc, #576]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b8b      	ldr	r3, [pc, #556]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a8a      	ldr	r2, [pc, #552]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a87      	ldr	r2, [pc, #540]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b84      	ldr	r3, [pc, #528]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a83      	ldr	r2, [pc, #524]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a80      	ldr	r2, [pc, #512]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fbd6 	bl	8002770 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fe fbd2 	bl	8002770 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e204      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fbc2 	bl	8002770 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fbbe 	bl	8002770 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1f0      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	4b65      	ldr	r3, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b5c      	ldr	r3, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c4      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4952      	ldr	r1, [pc, #328]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <HAL_RCC_OscConfig+0x2b0>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fe fb77 	bl	8002770 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fe fb73 	bl	8002770 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a5      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4940      	ldr	r1, [pc, #256]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <HAL_RCC_OscConfig+0x2b0>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fe fb56 	bl	8002770 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fe fb52 	bl	8002770 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e184      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d030      	beq.n	8004154 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b30      	ldr	r3, [pc, #192]	; (80041bc <HAL_RCC_OscConfig+0x2b4>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fe fb36 	bl	8002770 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004108:	f7fe fb32 	bl	8002770 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e164      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
 8004126:	e015      	b.n	8004154 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b24      	ldr	r3, [pc, #144]	; (80041bc <HAL_RCC_OscConfig+0x2b4>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe fb1f 	bl	8002770 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004136:	f7fe fb1b 	bl	8002770 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e14d      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800414a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a0 	beq.w	80042a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	; 0x40
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x2b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d121      	bne.n	80041e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCC_OscConfig+0x2b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <HAL_RCC_OscConfig+0x2b8>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041aa:	f7fe fae1 	bl	8002770 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	e011      	b.n	80041d6 <HAL_RCC_OscConfig+0x2ce>
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	42470000 	.word	0x42470000
 80041bc:	42470e80 	.word	0x42470e80
 80041c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c4:	f7fe fad4 	bl	8002770 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e106      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b85      	ldr	r3, [pc, #532]	; (80043ec <HAL_RCC_OscConfig+0x4e4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
 80041ea:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4a80      	ldr	r2, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6713      	str	r3, [r2, #112]	; 0x70
 80041f6:	e01c      	b.n	8004232 <HAL_RCC_OscConfig+0x32a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d10c      	bne.n	800421a <HAL_RCC_OscConfig+0x312>
 8004200:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a7a      	ldr	r2, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004206:	f043 0304 	orr.w	r3, r3, #4
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	4b78      	ldr	r3, [pc, #480]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	e00b      	b.n	8004232 <HAL_RCC_OscConfig+0x32a>
 800421a:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a74      	ldr	r2, [pc, #464]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
 8004226:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a71      	ldr	r2, [pc, #452]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 800422c:	f023 0304 	bic.w	r3, r3, #4
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d015      	beq.n	8004266 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fe fa99 	bl	8002770 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fe fa95 	bl	8002770 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0c5      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004258:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ee      	beq.n	8004242 <HAL_RCC_OscConfig+0x33a>
 8004264:	e014      	b.n	8004290 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004266:	f7fe fa83 	bl	8002770 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426c:	e00a      	b.n	8004284 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fe fa7f 	bl	8002770 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	; 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0af      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004284:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ee      	bne.n	800426e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4a55      	ldr	r2, [pc, #340]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 809b 	beq.w	80043e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d05c      	beq.n	8004372 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d141      	bne.n	8004344 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c0:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fe fa53 	bl	8002770 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fe fa4f 	bl	8002770 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e081      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	019b      	lsls	r3, r3, #6
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	3b01      	subs	r3, #1
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	4937      	ldr	r1, [pc, #220]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fa28 	bl	8002770 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe fa24 	bl	8002770 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e056      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x41c>
 8004342:	e04e      	b.n	80043e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fe fa11 	bl	8002770 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe fa0d 	bl	8002770 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e03f      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x44a>
 8004370:	e037      	b.n	80043e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e032      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <HAL_RCC_OscConfig+0x4e8>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d028      	beq.n	80043de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d121      	bne.n	80043de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d11a      	bne.n	80043de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40007000 	.word	0x40007000
 80043f0:	40023800 	.word	0x40023800
 80043f4:	42470060 	.word	0x42470060

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7fe f942 	bl	8002770 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe f93e 	bl	8002770 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490a      	ldr	r1, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f8a2 	bl	80026e8 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	0800c33c 	.word	0x0800c33c
 80045bc:	20000010 	.word	0x20000010
 80045c0:	20000014 	.word	0x20000014

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	2300      	movs	r3, #0
 80045d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x40>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f200 80bd 	bhi.w	8004768 <HAL_RCC_GetSysClockFreq+0x1a4>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x3a>
 80045f6:	e0b7      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045fa:	60bb      	str	r3, [r7, #8]
       break;
 80045fc:	e0b7      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b61      	ldr	r3, [pc, #388]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004600:	60bb      	str	r3, [r7, #8]
      break;
 8004602:	e0b4      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4b5d      	ldr	r3, [pc, #372]	; (800477c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4b5b      	ldr	r3, [pc, #364]	; (800477c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04d      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b58      	ldr	r3, [pc, #352]	; (800477c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	461a      	mov	r2, r3
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	f240 10ff 	movw	r0, #511	; 0x1ff
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	ea02 0800 	and.w	r8, r2, r0
 8004632:	ea03 0901 	and.w	r9, r3, r1
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	014b      	lsls	r3, r1, #5
 8004644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004648:	0142      	lsls	r2, r0, #5
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	ebb0 0008 	subs.w	r0, r0, r8
 8004652:	eb61 0109 	sbc.w	r1, r1, r9
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	018b      	lsls	r3, r1, #6
 8004660:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004664:	0182      	lsls	r2, r0, #6
 8004666:	1a12      	subs	r2, r2, r0
 8004668:	eb63 0301 	sbc.w	r3, r3, r1
 800466c:	f04f 0000 	mov.w	r0, #0
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	00d9      	lsls	r1, r3, #3
 8004676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800467a:	00d0      	lsls	r0, r2, #3
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	eb12 0208 	adds.w	r2, r2, r8
 8004684:	eb43 0309 	adc.w	r3, r3, r9
 8004688:	f04f 0000 	mov.w	r0, #0
 800468c:	f04f 0100 	mov.w	r1, #0
 8004690:	0259      	lsls	r1, r3, #9
 8004692:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004696:	0250      	lsls	r0, r2, #9
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	f7fc faee 	bl	8000c88 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e04a      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	461a      	mov	r2, r3
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046c6:	f04f 0100 	mov.w	r1, #0
 80046ca:	ea02 0400 	and.w	r4, r2, r0
 80046ce:	ea03 0501 	and.w	r5, r3, r1
 80046d2:	4620      	mov	r0, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	014b      	lsls	r3, r1, #5
 80046e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046e4:	0142      	lsls	r2, r0, #5
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	1b00      	subs	r0, r0, r4
 80046ec:	eb61 0105 	sbc.w	r1, r1, r5
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	018b      	lsls	r3, r1, #6
 80046fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046fe:	0182      	lsls	r2, r0, #6
 8004700:	1a12      	subs	r2, r2, r0
 8004702:	eb63 0301 	sbc.w	r3, r3, r1
 8004706:	f04f 0000 	mov.w	r0, #0
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	00d9      	lsls	r1, r3, #3
 8004710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004714:	00d0      	lsls	r0, r2, #3
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	1912      	adds	r2, r2, r4
 800471c:	eb45 0303 	adc.w	r3, r5, r3
 8004720:	f04f 0000 	mov.w	r0, #0
 8004724:	f04f 0100 	mov.w	r1, #0
 8004728:	0299      	lsls	r1, r3, #10
 800472a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800472e:	0290      	lsls	r0, r2, #10
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	461a      	mov	r2, r3
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	f7fc faa2 	bl	8000c88 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	3301      	adds	r3, #1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	60bb      	str	r3, [r7, #8]
      break;
 8004766:	e002      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800476a:	60bb      	str	r3, [r7, #8]
      break;
 800476c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476e:	68bb      	ldr	r3, [r7, #8]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	00f42400 	.word	0x00f42400
 8004784:	007a1200 	.word	0x007a1200

08004788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_RCC_GetHCLKFreq+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20000010 	.word	0x20000010

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a4:	f7ff fff0 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0a9b      	lsrs	r3, r3, #10
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4903      	ldr	r1, [pc, #12]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800c34c 	.word	0x0800c34c

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047cc:	f7ff ffdc 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0b5b      	lsrs	r3, r3, #13
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4903      	ldr	r1, [pc, #12]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800c34c 	.word	0x0800c34c

080047f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07b      	b.n	80048fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d009      	beq.n	8004828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
 800481a:	e005      	b.n	8004828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fbde 	bl	8002004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	ea42 0103 	orr.w	r1, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0104 	and.w	r1, r3, #4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0210 	and.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_SPI_Transmit+0x22>
 8004920:	2302      	movs	r3, #2
 8004922:	e126      	b.n	8004b72 <HAL_SPI_Transmit+0x270>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800492c:	f7fd ff20 	bl	8002770 <HAL_GetTick>
 8004930:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004946:	e10b      	b.n	8004b60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_Transmit+0x52>
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004958:	e102      	b.n	8004b60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2203      	movs	r2, #3
 800495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	d10f      	bne.n	80049c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d007      	beq.n	80049e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e8:	d14b      	bne.n	8004a82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Transmit+0xf6>
 80049f2:	8afb      	ldrh	r3, [r7, #22]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d13e      	bne.n	8004a76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a1c:	e02b      	b.n	8004a76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d112      	bne.n	8004a52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a50:	e011      	b.n	8004a76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a52:	f7fd fe8d 	bl	8002770 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d803      	bhi.n	8004a6a <HAL_SPI_Transmit+0x168>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d102      	bne.n	8004a70 <HAL_SPI_Transmit+0x16e>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a74:	e074      	b.n	8004b60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ce      	bne.n	8004a1e <HAL_SPI_Transmit+0x11c>
 8004a80:	e04c      	b.n	8004b1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_Transmit+0x18e>
 8004a8a:	8afb      	ldrh	r3, [r7, #22]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d140      	bne.n	8004b12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	7812      	ldrb	r2, [r2, #0]
 8004a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ab6:	e02c      	b.n	8004b12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d113      	bne.n	8004aee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	86da      	strh	r2, [r3, #54]	; 0x36
 8004aec:	e011      	b.n	8004b12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aee:	f7fd fe3f 	bl	8002770 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d803      	bhi.n	8004b06 <HAL_SPI_Transmit+0x204>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d102      	bne.n	8004b0c <HAL_SPI_Transmit+0x20a>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b10:	e026      	b.n	8004b60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1cd      	bne.n	8004ab8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f8b3 	bl	8004c8c <SPI_EndRxTxTransaction>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e000      	b.n	8004b60 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b70:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b8c:	f7fd fdf0 	bl	8002770 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b9c:	f7fd fde8 	bl	8002770 <HAL_GetTick>
 8004ba0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ba2:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	015b      	lsls	r3, r3, #5
 8004ba8:	0d1b      	lsrs	r3, r3, #20
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb2:	e054      	b.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d050      	beq.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bbc:	f7fd fdd8 	bl	8002770 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d902      	bls.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d13d      	bne.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bea:	d111      	bne.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf4:	d004      	beq.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfe:	d107      	bne.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c18:	d10f      	bne.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e017      	b.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4013      	ands	r3, r2
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d19b      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000010 	.word	0x20000010

08004c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <SPI_EndRxTxTransaction+0x7c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <SPI_EndRxTxTransaction+0x80>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0d5b      	lsrs	r3, r3, #21
 8004ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb6:	d112      	bne.n	8004cde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff ff5a 	bl	8004b7c <SPI_WaitFlagStateUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d0f2      	beq.n	8004cde <SPI_EndRxTxTransaction+0x52>
 8004cf8:	e000      	b.n	8004cfc <SPI_EndRxTxTransaction+0x70>
        break;
 8004cfa:	bf00      	nop
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000010 	.word	0x20000010
 8004d0c:	165e9f81 	.word	0x165e9f81

08004d10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e097      	b.n	8004e54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fd fb63 	bl	8002404 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d54:	f023 0307 	bic.w	r3, r3, #7
 8004d58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f000 fa41 	bl	80051ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	4313      	orrs	r3, r2
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004db0:	f023 030c 	bic.w	r3, r3, #12
 8004db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	011a      	lsls	r2, r3, #4
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	031b      	lsls	r3, r3, #12
 8004de0:	4313      	orrs	r3, r2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	4313      	orrs	r3, r2
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d110      	bne.n	8004eae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e92:	7b7b      	ldrb	r3, [r7, #13]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e069      	b.n	8004f70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eac:	e031      	b.n	8004f12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d110      	bne.n	8004ed6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb4:	7bbb      	ldrb	r3, [r7, #14]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d102      	bne.n	8004ec0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eba:	7b3b      	ldrb	r3, [r7, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e055      	b.n	8004f70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed4:	e01d      	b.n	8004f12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d108      	bne.n	8004eee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004edc:	7bbb      	ldrb	r3, [r7, #14]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee2:	7b7b      	ldrb	r3, [r7, #13]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d102      	bne.n	8004eee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ee8:	7b3b      	ldrb	r3, [r7, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e03e      	b.n	8004f70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_TIM_Encoder_Start+0xc4>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d008      	beq.n	8004f30 <HAL_TIM_Encoder_Start+0xd4>
 8004f1e:	e00f      	b.n	8004f40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f9ff 	bl	800532c <TIM_CCxChannelCmd>
      break;
 8004f2e:	e016      	b.n	8004f5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2201      	movs	r2, #1
 8004f36:	2104      	movs	r1, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f9f7 	bl	800532c <TIM_CCxChannelCmd>
      break;
 8004f3e:	e00e      	b.n	8004f5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 f9ef 	bl	800532c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	2104      	movs	r1, #4
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f9e8 	bl	800532c <TIM_CCxChannelCmd>
      break;
 8004f5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8f8 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8ea 	bl	800519c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8fb 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0204 	mvn.w	r2, #4
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8ce 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8c0 	bl	800519c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8d1 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8a4 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f896 	bl	800519c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8a7 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f87a 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f86c 	bl	800519c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f87d 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f846 	bl	8005188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f9ae 	bl	8005484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f842 	bl	80051d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f978 	bl	8005470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a40      	ldr	r2, [pc, #256]	; (8005300 <TIM_Base_SetConfig+0x114>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d00f      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3d      	ldr	r2, [pc, #244]	; (8005304 <TIM_Base_SetConfig+0x118>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a3c      	ldr	r2, [pc, #240]	; (8005308 <TIM_Base_SetConfig+0x11c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a3b      	ldr	r2, [pc, #236]	; (800530c <TIM_Base_SetConfig+0x120>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3a      	ldr	r2, [pc, #232]	; (8005310 <TIM_Base_SetConfig+0x124>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d108      	bne.n	800523e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2f      	ldr	r2, [pc, #188]	; (8005300 <TIM_Base_SetConfig+0x114>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02b      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d027      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <TIM_Base_SetConfig+0x118>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d023      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <TIM_Base_SetConfig+0x11c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01f      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2a      	ldr	r2, [pc, #168]	; (800530c <TIM_Base_SetConfig+0x120>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01b      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <TIM_Base_SetConfig+0x124>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d017      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a28      	ldr	r2, [pc, #160]	; (8005314 <TIM_Base_SetConfig+0x128>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <TIM_Base_SetConfig+0x12c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00f      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a26      	ldr	r2, [pc, #152]	; (800531c <TIM_Base_SetConfig+0x130>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00b      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a25      	ldr	r2, [pc, #148]	; (8005320 <TIM_Base_SetConfig+0x134>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a24      	ldr	r2, [pc, #144]	; (8005324 <TIM_Base_SetConfig+0x138>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a23      	ldr	r2, [pc, #140]	; (8005328 <TIM_Base_SetConfig+0x13c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d108      	bne.n	80052b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <TIM_Base_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0xf8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a0c      	ldr	r2, [pc, #48]	; (8005310 <TIM_Base_SetConfig+0x124>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d103      	bne.n	80052ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	615a      	str	r2, [r3, #20]
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40010400 	.word	0x40010400
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800
 8005320:	40001800 	.word	0x40001800
 8005324:	40001c00 	.word	0x40001c00
 8005328:	40002000 	.word	0x40002000

0800532c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2201      	movs	r2, #1
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	fa01 f303 	lsl.w	r3, r1, r3
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e05a      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d01d      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a15      	ldr	r2, [pc, #84]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40001800 	.word	0x40001800

08005470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e03f      	b.n	800552a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fd f81a 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2224      	movs	r2, #36	; 0x24
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa89 	bl	80059f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695a      	ldr	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b20      	cmp	r3, #32
 800554c:	d153      	bne.n	80055f6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_UART_Transmit_DMA+0x26>
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e04c      	b.n	80055f8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_UART_Transmit_DMA+0x38>
 8005568:	2302      	movs	r3, #2
 800556a:	e045      	b.n	80055f8 <HAL_UART_Transmit_DMA+0xc4>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2221      	movs	r2, #33	; 0x21
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005598:	4a19      	ldr	r2, [pc, #100]	; (8005600 <HAL_UART_Transmit_DMA+0xcc>)
 800559a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_UART_Transmit_DMA+0xd0>)
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	4a17      	ldr	r2, [pc, #92]	; (8005608 <HAL_UART_Transmit_DMA+0xd4>)
 80055aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	2200      	movs	r2, #0
 80055b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6819      	ldr	r1, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3304      	adds	r3, #4
 80055c8:	461a      	mov	r2, r3
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	f7fd fec8 	bl	8003360 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055f0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e000      	b.n	80055f8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80055f6:	2302      	movs	r3, #2
  }
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	080056d5 	.word	0x080056d5
 8005604:	08005727 	.word	0x08005727
 8005608:	0800580f 	.word	0x0800580f

0800560c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	d11d      	bne.n	8005662 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_UART_Receive_DMA+0x26>
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e016      	b.n	8005664 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_UART_Receive_DMA+0x38>
 8005640:	2302      	movs	r3, #2
 8005642:	e00f      	b.n	8005664 <HAL_UART_Receive_DMA+0x58>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	461a      	mov	r2, r3
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f923 	bl	80058a4 <UART_Start_Receive_DMA>
 800565e:	4603      	mov	r3, r0
 8005660:	e000      	b.n	8005664 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005662:	2302      	movs	r3, #2
  }
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d113      	bne.n	8005718 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005704:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005714:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005716:	e002      	b.n	800571e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff ffa7 	bl	800566c <HAL_UART_TxCpltCallback>
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ffa3 	bl	8005680 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d12a      	bne.n	80057b4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005772:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005792:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0210 	bic.w	r2, r2, #16
 80057b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c0:	4619      	mov	r1, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff ff7a 	bl	80056bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057c8:	e002      	b.n	80057d0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7fc f8aa 	bl	8001924 <HAL_UART_RxCpltCallback>
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d108      	bne.n	8005800 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4619      	mov	r1, r3
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff ff5f 	bl	80056bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057fe:	e002      	b.n	8005806 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff47 	bl	8005694 <HAL_UART_RxHalfCpltCallback>
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b21      	cmp	r3, #33	; 0x21
 8005840:	d108      	bne.n	8005854 <UART_DMAError+0x46>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800584e:	68b8      	ldr	r0, [r7, #8]
 8005850:	f000 f88c 	bl	800596c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	bf0c      	ite	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	2300      	movne	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b22      	cmp	r3, #34	; 0x22
 8005874:	d108      	bne.n	8005888 <UART_DMAError+0x7a>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005882:	68b8      	ldr	r0, [r7, #8]
 8005884:	f000 f888 	bl	8005998 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f043 0210 	orr.w	r2, r3, #16
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f7ff ff07 	bl	80056a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2222      	movs	r2, #34	; 0x22
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	4a23      	ldr	r2, [pc, #140]	; (8005960 <UART_Start_Receive_DMA+0xbc>)
 80058d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	4a22      	ldr	r2, [pc, #136]	; (8005964 <UART_Start_Receive_DMA+0xc0>)
 80058da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	4a21      	ldr	r2, [pc, #132]	; (8005968 <UART_Start_Receive_DMA+0xc4>)
 80058e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	2200      	movs	r2, #0
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80058ec:	f107 0308 	add.w	r3, r7, #8
 80058f0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	f7fd fd2c 	bl	8003360 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005934:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005954:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	08005743 	.word	0x08005743
 8005964:	080057d9 	.word	0x080057d9
 8005968:	0800580f 	.word	0x0800580f

0800596c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005982:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0210 	bic.w	r2, r2, #16
 80059d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	b09f      	sub	sp, #124	; 0x7c
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0a:	68d9      	ldr	r1, [r3, #12]
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	ea40 0301 	orr.w	r3, r0, r1
 8005a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a38:	f021 010c 	bic.w	r1, r1, #12
 8005a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a42:	430b      	orrs	r3, r1
 8005a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	6999      	ldr	r1, [r3, #24]
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	ea40 0301 	orr.w	r3, r0, r1
 8005a5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4bc5      	ldr	r3, [pc, #788]	; (8005d78 <UART_SetConfig+0x384>)
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d004      	beq.n	8005a72 <UART_SetConfig+0x7e>
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4bc3      	ldr	r3, [pc, #780]	; (8005d7c <UART_SetConfig+0x388>)
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d103      	bne.n	8005a7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a72:	f7fe fea9 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8005a76:	6778      	str	r0, [r7, #116]	; 0x74
 8005a78:	e002      	b.n	8005a80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a7a:	f7fe fe91 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8005a7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a88:	f040 80b6 	bne.w	8005bf8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8e:	461c      	mov	r4, r3
 8005a90:	f04f 0500 	mov.w	r5, #0
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	1891      	adds	r1, r2, r2
 8005a9a:	6439      	str	r1, [r7, #64]	; 0x40
 8005a9c:	415b      	adcs	r3, r3
 8005a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005aa4:	1912      	adds	r2, r2, r4
 8005aa6:	eb45 0303 	adc.w	r3, r5, r3
 8005aaa:	f04f 0000 	mov.w	r0, #0
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	00d9      	lsls	r1, r3, #3
 8005ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ab8:	00d0      	lsls	r0, r2, #3
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	1911      	adds	r1, r2, r4
 8005ac0:	6639      	str	r1, [r7, #96]	; 0x60
 8005ac2:	416b      	adcs	r3, r5
 8005ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	1891      	adds	r1, r2, r2
 8005ad2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ad4:	415b      	adcs	r3, r3
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005adc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ae0:	f7fb f8d2 	bl	8000c88 <__aeabi_uldivmod>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4ba5      	ldr	r3, [pc, #660]	; (8005d80 <UART_SetConfig+0x38c>)
 8005aea:	fba3 2302 	umull	r2, r3, r3, r2
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	011e      	lsls	r6, r3, #4
 8005af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af4:	461c      	mov	r4, r3
 8005af6:	f04f 0500 	mov.w	r5, #0
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	1891      	adds	r1, r2, r2
 8005b00:	6339      	str	r1, [r7, #48]	; 0x30
 8005b02:	415b      	adcs	r3, r3
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b0a:	1912      	adds	r2, r2, r4
 8005b0c:	eb45 0303 	adc.w	r3, r5, r3
 8005b10:	f04f 0000 	mov.w	r0, #0
 8005b14:	f04f 0100 	mov.w	r1, #0
 8005b18:	00d9      	lsls	r1, r3, #3
 8005b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b1e:	00d0      	lsls	r0, r2, #3
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	1911      	adds	r1, r2, r4
 8005b26:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b28:	416b      	adcs	r3, r5
 8005b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	461a      	mov	r2, r3
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	1891      	adds	r1, r2, r2
 8005b38:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b3a:	415b      	adcs	r3, r3
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b46:	f7fb f89f 	bl	8000c88 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4b8c      	ldr	r3, [pc, #560]	; (8005d80 <UART_SetConfig+0x38c>)
 8005b50:	fba3 1302 	umull	r1, r3, r3, r2
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	2164      	movs	r1, #100	; 0x64
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	3332      	adds	r3, #50	; 0x32
 8005b62:	4a87      	ldr	r2, [pc, #540]	; (8005d80 <UART_SetConfig+0x38c>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b70:	441e      	add	r6, r3
 8005b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b74:	4618      	mov	r0, r3
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	1894      	adds	r4, r2, r2
 8005b80:	623c      	str	r4, [r7, #32]
 8005b82:	415b      	adcs	r3, r3
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
 8005b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b8a:	1812      	adds	r2, r2, r0
 8005b8c:	eb41 0303 	adc.w	r3, r1, r3
 8005b90:	f04f 0400 	mov.w	r4, #0
 8005b94:	f04f 0500 	mov.w	r5, #0
 8005b98:	00dd      	lsls	r5, r3, #3
 8005b9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b9e:	00d4      	lsls	r4, r2, #3
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	1814      	adds	r4, r2, r0
 8005ba6:	653c      	str	r4, [r7, #80]	; 0x50
 8005ba8:	414b      	adcs	r3, r1
 8005baa:	657b      	str	r3, [r7, #84]	; 0x54
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	61b9      	str	r1, [r7, #24]
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bc6:	f7fb f85f 	bl	8000c88 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4b6c      	ldr	r3, [pc, #432]	; (8005d80 <UART_SetConfig+0x38c>)
 8005bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2164      	movs	r1, #100	; 0x64
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	3332      	adds	r3, #50	; 0x32
 8005be2:	4a67      	ldr	r2, [pc, #412]	; (8005d80 <UART_SetConfig+0x38c>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	f003 0207 	and.w	r2, r3, #7
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4432      	add	r2, r6
 8005bf4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bf6:	e0b9      	b.n	8005d6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfa:	461c      	mov	r4, r3
 8005bfc:	f04f 0500 	mov.w	r5, #0
 8005c00:	4622      	mov	r2, r4
 8005c02:	462b      	mov	r3, r5
 8005c04:	1891      	adds	r1, r2, r2
 8005c06:	6139      	str	r1, [r7, #16]
 8005c08:	415b      	adcs	r3, r3
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c10:	1912      	adds	r2, r2, r4
 8005c12:	eb45 0303 	adc.w	r3, r5, r3
 8005c16:	f04f 0000 	mov.w	r0, #0
 8005c1a:	f04f 0100 	mov.w	r1, #0
 8005c1e:	00d9      	lsls	r1, r3, #3
 8005c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c24:	00d0      	lsls	r0, r2, #3
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	eb12 0804 	adds.w	r8, r2, r4
 8005c2e:	eb43 0905 	adc.w	r9, r3, r5
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	008b      	lsls	r3, r1, #2
 8005c46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c4a:	0082      	lsls	r2, r0, #2
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4649      	mov	r1, r9
 8005c50:	f7fb f81a 	bl	8000c88 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4b49      	ldr	r3, [pc, #292]	; (8005d80 <UART_SetConfig+0x38c>)
 8005c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	011e      	lsls	r6, r3, #4
 8005c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c64:	4618      	mov	r0, r3
 8005c66:	f04f 0100 	mov.w	r1, #0
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	1894      	adds	r4, r2, r2
 8005c70:	60bc      	str	r4, [r7, #8]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c7a:	1812      	adds	r2, r2, r0
 8005c7c:	eb41 0303 	adc.w	r3, r1, r3
 8005c80:	f04f 0400 	mov.w	r4, #0
 8005c84:	f04f 0500 	mov.w	r5, #0
 8005c88:	00dd      	lsls	r5, r3, #3
 8005c8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c8e:	00d4      	lsls	r4, r2, #3
 8005c90:	4622      	mov	r2, r4
 8005c92:	462b      	mov	r3, r5
 8005c94:	1814      	adds	r4, r2, r0
 8005c96:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c98:	414b      	adcs	r3, r1
 8005c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	008b      	lsls	r3, r1, #2
 8005cb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cb4:	0082      	lsls	r2, r0, #2
 8005cb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cba:	f7fa ffe5 	bl	8000c88 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <UART_SetConfig+0x38c>)
 8005cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	2164      	movs	r1, #100	; 0x64
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	3332      	adds	r3, #50	; 0x32
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <UART_SetConfig+0x38c>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce2:	441e      	add	r6, r3
 8005ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	1894      	adds	r4, r2, r2
 8005cf2:	603c      	str	r4, [r7, #0]
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cfc:	1812      	adds	r2, r2, r0
 8005cfe:	eb41 0303 	adc.w	r3, r1, r3
 8005d02:	f04f 0400 	mov.w	r4, #0
 8005d06:	f04f 0500 	mov.w	r5, #0
 8005d0a:	00dd      	lsls	r5, r3, #3
 8005d0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d10:	00d4      	lsls	r4, r2, #3
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	eb12 0a00 	adds.w	sl, r2, r0
 8005d1a:	eb43 0b01 	adc.w	fp, r3, r1
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f04f 0100 	mov.w	r1, #0
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	008b      	lsls	r3, r1, #2
 8005d32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d36:	0082      	lsls	r2, r0, #2
 8005d38:	4650      	mov	r0, sl
 8005d3a:	4659      	mov	r1, fp
 8005d3c:	f7fa ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <UART_SetConfig+0x38c>)
 8005d46:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2164      	movs	r1, #100	; 0x64
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	3332      	adds	r3, #50	; 0x32
 8005d58:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <UART_SetConfig+0x38c>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4432      	add	r2, r6
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	377c      	adds	r7, #124	; 0x7c
 8005d70:	46bd      	mov	sp, r7
 8005d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d76:	bf00      	nop
 8005d78:	40011000 	.word	0x40011000
 8005d7c:	40011400 	.word	0x40011400
 8005d80:	51eb851f 	.word	0x51eb851f

08005d84 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d8e:	4802      	ldr	r0, [pc, #8]	; (8005d98 <ST7735_Select+0x14>)
 8005d90:	f7fd ff44 	bl	8003c1c <HAL_GPIO_WritePin>
}
 8005d94:	bf00      	nop
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40020800 	.word	0x40020800

08005d9c <ST7735_Unselect>:

void ST7735_Unselect()
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8005da0:	2201      	movs	r2, #1
 8005da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005da6:	4802      	ldr	r0, [pc, #8]	; (8005db0 <ST7735_Unselect+0x14>)
 8005da8:	f7fd ff38 	bl	8003c1c <HAL_GPIO_WritePin>
}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40020800 	.word	0x40020800

08005db4 <ST7735_Reset>:

void ST7735_Reset()
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8005db8:	2200      	movs	r2, #0
 8005dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dbe:	4807      	ldr	r0, [pc, #28]	; (8005ddc <ST7735_Reset+0x28>)
 8005dc0:	f7fd ff2c 	bl	8003c1c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8005dc4:	2005      	movs	r0, #5
 8005dc6:	f7fc fcdf 	bl	8002788 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dd0:	4802      	ldr	r0, [pc, #8]	; (8005ddc <ST7735_Reset+0x28>)
 8005dd2:	f7fd ff23 	bl	8003c1c <HAL_GPIO_WritePin>
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40020000 	.word	0x40020000

08005de0 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8005dea:	2200      	movs	r2, #0
 8005dec:	2180      	movs	r1, #128	; 0x80
 8005dee:	4807      	ldr	r0, [pc, #28]	; (8005e0c <ST7735_WriteCommand+0x2c>)
 8005df0:	f7fd ff14 	bl	8003c1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005df4:	1df9      	adds	r1, r7, #7
 8005df6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4804      	ldr	r0, [pc, #16]	; (8005e10 <ST7735_WriteCommand+0x30>)
 8005dfe:	f7fe fd80 	bl	8004902 <HAL_SPI_Transmit>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40020c00 	.word	0x40020c00
 8005e10:	20000f58 	.word	0x20000f58

08005e14 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8005e1e:	2201      	movs	r2, #1
 8005e20:	2180      	movs	r1, #128	; 0x80
 8005e22:	4807      	ldr	r0, [pc, #28]	; (8005e40 <ST7735_WriteData+0x2c>)
 8005e24:	f7fd fefa 	bl	8003c1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4804      	ldr	r0, [pc, #16]	; (8005e44 <ST7735_WriteData+0x30>)
 8005e34:	f7fe fd65 	bl	8004902 <HAL_SPI_Transmit>
}
 8005e38:	bf00      	nop
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40020c00 	.word	0x40020c00
 8005e44:	20000f58 	.word	0x20000f58

08005e48 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8005e5a:	e034      	b.n	8005ec6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ffb9 	bl	8005de0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8005e78:	7abb      	ldrb	r3, [r7, #10]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e80:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8005e82:	7abb      	ldrb	r3, [r7, #10]
 8005e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e88:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8005e8a:	7abb      	ldrb	r3, [r7, #10]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8005e90:	7abb      	ldrb	r3, [r7, #10]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ffbd 	bl	8005e14 <ST7735_WriteData>
            addr += numArgs;
 8005e9a:	7abb      	ldrb	r3, [r7, #10]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8005ea2:	89bb      	ldrh	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00e      	beq.n	8005ec6 <DisplayInit+0x7e>
            ms = *addr++;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8005eb2:	89bb      	ldrh	r3, [r7, #12]
 8005eb4:	2bff      	cmp	r3, #255	; 0xff
 8005eb6:	d102      	bne.n	8005ebe <DisplayInit+0x76>
 8005eb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005ebc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8005ebe:	89bb      	ldrh	r3, [r7, #12]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fc fc61 	bl	8002788 <HAL_Delay>
    while(numCommands--) {
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	73fa      	strb	r2, [r7, #15]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1c5      	bne.n	8005e5c <DisplayInit+0x14>
        }
    }
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	71fb      	strb	r3, [r7, #7]
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71bb      	strb	r3, [r7, #6]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	717b      	strb	r3, [r7, #5]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8005efa:	202a      	movs	r0, #42	; 0x2a
 8005efc:	f7ff ff70 	bl	8005de0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8005f00:	2300      	movs	r3, #0
 8005f02:	733b      	strb	r3, [r7, #12]
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <ST7735_SetAddressWindow+0x88>)
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	737b      	strb	r3, [r7, #13]
 8005f10:	2300      	movs	r3, #0
 8005f12:	73bb      	strb	r3, [r7, #14]
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <ST7735_SetAddressWindow+0x88>)
 8005f16:	781a      	ldrb	r2, [r3, #0]
 8005f18:	797b      	ldrb	r3, [r7, #5]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8005f20:	f107 030c 	add.w	r3, r7, #12
 8005f24:	2104      	movs	r1, #4
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ff74 	bl	8005e14 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8005f2c:	202b      	movs	r0, #43	; 0x2b
 8005f2e:	f7ff ff57 	bl	8005de0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <ST7735_SetAddressWindow+0x8c>)
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	79bb      	ldrb	r3, [r7, #6]
 8005f38:	4413      	add	r3, r2
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <ST7735_SetAddressWindow+0x8c>)
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	793b      	ldrb	r3, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8005f4a:	f107 030c 	add.w	r3, r7, #12
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ff5f 	bl	8005e14 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8005f56:	202c      	movs	r0, #44	; 0x2c
 8005f58:	f7ff ff42 	bl	8005de0 <ST7735_WriteCommand>
}
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}
 8005f64:	200004d9 	.word	0x200004d9
 8005f68:	20000ab5 	.word	0x20000ab5

08005f6c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8005f76:	f7ff ff05 	bl	8005d84 <ST7735_Select>
    ST7735_Reset();
 8005f7a:	f7ff ff1b 	bl	8005db4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8005f7e:	480c      	ldr	r0, [pc, #48]	; (8005fb0 <ST7735_Init+0x44>)
 8005f80:	f7ff ff62 	bl	8005e48 <DisplayInit>
    DisplayInit(init_cmds2);
 8005f84:	480b      	ldr	r0, [pc, #44]	; (8005fb4 <ST7735_Init+0x48>)
 8005f86:	f7ff ff5f 	bl	8005e48 <DisplayInit>
    DisplayInit(init_cmds3);
 8005f8a:	480b      	ldr	r0, [pc, #44]	; (8005fb8 <ST7735_Init+0x4c>)
 8005f8c:	f7ff ff5c 	bl	8005e48 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8005f90:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <ST7735_Init+0x50>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <ST7735_Init+0x54>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 f810 	bl	8005fc4 <ST7735_SetRotation>
    ST7735_Unselect();
 8005fa4:	f7ff fefa 	bl	8005d9c <ST7735_Unselect>

}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	0800c35c 	.word	0x0800c35c
 8005fb4:	0800c394 	.word	0x0800c394
 8005fb8:	0800c3a4 	.word	0x0800c3a4
 8005fbc:	2000061c 	.word	0x2000061c
 8005fc0:	20000ab6 	.word	0x20000ab6

08005fc4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b33      	ldr	r3, [pc, #204]	; (80060a8 <ST7735_SetRotation+0xe4>)
 8005fdc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8005fde:	4b32      	ldr	r3, [pc, #200]	; (80060a8 <ST7735_SetRotation+0xe4>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d84e      	bhi.n	8006084 <ST7735_SetRotation+0xc0>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <ST7735_SetRotation+0x28>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	0800601f 	.word	0x0800601f
 8005ff4:	08006041 	.word	0x08006041
 8005ff8:	08006063 	.word	0x08006063
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8005ffc:	23c0      	movs	r3, #192	; 0xc0
 8005ffe:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8006000:	4b2a      	ldr	r3, [pc, #168]	; (80060ac <ST7735_SetRotation+0xe8>)
 8006002:	22a1      	movs	r2, #161	; 0xa1
 8006004:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <ST7735_SetRotation+0xec>)
 8006008:	2282      	movs	r2, #130	; 0x82
 800600a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800600c:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <ST7735_SetRotation+0xf0>)
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <ST7735_SetRotation+0xf4>)
 8006012:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8006014:	4b29      	ldr	r3, [pc, #164]	; (80060bc <ST7735_SetRotation+0xf8>)
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	4b29      	ldr	r3, [pc, #164]	; (80060c0 <ST7735_SetRotation+0xfc>)
 800601a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800601c:	e032      	b.n	8006084 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800601e:	23a0      	movs	r3, #160	; 0xa0
 8006020:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8006022:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <ST7735_SetRotation+0xec>)
 8006024:	22a1      	movs	r2, #161	; 0xa1
 8006026:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8006028:	4b20      	ldr	r3, [pc, #128]	; (80060ac <ST7735_SetRotation+0xe8>)
 800602a:	2282      	movs	r2, #130	; 0x82
 800602c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800602e:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <ST7735_SetRotation+0xf0>)
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <ST7735_SetRotation+0xfc>)
 8006034:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8006036:	4b21      	ldr	r3, [pc, #132]	; (80060bc <ST7735_SetRotation+0xf8>)
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <ST7735_SetRotation+0xf4>)
 800603c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800603e:	e021      	b.n	8006084 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8006044:	4b19      	ldr	r3, [pc, #100]	; (80060ac <ST7735_SetRotation+0xe8>)
 8006046:	22a1      	movs	r2, #161	; 0xa1
 8006048:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800604a:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <ST7735_SetRotation+0xec>)
 800604c:	2282      	movs	r2, #130	; 0x82
 800604e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <ST7735_SetRotation+0xf0>)
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <ST7735_SetRotation+0xf4>)
 8006056:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8006058:	4b18      	ldr	r3, [pc, #96]	; (80060bc <ST7735_SetRotation+0xf8>)
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <ST7735_SetRotation+0xfc>)
 800605e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8006060:	e010      	b.n	8006084 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8006062:	2360      	movs	r3, #96	; 0x60
 8006064:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <ST7735_SetRotation+0xec>)
 8006068:	22a1      	movs	r2, #161	; 0xa1
 800606a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <ST7735_SetRotation+0xe8>)
 800606e:	2282      	movs	r2, #130	; 0x82
 8006070:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <ST7735_SetRotation+0xf0>)
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <ST7735_SetRotation+0xfc>)
 8006078:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <ST7735_SetRotation+0xf8>)
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <ST7735_SetRotation+0xf4>)
 8006080:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8006082:	bf00      	nop
  }
  ST7735_Select();
 8006084:	f7ff fe7e 	bl	8005d84 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8006088:	2036      	movs	r0, #54	; 0x36
 800608a:	f7ff fea9 	bl	8005de0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800608e:	f107 030f 	add.w	r3, r7, #15
 8006092:	2101      	movs	r1, #1
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff febd 	bl	8005e14 <ST7735_WriteData>
  ST7735_Unselect();
 800609a:	f7ff fe7f 	bl	8005d9c <ST7735_Unselect>
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000af8 	.word	0x20000af8
 80060ac:	20000dc8 	.word	0x20000dc8
 80060b0:	20000cb4 	.word	0x20000cb4
 80060b4:	2000061c 	.word	0x2000061c
 80060b8:	200004d9 	.word	0x200004d9
 80060bc:	20000ab6 	.word	0x20000ab6
 80060c0:	20000ab5 	.word	0x20000ab5

080060c4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	80fb      	strh	r3, [r7, #6]
 80060ce:	460b      	mov	r3, r1
 80060d0:	80bb      	strh	r3, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <ST7735_DrawPixel+0x74>)
 80060da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80060de:	4293      	cmp	r3, r2
 80060e0:	da26      	bge.n	8006130 <ST7735_DrawPixel+0x6c>
 80060e2:	88bb      	ldrh	r3, [r7, #4]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <ST7735_DrawPixel+0x78>)
 80060e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80060ea:	4293      	cmp	r3, r2
 80060ec:	da20      	bge.n	8006130 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80060ee:	f7ff fe49 	bl	8005d84 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	b2d8      	uxtb	r0, r3
 80060f6:	88bb      	ldrh	r3, [r7, #4]
 80060f8:	b2d9      	uxtb	r1, r3
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	3301      	adds	r3, #1
 8006100:	b2da      	uxtb	r2, r3
 8006102:	88bb      	ldrh	r3, [r7, #4]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	3301      	adds	r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f7ff fee7 	bl	8005edc <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800610e:	887b      	ldrh	r3, [r7, #2]
 8006110:	0a1b      	lsrs	r3, r3, #8
 8006112:	b29b      	uxth	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	733b      	strb	r3, [r7, #12]
 8006118:	887b      	ldrh	r3, [r7, #2]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800611e:	f107 030c 	add.w	r3, r7, #12
 8006122:	2102      	movs	r1, #2
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fe75 	bl	8005e14 <ST7735_WriteData>

    ST7735_Unselect();
 800612a:	f7ff fe37 	bl	8005d9c <ST7735_Unselect>
 800612e:	e000      	b.n	8006132 <ST7735_DrawPixel+0x6e>
        return;
 8006130:	bf00      	nop
}
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000cb4 	.word	0x20000cb4
 800613c:	20000dc8 	.word	0x20000dc8

08006140 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006140:	b082      	sub	sp, #8
 8006142:	b590      	push	{r4, r7, lr}
 8006144:	b089      	sub	sp, #36	; 0x24
 8006146:	af00      	add	r7, sp, #0
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
 800614a:	4603      	mov	r3, r0
 800614c:	80fb      	strh	r3, [r7, #6]
 800614e:	460b      	mov	r3, r1
 8006150:	80bb      	strh	r3, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	b2d8      	uxtb	r0, r3
 800615a:	88bb      	ldrh	r3, [r7, #4]
 800615c:	b2d9      	uxtb	r1, r3
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006166:	4413      	add	r3, r2
 8006168:	b2db      	uxtb	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b2dc      	uxtb	r4, r3
 800616e:	88bb      	ldrh	r3, [r7, #4]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006176:	4413      	add	r3, r2
 8006178:	b2db      	uxtb	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4622      	mov	r2, r4
 8006180:	f7ff feac 	bl	8005edc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e043      	b.n	8006212 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800618a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	3b20      	subs	r3, #32
 8006190:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	4619      	mov	r1, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	440b      	add	r3, r1
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	e029      	b.n	8006200 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00e      	beq.n	80061da <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80061bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	743b      	strb	r3, [r7, #16]
 80061c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80061cc:	f107 0310 	add.w	r3, r7, #16
 80061d0:	2102      	movs	r1, #2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fe1e 	bl	8005e14 <ST7735_WriteData>
 80061d8:	e00f      	b.n	80061fa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80061da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	733b      	strb	r3, [r7, #12]
 80061e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80061ee:	f107 030c 	add.w	r3, r7, #12
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fe0d 	bl	8005e14 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3301      	adds	r3, #1
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006204:	461a      	mov	r2, r3
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	4293      	cmp	r3, r2
 800620a:	d3cf      	bcc.n	80061ac <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3301      	adds	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006216:	461a      	mov	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4293      	cmp	r3, r2
 800621c:	d3b5      	bcc.n	800618a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800621e:	bf00      	nop
 8006220:	bf00      	nop
 8006222:	3724      	adds	r7, #36	; 0x24
 8006224:	46bd      	mov	sp, r7
 8006226:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800622a:	b002      	add	sp, #8
 800622c:	4770      	bx	lr
	...

08006230 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006230:	b082      	sub	sp, #8
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af04      	add	r7, sp, #16
 8006238:	603a      	str	r2, [r7, #0]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	4603      	mov	r3, r0
 800623e:	80fb      	strh	r3, [r7, #6]
 8006240:	460b      	mov	r3, r1
 8006242:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8006244:	f7ff fd9e 	bl	8005d84 <ST7735_Select>

    while(*str) {
 8006248:	e033      	b.n	80062b2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	7d3a      	ldrb	r2, [r7, #20]
 800624e:	4413      	add	r3, r2
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <ST7735_WriteString+0xa0>)
 8006252:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006256:	4293      	cmp	r3, r2
 8006258:	db16      	blt.n	8006288 <ST7735_WriteString+0x58>
            x = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800625e:	7d7b      	ldrb	r3, [r7, #21]
 8006260:	b29a      	uxth	r2, r3
 8006262:	88bb      	ldrh	r3, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8006268:	88bb      	ldrh	r3, [r7, #4]
 800626a:	7d7a      	ldrb	r2, [r7, #21]
 800626c:	4413      	add	r3, r2
 800626e:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <ST7735_WriteString+0xa4>)
 8006270:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006274:	4293      	cmp	r3, r2
 8006276:	da21      	bge.n	80062bc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b20      	cmp	r3, #32
 800627e:	d103      	bne.n	8006288 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	603b      	str	r3, [r7, #0]
                continue;
 8006286:	e014      	b.n	80062b2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	88b9      	ldrh	r1, [r7, #4]
 800628e:	88f8      	ldrh	r0, [r7, #6]
 8006290:	8c3b      	ldrh	r3, [r7, #32]
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	8bbb      	ldrh	r3, [r7, #28]
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f7ff ff4f 	bl	8006140 <ST7735_WriteChar>
        x += font.width;
 80062a2:	7d3b      	ldrb	r3, [r7, #20]
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	4413      	add	r3, r2
 80062aa:	80fb      	strh	r3, [r7, #6]
        str++;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1c7      	bne.n	800624a <ST7735_WriteString+0x1a>
 80062ba:	e000      	b.n	80062be <ST7735_WriteString+0x8e>
                break;
 80062bc:	bf00      	nop
    }

    ST7735_Unselect();
 80062be:	f7ff fd6d 	bl	8005d9c <ST7735_Unselect>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062cc:	b002      	add	sp, #8
 80062ce:	4770      	bx	lr
 80062d0:	20000cb4 	.word	0x20000cb4
 80062d4:	20000dc8 	.word	0x20000dc8

080062d8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	80fb      	strh	r3, [r7, #6]
 80062ea:	4603      	mov	r3, r0
 80062ec:	80bb      	strh	r3, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	807b      	strh	r3, [r7, #2]
 80062f2:	4613      	mov	r3, r2
 80062f4:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	4a37      	ldr	r2, [pc, #220]	; (80063d8 <ST7735_FillRectangle+0x100>)
 80062fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80062fe:	4293      	cmp	r3, r2
 8006300:	da66      	bge.n	80063d0 <ST7735_FillRectangle+0xf8>
 8006302:	88bb      	ldrh	r3, [r7, #4]
 8006304:	4a35      	ldr	r2, [pc, #212]	; (80063dc <ST7735_FillRectangle+0x104>)
 8006306:	f9b2 2000 	ldrsh.w	r2, [r2]
 800630a:	4293      	cmp	r3, r2
 800630c:	da60      	bge.n	80063d0 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	4413      	add	r3, r2
 8006314:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <ST7735_FillRectangle+0x100>)
 8006316:	f9b2 2000 	ldrsh.w	r2, [r2]
 800631a:	4293      	cmp	r3, r2
 800631c:	dd06      	ble.n	800632c <ST7735_FillRectangle+0x54>
 800631e:	4b2e      	ldr	r3, [pc, #184]	; (80063d8 <ST7735_FillRectangle+0x100>)
 8006320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006324:	b29a      	uxth	r2, r3
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800632c:	88ba      	ldrh	r2, [r7, #4]
 800632e:	883b      	ldrh	r3, [r7, #0]
 8006330:	4413      	add	r3, r2
 8006332:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <ST7735_FillRectangle+0x104>)
 8006334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006338:	4293      	cmp	r3, r2
 800633a:	dd06      	ble.n	800634a <ST7735_FillRectangle+0x72>
 800633c:	4b27      	ldr	r3, [pc, #156]	; (80063dc <ST7735_FillRectangle+0x104>)
 800633e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006342:	b29a      	uxth	r2, r3
 8006344:	88bb      	ldrh	r3, [r7, #4]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800634a:	f7ff fd1b 	bl	8005d84 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	b2d8      	uxtb	r0, r3
 8006352:	88bb      	ldrh	r3, [r7, #4]
 8006354:	b2d9      	uxtb	r1, r3
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4413      	add	r3, r2
 8006360:	b2db      	uxtb	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b2dc      	uxtb	r4, r3
 8006366:	88bb      	ldrh	r3, [r7, #4]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	883b      	ldrh	r3, [r7, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	4413      	add	r3, r2
 8006370:	b2db      	uxtb	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b2db      	uxtb	r3, r3
 8006376:	4622      	mov	r2, r4
 8006378:	f7ff fdb0 	bl	8005edc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800637c:	8c3b      	ldrh	r3, [r7, #32]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	b29b      	uxth	r3, r3
 8006382:	b2db      	uxtb	r3, r3
 8006384:	733b      	strb	r3, [r7, #12]
 8006386:	8c3b      	ldrh	r3, [r7, #32]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800638c:	2201      	movs	r2, #1
 800638e:	2180      	movs	r1, #128	; 0x80
 8006390:	4813      	ldr	r0, [pc, #76]	; (80063e0 <ST7735_FillRectangle+0x108>)
 8006392:	f7fd fc43 	bl	8003c1c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8006396:	883b      	ldrh	r3, [r7, #0]
 8006398:	80bb      	strh	r3, [r7, #4]
 800639a:	e013      	b.n	80063c4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 800639c:	887b      	ldrh	r3, [r7, #2]
 800639e:	80fb      	strh	r3, [r7, #6]
 80063a0:	e00a      	b.n	80063b8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80063a2:	f107 010c 	add.w	r1, r7, #12
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295
 80063aa:	2202      	movs	r2, #2
 80063ac:	480d      	ldr	r0, [pc, #52]	; (80063e4 <ST7735_FillRectangle+0x10c>)
 80063ae:	f7fe faa8 	bl	8004902 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	80fb      	strh	r3, [r7, #6]
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f1      	bne.n	80063a2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	80bb      	strh	r3, [r7, #4]
 80063c4:	88bb      	ldrh	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e8      	bne.n	800639c <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80063ca:	f7ff fce7 	bl	8005d9c <ST7735_Unselect>
 80063ce:	e000      	b.n	80063d2 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80063d0:	bf00      	nop
}
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd90      	pop	{r4, r7, pc}
 80063d8:	20000cb4 	.word	0x20000cb4
 80063dc:	20000dc8 	.word	0x20000dc8
 80063e0:	40020c00 	.word	0x40020c00
 80063e4:	20000f58 	.word	0x20000f58

080063e8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	4603      	mov	r3, r0
 80063f0:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, _width, _height, color);
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <ST7735_FillScreen+0x30>)
 80063f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <ST7735_FillScreen+0x34>)
 80063fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006400:	b299      	uxth	r1, r3
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	460b      	mov	r3, r1
 8006408:	2100      	movs	r1, #0
 800640a:	2000      	movs	r0, #0
 800640c:	f7ff ff64 	bl	80062d8 <ST7735_FillRectangle>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000cb4 	.word	0x20000cb4
 800641c:	20000dc8 	.word	0x20000dc8

08006420 <HAL_GPIO_EXTI_Callback>:
#include "stm32f4xx_hal.h"
#include "stdbool.h"
#include "tim.h"

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == ENCODER_1_BTN ) {
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d103      	bne.n	800643a <HAL_GPIO_EXTI_Callback+0x1a>
		encoder_toggle_button (&encoder_1);
 8006432:	4804      	ldr	r0, [pc, #16]	; (8006444 <HAL_GPIO_EXTI_Callback+0x24>)
 8006434:	f000 f83d 	bl	80064b2 <encoder_toggle_button>
 8006438:	e000      	b.n	800643c <HAL_GPIO_EXTI_Callback+0x1c>
	}
	else {
		return;
 800643a:	bf00      	nop
	}
}
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000ab8 	.word	0x20000ab8

08006448 <encoder_struct_init>:

void encoder_struct_init(struct encoder *enc, TIM_HandleTypeDef *htim) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
	encoder_reset_flags(enc);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f80a 	bl	800646c <encoder_reset_flags>
	enc->ptr = htim;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	60da      	str	r2, [r3, #12]
	encoder_check_counter (enc);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f817 	bl	8006492 <encoder_check_counter>
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <encoder_reset_flags>:

void encoder_reset_flags(struct encoder *enc) {
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	enc->step_clockwise = false;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	721a      	strb	r2, [r3, #8]
	enc->step_counterclockwise = false;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	725a      	strb	r2, [r3, #9]
	enc->enter = false;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	729a      	strb	r2, [r3, #10]
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <encoder_check_counter>:

void encoder_check_counter (struct encoder *enc) {
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]

	enc->encoderState = __HAL_TIM_GET_COUNTER( enc->ptr );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <encoder_toggle_button>:

void encoder_toggle_button (struct encoder *enc) {
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]

	if ( enc->enter == true) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7a9b      	ldrb	r3, [r3, #10]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <encoder_toggle_button+0x18>
		enc->enter = false;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	729a      	strb	r2, [r3, #10]
	else {
		enc->enter = true;
	}


}
 80064c8:	e002      	b.n	80064d0 <encoder_toggle_button+0x1e>
		enc->enter = true;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	729a      	strb	r2, [r3, #10]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <encoder_check_direction>:

void encoder_check_direction(struct encoder *enc) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

	encoder_check_counter (enc);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ffd4 	bl	8006492 <encoder_check_counter>

	int8_t state = (enc->lastEncoderState - enc->encoderState);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	73fb      	strb	r3, [r7, #15]

	if( state == 1 ) {
 80064fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d107      	bne.n	8006514 <encoder_check_direction+0x38>
		enc->lastEncoderState = enc->encoderState;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	721a      	strb	r2, [r3, #8]
	}
	else {
		enc->lastEncoderState = enc->encoderState;

	}
}
 8006512:	e03f      	b.n	8006594 <encoder_check_direction+0xb8>
	else if (state == -1){
 8006514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d107      	bne.n	800652e <encoder_check_direction+0x52>
		enc->lastEncoderState = enc->encoderState;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	725a      	strb	r2, [r3, #9]
}
 800652c:	e032      	b.n	8006594 <encoder_check_direction+0xb8>
	else if ( (state == enc->lastEncoderState) && (enc->lastEncoderState == htim1.Init.Period) && (enc->encoderState == 0) ) {
 800652e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d111      	bne.n	800655e <encoder_check_direction+0x82>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b17      	ldr	r3, [pc, #92]	; (800659c <encoder_check_direction+0xc0>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	429a      	cmp	r2, r3
 8006544:	d10b      	bne.n	800655e <encoder_check_direction+0x82>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d107      	bne.n	800655e <encoder_check_direction+0x82>
		enc->lastEncoderState = enc->encoderState;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	725a      	strb	r2, [r3, #9]
 800655c:	e01a      	b.n	8006594 <encoder_check_direction+0xb8>
	else if ( (state < 0) && (enc->lastEncoderState == 0) && (enc->encoderState == htim1.Init.Period)) {
 800655e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	da11      	bge.n	800658a <encoder_check_direction+0xae>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <encoder_check_direction+0xae>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <encoder_check_direction+0xc0>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	429a      	cmp	r2, r3
 8006578:	d107      	bne.n	800658a <encoder_check_direction+0xae>
		enc->lastEncoderState = enc->encoderState;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	721a      	strb	r2, [r3, #8]
 8006588:	e004      	b.n	8006594 <encoder_check_direction+0xb8>
		enc->lastEncoderState = enc->encoderState;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	e7ff      	b.n	8006594 <encoder_check_direction+0xb8>
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000fb0 	.word	0x20000fb0

080065a0 <encoder_step_clockwise>:

_Bool encoder_step_clockwise(struct encoder *enc) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff97 	bl	80064dc <encoder_check_direction>
	if(enc->step_clockwise == true) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7a1b      	ldrb	r3, [r3, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <encoder_step_clockwise+0x20>
		encoder_reset_flags(enc);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff ff58 	bl	800646c <encoder_reset_flags>
		return true;
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <encoder_step_clockwise+0x22>
	}
	else {
		return false;
 80065c0:	2300      	movs	r3, #0
	}

}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <encoder_step_counterclockwise>:

_Bool encoder_step_counterclockwise(struct encoder *enc) {
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff ff82 	bl	80064dc <encoder_check_direction>
	if(enc->step_counterclockwise == true) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7a5b      	ldrb	r3, [r3, #9]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <encoder_step_counterclockwise+0x20>
		encoder_reset_flags(enc);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff ff43 	bl	800646c <encoder_reset_flags>
		return true;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <encoder_step_counterclockwise+0x22>
	}
	else {
		return false;
 80065ea:	2300      	movs	r3, #0
	}
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <encoder_enter>:

_Bool encoder_enter(struct encoder *enc) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	if(enc->enter == true) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	7a9b      	ldrb	r3, [r3, #10]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <encoder_enter+0x20>
		HAL_Delay(200);
 8006604:	20c8      	movs	r0, #200	; 0xc8
 8006606:	f7fc f8bf 	bl	8002788 <HAL_Delay>
		encoder_reset_flags(enc);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff ff2e 	bl	800646c <encoder_reset_flags>
		return true;
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <encoder_enter+0x22>
	}
	else {
		return false;
 8006614:	2300      	movs	r3, #0
	}
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <Menu_GetMenuItemsNo>:
static const  struct menuitem *currMenuPtr = &menu_link;   //Bie¿¹ca pozycja menu
static int8_t menuindex;                                    //Numer aktualnie wybrane pozycji menu
static int8_t menufirstpos;                                 //Numer pozycji menu wyœwietlanej w górnym rzêdzie

uint8_t Menu_GetMenuItemsNo()            //Policz ile dane menu ma pozycji
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
	const struct menuitem *tmpmenuitem=currMenuPtr;
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <Menu_GetMenuItemsNo+0x34>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	607b      	str	r3, [r7, #4]
	uint8_t index=0;
 800662c:	2300      	movs	r3, #0
 800662e:	70fb      	strb	r3, [r7, #3]

	while(tmpmenuitem)
 8006630:	e005      	b.n	800663e <Menu_GetMenuItemsNo+0x1e>
	{
		tmpmenuitem=tmpmenuitem->next;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	607b      	str	r3, [r7, #4]
		index++;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	3301      	adds	r3, #1
 800663c:	70fb      	strb	r3, [r7, #3]
	while(tmpmenuitem)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f6      	bne.n	8006632 <Menu_GetMenuItemsNo+0x12>
	}
	return index;
 8006644:	78fb      	ldrb	r3, [r7, #3]
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000024 	.word	0x20000024

08006658 <Menu_GetMenuItem>:

const struct menuitem *Menu_GetMenuItem(uint8_t index)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	71fb      	strb	r3, [r7, #7]
	const struct menuitem *tmpmenuitem=currMenuPtr;
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <Menu_GetMenuItem+0x38>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

	while((tmpmenuitem) && (index>0)) {
 8006668:	e005      	b.n	8006676 <Menu_GetMenuItem+0x1e>
	 tmpmenuitem=tmpmenuitem->next;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	60fb      	str	r3, [r7, #12]
	 index--;
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	3b01      	subs	r3, #1
 8006674:	71fb      	strb	r3, [r7, #7]
	while((tmpmenuitem) && (index>0)) {
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <Menu_GetMenuItem+0x2a>
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f3      	bne.n	800666a <Menu_GetMenuItem+0x12>
	}
	return tmpmenuitem;
 8006682:	68fb      	ldr	r3, [r7, #12]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20000024 	.word	0x20000024

08006694 <Menu_GetMenuRows>:

uint8_t Menu_GetMenuRows()
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
	return 5;
 8006698:	2305      	movs	r3, #5
}
 800669a:	4618      	mov	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <Menu_Show>:

void Menu_Show()
{
 80066a4:	b5b0      	push	{r4, r5, r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af02      	add	r7, sp, #8
	const struct menuitem *tmpmenuitem=Menu_GetMenuItem(menufirstpos);
 80066aa:	4b65      	ldr	r3, [pc, #404]	; (8006840 <Menu_Show+0x19c>)
 80066ac:	f993 3000 	ldrsb.w	r3, [r3]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff ffd0 	bl	8006658 <Menu_GetMenuItem>
 80066b8:	6078      	str	r0, [r7, #4]
	uint8_t menuitemsno=Menu_GetMenuItemsNo();
 80066ba:	f7ff ffb1 	bl	8006620 <Menu_GetMenuItemsNo>
 80066be:	4603      	mov	r3, r0
 80066c0:	70bb      	strb	r3, [r7, #2]

	//UG_FillFrame(0, 10+(i*10), UG_GetXDim(), (gui1.font.char_height)+(10+(i*10)), C_BLACK);
	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 80066c2:	2300      	movs	r3, #0
 80066c4:	70fb      	strb	r3, [r7, #3]
 80066c6:	e0ad      	b.n	8006824 <Menu_Show+0x180>
		uint8_t xbox;
		uint8_t ybox;

		xbox = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	707b      	strb	r3, [r7, #1]
		ybox = 26;
 80066cc:	231a      	movs	r3, #26
 80066ce:	703b      	strb	r3, [r7, #0]
		if(menuindex == ((menufirstpos + i) % menuitemsno)) {
 80066d0:	4b5c      	ldr	r3, [pc, #368]	; (8006844 <Menu_Show+0x1a0>)
 80066d2:	f993 3000 	ldrsb.w	r3, [r3]
 80066d6:	4618      	mov	r0, r3
 80066d8:	4b59      	ldr	r3, [pc, #356]	; (8006840 <Menu_Show+0x19c>)
 80066da:	f993 3000 	ldrsb.w	r3, [r3]
 80066de:	461a      	mov	r2, r3
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	4413      	add	r3, r2
 80066e4:	78ba      	ldrb	r2, [r7, #2]
 80066e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80066ea:	fb02 f201 	mul.w	r2, r2, r1
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	4298      	cmp	r0, r3
 80066f2:	d131      	bne.n	8006758 <Menu_Show+0xb4>
			UG_FillFrame(xbox, 0+(i*ybox), UG_GetXDim(), (gui1.font.char_height)+(0+(i*ybox)), C_BLUE);
 80066f4:	787b      	ldrb	r3, [r7, #1]
 80066f6:	b21c      	sxth	r4, r3
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	783b      	ldrb	r3, [r7, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	fb12 f303 	smulbb	r3, r2, r3
 8006704:	b29b      	uxth	r3, r3
 8006706:	b21d      	sxth	r5, r3
 8006708:	f001 f81a 	bl	8007740 <UG_GetXDim>
 800670c:	4603      	mov	r3, r0
 800670e:	4618      	mov	r0, r3
 8006710:	4b4d      	ldr	r3, [pc, #308]	; (8006848 <Menu_Show+0x1a4>)
 8006712:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8006716:	b29a      	uxth	r2, r3
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	b299      	uxth	r1, r3
 800671c:	783b      	ldrb	r3, [r7, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	fb11 f303 	smulbb	r3, r1, r3
 8006724:	b29b      	uxth	r3, r3
 8006726:	4413      	add	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	b21b      	sxth	r3, r3
 800672c:	22ff      	movs	r2, #255	; 0xff
 800672e:	9200      	str	r2, [sp, #0]
 8006730:	4602      	mov	r2, r0
 8006732:	4629      	mov	r1, r5
 8006734:	4620      	mov	r0, r4
 8006736:	f000 fdff 	bl	8007338 <UG_FillFrame>
			UG_PutString( xbox, 0+(i*ybox), ">" );
 800673a:	787b      	ldrb	r3, [r7, #1]
 800673c:	b218      	sxth	r0, r3
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	b29a      	uxth	r2, r3
 8006742:	783b      	ldrb	r3, [r7, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	fb12 f303 	smulbb	r3, r2, r3
 800674a:	b29b      	uxth	r3, r3
 800674c:	b21b      	sxth	r3, r3
 800674e:	4a3f      	ldr	r2, [pc, #252]	; (800684c <Menu_Show+0x1a8>)
 8006750:	4619      	mov	r1, r3
 8006752:	f000 fe61 	bl	8007418 <UG_PutString>
 8006756:	e030      	b.n	80067ba <Menu_Show+0x116>
		}
		else {
			UG_FillFrame(xbox, 0+(i*ybox), UG_GetXDim(), (gui1.font.char_height)+(0+(i*ybox)), C_BLACK);
 8006758:	787b      	ldrb	r3, [r7, #1]
 800675a:	b21c      	sxth	r4, r3
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	b29a      	uxth	r2, r3
 8006760:	783b      	ldrb	r3, [r7, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	fb12 f303 	smulbb	r3, r2, r3
 8006768:	b29b      	uxth	r3, r3
 800676a:	b21d      	sxth	r5, r3
 800676c:	f000 ffe8 	bl	8007740 <UG_GetXDim>
 8006770:	4603      	mov	r3, r0
 8006772:	4618      	mov	r0, r3
 8006774:	4b34      	ldr	r3, [pc, #208]	; (8006848 <Menu_Show+0x1a4>)
 8006776:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800677a:	b29a      	uxth	r2, r3
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	b299      	uxth	r1, r3
 8006780:	783b      	ldrb	r3, [r7, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	fb11 f303 	smulbb	r3, r1, r3
 8006788:	b29b      	uxth	r3, r3
 800678a:	4413      	add	r3, r2
 800678c:	b29b      	uxth	r3, r3
 800678e:	b21b      	sxth	r3, r3
 8006790:	2200      	movs	r2, #0
 8006792:	9200      	str	r2, [sp, #0]
 8006794:	4602      	mov	r2, r0
 8006796:	4629      	mov	r1, r5
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fdcd 	bl	8007338 <UG_FillFrame>
			UG_PutString( xbox, 0+(i*ybox), " " );  //Dana pozycja menu jest zaznaczona
 800679e:	787b      	ldrb	r3, [r7, #1]
 80067a0:	b218      	sxth	r0, r3
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	783b      	ldrb	r3, [r7, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	fb12 f303 	smulbb	r3, r2, r3
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	4a27      	ldr	r2, [pc, #156]	; (8006850 <Menu_Show+0x1ac>)
 80067b4:	4619      	mov	r1, r3
 80067b6:	f000 fe2f 	bl	8007418 <UG_PutString>
		}

		UG_PutString( 0, 0+(i*ybox), tmpmenuitem->text); //Wyœwietl pozycjê menu
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	783b      	ldrb	r3, [r7, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	fb12 f303 	smulbb	r3, r2, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	b219      	sxth	r1, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	2000      	movs	r0, #0
 80067d2:	f000 fe21 	bl	8007418 <UG_PutString>

		if(tmpmenuitem->submenu) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <Menu_Show+0x156>
			UG_PutString( xbox, 0+(i*ybox), ""); //Zaznacz, ze mamy submenu
 80067de:	787b      	ldrb	r3, [r7, #1]
 80067e0:	b218      	sxth	r0, r3
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	783b      	ldrb	r3, [r7, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	fb12 f303 	smulbb	r3, r2, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	b21b      	sxth	r3, r3
 80067f2:	4a18      	ldr	r2, [pc, #96]	; (8006854 <Menu_Show+0x1b0>)
 80067f4:	4619      	mov	r1, r3
 80067f6:	f000 fe0f 	bl	8007418 <UG_PutString>
		}

		tmpmenuitem = tmpmenuitem->next;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	607b      	str	r3, [r7, #4]

		if(tmpmenuitem == NULL)  //Koniec listy
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <Menu_Show+0x17a>
		{
			if(Menu_GetMenuItemsNo() > Menu_GetMenuRows()){
 8006806:	f7ff ff0b 	bl	8006620 <Menu_GetMenuItemsNo>
 800680a:	4603      	mov	r3, r0
 800680c:	461c      	mov	r4, r3
 800680e:	f7ff ff41 	bl	8006694 <Menu_GetMenuRows>
 8006812:	4603      	mov	r3, r0
 8006814:	429c      	cmp	r4, r3
 8006816:	d90e      	bls.n	8006836 <Menu_Show+0x192>
				tmpmenuitem=currMenuPtr; //Zawijamy listê jeœli jest d³u¿sza ni¿ liczba wyœwietlanych pozycji
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <Menu_Show+0x1b4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	3301      	adds	r3, #1
 8006822:	70fb      	strb	r3, [r7, #3]
 8006824:	f7ff ff36 	bl	8006694 <Menu_GetMenuRows>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	4293      	cmp	r3, r2
 8006830:	f4ff af4a 	bcc.w	80066c8 <Menu_Show+0x24>
			else {
				break;   //lub koñczymy, ¿eby unikn¹æ powtarzania elementów
			}
		}
	}
}
 8006834:	e000      	b.n	8006838 <Menu_Show+0x194>
				break;   //lub koñczymy, ¿eby unikn¹æ powtarzania elementów
 8006836:	bf00      	nop
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bdb0      	pop	{r4, r5, r7, pc}
 8006840:	2000033d 	.word	0x2000033d
 8006844:	2000033c 	.word	0x2000033c
 8006848:	2000046c 	.word	0x2000046c
 800684c:	0800c304 	.word	0x0800c304
 8006850:	0800c308 	.word	0x0800c308
 8006854:	0800c30c 	.word	0x0800c30c
 8006858:	20000024 	.word	0x20000024

0800685c <Menu_SelectNext>:

void Menu_SelectNext()
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
	uint8_t no = Menu_GetMenuItemsNo();
 8006862:	f7ff fedd 	bl	8006620 <Menu_GetMenuItemsNo>
 8006866:	4603      	mov	r3, r0
 8006868:	71bb      	strb	r3, [r7, #6]
	menuindex++;
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <Menu_SelectNext+0xd4>)
 800686c:	f993 3000 	ldrsb.w	r3, [r3]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	3301      	adds	r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	b25a      	sxtb	r2, r3
 8006878:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <Menu_SelectNext+0xd4>)
 800687a:	701a      	strb	r2, [r3, #0]
	if(no > Menu_GetMenuRows())        //Czy liczba pozycji menu jest wiêksza ni¿ liczba wyœwietlanych pozycji?
 800687c:	f7ff ff0a 	bl	8006694 <Menu_GetMenuRows>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	79bb      	ldrb	r3, [r7, #6]
 8006886:	4293      	cmp	r3, r2
 8006888:	d931      	bls.n	80068ee <Menu_SelectNext+0x92>
		{
			int8_t dist;               //Odleg³oœæ pomiêdzy pierwsz¹ wyœwietlan¹ pozycj¹, a pozycj¹ podœwietlon¹
			if(menuindex < menufirstpos) dist = no - menufirstpos + menuindex; //Jest zale¿na od tego, któa z pozycji jest wiêksza
 800688a:	4b29      	ldr	r3, [pc, #164]	; (8006930 <Menu_SelectNext+0xd4>)
 800688c:	f993 2000 	ldrsb.w	r2, [r3]
 8006890:	4b28      	ldr	r3, [pc, #160]	; (8006934 <Menu_SelectNext+0xd8>)
 8006892:	f993 3000 	ldrsb.w	r3, [r3]
 8006896:	429a      	cmp	r2, r3
 8006898:	da0e      	bge.n	80068b8 <Menu_SelectNext+0x5c>
 800689a:	4b26      	ldr	r3, [pc, #152]	; (8006934 <Menu_SelectNext+0xd8>)
 800689c:	f993 3000 	ldrsb.w	r3, [r3]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	79ba      	ldrb	r2, [r7, #6]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	4b21      	ldr	r3, [pc, #132]	; (8006930 <Menu_SelectNext+0xd4>)
 80068aa:	f993 3000 	ldrsb.w	r3, [r3]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	71fb      	strb	r3, [r7, #7]
 80068b6:	e00a      	b.n	80068ce <Menu_SelectNext+0x72>
			   else dist=menuindex-menufirstpos;
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <Menu_SelectNext+0xd4>)
 80068ba:	f993 3000 	ldrsb.w	r3, [r3]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <Menu_SelectNext+0xd8>)
 80068c2:	f993 3000 	ldrsb.w	r3, [r3]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	71fb      	strb	r3, [r7, #7]
			if(dist >= Menu_GetMenuRows()) menufirstpos++;  //Koniec ekranu, trzeba przewijaæ
 80068ce:	f997 4007 	ldrsb.w	r4, [r7, #7]
 80068d2:	f7ff fedf 	bl	8006694 <Menu_GetMenuRows>
 80068d6:	4603      	mov	r3, r0
 80068d8:	429c      	cmp	r4, r3
 80068da:	db08      	blt.n	80068ee <Menu_SelectNext+0x92>
 80068dc:	4b15      	ldr	r3, [pc, #84]	; (8006934 <Menu_SelectNext+0xd8>)
 80068de:	f993 3000 	ldrsb.w	r3, [r3]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	3301      	adds	r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	b25a      	sxtb	r2, r3
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <Menu_SelectNext+0xd8>)
 80068ec:	701a      	strb	r2, [r3, #0]
		}

	menuindex %= no;     //Liczymy wszysko modulo liczba pozycji w menu
 80068ee:	4b10      	ldr	r3, [pc, #64]	; (8006930 <Menu_SelectNext+0xd4>)
 80068f0:	f993 3000 	ldrsb.w	r3, [r3]
 80068f4:	461a      	mov	r2, r3
 80068f6:	79bb      	ldrb	r3, [r7, #6]
 80068f8:	fb92 f1f3 	sdiv	r1, r2, r3
 80068fc:	fb03 f301 	mul.w	r3, r3, r1
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	b25a      	sxtb	r2, r3
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <Menu_SelectNext+0xd4>)
 8006906:	701a      	strb	r2, [r3, #0]
	menufirstpos %= no;
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <Menu_SelectNext+0xd8>)
 800690a:	f993 3000 	ldrsb.w	r3, [r3]
 800690e:	461a      	mov	r2, r3
 8006910:	79bb      	ldrb	r3, [r7, #6]
 8006912:	fb92 f1f3 	sdiv	r1, r2, r3
 8006916:	fb03 f301 	mul.w	r3, r3, r1
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	b25a      	sxtb	r2, r3
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <Menu_SelectNext+0xd8>)
 8006920:	701a      	strb	r2, [r3, #0]
	Menu_Show();      //Wyœwietl menu
 8006922:	f7ff febf 	bl	80066a4 <Menu_Show>
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	2000033c 	.word	0x2000033c
 8006934:	2000033d 	.word	0x2000033d

08006938 <Menu_SelectPrev>:

void Menu_SelectPrev()
{
 8006938:	b598      	push	{r3, r4, r7, lr}
 800693a:	af00      	add	r7, sp, #0
	if(menuindex > 0)
 800693c:	4b23      	ldr	r3, [pc, #140]	; (80069cc <Menu_SelectPrev+0x94>)
 800693e:	f993 3000 	ldrsb.w	r3, [r3]
 8006942:	2b00      	cmp	r3, #0
 8006944:	dd1a      	ble.n	800697c <Menu_SelectPrev+0x44>
	{
		if(menuindex == menufirstpos) menufirstpos--;
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <Menu_SelectPrev+0x94>)
 8006948:	f993 2000 	ldrsb.w	r2, [r3]
 800694c:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <Menu_SelectPrev+0x98>)
 800694e:	f993 3000 	ldrsb.w	r3, [r3]
 8006952:	429a      	cmp	r2, r3
 8006954:	d108      	bne.n	8006968 <Menu_SelectPrev+0x30>
 8006956:	4b1e      	ldr	r3, [pc, #120]	; (80069d0 <Menu_SelectPrev+0x98>)
 8006958:	f993 3000 	ldrsb.w	r3, [r3]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	b25a      	sxtb	r2, r3
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <Menu_SelectPrev+0x98>)
 8006966:	701a      	strb	r2, [r3, #0]
		menuindex--;               //Poprzedni element
 8006968:	4b18      	ldr	r3, [pc, #96]	; (80069cc <Menu_SelectPrev+0x94>)
 800696a:	f993 3000 	ldrsb.w	r3, [r3]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b2db      	uxtb	r3, r3
 8006974:	b25a      	sxtb	r2, r3
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <Menu_SelectPrev+0x94>)
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	e023      	b.n	80069c4 <Menu_SelectPrev+0x8c>
	}
	 else
	{
		if(menufirstpos == 0)
 800697c:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <Menu_SelectPrev+0x98>)
 800697e:	f993 3000 	ldrsb.w	r3, [r3]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d116      	bne.n	80069b4 <Menu_SelectPrev+0x7c>
		{
			menuindex=Menu_GetMenuItemsNo()-1;  //Zawijamy menu
 8006986:	f7ff fe4b 	bl	8006620 <Menu_GetMenuItemsNo>
 800698a:	4603      	mov	r3, r0
 800698c:	3b01      	subs	r3, #1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	b25a      	sxtb	r2, r3
 8006992:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <Menu_SelectPrev+0x94>)
 8006994:	701a      	strb	r2, [r3, #0]
			if(Menu_GetMenuItemsNo()>Menu_GetMenuRows()) menufirstpos = menuindex;  //Jezeli mamy mniej pozycji menu niz linii na LCD to nie zmieniamy numeru pierwszej pozycji menu
 8006996:	f7ff fe43 	bl	8006620 <Menu_GetMenuItemsNo>
 800699a:	4603      	mov	r3, r0
 800699c:	461c      	mov	r4, r3
 800699e:	f7ff fe79 	bl	8006694 <Menu_GetMenuRows>
 80069a2:	4603      	mov	r3, r0
 80069a4:	429c      	cmp	r4, r3
 80069a6:	d90d      	bls.n	80069c4 <Menu_SelectPrev+0x8c>
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <Menu_SelectPrev+0x94>)
 80069aa:	f993 2000 	ldrsb.w	r2, [r3]
 80069ae:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <Menu_SelectPrev+0x98>)
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e007      	b.n	80069c4 <Menu_SelectPrev+0x8c>
		} else menuindex = Menu_GetMenuItemsNo()-1;
 80069b4:	f7ff fe34 	bl	8006620 <Menu_GetMenuItemsNo>
 80069b8:	4603      	mov	r3, r0
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	b25a      	sxtb	r2, r3
 80069c0:	4b02      	ldr	r3, [pc, #8]	; (80069cc <Menu_SelectPrev+0x94>)
 80069c2:	701a      	strb	r2, [r3, #0]
	}
	Menu_Show();     //Wyswietl menu
 80069c4:	f7ff fe6e 	bl	80066a4 <Menu_Show>
}
 80069c8:	bf00      	nop
 80069ca:	bd98      	pop	{r3, r4, r7, pc}
 80069cc:	2000033c 	.word	0x2000033c
 80069d0:	2000033d 	.word	0x2000033d

080069d4 <Menu_Back>:

void Menu_Back()
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
	menufirstpos = 0;
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <Menu_Back+0x24>)
 80069da:	2200      	movs	r2, #0
 80069dc:	701a      	strb	r2, [r3, #0]
	menuindex = 0;
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <Menu_Back+0x28>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]
	currMenuPtr = currMenuPtr->parent;
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <Menu_Back+0x2c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	4a05      	ldr	r2, [pc, #20]	; (8006a00 <Menu_Back+0x2c>)
 80069ec:	6013      	str	r3, [r2, #0]
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	2000033d 	.word	0x2000033d
 80069fc:	2000033c 	.word	0x2000033c
 8006a00:	20000024 	.word	0x20000024

08006a04 <Menu_Click>:

void Menu_Click()
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
  const struct menuitem *tmpmenuitem = Menu_GetMenuItem(menuindex);
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <Menu_Click+0x58>)
 8006a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fe20 	bl	8006658 <Menu_GetMenuItem>
 8006a18:	60f8      	str	r0, [r7, #12]
  const struct menuitem *submenu = tmpmenuitem->submenu;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	60bb      	str	r3, [r7, #8]

  menuitemfuncptr mfptr = tmpmenuitem->menuitemfunc;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	607b      	str	r3, [r7, #4]
  if(mfptr) (*mfptr)();
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <Menu_Click+0x2c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4798      	blx	r3
  if(submenu) {
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d008      	beq.n	8006a48 <Menu_Click+0x44>
	  currMenuPtr = submenu;
 8006a36:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <Menu_Click+0x5c>)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6013      	str	r3, [r2, #0]
	  menuindex = 0;
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <Menu_Click+0x58>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
	  menufirstpos = 0;
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <Menu_Click+0x60>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
   }
  UG_FillScreen( C_BLACK );
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f000 fc53 	bl	80072f4 <UG_FillScreen>
  Menu_Show();
 8006a4e:	f7ff fe29 	bl	80066a4 <Menu_Show>
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	2000033c 	.word	0x2000033c
 8006a60:	20000024 	.word	0x20000024
 8006a64:	2000033d 	.word	0x2000033d

08006a68 <GUI_init>:

void GUI_init(void) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0

  /* -------------------------------------------------------------------------------- */
  /* Define µGUI structure (ST7735 128x160)                              			  */
  /* -------------------------------------------------------------------------------- */
  UG_Init(&gui1,(void(*)(UG_S16,UG_S16,UG_COLOR))ST7735_DrawPixel,ST7735_HEIGHT,ST7735_WIDTH);
 8006a6c:	2382      	movs	r3, #130	; 0x82
 8006a6e:	22a1      	movs	r2, #161	; 0xa1
 8006a70:	4909      	ldr	r1, [pc, #36]	; (8006a98 <GUI_init+0x30>)
 8006a72:	480a      	ldr	r0, [pc, #40]	; (8006a9c <GUI_init+0x34>)
 8006a74:	f000 fb7c 	bl	8007170 <UG_Init>
  /* Clear Screen */
  UG_FillScreen( C_BLACK );
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f000 fc3b 	bl	80072f4 <UG_FillScreen>
  UG_FontSelect ( &FONT_6X8 ) ;
 8006a7e:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <GUI_init+0x38>)
 8006a80:	f000 fbfa 	bl	8007278 <UG_FontSelect>
  UG_SetBackcolor ( C_BLACK ) ;
 8006a84:	2000      	movs	r0, #0
 8006a86:	f000 fe4b 	bl	8007720 <UG_SetBackcolor>
  UG_SetForecolor ( C_CYAN ) ;
 8006a8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a8e:	f000 fe37 	bl	8007700 <UG_SetForecolor>
//  /* Show Window 1 */
//  UG_WindowShow( &window_1 );
//  UG_Update();
//  UG_WindowShow( &window_2 );
//  UG_Update();
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	080060c5 	.word	0x080060c5
 8006a9c:	2000046c 	.word	0x2000046c
 8006aa0:	0800d530 	.word	0x0800d530

08006aa4 <DAQ_channel_init>:
////  button1_1->str =
////  UG_OBJECT* obj = _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id );
//}
//

void DAQ_channel_init( float ph_power, float th_temp_C, uint8_t channel_no) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	ed87 0a03 	vstr	s0, [r7, #12]
 8006aae:	edc7 0a02 	vstr	s1, [r7, #8]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	71fb      	strb	r3, [r7, #7]
	switch(channel_no) {
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d857      	bhi.n	8006b6c <DAQ_channel_init+0xc8>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <DAQ_channel_init+0x20>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006afb 	.word	0x08006afb
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006b47 	.word	0x08006b47
	case 0:
		photodiode_init(&photodiode[0], ph_power);
 8006ad4:	ed97 0a03 	vldr	s0, [r7, #12]
 8006ad8:	4826      	ldr	r0, [pc, #152]	; (8006b74 <DAQ_channel_init+0xd0>)
 8006ada:	f7fb fa15 	bl	8001f08 <photodiode_init>
		thermistor_init(&thermistor[0], th_temp_C);
 8006ade:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ae2:	4825      	ldr	r0, [pc, #148]	; (8006b78 <DAQ_channel_init+0xd4>)
 8006ae4:	f7fb f93a 	bl	8001d5c <thermistor_init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET); //transistor closed -> channel open
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2101      	movs	r1, #1
 8006aec:	4823      	ldr	r0, [pc, #140]	; (8006b7c <DAQ_channel_init+0xd8>)
 8006aee:	f7fd f895 	bl	8003c1c <HAL_GPIO_WritePin>
		flag_channel[0] = 1;
 8006af2:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <DAQ_channel_init+0xdc>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	701a      	strb	r2, [r3, #0]
		break;
 8006af8:	e038      	b.n	8006b6c <DAQ_channel_init+0xc8>

	case 1:
		photodiode_init(&photodiode[1], ph_power);
 8006afa:	ed97 0a03 	vldr	s0, [r7, #12]
 8006afe:	4821      	ldr	r0, [pc, #132]	; (8006b84 <DAQ_channel_init+0xe0>)
 8006b00:	f7fb fa02 	bl	8001f08 <photodiode_init>
		thermistor_init(&thermistor[1], th_temp_C);
 8006b04:	ed97 0a02 	vldr	s0, [r7, #8]
 8006b08:	481f      	ldr	r0, [pc, #124]	; (8006b88 <DAQ_channel_init+0xe4>)
 8006b0a:	f7fb f927 	bl	8001d5c <thermistor_init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_RESET);
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2102      	movs	r1, #2
 8006b12:	481a      	ldr	r0, [pc, #104]	; (8006b7c <DAQ_channel_init+0xd8>)
 8006b14:	f7fd f882 	bl	8003c1c <HAL_GPIO_WritePin>
		flag_channel[1] = 1;
 8006b18:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <DAQ_channel_init+0xdc>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	705a      	strb	r2, [r3, #1]
		break;
 8006b1e:	e025      	b.n	8006b6c <DAQ_channel_init+0xc8>

	case 2:
		photodiode_init(&photodiode[2], ph_power);
 8006b20:	ed97 0a03 	vldr	s0, [r7, #12]
 8006b24:	4819      	ldr	r0, [pc, #100]	; (8006b8c <DAQ_channel_init+0xe8>)
 8006b26:	f7fb f9ef 	bl	8001f08 <photodiode_init>
		thermistor_init(&thermistor[2], th_temp_C);
 8006b2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8006b2e:	4818      	ldr	r0, [pc, #96]	; (8006b90 <DAQ_channel_init+0xec>)
 8006b30:	f7fb f914 	bl	8001d5c <thermistor_init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_RESET);
 8006b34:	2200      	movs	r2, #0
 8006b36:	2104      	movs	r1, #4
 8006b38:	4810      	ldr	r0, [pc, #64]	; (8006b7c <DAQ_channel_init+0xd8>)
 8006b3a:	f7fd f86f 	bl	8003c1c <HAL_GPIO_WritePin>
		flag_channel[2] = 1;
 8006b3e:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <DAQ_channel_init+0xdc>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	709a      	strb	r2, [r3, #2]
		break;
 8006b44:	e012      	b.n	8006b6c <DAQ_channel_init+0xc8>

	case 3:
		photodiode_init(&photodiode[3], ph_power);
 8006b46:	ed97 0a03 	vldr	s0, [r7, #12]
 8006b4a:	4812      	ldr	r0, [pc, #72]	; (8006b94 <DAQ_channel_init+0xf0>)
 8006b4c:	f7fb f9dc 	bl	8001f08 <photodiode_init>
		thermistor_init(&thermistor[3], th_temp_C);
 8006b50:	ed97 0a02 	vldr	s0, [r7, #8]
 8006b54:	4810      	ldr	r0, [pc, #64]	; (8006b98 <DAQ_channel_init+0xf4>)
 8006b56:	f7fb f901 	bl	8001d5c <thermistor_init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_RESET);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2108      	movs	r1, #8
 8006b5e:	4807      	ldr	r0, [pc, #28]	; (8006b7c <DAQ_channel_init+0xd8>)
 8006b60:	f7fd f85c 	bl	8003c1c <HAL_GPIO_WritePin>
		flag_channel[3] = 1;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <DAQ_channel_init+0xdc>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	70da      	strb	r2, [r3, #3]
		break;
 8006b6a:	bf00      	nop
	}
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000ac8 	.word	0x20000ac8
 8006b78:	20000de8 	.word	0x20000de8
 8006b7c:	40020c00 	.word	0x40020c00
 8006b80:	20000824 	.word	0x20000824
 8006b84:	20000ad4 	.word	0x20000ad4
 8006b88:	20000df4 	.word	0x20000df4
 8006b8c:	20000ae0 	.word	0x20000ae0
 8006b90:	20000e00 	.word	0x20000e00
 8006b94:	20000aec 	.word	0x20000aec
 8006b98:	20000e0c 	.word	0x20000e0c

08006b9c <func_A1>:
//
/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 1 -- */
/* -------------------------------------------------------------------------------- */
void func_A1() {
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
//enable
}
 8006ba0:	bf00      	nop
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <func_A2>:
void func_A2() {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
	MENU_CHANGE_value(&thermistor[0]);
 8006bb0:	4802      	ldr	r0, [pc, #8]	; (8006bbc <func_A2+0x10>)
 8006bb2:	f000 f8bf 	bl	8006d34 <MENU_CHANGE_value>
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000de8 	.word	0x20000de8

08006bc0 <func_A3>:

void func_A3() {
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
//set photodiode limit
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <func_A4>:

void func_A4() {
 8006bce:	b480      	push	{r7}
 8006bd0:	af00      	add	r7, sp, #0
//save values to eeprom
}
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <func_B1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 2 -- */
/* -------------------------------------------------------------------------------- */
void func_B1(){
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0

}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <func_B2>:

void func_B2() {
 8006bea:	b480      	push	{r7}
 8006bec:	af00      	add	r7, sp, #0

}
 8006bee:	bf00      	nop
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <func_B3>:

void func_B3() {
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0

}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <func_B4>:

void func_B4() {
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0

}
 8006c0a:	bf00      	nop
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <func_C1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 3 -- */
/* -------------------------------------------------------------------------------- */
void func_C1() {
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0

}
 8006c18:	bf00      	nop
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <func_C2>:
void func_C2() {
 8006c22:	b480      	push	{r7}
 8006c24:	af00      	add	r7, sp, #0

}
 8006c26:	bf00      	nop
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <func_C3>:

void func_C3() {
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0

}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <func_C4>:

void func_C4() {
 8006c3e:	b480      	push	{r7}
 8006c40:	af00      	add	r7, sp, #0

}
 8006c42:	bf00      	nop
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <func_D1>:

/* -------------------------------------------------------------------------------- */
/* -- CHANNEL 4 -- */
/* -------------------------------------------------------------------------------- */
void func_D1(){
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0

}
 8006c50:	bf00      	nop
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <func_D2>:

void func_D2() {
 8006c5a:	b480      	push	{r7}
 8006c5c:	af00      	add	r7, sp, #0

}
 8006c5e:	bf00      	nop
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <func_D3>:

void func_D3() {
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0

}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <func_D4>:

void func_D4() {
 8006c76:	b480      	push	{r7}
 8006c78:	af00      	add	r7, sp, #0

}
 8006c7a:	bf00      	nop
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <func_display>:


void func_display(void) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
	ST7735_FillScreen(BLACK);
 8006c88:	2000      	movs	r0, #0
 8006c8a:	f7ff fbad 	bl	80063e8 <ST7735_FillScreen>
	while( (encoder_enter(&encoder_1)) == false) {
 8006c8e:	e001      	b.n	8006c94 <func_display+0x10>
		display_values();
 8006c90:	f7fa fd6e 	bl	8001770 <display_values>
	while( (encoder_enter(&encoder_1)) == false) {
 8006c94:	4805      	ldr	r0, [pc, #20]	; (8006cac <func_display+0x28>)
 8006c96:	f7ff fcad 	bl	80065f4 <encoder_enter>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f4      	bne.n	8006c90 <func_display+0xc>
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000ab8 	.word	0x20000ab8

08006cb0 <MENU_CHANGE_cursor>:

void MENU_CHANGE_cursor(struct thermistor *th) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]


	while(encoder_enter(&encoder_1) == false) {
 8006cb8:	e02b      	b.n	8006d12 <MENU_CHANGE_cursor+0x62>

		if (encoder_step_clockwise(&encoder_1) == true)
 8006cba:	481d      	ldr	r0, [pc, #116]	; (8006d30 <MENU_CHANGE_cursor+0x80>)
 8006cbc:	f7ff fc70 	bl	80065a0 <encoder_step_clockwise>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <MENU_CHANGE_cursor+0x34>
		{
			if((th->place_value == 0)) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7a5b      	ldrb	r3, [r3, #9]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <MENU_CHANGE_cursor+0x26>
				th->place_value = 8;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	725a      	strb	r2, [r3, #9]
 8006cd4:	e01a      	b.n	8006d0c <MENU_CHANGE_cursor+0x5c>
			}
			else{
				(th->place_value)--;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7a5b      	ldrb	r3, [r3, #9]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	725a      	strb	r2, [r3, #9]
 8006ce2:	e013      	b.n	8006d0c <MENU_CHANGE_cursor+0x5c>
			}
		}
		else if (encoder_step_counterclockwise(&encoder_1) == true)
 8006ce4:	4812      	ldr	r0, [pc, #72]	; (8006d30 <MENU_CHANGE_cursor+0x80>)
 8006ce6:	f7ff fc70 	bl	80065ca <encoder_step_counterclockwise>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <MENU_CHANGE_cursor+0x5c>
		{
			if( (th->place_value == 8) ) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7a5b      	ldrb	r3, [r3, #9]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d103      	bne.n	8006d00 <MENU_CHANGE_cursor+0x50>
				th->place_value = 0;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	725a      	strb	r2, [r3, #9]
 8006cfe:	e005      	b.n	8006d0c <MENU_CHANGE_cursor+0x5c>
			}
			else {
				(th->place_value)++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7a5b      	ldrb	r3, [r3, #9]
 8006d04:	3301      	adds	r3, #1
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	725a      	strb	r2, [r3, #9]
			}

		}

		MENU_SHOW_cursor(th);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f969 	bl	8006fe4 <MENU_SHOW_cursor>
	while(encoder_enter(&encoder_1) == false) {
 8006d12:	4807      	ldr	r0, [pc, #28]	; (8006d30 <MENU_CHANGE_cursor+0x80>)
 8006d14:	f7ff fc6e 	bl	80065f4 <encoder_enter>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f083 0301 	eor.w	r3, r3, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ca      	bne.n	8006cba <MENU_CHANGE_cursor+0xa>
	}
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000ab8 	.word	0x20000ab8

08006d34 <MENU_CHANGE_value>:

void MENU_CHANGE_value(struct thermistor *th) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	UG_FillScreen( C_BLACK );
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f000 fad9 	bl	80072f4 <UG_FillScreen>
	MENU_SHOW_value(th->temperature_C_max);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f8d0 	bl	8006eec <MENU_SHOW_value>
	MENU_SHOW_cursor(th);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f949 	bl	8006fe4 <MENU_SHOW_cursor>
	MENU_CHANGE_cursor(th);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff ffac 	bl	8006cb0 <MENU_CHANGE_cursor>

	if(th->place_value != 8){
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7a5b      	ldrb	r3, [r3, #9]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d039      	beq.n	8006dd4 <MENU_CHANGE_value+0xa0>
		while(encoder_enter(&encoder_1) == false) {
 8006d60:	e02c      	b.n	8006dbc <MENU_CHANGE_value+0x88>

			if (encoder_step_clockwise(&encoder_1) == true)
 8006d62:	481e      	ldr	r0, [pc, #120]	; (8006ddc <MENU_CHANGE_value+0xa8>)
 8006d64:	f7ff fc1c 	bl	80065a0 <encoder_step_clockwise>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00f      	beq.n	8006d8e <MENU_CHANGE_value+0x5a>
			{
				th->temperature_C_max = MENU_CALC_value(th->temperature_C_max, 1, th->place_value);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6858      	ldr	r0, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7a5b      	ldrb	r3, [r3, #9]
 8006d76:	461a      	mov	r2, r3
 8006d78:	2101      	movs	r1, #1
 8006d7a:	f000 f831 	bl	8006de0 <MENU_CALC_value>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	605a      	str	r2, [r3, #4]
				MENU_SHOW_value(th->temperature_C_max);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 f8af 	bl	8006eec <MENU_SHOW_value>
			}
			if (encoder_step_counterclockwise(&encoder_1) == true)
 8006d8e:	4813      	ldr	r0, [pc, #76]	; (8006ddc <MENU_CHANGE_value+0xa8>)
 8006d90:	f7ff fc1b 	bl	80065ca <encoder_step_counterclockwise>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d010      	beq.n	8006dbc <MENU_CHANGE_value+0x88>
			{
				th->temperature_C_max = MENU_CALC_value(th->temperature_C_max, -1,  th->place_value);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6858      	ldr	r0, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7a5b      	ldrb	r3, [r3, #9]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f04f 31ff 	mov.w	r1, #4294967295
 8006da8:	f000 f81a 	bl	8006de0 <MENU_CALC_value>
 8006dac:	4602      	mov	r2, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	605a      	str	r2, [r3, #4]
				MENU_SHOW_value(th->temperature_C_max);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f898 	bl	8006eec <MENU_SHOW_value>
		while(encoder_enter(&encoder_1) == false) {
 8006dbc:	4807      	ldr	r0, [pc, #28]	; (8006ddc <MENU_CHANGE_value+0xa8>)
 8006dbe:	f7ff fc19 	bl	80065f4 <encoder_enter>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f083 0301 	eor.w	r3, r3, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1c9      	bne.n	8006d62 <MENU_CHANGE_value+0x2e>
			}
		}
		MENU_CHANGE_value(th);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ffb0 	bl	8006d34 <MENU_CHANGE_value>

		///???????????????????????????
	}


}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000ab8 	.word	0x20000ab8

08006de0 <MENU_CALC_value>:


uint32_t MENU_CALC_value(uint32_t value_in, int8_t direction, uint8_t dec) {
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
 8006dec:	4613      	mov	r3, r2
 8006dee:	70bb      	strb	r3, [r7, #2]
	uint32_t value_out = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]

	switch (dec)
 8006df4:	78bb      	ldrb	r3, [r7, #2]
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	d861      	bhi.n	8006ebe <MENU_CALC_value+0xde>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <MENU_CALC_value+0x20>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e43 	.word	0x08006e43
 8006e0c:	08006e57 	.word	0x08006e57
 8006e10:	08006e6d 	.word	0x08006e6d
 8006e14:	08006e83 	.word	0x08006e83
 8006e18:	08006e97 	.word	0x08006e97
 8006e1c:	08006eab 	.word	0x08006eab
	{
	case 0:
		value_out = value_in + (direction * 1);
 8006e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
		break;
 8006e2a:	e049      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 1:
		value_out = value_in + (direction * 10);
 8006e2c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	461a      	mov	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
		break;
 8006e40:	e03e      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 2:
		value_out = value_in + (direction * 100);
 8006e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e46:	2264      	movs	r2, #100	; 0x64
 8006e48:	fb02 f303 	mul.w	r3, r2, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
		break;
 8006e54:	e034      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 3:
		value_out = value_in + (direction * 1000);
 8006e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
		break;
 8006e6a:	e029      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 4:
		value_out = value_in + (direction * 10000);
 8006e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e70:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
		break;
 8006e80:	e01e      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 5:
		value_out = value_in + (direction * 100000);
 8006e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <MENU_CALC_value+0xfc>)
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4413      	add	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
		break;
 8006e94:	e014      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 6:
		value_out = value_in + (direction * 1000000);
 8006e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e9a:	4a11      	ldr	r2, [pc, #68]	; (8006ee0 <MENU_CALC_value+0x100>)
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
		break;
 8006ea8:	e00a      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	case 7:
		value_out = value_in + (direction * 10000000);
 8006eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eae:	4a0d      	ldr	r2, [pc, #52]	; (8006ee4 <MENU_CALC_value+0x104>)
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
		break;
 8006ebc:	e000      	b.n	8006ec0 <MENU_CALC_value+0xe0>
	default:
		break;
 8006ebe:	bf00      	nop
	}
	if (value_out < 0) value_out = 0;
	if (value_out > 99999999) value_out = 99999999;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <MENU_CALC_value+0x108>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <MENU_CALC_value+0xec>
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <MENU_CALC_value+0x108>)
 8006eca:	60fb      	str	r3, [r7, #12]
	return value_out;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	000186a0 	.word	0x000186a0
 8006ee0:	000f4240 	.word	0x000f4240
 8006ee4:	00989680 	.word	0x00989680
 8006ee8:	05f5e0ff 	.word	0x05f5e0ff

08006eec <MENU_SHOW_value>:

void MENU_SHOW_value(uint32_t value) {
 8006eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eee:	b091      	sub	sp, #68	; 0x44
 8006ef0:	af06      	add	r7, sp, #24
 8006ef2:	6078      	str	r0, [r7, #4]
	char buffer[20];
	uint8_t cijfer[8];

	if (value <= 99999)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a36      	ldr	r2, [pc, #216]	; (8006fd0 <MENU_SHOW_value+0xe4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d85f      	bhi.n	8006fbc <MENU_SHOW_value+0xd0>
	{
		for (uint8_t i = 0; i < 8; i++)
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f02:	e01e      	b.n	8006f42 <MENU_SHOW_value+0x56>
		{
			cijfer[i] = (uint8_t) (value % 10) + 48;
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <MENU_SHOW_value+0xe8>)
 8006f08:	fba3 2301 	umull	r2, r3, r3, r1
 8006f0c:	08da      	lsrs	r2, r3, #3
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	1aca      	subs	r2, r1, r3
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1e:	3230      	adds	r2, #48	; 0x30
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006f26:	440b      	add	r3, r1
 8006f28:	f803 2c20 	strb.w	r2, [r3, #-32]
			value /= 10;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a29      	ldr	r2, [pc, #164]	; (8006fd4 <MENU_SHOW_value+0xe8>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < 8; i++)
 8006f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f46:	2b07      	cmp	r3, #7
 8006f48:	d9dc      	bls.n	8006f04 <MENU_SHOW_value+0x18>
		}
		sprintf(buffer, "%c%c%c %c%c%c.%c%c", cijfer[7], cijfer[6], cijfer[5], cijfer[4], cijfer[3], cijfer[2], cijfer[1], cijfer[0]);
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	469c      	mov	ip, r3
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	469e      	mov	lr, r3
 8006f52:	7b7b      	ldrb	r3, [r7, #13]
 8006f54:	7b3a      	ldrb	r2, [r7, #12]
 8006f56:	7af9      	ldrb	r1, [r7, #11]
 8006f58:	7ab8      	ldrb	r0, [r7, #10]
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	7a78      	ldrb	r0, [r7, #9]
 8006f5e:	4605      	mov	r5, r0
 8006f60:	7a38      	ldrb	r0, [r7, #8]
 8006f62:	4606      	mov	r6, r0
 8006f64:	f107 0010 	add.w	r0, r7, #16
 8006f68:	9605      	str	r6, [sp, #20]
 8006f6a:	9504      	str	r5, [sp, #16]
 8006f6c:	9403      	str	r4, [sp, #12]
 8006f6e:	9102      	str	r1, [sp, #8]
 8006f70:	9201      	str	r2, [sp, #4]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	4673      	mov	r3, lr
 8006f76:	4662      	mov	r2, ip
 8006f78:	4917      	ldr	r1, [pc, #92]	; (8006fd8 <MENU_SHOW_value+0xec>)
 8006f7a:	f001 faa1 	bl	80084c0 <siprintf>
		UG_FillFrame(0, gui1.font.font_height+(0*gui1.font.font_height), UG_GetXDim(), (gui1.font.font_height)+(gui1.font.font_height+(0*gui1.font.font_height)), C_BLACK);
 8006f7e:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <MENU_SHOW_value+0xf0>)
 8006f80:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
 8006f84:	f000 fbdc 	bl	8007740 <UG_GetXDim>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <MENU_SHOW_value+0xf0>)
 8006f8e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	b21b      	sxth	r3, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	9200      	str	r2, [sp, #0]
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f000 f9c8 	bl	8007338 <UG_FillFrame>
		UG_PutString(2, gui1.font.font_height+(0*gui1.font.font_height), buffer );
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <MENU_SHOW_value+0xf0>)
 8006faa:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006fae:	f107 0210 	add.w	r2, r7, #16
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	2002      	movs	r0, #2
 8006fb6:	f000 fa2f 	bl	8007418 <UG_PutString>
	else {
		UG_PutString( 2, 50, "   Error");

	}

}
 8006fba:	e004      	b.n	8006fc6 <MENU_SHOW_value+0xda>
		UG_PutString( 2, 50, "   Error");
 8006fbc:	4a08      	ldr	r2, [pc, #32]	; (8006fe0 <MENU_SHOW_value+0xf4>)
 8006fbe:	2132      	movs	r1, #50	; 0x32
 8006fc0:	2002      	movs	r0, #2
 8006fc2:	f000 fa29 	bl	8007418 <UG_PutString>
}
 8006fc6:	bf00      	nop
 8006fc8:	372c      	adds	r7, #44	; 0x2c
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	0001869f 	.word	0x0001869f
 8006fd4:	cccccccd 	.word	0xcccccccd
 8006fd8:	0800c310 	.word	0x0800c310
 8006fdc:	2000046c 	.word	0x2000046c
 8006fe0:	0800c324 	.word	0x0800c324

08006fe4 <MENU_SHOW_cursor>:

void MENU_SHOW_cursor(struct thermistor *th) {
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	6078      	str	r0, [r7, #4]
	uint8_t cursor_position = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]

//	uint8_t font_width = gui1.font.char_width+gui1.font.char_h_space;
//	uint8_t font_height = gui1.font.char_height+gui1.font.char_v_space;

	switch (th->place_value)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7a5b      	ldrb	r3, [r3, #9]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d85e      	bhi.n	80070b6 <MENU_SHOW_cursor+0xd2>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <MENU_SHOW_cursor+0x1c>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007025 	.word	0x08007025
 8007004:	0800703b 	.word	0x0800703b
 8007008:	0800704d 	.word	0x0800704d
 800700c:	08007065 	.word	0x08007065
 8007010:	0800707b 	.word	0x0800707b
 8007014:	0800708d 	.word	0x0800708d
 8007018:	0800709d 	.word	0x0800709d
 800701c:	080070ab 	.word	0x080070ab
 8007020:	080070b1 	.word	0x080070b1
	{
	case 0:
		cursor_position = 2+(9*gui1.font.font_width);
 8007024:	4b4f      	ldr	r3, [pc, #316]	; (8007164 <MENU_SHOW_cursor+0x180>)
 8007026:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800702a:	b2db      	uxtb	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	00d2      	lsls	r2, r2, #3
 8007030:	4413      	add	r3, r2
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3302      	adds	r3, #2
 8007036:	73fb      	strb	r3, [r7, #15]
		break;
 8007038:	e03e      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 1:
		cursor_position = 2+(8*gui1.font.font_width);
 800703a:	4b4a      	ldr	r3, [pc, #296]	; (8007164 <MENU_SHOW_cursor+0x180>)
 800703c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8007040:	b2db      	uxtb	r3, r3
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	b2db      	uxtb	r3, r3
 8007046:	3302      	adds	r3, #2
 8007048:	73fb      	strb	r3, [r7, #15]
		break;
 800704a:	e035      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 2:
		cursor_position = 2+(6*gui1.font.font_width);
 800704c:	4b45      	ldr	r3, [pc, #276]	; (8007164 <MENU_SHOW_cursor+0x180>)
 800704e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	0052      	lsls	r2, r2, #1
 8007058:	4413      	add	r3, r2
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	3302      	adds	r3, #2
 8007060:	73fb      	strb	r3, [r7, #15]
		break;
 8007062:	e029      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 3:
		cursor_position = 2+(5*gui1.font.font_width);
 8007064:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <MENU_SHOW_cursor+0x180>)
 8007066:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800706a:	b2db      	uxtb	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	4413      	add	r3, r2
 8007072:	b2db      	uxtb	r3, r3
 8007074:	3302      	adds	r3, #2
 8007076:	73fb      	strb	r3, [r7, #15]
		break;
 8007078:	e01e      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 4:
		cursor_position = 2+(4*gui1.font.font_width);
 800707a:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <MENU_SHOW_cursor+0x180>)
 800707c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8007080:	b2db      	uxtb	r3, r3
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	b2db      	uxtb	r3, r3
 8007086:	3302      	adds	r3, #2
 8007088:	73fb      	strb	r3, [r7, #15]
		break;
 800708a:	e015      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 5:
		cursor_position = 2+(2*gui1.font.font_width);
 800708c:	4b35      	ldr	r3, [pc, #212]	; (8007164 <MENU_SHOW_cursor+0x180>)
 800708e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8007092:	3301      	adds	r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
		break;
 800709a:	e00d      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 6:
		cursor_position = 2+(1*gui1.font.font_width);
 800709c:	4b31      	ldr	r3, [pc, #196]	; (8007164 <MENU_SHOW_cursor+0x180>)
 800709e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	3302      	adds	r3, #2
 80070a6:	73fb      	strb	r3, [r7, #15]
		break;
 80070a8:	e006      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 7:
		cursor_position = 2+(0*gui1.font.font_width);
 80070aa:	2302      	movs	r3, #2
 80070ac:	73fb      	strb	r3, [r7, #15]
		break;
 80070ae:	e003      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	case 8:
		cursor_position = 2+(0*gui1.font.font_width);
 80070b0:	2302      	movs	r3, #2
 80070b2:	73fb      	strb	r3, [r7, #15]
		break;
 80070b4:	e000      	b.n	80070b8 <MENU_SHOW_cursor+0xd4>
	default:
		break;
 80070b6:	bf00      	nop
	}

	if(th->place_value != th->previous_place_value) {
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7a5a      	ldrb	r2, [r3, #9]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	7a9b      	ldrb	r3, [r3, #10]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d02c      	beq.n	800711e <MENU_SHOW_cursor+0x13a>
		UG_FillFrame(0, gui1.font.font_height+(1*gui1.font.font_height), UG_GetXDim(), gui1.font.font_height+(2*gui1.font.font_height), C_BLACK);
 80070c4:	4b27      	ldr	r3, [pc, #156]	; (8007164 <MENU_SHOW_cursor+0x180>)
 80070c6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	b21c      	sxth	r4, r3
 80070d2:	f000 fb35 	bl	8007740 <UG_GetXDim>
 80070d6:	4603      	mov	r3, r0
 80070d8:	4619      	mov	r1, r3
 80070da:	4b22      	ldr	r3, [pc, #136]	; (8007164 <MENU_SHOW_cursor+0x180>)
 80070dc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	0052      	lsls	r2, r2, #1
 80070e6:	4413      	add	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	b21b      	sxth	r3, r3
 80070ec:	2200      	movs	r2, #0
 80070ee:	9200      	str	r2, [sp, #0]
 80070f0:	460a      	mov	r2, r1
 80070f2:	4621      	mov	r1, r4
 80070f4:	2000      	movs	r0, #0
 80070f6:	f000 f91f 	bl	8007338 <UG_FillFrame>
		UG_PutString( cursor_position, gui1.font.font_height+(1*gui1.font.font_height), "^" );
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	b218      	sxth	r0, r3
 80070fe:	4b19      	ldr	r3, [pc, #100]	; (8007164 <MENU_SHOW_cursor+0x180>)
 8007100:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8007104:	b29b      	uxth	r3, r3
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	b21b      	sxth	r3, r3
 800710c:	4a16      	ldr	r2, [pc, #88]	; (8007168 <MENU_SHOW_cursor+0x184>)
 800710e:	4619      	mov	r1, r3
 8007110:	f000 f982 	bl	8007418 <UG_PutString>
		th->previous_place_value = th->place_value;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7a5a      	ldrb	r2, [r3, #9]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	729a      	strb	r2, [r3, #10]
	}
	else {
		UG_PutString( cursor_position, gui1.font.font_height+(1*gui1.font.font_height), "^" );
	}

}
 800711c:	e01e      	b.n	800715c <MENU_SHOW_cursor+0x178>
	else if(th->place_value == 8) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7a5b      	ldrb	r3, [r3, #9]
 8007122:	2b08      	cmp	r3, #8
 8007124:	d10d      	bne.n	8007142 <MENU_SHOW_cursor+0x15e>
		UG_PutString( cursor_position, gui1.font.font_height+(1*gui1.font.font_height), "<Back>" );
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	b218      	sxth	r0, r3
 800712a:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <MENU_SHOW_cursor+0x180>)
 800712c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8007130:	b29b      	uxth	r3, r3
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	b29b      	uxth	r3, r3
 8007136:	b21b      	sxth	r3, r3
 8007138:	4a0c      	ldr	r2, [pc, #48]	; (800716c <MENU_SHOW_cursor+0x188>)
 800713a:	4619      	mov	r1, r3
 800713c:	f000 f96c 	bl	8007418 <UG_PutString>
}
 8007140:	e00c      	b.n	800715c <MENU_SHOW_cursor+0x178>
		UG_PutString( cursor_position, gui1.font.font_height+(1*gui1.font.font_height), "^" );
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	b218      	sxth	r0, r3
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <MENU_SHOW_cursor+0x180>)
 8007148:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800714c:	b29b      	uxth	r3, r3
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	b29b      	uxth	r3, r3
 8007152:	b21b      	sxth	r3, r3
 8007154:	4a04      	ldr	r2, [pc, #16]	; (8007168 <MENU_SHOW_cursor+0x184>)
 8007156:	4619      	mov	r1, r3
 8007158:	f000 f95e 	bl	8007418 <UG_PutString>
}
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bd90      	pop	{r4, r7, pc}
 8007164:	2000046c 	.word	0x2000046c
 8007168:	0800c330 	.word	0x0800c330
 800716c:	0800c334 	.word	0x0800c334

08007170 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4611      	mov	r1, r2
 800717c:	461a      	mov	r2, r3
 800717e:	460b      	mov	r3, r1
 8007180:	80fb      	strh	r3, [r7, #6]
 8007182:	4613      	mov	r3, r2
 8007184:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	88ba      	ldrh	r2, [r7, #4]
 8007196:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2204      	movs	r2, #4
 800719c:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2204      	movs	r2, #4
 80071a2:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	b21a      	sxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29b      	uxth	r3, r3
 80071da:	b21a      	sxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	83da      	strh	r2, [r3, #30]
   g->font.char_h_space = 1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   g->font.char_v_space = 1;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   g->font.p = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
   g->desktop_color = C_DARK_GRAY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <UG_Init+0x100>)
 800720e:	649a      	str	r2, [r3, #72]	; 0x48
   g->fore_color = C_WHITE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007216:	641a      	str	r2, [r3, #64]	; 0x40
   g->back_color = C_BLACK;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8007230:	2300      	movs	r3, #0
 8007232:	75fb      	strb	r3, [r7, #23]
 8007234:	e00f      	b.n	8007256 <UG_Init+0xe6>
   {
      g->driver[i].driver = NULL;
 8007236:	7dfa      	ldrb	r2, [r7, #23]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	320a      	adds	r2, #10
 800723c:	2100      	movs	r1, #0
 800723e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      g->driver[i].state = 0;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	330a      	adds	r3, #10
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4413      	add	r3, r2
 800724c:	2200      	movs	r2, #0
 800724e:	711a      	strb	r2, [r3, #4]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	3301      	adds	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d9ec      	bls.n	8007236 <UG_Init+0xc6>
   }
   // assignment of gui structrue passed to the function to the pointer gui, declared at the top of ugui.c
   gui = g;
 800725c:	4a05      	ldr	r2, [pc, #20]	; (8007274 <UG_Init+0x104>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6013      	str	r3, [r2, #0]
   return 1;
 8007262:	2301      	movs	r3, #1
}
 8007264:	4618      	mov	r0, r3
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	00a9a9a9 	.word	0x00a9a9a9
 8007274:	20000340 	.word	0x20000340

08007278 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
   gui->font.p = font->p;
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <UG_FontSelect+0x78>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
   gui->font.char_width = font->char_width;
 800728a:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <UG_FontSelect+0x78>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8007294:	871a      	strh	r2, [r3, #56]	; 0x38
   gui->font.char_height = font->char_height;
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <UG_FontSelect+0x78>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80072a0:	875a      	strh	r2, [r3, #58]	; 0x3a
   gui->font.font_width = (gui->font.char_width + gui->font.char_h_space);
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <UG_FontSelect+0x78>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <UG_FontSelect+0x78>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <UG_FontSelect+0x78>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	b212      	sxth	r2, r2
 80072c0:	86da      	strh	r2, [r3, #54]	; 0x36
   gui->font.font_height = (gui->font.char_height + gui->font.char_v_space);
 80072c2:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <UG_FontSelect+0x78>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <UG_FontSelect+0x78>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	b29a      	uxth	r2, r3
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <UG_FontSelect+0x78>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	b212      	sxth	r2, r2
 80072e0:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000340 	.word	0x20000340

080072f4 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <UG_FillScreen+0x40>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29b      	uxth	r3, r3
 800730a:	b21a      	sxth	r2, r3
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <UG_FillScreen+0x40>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29b      	uxth	r3, r3
 800731a:	b219      	sxth	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	460b      	mov	r3, r1
 8007322:	2100      	movs	r1, #0
 8007324:	2000      	movs	r0, #0
 8007326:	f000 f807 	bl	8007338 <UG_FillFrame>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000340 	.word	0x20000340

08007338 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8007338:	b5b0      	push	{r4, r5, r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af02      	add	r7, sp, #8
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	4611      	mov	r1, r2
 8007344:	461a      	mov	r2, r3
 8007346:	4623      	mov	r3, r4
 8007348:	80fb      	strh	r3, [r7, #6]
 800734a:	4603      	mov	r3, r0
 800734c:	80bb      	strh	r3, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	807b      	strh	r3, [r7, #2]
 8007352:	4613      	mov	r3, r2
 8007354:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8007356:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800735a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800735e:	429a      	cmp	r2, r3
 8007360:	da05      	bge.n	800736e <UG_FillFrame+0x36>
   {
      n = x2;
 8007362:	887b      	ldrh	r3, [r7, #2]
 8007364:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	807b      	strh	r3, [r7, #2]
      x1 = n;
 800736a:	89fb      	ldrh	r3, [r7, #14]
 800736c:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 800736e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	da05      	bge.n	8007386 <UG_FillFrame+0x4e>
   {
      n = y2;
 800737a:	883b      	ldrh	r3, [r7, #0]
 800737c:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 800737e:	88bb      	ldrh	r3, [r7, #4]
 8007380:	803b      	strh	r3, [r7, #0]
      y1 = n;
 8007382:	89fb      	ldrh	r3, [r7, #14]
 8007384:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8007386:	4b23      	ldr	r3, [pc, #140]	; (8007414 <UG_FillFrame+0xdc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d012      	beq.n	80073bc <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007396:	4b1f      	ldr	r3, [pc, #124]	; (8007414 <UG_FillFrame+0xdc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739c:	461d      	mov	r5, r3
 800739e:	f9b7 4000 	ldrsh.w	r4, [r7]
 80073a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80073a6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80073aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	4623      	mov	r3, r4
 80073b4:	47a8      	blx	r5
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d027      	beq.n	800740c <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 80073bc:	88bb      	ldrh	r3, [r7, #4]
 80073be:	81bb      	strh	r3, [r7, #12]
 80073c0:	e01d      	b.n	80073fe <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	81fb      	strh	r3, [r7, #14]
 80073c6:	e00e      	b.n	80073e6 <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 80073c8:	4b12      	ldr	r3, [pc, #72]	; (8007414 <UG_FillFrame+0xdc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80073d2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80073d6:	6a3a      	ldr	r2, [r7, #32]
 80073d8:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80073da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3301      	adds	r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	81fb      	strh	r3, [r7, #14]
 80073e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80073ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	ddea      	ble.n	80073c8 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80073f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3301      	adds	r3, #1
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	81bb      	strh	r3, [r7, #12]
 80073fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007402:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007406:	429a      	cmp	r2, r3
 8007408:	dddb      	ble.n	80073c2 <UG_FillFrame+0x8a>
 800740a:	e000      	b.n	800740e <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800740c:	bf00      	nop
      }
   }
}
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bdb0      	pop	{r4, r5, r7, pc}
 8007414:	20000340 	.word	0x20000340

08007418 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b087      	sub	sp, #28
 800741c:	af02      	add	r7, sp, #8
 800741e:	4603      	mov	r3, r0
 8007420:	603a      	str	r2, [r7, #0]
 8007422:	80fb      	strh	r3, [r7, #6]
 8007424:	460b      	mov	r3, r1
 8007426:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   char chr;

   xp=x;
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800742c:	88bb      	ldrh	r3, [r7, #4]
 800742e:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8007430:	e04f      	b.n	80074d2 <UG_PutString+0xba>
   {
      chr = *str;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	72fb      	strb	r3, [r7, #11]
      if ( chr == '\n' )
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	2b0a      	cmp	r3, #10
 800743c:	d107      	bne.n	800744e <UG_PutString+0x36>
      {
         xp = gui->x_dim;
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <UG_PutString+0xcc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	889b      	ldrh	r3, [r3, #4]
 8007444:	81fb      	strh	r3, [r7, #14]
         str++;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	603b      	str	r3, [r7, #0]
         continue;
 800744c:	e041      	b.n	80074d2 <UG_PutString+0xba>
      }

      if ( xp+gui->font.char_width > gui->x_dim - 1 )
 800744e:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <UG_PutString+0xcc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007456:	4619      	mov	r1, r3
 8007458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800745c:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <UG_PutString+0xcc>)
 800745e:	6812      	ldr	r2, [r2, #0]
 8007460:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 8007464:	4413      	add	r3, r2
 8007466:	4299      	cmp	r1, r3
 8007468:	dc11      	bgt.n	800748e <UG_PutString+0x76>
      {
         xp = x;
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->font.char_v_space;
 800746e:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <UG_PutString+0xcc>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8007476:	b29a      	uxth	r2, r3
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <UG_PutString+0xcc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8007480:	b29b      	uxth	r3, r3
 8007482:	4413      	add	r3, r2
 8007484:	b29a      	uxth	r2, r3
 8007486:	89bb      	ldrh	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	b29b      	uxth	r3, r3
 800748c:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800748e:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <UG_PutString+0xcc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007494:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <UG_PutString+0xcc>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800749e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80074a2:	7af8      	ldrb	r0, [r7, #11]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4623      	mov	r3, r4
 80074a8:	f000 f81e 	bl	80074e8 <UG_PutChar>

      xp += gui->font.char_width+gui->font.char_h_space;
 80074ac:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <UG_PutString+0xcc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <UG_PutString+0xcc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 80074be:	b29b      	uxth	r3, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	89fb      	ldrh	r3, [r7, #14]
 80074c6:	4413      	add	r3, r2
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	81fb      	strh	r3, [r7, #14]
      str++;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	603b      	str	r3, [r7, #0]
   while ( *str != 0 )
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1ab      	bne.n	8007432 <UG_PutString+0x1a>
   }
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd90      	pop	{r4, r7, pc}
 80074e4:	20000340 	.word	0x20000340

080074e8 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08a      	sub	sp, #40	; 0x28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	460b      	mov	r3, r1
 80074f6:	81bb      	strh	r3, [r7, #12]
 80074f8:	4613      	mov	r3, r2
 80074fa:	817b      	strh	r3, [r7, #10]
   UG_U16 i,j,k,xo,yo,c,bn;
   UG_U8 b,bt;
   unsigned char* p;

   bt = (UG_U8)chr;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8007500:	7e3b      	ldrb	r3, [r7, #24]
 8007502:	2bfc      	cmp	r3, #252	; 0xfc
 8007504:	dc76      	bgt.n	80075f4 <UG_PutChar+0x10c>
 8007506:	2bd6      	cmp	r3, #214	; 0xd6
 8007508:	da08      	bge.n	800751c <UG_PutChar+0x34>
 800750a:	2bc4      	cmp	r3, #196	; 0xc4
 800750c:	d069      	beq.n	80075e2 <UG_PutChar+0xfa>
 800750e:	2bc4      	cmp	r3, #196	; 0xc4
 8007510:	dc70      	bgt.n	80075f4 <UG_PutChar+0x10c>
 8007512:	2bb0      	cmp	r3, #176	; 0xb0
 8007514:	d06b      	beq.n	80075ee <UG_PutChar+0x106>
 8007516:	2bb5      	cmp	r3, #181	; 0xb5
 8007518:	d066      	beq.n	80075e8 <UG_PutChar+0x100>
 800751a:	e06b      	b.n	80075f4 <UG_PutChar+0x10c>
 800751c:	3bd6      	subs	r3, #214	; 0xd6
 800751e:	2b26      	cmp	r3, #38	; 0x26
 8007520:	d868      	bhi.n	80075f4 <UG_PutChar+0x10c>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UG_PutChar+0x40>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	080075cb 	.word	0x080075cb
 800752c:	080075f5 	.word	0x080075f5
 8007530:	080075f5 	.word	0x080075f5
 8007534:	080075f5 	.word	0x080075f5
 8007538:	080075f5 	.word	0x080075f5
 800753c:	080075f5 	.word	0x080075f5
 8007540:	080075d7 	.word	0x080075d7
 8007544:	080075f5 	.word	0x080075f5
 8007548:	080075f5 	.word	0x080075f5
 800754c:	080075f5 	.word	0x080075f5
 8007550:	080075f5 	.word	0x080075f5
 8007554:	080075f5 	.word	0x080075f5
 8007558:	080075f5 	.word	0x080075f5
 800755c:	080075f5 	.word	0x080075f5
 8007560:	080075dd 	.word	0x080075dd
 8007564:	080075f5 	.word	0x080075f5
 8007568:	080075f5 	.word	0x080075f5
 800756c:	080075f5 	.word	0x080075f5
 8007570:	080075f5 	.word	0x080075f5
 8007574:	080075f5 	.word	0x080075f5
 8007578:	080075f5 	.word	0x080075f5
 800757c:	080075f5 	.word	0x080075f5
 8007580:	080075f5 	.word	0x080075f5
 8007584:	080075f5 	.word	0x080075f5
 8007588:	080075f5 	.word	0x080075f5
 800758c:	080075f5 	.word	0x080075f5
 8007590:	080075f5 	.word	0x080075f5
 8007594:	080075f5 	.word	0x080075f5
 8007598:	080075f5 	.word	0x080075f5
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	080075c5 	.word	0x080075c5
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	080075f5 	.word	0x080075f5
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	080075f5 	.word	0x080075f5
 80075bc:	080075f5 	.word	0x080075f5
 80075c0:	080075d1 	.word	0x080075d1
   {
      case 0xF6: bt = 0x94; break; // �
 80075c4:	2394      	movs	r3, #148	; 0x94
 80075c6:	763b      	strb	r3, [r7, #24]
 80075c8:	e014      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xD6: bt = 0x99; break; // �
 80075ca:	2399      	movs	r3, #153	; 0x99
 80075cc:	763b      	strb	r3, [r7, #24]
 80075ce:	e011      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xFC: bt = 0x81; break; // �
 80075d0:	2381      	movs	r3, #129	; 0x81
 80075d2:	763b      	strb	r3, [r7, #24]
 80075d4:	e00e      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xDC: bt = 0x9A; break; // �
 80075d6:	239a      	movs	r3, #154	; 0x9a
 80075d8:	763b      	strb	r3, [r7, #24]
 80075da:	e00b      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xE4: bt = 0x84; break; // �
 80075dc:	2384      	movs	r3, #132	; 0x84
 80075de:	763b      	strb	r3, [r7, #24]
 80075e0:	e008      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xC4: bt = 0x8E; break; // �
 80075e2:	238e      	movs	r3, #142	; 0x8e
 80075e4:	763b      	strb	r3, [r7, #24]
 80075e6:	e005      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xB5: bt = 0xE6; break; // �
 80075e8:	23e6      	movs	r3, #230	; 0xe6
 80075ea:	763b      	strb	r3, [r7, #24]
 80075ec:	e002      	b.n	80075f4 <UG_PutChar+0x10c>
      case 0xB0: bt = 0xF8; break; // �
 80075ee:	23f8      	movs	r3, #248	; 0xf8
 80075f0:	763b      	strb	r3, [r7, #24]
 80075f2:	bf00      	nop
   }

   yo = y;
 80075f4:	897b      	ldrh	r3, [r7, #10]
 80075f6:	83fb      	strh	r3, [r7, #30]
   bn = gui->font.char_width;
 80075f8:	4b40      	ldr	r3, [pc, #256]	; (80076fc <UG_PutChar+0x214>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007600:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8007602:	8b7b      	ldrh	r3, [r7, #26]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d075      	beq.n	80076f4 <UG_PutChar+0x20c>
   bn >>= 3;
 8007608:	8b7b      	ldrh	r3, [r7, #26]
 800760a:	08db      	lsrs	r3, r3, #3
 800760c:	837b      	strh	r3, [r7, #26]
   if ( gui->font.char_width % 8 ) bn++;
 800760e:	4b3b      	ldr	r3, [pc, #236]	; (80076fc <UG_PutChar+0x214>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8007616:	b29b      	uxth	r3, r3
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <UG_PutChar+0x140>
 8007622:	8b7b      	ldrh	r3, [r7, #26]
 8007624:	3301      	adds	r3, #1
 8007626:	837b      	strh	r3, [r7, #26]
   p = gui->font.p;
 8007628:	4b34      	ldr	r3, [pc, #208]	; (80076fc <UG_PutChar+0x214>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	617b      	str	r3, [r7, #20]
   p+= bt * gui->font.char_height * bn;
 8007630:	7e3b      	ldrb	r3, [r7, #24]
 8007632:	4a32      	ldr	r2, [pc, #200]	; (80076fc <UG_PutChar+0x214>)
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800763a:	fb02 f303 	mul.w	r3, r2, r3
 800763e:	8b7a      	ldrh	r2, [r7, #26]
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	461a      	mov	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

   for( j=0;j<gui->font.char_height;j++ )
 800764c:	2300      	movs	r3, #0
 800764e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007650:	e048      	b.n	80076e4 <UG_PutChar+0x1fc>
   {
      xo = x;
 8007652:	89bb      	ldrh	r3, [r7, #12]
 8007654:	843b      	strh	r3, [r7, #32]
      c=gui->font.char_width;
 8007656:	4b29      	ldr	r3, [pc, #164]	; (80076fc <UG_PutChar+0x214>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800765e:	83bb      	strh	r3, [r7, #28]
      for( i=0;i<bn;i++ )
 8007660:	2300      	movs	r3, #0
 8007662:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007664:	e034      	b.n	80076d0 <UG_PutChar+0x1e8>
      {
         b = *p++;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	617a      	str	r2, [r7, #20]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	767b      	strb	r3, [r7, #25]
         for( k=0;(k<8) && c;k++ )
 8007670:	2300      	movs	r3, #0
 8007672:	847b      	strh	r3, [r7, #34]	; 0x22
 8007674:	e023      	b.n	80076be <UG_PutChar+0x1d6>
         {
            if( b & 0x01 )
 8007676:	7e7b      	ldrb	r3, [r7, #25]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <UG_PutChar+0x1ac>
            {
               gui->pset(xo,yo,fc);
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <UG_PutChar+0x214>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800768a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4798      	blx	r3
 8007692:	e008      	b.n	80076a6 <UG_PutChar+0x1be>
            }
            else
            {
               gui->pset(xo,yo,bc);
 8007694:	4b19      	ldr	r3, [pc, #100]	; (80076fc <UG_PutChar+0x214>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800769e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80076a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a4:	4798      	blx	r3
            }
            b >>= 1;
 80076a6:	7e7b      	ldrb	r3, [r7, #25]
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	767b      	strb	r3, [r7, #25]
            xo++;
 80076ac:	8c3b      	ldrh	r3, [r7, #32]
 80076ae:	3301      	adds	r3, #1
 80076b0:	843b      	strh	r3, [r7, #32]
            c--;
 80076b2:	8bbb      	ldrh	r3, [r7, #28]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	83bb      	strh	r3, [r7, #28]
         for( k=0;(k<8) && c;k++ )
 80076b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076ba:	3301      	adds	r3, #1
 80076bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80076be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076c0:	2b07      	cmp	r3, #7
 80076c2:	d802      	bhi.n	80076ca <UG_PutChar+0x1e2>
 80076c4:	8bbb      	ldrh	r3, [r7, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1d5      	bne.n	8007676 <UG_PutChar+0x18e>
      for( i=0;i<bn;i++ )
 80076ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076cc:	3301      	adds	r3, #1
 80076ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076d2:	8b7b      	ldrh	r3, [r7, #26]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d3c6      	bcc.n	8007666 <UG_PutChar+0x17e>
         }
      }
      yo++;
 80076d8:	8bfb      	ldrh	r3, [r7, #30]
 80076da:	3301      	adds	r3, #1
 80076dc:	83fb      	strh	r3, [r7, #30]
   for( j=0;j<gui->font.char_height;j++ )
 80076de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076e0:	3301      	adds	r3, #1
 80076e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076e6:	4a05      	ldr	r2, [pc, #20]	; (80076fc <UG_PutChar+0x214>)
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 80076ee:	4293      	cmp	r3, r2
 80076f0:	dbaf      	blt.n	8007652 <UG_PutChar+0x16a>
 80076f2:	e000      	b.n	80076f6 <UG_PutChar+0x20e>
   if ( !bn ) return;
 80076f4:	bf00      	nop
   }
}
 80076f6:	3728      	adds	r7, #40	; 0x28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000340 	.word	0x20000340

08007700 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
   gui->fore_color = c;
 8007708:	4b04      	ldr	r3, [pc, #16]	; (800771c <UG_SetForecolor+0x1c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000340 	.word	0x20000340

08007720 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
   gui->back_color = c;
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <UG_SetBackcolor+0x1c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000340 	.word	0x20000340

08007740 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
   return gui->x_dim;
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <UG_GetXDim+0x18>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800774c:	4618      	mov	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000340 	.word	0x20000340

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	; (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20000140 	.word	0x20000140

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	; (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	; (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	; (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	; (80077ac <__libc_init_array+0x44>)
 800777c:	f004 fd64 	bl	800c248 <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	0800da0c 	.word	0x0800da0c
 80077a4:	0800da0c 	.word	0x0800da0c
 80077a8:	0800da0c 	.word	0x0800da0c
 80077ac:	0800da10 	.word	0x0800da10

080077b0 <memset>:
 80077b0:	4402      	add	r2, r0
 80077b2:	4603      	mov	r3, r0
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d100      	bne.n	80077ba <memset+0xa>
 80077b8:	4770      	bx	lr
 80077ba:	f803 1b01 	strb.w	r1, [r3], #1
 80077be:	e7f9      	b.n	80077b4 <memset+0x4>

080077c0 <__cvt>:
 80077c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c4:	ec55 4b10 	vmov	r4, r5, d0
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	460e      	mov	r6, r1
 80077cc:	4619      	mov	r1, r3
 80077ce:	462b      	mov	r3, r5
 80077d0:	bfbb      	ittet	lt
 80077d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077d6:	461d      	movlt	r5, r3
 80077d8:	2300      	movge	r3, #0
 80077da:	232d      	movlt	r3, #45	; 0x2d
 80077dc:	700b      	strb	r3, [r1, #0]
 80077de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077e4:	4691      	mov	r9, r2
 80077e6:	f023 0820 	bic.w	r8, r3, #32
 80077ea:	bfbc      	itt	lt
 80077ec:	4622      	movlt	r2, r4
 80077ee:	4614      	movlt	r4, r2
 80077f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077f4:	d005      	beq.n	8007802 <__cvt+0x42>
 80077f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077fa:	d100      	bne.n	80077fe <__cvt+0x3e>
 80077fc:	3601      	adds	r6, #1
 80077fe:	2102      	movs	r1, #2
 8007800:	e000      	b.n	8007804 <__cvt+0x44>
 8007802:	2103      	movs	r1, #3
 8007804:	ab03      	add	r3, sp, #12
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	ab02      	add	r3, sp, #8
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	ec45 4b10 	vmov	d0, r4, r5
 8007810:	4653      	mov	r3, sl
 8007812:	4632      	mov	r2, r6
 8007814:	f001 fdb4 	bl	8009380 <_dtoa_r>
 8007818:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800781c:	4607      	mov	r7, r0
 800781e:	d102      	bne.n	8007826 <__cvt+0x66>
 8007820:	f019 0f01 	tst.w	r9, #1
 8007824:	d022      	beq.n	800786c <__cvt+0xac>
 8007826:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800782a:	eb07 0906 	add.w	r9, r7, r6
 800782e:	d110      	bne.n	8007852 <__cvt+0x92>
 8007830:	783b      	ldrb	r3, [r7, #0]
 8007832:	2b30      	cmp	r3, #48	; 0x30
 8007834:	d10a      	bne.n	800784c <__cvt+0x8c>
 8007836:	2200      	movs	r2, #0
 8007838:	2300      	movs	r3, #0
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f7f9 f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8007842:	b918      	cbnz	r0, 800784c <__cvt+0x8c>
 8007844:	f1c6 0601 	rsb	r6, r6, #1
 8007848:	f8ca 6000 	str.w	r6, [sl]
 800784c:	f8da 3000 	ldr.w	r3, [sl]
 8007850:	4499      	add	r9, r3
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f9 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800785e:	b108      	cbz	r0, 8007864 <__cvt+0xa4>
 8007860:	f8cd 900c 	str.w	r9, [sp, #12]
 8007864:	2230      	movs	r2, #48	; 0x30
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	454b      	cmp	r3, r9
 800786a:	d307      	bcc.n	800787c <__cvt+0xbc>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007870:	1bdb      	subs	r3, r3, r7
 8007872:	4638      	mov	r0, r7
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	b004      	add	sp, #16
 8007878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787c:	1c59      	adds	r1, r3, #1
 800787e:	9103      	str	r1, [sp, #12]
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e7f0      	b.n	8007866 <__cvt+0xa6>

08007884 <__exponent>:
 8007884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007886:	4603      	mov	r3, r0
 8007888:	2900      	cmp	r1, #0
 800788a:	bfb8      	it	lt
 800788c:	4249      	neglt	r1, r1
 800788e:	f803 2b02 	strb.w	r2, [r3], #2
 8007892:	bfb4      	ite	lt
 8007894:	222d      	movlt	r2, #45	; 0x2d
 8007896:	222b      	movge	r2, #43	; 0x2b
 8007898:	2909      	cmp	r1, #9
 800789a:	7042      	strb	r2, [r0, #1]
 800789c:	dd2a      	ble.n	80078f4 <__exponent+0x70>
 800789e:	f10d 0407 	add.w	r4, sp, #7
 80078a2:	46a4      	mov	ip, r4
 80078a4:	270a      	movs	r7, #10
 80078a6:	46a6      	mov	lr, r4
 80078a8:	460a      	mov	r2, r1
 80078aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80078ae:	fb07 1516 	mls	r5, r7, r6, r1
 80078b2:	3530      	adds	r5, #48	; 0x30
 80078b4:	2a63      	cmp	r2, #99	; 0x63
 80078b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80078ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078be:	4631      	mov	r1, r6
 80078c0:	dcf1      	bgt.n	80078a6 <__exponent+0x22>
 80078c2:	3130      	adds	r1, #48	; 0x30
 80078c4:	f1ae 0502 	sub.w	r5, lr, #2
 80078c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078cc:	1c44      	adds	r4, r0, #1
 80078ce:	4629      	mov	r1, r5
 80078d0:	4561      	cmp	r1, ip
 80078d2:	d30a      	bcc.n	80078ea <__exponent+0x66>
 80078d4:	f10d 0209 	add.w	r2, sp, #9
 80078d8:	eba2 020e 	sub.w	r2, r2, lr
 80078dc:	4565      	cmp	r5, ip
 80078de:	bf88      	it	hi
 80078e0:	2200      	movhi	r2, #0
 80078e2:	4413      	add	r3, r2
 80078e4:	1a18      	subs	r0, r3, r0
 80078e6:	b003      	add	sp, #12
 80078e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078f2:	e7ed      	b.n	80078d0 <__exponent+0x4c>
 80078f4:	2330      	movs	r3, #48	; 0x30
 80078f6:	3130      	adds	r1, #48	; 0x30
 80078f8:	7083      	strb	r3, [r0, #2]
 80078fa:	70c1      	strb	r1, [r0, #3]
 80078fc:	1d03      	adds	r3, r0, #4
 80078fe:	e7f1      	b.n	80078e4 <__exponent+0x60>

08007900 <_printf_float>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	ed2d 8b02 	vpush	{d8}
 8007908:	b08d      	sub	sp, #52	; 0x34
 800790a:	460c      	mov	r4, r1
 800790c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007910:	4616      	mov	r6, r2
 8007912:	461f      	mov	r7, r3
 8007914:	4605      	mov	r5, r0
 8007916:	f002 fe8f 	bl	800a638 <_localeconv_r>
 800791a:	f8d0 a000 	ldr.w	sl, [r0]
 800791e:	4650      	mov	r0, sl
 8007920:	f7f8 fc56 	bl	80001d0 <strlen>
 8007924:	2300      	movs	r3, #0
 8007926:	930a      	str	r3, [sp, #40]	; 0x28
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	f8d8 3000 	ldr.w	r3, [r8]
 8007930:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007934:	3307      	adds	r3, #7
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	f103 0208 	add.w	r2, r3, #8
 800793e:	f8c8 2000 	str.w	r2, [r8]
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800794a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800794e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007952:	9307      	str	r3, [sp, #28]
 8007954:	f8cd 8018 	str.w	r8, [sp, #24]
 8007958:	ee08 0a10 	vmov	s16, r0
 800795c:	4b9f      	ldr	r3, [pc, #636]	; (8007bdc <_printf_float+0x2dc>)
 800795e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007962:	f04f 32ff 	mov.w	r2, #4294967295
 8007966:	f7f9 f8e1 	bl	8000b2c <__aeabi_dcmpun>
 800796a:	bb88      	cbnz	r0, 80079d0 <_printf_float+0xd0>
 800796c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007970:	4b9a      	ldr	r3, [pc, #616]	; (8007bdc <_printf_float+0x2dc>)
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	f7f9 f8bb 	bl	8000af0 <__aeabi_dcmple>
 800797a:	bb48      	cbnz	r0, 80079d0 <_printf_float+0xd0>
 800797c:	2200      	movs	r2, #0
 800797e:	2300      	movs	r3, #0
 8007980:	4640      	mov	r0, r8
 8007982:	4649      	mov	r1, r9
 8007984:	f7f9 f8aa 	bl	8000adc <__aeabi_dcmplt>
 8007988:	b110      	cbz	r0, 8007990 <_printf_float+0x90>
 800798a:	232d      	movs	r3, #45	; 0x2d
 800798c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007990:	4b93      	ldr	r3, [pc, #588]	; (8007be0 <_printf_float+0x2e0>)
 8007992:	4894      	ldr	r0, [pc, #592]	; (8007be4 <_printf_float+0x2e4>)
 8007994:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007998:	bf94      	ite	ls
 800799a:	4698      	movls	r8, r3
 800799c:	4680      	movhi	r8, r0
 800799e:	2303      	movs	r3, #3
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	f023 0204 	bic.w	r2, r3, #4
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	f04f 0900 	mov.w	r9, #0
 80079ae:	9700      	str	r7, [sp, #0]
 80079b0:	4633      	mov	r3, r6
 80079b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80079b4:	4621      	mov	r1, r4
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 f9d8 	bl	8007d6c <_printf_common>
 80079bc:	3001      	adds	r0, #1
 80079be:	f040 8090 	bne.w	8007ae2 <_printf_float+0x1e2>
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	b00d      	add	sp, #52	; 0x34
 80079c8:	ecbd 8b02 	vpop	{d8}
 80079cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d0:	4642      	mov	r2, r8
 80079d2:	464b      	mov	r3, r9
 80079d4:	4640      	mov	r0, r8
 80079d6:	4649      	mov	r1, r9
 80079d8:	f7f9 f8a8 	bl	8000b2c <__aeabi_dcmpun>
 80079dc:	b140      	cbz	r0, 80079f0 <_printf_float+0xf0>
 80079de:	464b      	mov	r3, r9
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfbc      	itt	lt
 80079e4:	232d      	movlt	r3, #45	; 0x2d
 80079e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079ea:	487f      	ldr	r0, [pc, #508]	; (8007be8 <_printf_float+0x2e8>)
 80079ec:	4b7f      	ldr	r3, [pc, #508]	; (8007bec <_printf_float+0x2ec>)
 80079ee:	e7d1      	b.n	8007994 <_printf_float+0x94>
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079f6:	9206      	str	r2, [sp, #24]
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	d13f      	bne.n	8007a7c <_printf_float+0x17c>
 80079fc:	2306      	movs	r3, #6
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	9b05      	ldr	r3, [sp, #20]
 8007a02:	6861      	ldr	r1, [r4, #4]
 8007a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8007a0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a12:	ab09      	add	r3, sp, #36	; 0x24
 8007a14:	ec49 8b10 	vmov	d0, r8, r9
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6022      	str	r2, [r4, #0]
 8007a1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a20:	4628      	mov	r0, r5
 8007a22:	f7ff fecd 	bl	80077c0 <__cvt>
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a2a:	2b47      	cmp	r3, #71	; 0x47
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	d108      	bne.n	8007a42 <_printf_float+0x142>
 8007a30:	1cc8      	adds	r0, r1, #3
 8007a32:	db02      	blt.n	8007a3a <_printf_float+0x13a>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	4299      	cmp	r1, r3
 8007a38:	dd41      	ble.n	8007abe <_printf_float+0x1be>
 8007a3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a3e:	fa5f fb8b 	uxtb.w	fp, fp
 8007a42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a46:	d820      	bhi.n	8007a8a <_printf_float+0x18a>
 8007a48:	3901      	subs	r1, #1
 8007a4a:	465a      	mov	r2, fp
 8007a4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a50:	9109      	str	r1, [sp, #36]	; 0x24
 8007a52:	f7ff ff17 	bl	8007884 <__exponent>
 8007a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a58:	1813      	adds	r3, r2, r0
 8007a5a:	2a01      	cmp	r2, #1
 8007a5c:	4681      	mov	r9, r0
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	dc02      	bgt.n	8007a68 <_printf_float+0x168>
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	07d2      	lsls	r2, r2, #31
 8007a66:	d501      	bpl.n	8007a6c <_printf_float+0x16c>
 8007a68:	3301      	adds	r3, #1
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d09c      	beq.n	80079ae <_printf_float+0xae>
 8007a74:	232d      	movs	r3, #45	; 0x2d
 8007a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a7a:	e798      	b.n	80079ae <_printf_float+0xae>
 8007a7c:	9a06      	ldr	r2, [sp, #24]
 8007a7e:	2a47      	cmp	r2, #71	; 0x47
 8007a80:	d1be      	bne.n	8007a00 <_printf_float+0x100>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1bc      	bne.n	8007a00 <_printf_float+0x100>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7b9      	b.n	80079fe <_printf_float+0xfe>
 8007a8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a8e:	d118      	bne.n	8007ac2 <_printf_float+0x1c2>
 8007a90:	2900      	cmp	r1, #0
 8007a92:	6863      	ldr	r3, [r4, #4]
 8007a94:	dd0b      	ble.n	8007aae <_printf_float+0x1ae>
 8007a96:	6121      	str	r1, [r4, #16]
 8007a98:	b913      	cbnz	r3, 8007aa0 <_printf_float+0x1a0>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	07d0      	lsls	r0, r2, #31
 8007a9e:	d502      	bpl.n	8007aa6 <_printf_float+0x1a6>
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	440b      	add	r3, r1
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007aa8:	f04f 0900 	mov.w	r9, #0
 8007aac:	e7de      	b.n	8007a6c <_printf_float+0x16c>
 8007aae:	b913      	cbnz	r3, 8007ab6 <_printf_float+0x1b6>
 8007ab0:	6822      	ldr	r2, [r4, #0]
 8007ab2:	07d2      	lsls	r2, r2, #31
 8007ab4:	d501      	bpl.n	8007aba <_printf_float+0x1ba>
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	e7f4      	b.n	8007aa4 <_printf_float+0x1a4>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e7f2      	b.n	8007aa4 <_printf_float+0x1a4>
 8007abe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac4:	4299      	cmp	r1, r3
 8007ac6:	db05      	blt.n	8007ad4 <_printf_float+0x1d4>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	6121      	str	r1, [r4, #16]
 8007acc:	07d8      	lsls	r0, r3, #31
 8007ace:	d5ea      	bpl.n	8007aa6 <_printf_float+0x1a6>
 8007ad0:	1c4b      	adds	r3, r1, #1
 8007ad2:	e7e7      	b.n	8007aa4 <_printf_float+0x1a4>
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	bfd4      	ite	le
 8007ad8:	f1c1 0202 	rsble	r2, r1, #2
 8007adc:	2201      	movgt	r2, #1
 8007ade:	4413      	add	r3, r2
 8007ae0:	e7e0      	b.n	8007aa4 <_printf_float+0x1a4>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	055a      	lsls	r2, r3, #21
 8007ae6:	d407      	bmi.n	8007af8 <_printf_float+0x1f8>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	4642      	mov	r2, r8
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	d12c      	bne.n	8007b50 <_printf_float+0x250>
 8007af6:	e764      	b.n	80079c2 <_printf_float+0xc2>
 8007af8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007afc:	f240 80e0 	bls.w	8007cc0 <_printf_float+0x3c0>
 8007b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b04:	2200      	movs	r2, #0
 8007b06:	2300      	movs	r3, #0
 8007b08:	f7f8 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d034      	beq.n	8007b7a <_printf_float+0x27a>
 8007b10:	4a37      	ldr	r2, [pc, #220]	; (8007bf0 <_printf_float+0x2f0>)
 8007b12:	2301      	movs	r3, #1
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f43f af51 	beq.w	80079c2 <_printf_float+0xc2>
 8007b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b24:	429a      	cmp	r2, r3
 8007b26:	db02      	blt.n	8007b2e <_printf_float+0x22e>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	07d8      	lsls	r0, r3, #31
 8007b2c:	d510      	bpl.n	8007b50 <_printf_float+0x250>
 8007b2e:	ee18 3a10 	vmov	r3, s16
 8007b32:	4652      	mov	r2, sl
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f43f af41 	beq.w	80079c2 <_printf_float+0xc2>
 8007b40:	f04f 0800 	mov.w	r8, #0
 8007b44:	f104 091a 	add.w	r9, r4, #26
 8007b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	4543      	cmp	r3, r8
 8007b4e:	dc09      	bgt.n	8007b64 <_printf_float+0x264>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	079b      	lsls	r3, r3, #30
 8007b54:	f100 8105 	bmi.w	8007d62 <_printf_float+0x462>
 8007b58:	68e0      	ldr	r0, [r4, #12]
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	4298      	cmp	r0, r3
 8007b5e:	bfb8      	it	lt
 8007b60:	4618      	movlt	r0, r3
 8007b62:	e730      	b.n	80079c6 <_printf_float+0xc6>
 8007b64:	2301      	movs	r3, #1
 8007b66:	464a      	mov	r2, r9
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f43f af27 	beq.w	80079c2 <_printf_float+0xc2>
 8007b74:	f108 0801 	add.w	r8, r8, #1
 8007b78:	e7e6      	b.n	8007b48 <_printf_float+0x248>
 8007b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dc39      	bgt.n	8007bf4 <_printf_float+0x2f4>
 8007b80:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <_printf_float+0x2f0>)
 8007b82:	2301      	movs	r3, #1
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f af19 	beq.w	80079c2 <_printf_float+0xc2>
 8007b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b94:	4313      	orrs	r3, r2
 8007b96:	d102      	bne.n	8007b9e <_printf_float+0x29e>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	07d9      	lsls	r1, r3, #31
 8007b9c:	d5d8      	bpl.n	8007b50 <_printf_float+0x250>
 8007b9e:	ee18 3a10 	vmov	r3, s16
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	f43f af09 	beq.w	80079c2 <_printf_float+0xc2>
 8007bb0:	f04f 0900 	mov.w	r9, #0
 8007bb4:	f104 0a1a 	add.w	sl, r4, #26
 8007bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bba:	425b      	negs	r3, r3
 8007bbc:	454b      	cmp	r3, r9
 8007bbe:	dc01      	bgt.n	8007bc4 <_printf_float+0x2c4>
 8007bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc2:	e792      	b.n	8007aea <_printf_float+0x1ea>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f aef7 	beq.w	80079c2 <_printf_float+0xc2>
 8007bd4:	f109 0901 	add.w	r9, r9, #1
 8007bd8:	e7ee      	b.n	8007bb8 <_printf_float+0x2b8>
 8007bda:	bf00      	nop
 8007bdc:	7fefffff 	.word	0x7fefffff
 8007be0:	0800d53c 	.word	0x0800d53c
 8007be4:	0800d540 	.word	0x0800d540
 8007be8:	0800d548 	.word	0x0800d548
 8007bec:	0800d544 	.word	0x0800d544
 8007bf0:	0800d54c 	.word	0x0800d54c
 8007bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	bfa8      	it	ge
 8007bfc:	461a      	movge	r2, r3
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	4691      	mov	r9, r2
 8007c02:	dc37      	bgt.n	8007c74 <_printf_float+0x374>
 8007c04:	f04f 0b00 	mov.w	fp, #0
 8007c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c0c:	f104 021a 	add.w	r2, r4, #26
 8007c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	eba3 0309 	sub.w	r3, r3, r9
 8007c18:	455b      	cmp	r3, fp
 8007c1a:	dc33      	bgt.n	8007c84 <_printf_float+0x384>
 8007c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c20:	429a      	cmp	r2, r3
 8007c22:	db3b      	blt.n	8007c9c <_printf_float+0x39c>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	07da      	lsls	r2, r3, #31
 8007c28:	d438      	bmi.n	8007c9c <_printf_float+0x39c>
 8007c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2c:	9b05      	ldr	r3, [sp, #20]
 8007c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	eba2 0901 	sub.w	r9, r2, r1
 8007c36:	4599      	cmp	r9, r3
 8007c38:	bfa8      	it	ge
 8007c3a:	4699      	movge	r9, r3
 8007c3c:	f1b9 0f00 	cmp.w	r9, #0
 8007c40:	dc35      	bgt.n	8007cae <_printf_float+0x3ae>
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c4a:	f104 0a1a 	add.w	sl, r4, #26
 8007c4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	eba3 0309 	sub.w	r3, r3, r9
 8007c58:	4543      	cmp	r3, r8
 8007c5a:	f77f af79 	ble.w	8007b50 <_printf_float+0x250>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4652      	mov	r2, sl
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f43f aeaa 	beq.w	80079c2 <_printf_float+0xc2>
 8007c6e:	f108 0801 	add.w	r8, r8, #1
 8007c72:	e7ec      	b.n	8007c4e <_printf_float+0x34e>
 8007c74:	4613      	mov	r3, r2
 8007c76:	4631      	mov	r1, r6
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d1c0      	bne.n	8007c04 <_printf_float+0x304>
 8007c82:	e69e      	b.n	80079c2 <_printf_float+0xc2>
 8007c84:	2301      	movs	r3, #1
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	9205      	str	r2, [sp, #20]
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f ae97 	beq.w	80079c2 <_printf_float+0xc2>
 8007c94:	9a05      	ldr	r2, [sp, #20]
 8007c96:	f10b 0b01 	add.w	fp, fp, #1
 8007c9a:	e7b9      	b.n	8007c10 <_printf_float+0x310>
 8007c9c:	ee18 3a10 	vmov	r3, s16
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d1be      	bne.n	8007c2a <_printf_float+0x32a>
 8007cac:	e689      	b.n	80079c2 <_printf_float+0xc2>
 8007cae:	9a05      	ldr	r2, [sp, #20]
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	4442      	add	r2, r8
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d1c1      	bne.n	8007c42 <_printf_float+0x342>
 8007cbe:	e680      	b.n	80079c2 <_printf_float+0xc2>
 8007cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc2:	2a01      	cmp	r2, #1
 8007cc4:	dc01      	bgt.n	8007cca <_printf_float+0x3ca>
 8007cc6:	07db      	lsls	r3, r3, #31
 8007cc8:	d538      	bpl.n	8007d3c <_printf_float+0x43c>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4642      	mov	r2, r8
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f43f ae74 	beq.w	80079c2 <_printf_float+0xc2>
 8007cda:	ee18 3a10 	vmov	r3, s16
 8007cde:	4652      	mov	r2, sl
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f43f ae6b 	beq.w	80079c2 <_printf_float+0xc2>
 8007cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f7f8 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf8:	b9d8      	cbnz	r0, 8007d32 <_printf_float+0x432>
 8007cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfc:	f108 0201 	add.w	r2, r8, #1
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d10e      	bne.n	8007d2a <_printf_float+0x42a>
 8007d0c:	e659      	b.n	80079c2 <_printf_float+0xc2>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4652      	mov	r2, sl
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f43f ae52 	beq.w	80079c2 <_printf_float+0xc2>
 8007d1e:	f108 0801 	add.w	r8, r8, #1
 8007d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d24:	3b01      	subs	r3, #1
 8007d26:	4543      	cmp	r3, r8
 8007d28:	dcf1      	bgt.n	8007d0e <_printf_float+0x40e>
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d30:	e6dc      	b.n	8007aec <_printf_float+0x1ec>
 8007d32:	f04f 0800 	mov.w	r8, #0
 8007d36:	f104 0a1a 	add.w	sl, r4, #26
 8007d3a:	e7f2      	b.n	8007d22 <_printf_float+0x422>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4642      	mov	r2, r8
 8007d40:	e7df      	b.n	8007d02 <_printf_float+0x402>
 8007d42:	2301      	movs	r3, #1
 8007d44:	464a      	mov	r2, r9
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b8      	blx	r7
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f43f ae38 	beq.w	80079c2 <_printf_float+0xc2>
 8007d52:	f108 0801 	add.w	r8, r8, #1
 8007d56:	68e3      	ldr	r3, [r4, #12]
 8007d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d5a:	1a5b      	subs	r3, r3, r1
 8007d5c:	4543      	cmp	r3, r8
 8007d5e:	dcf0      	bgt.n	8007d42 <_printf_float+0x442>
 8007d60:	e6fa      	b.n	8007b58 <_printf_float+0x258>
 8007d62:	f04f 0800 	mov.w	r8, #0
 8007d66:	f104 0919 	add.w	r9, r4, #25
 8007d6a:	e7f4      	b.n	8007d56 <_printf_float+0x456>

08007d6c <_printf_common>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	4616      	mov	r6, r2
 8007d72:	4699      	mov	r9, r3
 8007d74:	688a      	ldr	r2, [r1, #8]
 8007d76:	690b      	ldr	r3, [r1, #16]
 8007d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bfb8      	it	lt
 8007d80:	4613      	movlt	r3, r2
 8007d82:	6033      	str	r3, [r6, #0]
 8007d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d88:	4607      	mov	r7, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	b10a      	cbz	r2, 8007d92 <_printf_common+0x26>
 8007d8e:	3301      	adds	r3, #1
 8007d90:	6033      	str	r3, [r6, #0]
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	0699      	lsls	r1, r3, #26
 8007d96:	bf42      	ittt	mi
 8007d98:	6833      	ldrmi	r3, [r6, #0]
 8007d9a:	3302      	addmi	r3, #2
 8007d9c:	6033      	strmi	r3, [r6, #0]
 8007d9e:	6825      	ldr	r5, [r4, #0]
 8007da0:	f015 0506 	ands.w	r5, r5, #6
 8007da4:	d106      	bne.n	8007db4 <_printf_common+0x48>
 8007da6:	f104 0a19 	add.w	sl, r4, #25
 8007daa:	68e3      	ldr	r3, [r4, #12]
 8007dac:	6832      	ldr	r2, [r6, #0]
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	42ab      	cmp	r3, r5
 8007db2:	dc26      	bgt.n	8007e02 <_printf_common+0x96>
 8007db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007db8:	1e13      	subs	r3, r2, #0
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	bf18      	it	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	0692      	lsls	r2, r2, #26
 8007dc2:	d42b      	bmi.n	8007e1c <_printf_common+0xb0>
 8007dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dc8:	4649      	mov	r1, r9
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c0      	blx	r8
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d01e      	beq.n	8007e10 <_printf_common+0xa4>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	68e5      	ldr	r5, [r4, #12]
 8007dd6:	6832      	ldr	r2, [r6, #0]
 8007dd8:	f003 0306 	and.w	r3, r3, #6
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	bf08      	it	eq
 8007de0:	1aad      	subeq	r5, r5, r2
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	6922      	ldr	r2, [r4, #16]
 8007de6:	bf0c      	ite	eq
 8007de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dec:	2500      	movne	r5, #0
 8007dee:	4293      	cmp	r3, r2
 8007df0:	bfc4      	itt	gt
 8007df2:	1a9b      	subgt	r3, r3, r2
 8007df4:	18ed      	addgt	r5, r5, r3
 8007df6:	2600      	movs	r6, #0
 8007df8:	341a      	adds	r4, #26
 8007dfa:	42b5      	cmp	r5, r6
 8007dfc:	d11a      	bne.n	8007e34 <_printf_common+0xc8>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e008      	b.n	8007e14 <_printf_common+0xa8>
 8007e02:	2301      	movs	r3, #1
 8007e04:	4652      	mov	r2, sl
 8007e06:	4649      	mov	r1, r9
 8007e08:	4638      	mov	r0, r7
 8007e0a:	47c0      	blx	r8
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d103      	bne.n	8007e18 <_printf_common+0xac>
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e18:	3501      	adds	r5, #1
 8007e1a:	e7c6      	b.n	8007daa <_printf_common+0x3e>
 8007e1c:	18e1      	adds	r1, r4, r3
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	2030      	movs	r0, #48	; 0x30
 8007e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e26:	4422      	add	r2, r4
 8007e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e30:	3302      	adds	r3, #2
 8007e32:	e7c7      	b.n	8007dc4 <_printf_common+0x58>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4622      	mov	r2, r4
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	47c0      	blx	r8
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d0e6      	beq.n	8007e10 <_printf_common+0xa4>
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7d9      	b.n	8007dfa <_printf_common+0x8e>
	...

08007e48 <_printf_i>:
 8007e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	4691      	mov	r9, r2
 8007e50:	7e27      	ldrb	r7, [r4, #24]
 8007e52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e54:	2f78      	cmp	r7, #120	; 0x78
 8007e56:	4680      	mov	r8, r0
 8007e58:	469a      	mov	sl, r3
 8007e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e5e:	d807      	bhi.n	8007e70 <_printf_i+0x28>
 8007e60:	2f62      	cmp	r7, #98	; 0x62
 8007e62:	d80a      	bhi.n	8007e7a <_printf_i+0x32>
 8007e64:	2f00      	cmp	r7, #0
 8007e66:	f000 80d8 	beq.w	800801a <_printf_i+0x1d2>
 8007e6a:	2f58      	cmp	r7, #88	; 0x58
 8007e6c:	f000 80a3 	beq.w	8007fb6 <_printf_i+0x16e>
 8007e70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e78:	e03a      	b.n	8007ef0 <_printf_i+0xa8>
 8007e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e7e:	2b15      	cmp	r3, #21
 8007e80:	d8f6      	bhi.n	8007e70 <_printf_i+0x28>
 8007e82:	a001      	add	r0, pc, #4	; (adr r0, 8007e88 <_printf_i+0x40>)
 8007e84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e88:	08007ee1 	.word	0x08007ee1
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	08007e71 	.word	0x08007e71
 8007e94:	08007e71 	.word	0x08007e71
 8007e98:	08007e71 	.word	0x08007e71
 8007e9c:	08007e71 	.word	0x08007e71
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	08007e71 	.word	0x08007e71
 8007ea8:	08007e71 	.word	0x08007e71
 8007eac:	08007e71 	.word	0x08007e71
 8007eb0:	08007e71 	.word	0x08007e71
 8007eb4:	08008001 	.word	0x08008001
 8007eb8:	08007f25 	.word	0x08007f25
 8007ebc:	08007fe3 	.word	0x08007fe3
 8007ec0:	08007e71 	.word	0x08007e71
 8007ec4:	08007e71 	.word	0x08007e71
 8007ec8:	08008023 	.word	0x08008023
 8007ecc:	08007e71 	.word	0x08007e71
 8007ed0:	08007f25 	.word	0x08007f25
 8007ed4:	08007e71 	.word	0x08007e71
 8007ed8:	08007e71 	.word	0x08007e71
 8007edc:	08007feb 	.word	0x08007feb
 8007ee0:	680b      	ldr	r3, [r1, #0]
 8007ee2:	1d1a      	adds	r2, r3, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	600a      	str	r2, [r1, #0]
 8007ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0a3      	b.n	800803c <_printf_i+0x1f4>
 8007ef4:	6825      	ldr	r5, [r4, #0]
 8007ef6:	6808      	ldr	r0, [r1, #0]
 8007ef8:	062e      	lsls	r6, r5, #24
 8007efa:	f100 0304 	add.w	r3, r0, #4
 8007efe:	d50a      	bpl.n	8007f16 <_printf_i+0xce>
 8007f00:	6805      	ldr	r5, [r0, #0]
 8007f02:	600b      	str	r3, [r1, #0]
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	da03      	bge.n	8007f10 <_printf_i+0xc8>
 8007f08:	232d      	movs	r3, #45	; 0x2d
 8007f0a:	426d      	negs	r5, r5
 8007f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f10:	485e      	ldr	r0, [pc, #376]	; (800808c <_printf_i+0x244>)
 8007f12:	230a      	movs	r3, #10
 8007f14:	e019      	b.n	8007f4a <_printf_i+0x102>
 8007f16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f1a:	6805      	ldr	r5, [r0, #0]
 8007f1c:	600b      	str	r3, [r1, #0]
 8007f1e:	bf18      	it	ne
 8007f20:	b22d      	sxthne	r5, r5
 8007f22:	e7ef      	b.n	8007f04 <_printf_i+0xbc>
 8007f24:	680b      	ldr	r3, [r1, #0]
 8007f26:	6825      	ldr	r5, [r4, #0]
 8007f28:	1d18      	adds	r0, r3, #4
 8007f2a:	6008      	str	r0, [r1, #0]
 8007f2c:	0628      	lsls	r0, r5, #24
 8007f2e:	d501      	bpl.n	8007f34 <_printf_i+0xec>
 8007f30:	681d      	ldr	r5, [r3, #0]
 8007f32:	e002      	b.n	8007f3a <_printf_i+0xf2>
 8007f34:	0669      	lsls	r1, r5, #25
 8007f36:	d5fb      	bpl.n	8007f30 <_printf_i+0xe8>
 8007f38:	881d      	ldrh	r5, [r3, #0]
 8007f3a:	4854      	ldr	r0, [pc, #336]	; (800808c <_printf_i+0x244>)
 8007f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f3e:	bf0c      	ite	eq
 8007f40:	2308      	moveq	r3, #8
 8007f42:	230a      	movne	r3, #10
 8007f44:	2100      	movs	r1, #0
 8007f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f4a:	6866      	ldr	r6, [r4, #4]
 8007f4c:	60a6      	str	r6, [r4, #8]
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	bfa2      	ittt	ge
 8007f52:	6821      	ldrge	r1, [r4, #0]
 8007f54:	f021 0104 	bicge.w	r1, r1, #4
 8007f58:	6021      	strge	r1, [r4, #0]
 8007f5a:	b90d      	cbnz	r5, 8007f60 <_printf_i+0x118>
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	d04d      	beq.n	8007ffc <_printf_i+0x1b4>
 8007f60:	4616      	mov	r6, r2
 8007f62:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f66:	fb03 5711 	mls	r7, r3, r1, r5
 8007f6a:	5dc7      	ldrb	r7, [r0, r7]
 8007f6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f70:	462f      	mov	r7, r5
 8007f72:	42bb      	cmp	r3, r7
 8007f74:	460d      	mov	r5, r1
 8007f76:	d9f4      	bls.n	8007f62 <_printf_i+0x11a>
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d10b      	bne.n	8007f94 <_printf_i+0x14c>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	07df      	lsls	r7, r3, #31
 8007f80:	d508      	bpl.n	8007f94 <_printf_i+0x14c>
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	6861      	ldr	r1, [r4, #4]
 8007f86:	4299      	cmp	r1, r3
 8007f88:	bfde      	ittt	le
 8007f8a:	2330      	movle	r3, #48	; 0x30
 8007f8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f94:	1b92      	subs	r2, r2, r6
 8007f96:	6122      	str	r2, [r4, #16]
 8007f98:	f8cd a000 	str.w	sl, [sp]
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	aa03      	add	r2, sp, #12
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	f7ff fee2 	bl	8007d6c <_printf_common>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d14c      	bne.n	8008046 <_printf_i+0x1fe>
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	b004      	add	sp, #16
 8007fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb6:	4835      	ldr	r0, [pc, #212]	; (800808c <_printf_i+0x244>)
 8007fb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	680e      	ldr	r6, [r1, #0]
 8007fc0:	061f      	lsls	r7, r3, #24
 8007fc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007fc6:	600e      	str	r6, [r1, #0]
 8007fc8:	d514      	bpl.n	8007ff4 <_printf_i+0x1ac>
 8007fca:	07d9      	lsls	r1, r3, #31
 8007fcc:	bf44      	itt	mi
 8007fce:	f043 0320 	orrmi.w	r3, r3, #32
 8007fd2:	6023      	strmi	r3, [r4, #0]
 8007fd4:	b91d      	cbnz	r5, 8007fde <_printf_i+0x196>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f023 0320 	bic.w	r3, r3, #32
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	2310      	movs	r3, #16
 8007fe0:	e7b0      	b.n	8007f44 <_printf_i+0xfc>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	f043 0320 	orr.w	r3, r3, #32
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	2378      	movs	r3, #120	; 0x78
 8007fec:	4828      	ldr	r0, [pc, #160]	; (8008090 <_printf_i+0x248>)
 8007fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ff2:	e7e3      	b.n	8007fbc <_printf_i+0x174>
 8007ff4:	065e      	lsls	r6, r3, #25
 8007ff6:	bf48      	it	mi
 8007ff8:	b2ad      	uxthmi	r5, r5
 8007ffa:	e7e6      	b.n	8007fca <_printf_i+0x182>
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	e7bb      	b.n	8007f78 <_printf_i+0x130>
 8008000:	680b      	ldr	r3, [r1, #0]
 8008002:	6826      	ldr	r6, [r4, #0]
 8008004:	6960      	ldr	r0, [r4, #20]
 8008006:	1d1d      	adds	r5, r3, #4
 8008008:	600d      	str	r5, [r1, #0]
 800800a:	0635      	lsls	r5, r6, #24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	d501      	bpl.n	8008014 <_printf_i+0x1cc>
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	e002      	b.n	800801a <_printf_i+0x1d2>
 8008014:	0671      	lsls	r1, r6, #25
 8008016:	d5fb      	bpl.n	8008010 <_printf_i+0x1c8>
 8008018:	8018      	strh	r0, [r3, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	4616      	mov	r6, r2
 8008020:	e7ba      	b.n	8007f98 <_printf_i+0x150>
 8008022:	680b      	ldr	r3, [r1, #0]
 8008024:	1d1a      	adds	r2, r3, #4
 8008026:	600a      	str	r2, [r1, #0]
 8008028:	681e      	ldr	r6, [r3, #0]
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	2100      	movs	r1, #0
 800802e:	4630      	mov	r0, r6
 8008030:	f7f8 f8d6 	bl	80001e0 <memchr>
 8008034:	b108      	cbz	r0, 800803a <_printf_i+0x1f2>
 8008036:	1b80      	subs	r0, r0, r6
 8008038:	6060      	str	r0, [r4, #4]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	2300      	movs	r3, #0
 8008040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008044:	e7a8      	b.n	8007f98 <_printf_i+0x150>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	4632      	mov	r2, r6
 800804a:	4649      	mov	r1, r9
 800804c:	4640      	mov	r0, r8
 800804e:	47d0      	blx	sl
 8008050:	3001      	adds	r0, #1
 8008052:	d0ab      	beq.n	8007fac <_printf_i+0x164>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	079b      	lsls	r3, r3, #30
 8008058:	d413      	bmi.n	8008082 <_printf_i+0x23a>
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	4298      	cmp	r0, r3
 8008060:	bfb8      	it	lt
 8008062:	4618      	movlt	r0, r3
 8008064:	e7a4      	b.n	8007fb0 <_printf_i+0x168>
 8008066:	2301      	movs	r3, #1
 8008068:	4632      	mov	r2, r6
 800806a:	4649      	mov	r1, r9
 800806c:	4640      	mov	r0, r8
 800806e:	47d0      	blx	sl
 8008070:	3001      	adds	r0, #1
 8008072:	d09b      	beq.n	8007fac <_printf_i+0x164>
 8008074:	3501      	adds	r5, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	9903      	ldr	r1, [sp, #12]
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	42ab      	cmp	r3, r5
 800807e:	dcf2      	bgt.n	8008066 <_printf_i+0x21e>
 8008080:	e7eb      	b.n	800805a <_printf_i+0x212>
 8008082:	2500      	movs	r5, #0
 8008084:	f104 0619 	add.w	r6, r4, #25
 8008088:	e7f5      	b.n	8008076 <_printf_i+0x22e>
 800808a:	bf00      	nop
 800808c:	0800d54e 	.word	0x0800d54e
 8008090:	0800d55f 	.word	0x0800d55f

08008094 <_scanf_float>:
 8008094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008098:	b087      	sub	sp, #28
 800809a:	4617      	mov	r7, r2
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	688b      	ldr	r3, [r1, #8]
 80080a0:	1e5a      	subs	r2, r3, #1
 80080a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80080a6:	bf83      	ittte	hi
 80080a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80080ac:	195b      	addhi	r3, r3, r5
 80080ae:	9302      	strhi	r3, [sp, #8]
 80080b0:	2300      	movls	r3, #0
 80080b2:	bf86      	itte	hi
 80080b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80080b8:	608b      	strhi	r3, [r1, #8]
 80080ba:	9302      	strls	r3, [sp, #8]
 80080bc:	680b      	ldr	r3, [r1, #0]
 80080be:	468b      	mov	fp, r1
 80080c0:	2500      	movs	r5, #0
 80080c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80080c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80080ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080ce:	4680      	mov	r8, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	465e      	mov	r6, fp
 80080d4:	46aa      	mov	sl, r5
 80080d6:	46a9      	mov	r9, r5
 80080d8:	9501      	str	r5, [sp, #4]
 80080da:	68a2      	ldr	r2, [r4, #8]
 80080dc:	b152      	cbz	r2, 80080f4 <_scanf_float+0x60>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b4e      	cmp	r3, #78	; 0x4e
 80080e4:	d864      	bhi.n	80081b0 <_scanf_float+0x11c>
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d83c      	bhi.n	8008164 <_scanf_float+0xd0>
 80080ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80080ee:	b2c8      	uxtb	r0, r1
 80080f0:	280e      	cmp	r0, #14
 80080f2:	d93a      	bls.n	800816a <_scanf_float+0xd6>
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	d003      	beq.n	8008102 <_scanf_float+0x6e>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008106:	f1ba 0f01 	cmp.w	sl, #1
 800810a:	f200 8113 	bhi.w	8008334 <_scanf_float+0x2a0>
 800810e:	455e      	cmp	r6, fp
 8008110:	f200 8105 	bhi.w	800831e <_scanf_float+0x28a>
 8008114:	2501      	movs	r5, #1
 8008116:	4628      	mov	r0, r5
 8008118:	b007      	add	sp, #28
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008122:	2a0d      	cmp	r2, #13
 8008124:	d8e6      	bhi.n	80080f4 <_scanf_float+0x60>
 8008126:	a101      	add	r1, pc, #4	; (adr r1, 800812c <_scanf_float+0x98>)
 8008128:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800812c:	0800826b 	.word	0x0800826b
 8008130:	080080f5 	.word	0x080080f5
 8008134:	080080f5 	.word	0x080080f5
 8008138:	080080f5 	.word	0x080080f5
 800813c:	080082cb 	.word	0x080082cb
 8008140:	080082a3 	.word	0x080082a3
 8008144:	080080f5 	.word	0x080080f5
 8008148:	080080f5 	.word	0x080080f5
 800814c:	08008279 	.word	0x08008279
 8008150:	080080f5 	.word	0x080080f5
 8008154:	080080f5 	.word	0x080080f5
 8008158:	080080f5 	.word	0x080080f5
 800815c:	080080f5 	.word	0x080080f5
 8008160:	08008231 	.word	0x08008231
 8008164:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008168:	e7db      	b.n	8008122 <_scanf_float+0x8e>
 800816a:	290e      	cmp	r1, #14
 800816c:	d8c2      	bhi.n	80080f4 <_scanf_float+0x60>
 800816e:	a001      	add	r0, pc, #4	; (adr r0, 8008174 <_scanf_float+0xe0>)
 8008170:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008174:	08008223 	.word	0x08008223
 8008178:	080080f5 	.word	0x080080f5
 800817c:	08008223 	.word	0x08008223
 8008180:	080082b7 	.word	0x080082b7
 8008184:	080080f5 	.word	0x080080f5
 8008188:	080081d1 	.word	0x080081d1
 800818c:	0800820d 	.word	0x0800820d
 8008190:	0800820d 	.word	0x0800820d
 8008194:	0800820d 	.word	0x0800820d
 8008198:	0800820d 	.word	0x0800820d
 800819c:	0800820d 	.word	0x0800820d
 80081a0:	0800820d 	.word	0x0800820d
 80081a4:	0800820d 	.word	0x0800820d
 80081a8:	0800820d 	.word	0x0800820d
 80081ac:	0800820d 	.word	0x0800820d
 80081b0:	2b6e      	cmp	r3, #110	; 0x6e
 80081b2:	d809      	bhi.n	80081c8 <_scanf_float+0x134>
 80081b4:	2b60      	cmp	r3, #96	; 0x60
 80081b6:	d8b2      	bhi.n	800811e <_scanf_float+0x8a>
 80081b8:	2b54      	cmp	r3, #84	; 0x54
 80081ba:	d077      	beq.n	80082ac <_scanf_float+0x218>
 80081bc:	2b59      	cmp	r3, #89	; 0x59
 80081be:	d199      	bne.n	80080f4 <_scanf_float+0x60>
 80081c0:	2d07      	cmp	r5, #7
 80081c2:	d197      	bne.n	80080f4 <_scanf_float+0x60>
 80081c4:	2508      	movs	r5, #8
 80081c6:	e029      	b.n	800821c <_scanf_float+0x188>
 80081c8:	2b74      	cmp	r3, #116	; 0x74
 80081ca:	d06f      	beq.n	80082ac <_scanf_float+0x218>
 80081cc:	2b79      	cmp	r3, #121	; 0x79
 80081ce:	e7f6      	b.n	80081be <_scanf_float+0x12a>
 80081d0:	6821      	ldr	r1, [r4, #0]
 80081d2:	05c8      	lsls	r0, r1, #23
 80081d4:	d51a      	bpl.n	800820c <_scanf_float+0x178>
 80081d6:	9b02      	ldr	r3, [sp, #8]
 80081d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80081dc:	6021      	str	r1, [r4, #0]
 80081de:	f109 0901 	add.w	r9, r9, #1
 80081e2:	b11b      	cbz	r3, 80081ec <_scanf_float+0x158>
 80081e4:	3b01      	subs	r3, #1
 80081e6:	3201      	adds	r2, #1
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	60a2      	str	r2, [r4, #8]
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	3301      	adds	r3, #1
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	607b      	str	r3, [r7, #4]
 8008200:	f340 8084 	ble.w	800830c <_scanf_float+0x278>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	3301      	adds	r3, #1
 8008208:	603b      	str	r3, [r7, #0]
 800820a:	e766      	b.n	80080da <_scanf_float+0x46>
 800820c:	eb1a 0f05 	cmn.w	sl, r5
 8008210:	f47f af70 	bne.w	80080f4 <_scanf_float+0x60>
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800821a:	6022      	str	r2, [r4, #0]
 800821c:	f806 3b01 	strb.w	r3, [r6], #1
 8008220:	e7e4      	b.n	80081ec <_scanf_float+0x158>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	0610      	lsls	r0, r2, #24
 8008226:	f57f af65 	bpl.w	80080f4 <_scanf_float+0x60>
 800822a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800822e:	e7f4      	b.n	800821a <_scanf_float+0x186>
 8008230:	f1ba 0f00 	cmp.w	sl, #0
 8008234:	d10e      	bne.n	8008254 <_scanf_float+0x1c0>
 8008236:	f1b9 0f00 	cmp.w	r9, #0
 800823a:	d10e      	bne.n	800825a <_scanf_float+0x1c6>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008242:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008246:	d108      	bne.n	800825a <_scanf_float+0x1c6>
 8008248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	f04f 0a01 	mov.w	sl, #1
 8008252:	e7e3      	b.n	800821c <_scanf_float+0x188>
 8008254:	f1ba 0f02 	cmp.w	sl, #2
 8008258:	d055      	beq.n	8008306 <_scanf_float+0x272>
 800825a:	2d01      	cmp	r5, #1
 800825c:	d002      	beq.n	8008264 <_scanf_float+0x1d0>
 800825e:	2d04      	cmp	r5, #4
 8008260:	f47f af48 	bne.w	80080f4 <_scanf_float+0x60>
 8008264:	3501      	adds	r5, #1
 8008266:	b2ed      	uxtb	r5, r5
 8008268:	e7d8      	b.n	800821c <_scanf_float+0x188>
 800826a:	f1ba 0f01 	cmp.w	sl, #1
 800826e:	f47f af41 	bne.w	80080f4 <_scanf_float+0x60>
 8008272:	f04f 0a02 	mov.w	sl, #2
 8008276:	e7d1      	b.n	800821c <_scanf_float+0x188>
 8008278:	b97d      	cbnz	r5, 800829a <_scanf_float+0x206>
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	f47f af3c 	bne.w	80080fa <_scanf_float+0x66>
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008288:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800828c:	f47f af39 	bne.w	8008102 <_scanf_float+0x6e>
 8008290:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	2501      	movs	r5, #1
 8008298:	e7c0      	b.n	800821c <_scanf_float+0x188>
 800829a:	2d03      	cmp	r5, #3
 800829c:	d0e2      	beq.n	8008264 <_scanf_float+0x1d0>
 800829e:	2d05      	cmp	r5, #5
 80082a0:	e7de      	b.n	8008260 <_scanf_float+0x1cc>
 80082a2:	2d02      	cmp	r5, #2
 80082a4:	f47f af26 	bne.w	80080f4 <_scanf_float+0x60>
 80082a8:	2503      	movs	r5, #3
 80082aa:	e7b7      	b.n	800821c <_scanf_float+0x188>
 80082ac:	2d06      	cmp	r5, #6
 80082ae:	f47f af21 	bne.w	80080f4 <_scanf_float+0x60>
 80082b2:	2507      	movs	r5, #7
 80082b4:	e7b2      	b.n	800821c <_scanf_float+0x188>
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	0591      	lsls	r1, r2, #22
 80082ba:	f57f af1b 	bpl.w	80080f4 <_scanf_float+0x60>
 80082be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80082c2:	6022      	str	r2, [r4, #0]
 80082c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80082c8:	e7a8      	b.n	800821c <_scanf_float+0x188>
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80082d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80082d4:	d006      	beq.n	80082e4 <_scanf_float+0x250>
 80082d6:	0550      	lsls	r0, r2, #21
 80082d8:	f57f af0c 	bpl.w	80080f4 <_scanf_float+0x60>
 80082dc:	f1b9 0f00 	cmp.w	r9, #0
 80082e0:	f43f af0f 	beq.w	8008102 <_scanf_float+0x6e>
 80082e4:	0591      	lsls	r1, r2, #22
 80082e6:	bf58      	it	pl
 80082e8:	9901      	ldrpl	r1, [sp, #4]
 80082ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082ee:	bf58      	it	pl
 80082f0:	eba9 0101 	subpl.w	r1, r9, r1
 80082f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80082f8:	bf58      	it	pl
 80082fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082fe:	6022      	str	r2, [r4, #0]
 8008300:	f04f 0900 	mov.w	r9, #0
 8008304:	e78a      	b.n	800821c <_scanf_float+0x188>
 8008306:	f04f 0a03 	mov.w	sl, #3
 800830a:	e787      	b.n	800821c <_scanf_float+0x188>
 800830c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008310:	4639      	mov	r1, r7
 8008312:	4640      	mov	r0, r8
 8008314:	4798      	blx	r3
 8008316:	2800      	cmp	r0, #0
 8008318:	f43f aedf 	beq.w	80080da <_scanf_float+0x46>
 800831c:	e6ea      	b.n	80080f4 <_scanf_float+0x60>
 800831e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008326:	463a      	mov	r2, r7
 8008328:	4640      	mov	r0, r8
 800832a:	4798      	blx	r3
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	3b01      	subs	r3, #1
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	e6ec      	b.n	800810e <_scanf_float+0x7a>
 8008334:	1e6b      	subs	r3, r5, #1
 8008336:	2b06      	cmp	r3, #6
 8008338:	d825      	bhi.n	8008386 <_scanf_float+0x2f2>
 800833a:	2d02      	cmp	r5, #2
 800833c:	d836      	bhi.n	80083ac <_scanf_float+0x318>
 800833e:	455e      	cmp	r6, fp
 8008340:	f67f aee8 	bls.w	8008114 <_scanf_float+0x80>
 8008344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008348:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800834c:	463a      	mov	r2, r7
 800834e:	4640      	mov	r0, r8
 8008350:	4798      	blx	r3
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	3b01      	subs	r3, #1
 8008356:	6123      	str	r3, [r4, #16]
 8008358:	e7f1      	b.n	800833e <_scanf_float+0x2aa>
 800835a:	9802      	ldr	r0, [sp, #8]
 800835c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008360:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008364:	9002      	str	r0, [sp, #8]
 8008366:	463a      	mov	r2, r7
 8008368:	4640      	mov	r0, r8
 800836a:	4798      	blx	r3
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	3b01      	subs	r3, #1
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008376:	fa5f fa8a 	uxtb.w	sl, sl
 800837a:	f1ba 0f02 	cmp.w	sl, #2
 800837e:	d1ec      	bne.n	800835a <_scanf_float+0x2c6>
 8008380:	3d03      	subs	r5, #3
 8008382:	b2ed      	uxtb	r5, r5
 8008384:	1b76      	subs	r6, r6, r5
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	05da      	lsls	r2, r3, #23
 800838a:	d52f      	bpl.n	80083ec <_scanf_float+0x358>
 800838c:	055b      	lsls	r3, r3, #21
 800838e:	d510      	bpl.n	80083b2 <_scanf_float+0x31e>
 8008390:	455e      	cmp	r6, fp
 8008392:	f67f aebf 	bls.w	8008114 <_scanf_float+0x80>
 8008396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800839a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800839e:	463a      	mov	r2, r7
 80083a0:	4640      	mov	r0, r8
 80083a2:	4798      	blx	r3
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	e7f1      	b.n	8008390 <_scanf_float+0x2fc>
 80083ac:	46aa      	mov	sl, r5
 80083ae:	9602      	str	r6, [sp, #8]
 80083b0:	e7df      	b.n	8008372 <_scanf_float+0x2de>
 80083b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	2965      	cmp	r1, #101	; 0x65
 80083ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80083be:	f106 35ff 	add.w	r5, r6, #4294967295
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	d00c      	beq.n	80083e0 <_scanf_float+0x34c>
 80083c6:	2945      	cmp	r1, #69	; 0x45
 80083c8:	d00a      	beq.n	80083e0 <_scanf_float+0x34c>
 80083ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ce:	463a      	mov	r2, r7
 80083d0:	4640      	mov	r0, r8
 80083d2:	4798      	blx	r3
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083da:	3b01      	subs	r3, #1
 80083dc:	1eb5      	subs	r5, r6, #2
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083e4:	463a      	mov	r2, r7
 80083e6:	4640      	mov	r0, r8
 80083e8:	4798      	blx	r3
 80083ea:	462e      	mov	r6, r5
 80083ec:	6825      	ldr	r5, [r4, #0]
 80083ee:	f015 0510 	ands.w	r5, r5, #16
 80083f2:	d158      	bne.n	80084a6 <_scanf_float+0x412>
 80083f4:	7035      	strb	r5, [r6, #0]
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008400:	d11c      	bne.n	800843c <_scanf_float+0x3a8>
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	454b      	cmp	r3, r9
 8008406:	eba3 0209 	sub.w	r2, r3, r9
 800840a:	d124      	bne.n	8008456 <_scanf_float+0x3c2>
 800840c:	2200      	movs	r2, #0
 800840e:	4659      	mov	r1, fp
 8008410:	4640      	mov	r0, r8
 8008412:	f000 fe9b 	bl	800914c <_strtod_r>
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	6821      	ldr	r1, [r4, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f011 0f02 	tst.w	r1, #2
 8008420:	ec57 6b10 	vmov	r6, r7, d0
 8008424:	f103 0204 	add.w	r2, r3, #4
 8008428:	d020      	beq.n	800846c <_scanf_float+0x3d8>
 800842a:	9903      	ldr	r1, [sp, #12]
 800842c:	600a      	str	r2, [r1, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	e9c3 6700 	strd	r6, r7, [r3]
 8008434:	68e3      	ldr	r3, [r4, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60e3      	str	r3, [r4, #12]
 800843a:	e66c      	b.n	8008116 <_scanf_float+0x82>
 800843c:	9b04      	ldr	r3, [sp, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0e4      	beq.n	800840c <_scanf_float+0x378>
 8008442:	9905      	ldr	r1, [sp, #20]
 8008444:	230a      	movs	r3, #10
 8008446:	462a      	mov	r2, r5
 8008448:	3101      	adds	r1, #1
 800844a:	4640      	mov	r0, r8
 800844c:	f000 ff08 	bl	8009260 <_strtol_r>
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	9e05      	ldr	r6, [sp, #20]
 8008454:	1ac2      	subs	r2, r0, r3
 8008456:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800845a:	429e      	cmp	r6, r3
 800845c:	bf28      	it	cs
 800845e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008462:	4912      	ldr	r1, [pc, #72]	; (80084ac <_scanf_float+0x418>)
 8008464:	4630      	mov	r0, r6
 8008466:	f000 f82b 	bl	80084c0 <siprintf>
 800846a:	e7cf      	b.n	800840c <_scanf_float+0x378>
 800846c:	f011 0f04 	tst.w	r1, #4
 8008470:	9903      	ldr	r1, [sp, #12]
 8008472:	600a      	str	r2, [r1, #0]
 8008474:	d1db      	bne.n	800842e <_scanf_float+0x39a>
 8008476:	f8d3 8000 	ldr.w	r8, [r3]
 800847a:	ee10 2a10 	vmov	r2, s0
 800847e:	ee10 0a10 	vmov	r0, s0
 8008482:	463b      	mov	r3, r7
 8008484:	4639      	mov	r1, r7
 8008486:	f7f8 fb51 	bl	8000b2c <__aeabi_dcmpun>
 800848a:	b128      	cbz	r0, 8008498 <_scanf_float+0x404>
 800848c:	4808      	ldr	r0, [pc, #32]	; (80084b0 <_scanf_float+0x41c>)
 800848e:	f000 f811 	bl	80084b4 <nanf>
 8008492:	ed88 0a00 	vstr	s0, [r8]
 8008496:	e7cd      	b.n	8008434 <_scanf_float+0x3a0>
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fba4 	bl	8000be8 <__aeabi_d2f>
 80084a0:	f8c8 0000 	str.w	r0, [r8]
 80084a4:	e7c6      	b.n	8008434 <_scanf_float+0x3a0>
 80084a6:	2500      	movs	r5, #0
 80084a8:	e635      	b.n	8008116 <_scanf_float+0x82>
 80084aa:	bf00      	nop
 80084ac:	0800d570 	.word	0x0800d570
 80084b0:	0800d988 	.word	0x0800d988

080084b4 <nanf>:
 80084b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084bc <nanf+0x8>
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	7fc00000 	.word	0x7fc00000

080084c0 <siprintf>:
 80084c0:	b40e      	push	{r1, r2, r3}
 80084c2:	b500      	push	{lr}
 80084c4:	b09c      	sub	sp, #112	; 0x70
 80084c6:	ab1d      	add	r3, sp, #116	; 0x74
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	9006      	str	r0, [sp, #24]
 80084cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <siprintf+0x38>)
 80084d2:	9107      	str	r1, [sp, #28]
 80084d4:	9104      	str	r1, [sp, #16]
 80084d6:	4909      	ldr	r1, [pc, #36]	; (80084fc <siprintf+0x3c>)
 80084d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084dc:	9105      	str	r1, [sp, #20]
 80084de:	6800      	ldr	r0, [r0, #0]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	a902      	add	r1, sp, #8
 80084e4:	f002 fea4 	bl	800b230 <_svfiprintf_r>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	b01c      	add	sp, #112	; 0x70
 80084f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f4:	b003      	add	sp, #12
 80084f6:	4770      	bx	lr
 80084f8:	20000140 	.word	0x20000140
 80084fc:	ffff0208 	.word	0xffff0208

08008500 <sulp>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	460d      	mov	r5, r1
 8008506:	ec45 4b10 	vmov	d0, r4, r5
 800850a:	4616      	mov	r6, r2
 800850c:	f002 fc2c 	bl	800ad68 <__ulp>
 8008510:	ec51 0b10 	vmov	r0, r1, d0
 8008514:	b17e      	cbz	r6, 8008536 <sulp+0x36>
 8008516:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800851a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd09      	ble.n	8008536 <sulp+0x36>
 8008522:	051b      	lsls	r3, r3, #20
 8008524:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008528:	2400      	movs	r4, #0
 800852a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800852e:	4622      	mov	r2, r4
 8008530:	462b      	mov	r3, r5
 8008532:	f7f8 f861 	bl	80005f8 <__aeabi_dmul>
 8008536:	bd70      	pop	{r4, r5, r6, pc}

08008538 <_strtod_l>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	b0a3      	sub	sp, #140	; 0x8c
 800853e:	461f      	mov	r7, r3
 8008540:	2300      	movs	r3, #0
 8008542:	931e      	str	r3, [sp, #120]	; 0x78
 8008544:	4ba4      	ldr	r3, [pc, #656]	; (80087d8 <_strtod_l+0x2a0>)
 8008546:	9219      	str	r2, [sp, #100]	; 0x64
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	9307      	str	r3, [sp, #28]
 800854c:	4604      	mov	r4, r0
 800854e:	4618      	mov	r0, r3
 8008550:	4688      	mov	r8, r1
 8008552:	f7f7 fe3d 	bl	80001d0 <strlen>
 8008556:	f04f 0a00 	mov.w	sl, #0
 800855a:	4605      	mov	r5, r0
 800855c:	f04f 0b00 	mov.w	fp, #0
 8008560:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	2a2b      	cmp	r2, #43	; 0x2b
 800856a:	d04c      	beq.n	8008606 <_strtod_l+0xce>
 800856c:	d839      	bhi.n	80085e2 <_strtod_l+0xaa>
 800856e:	2a0d      	cmp	r2, #13
 8008570:	d832      	bhi.n	80085d8 <_strtod_l+0xa0>
 8008572:	2a08      	cmp	r2, #8
 8008574:	d832      	bhi.n	80085dc <_strtod_l+0xa4>
 8008576:	2a00      	cmp	r2, #0
 8008578:	d03c      	beq.n	80085f4 <_strtod_l+0xbc>
 800857a:	2300      	movs	r3, #0
 800857c:	930e      	str	r3, [sp, #56]	; 0x38
 800857e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008580:	7833      	ldrb	r3, [r6, #0]
 8008582:	2b30      	cmp	r3, #48	; 0x30
 8008584:	f040 80b4 	bne.w	80086f0 <_strtod_l+0x1b8>
 8008588:	7873      	ldrb	r3, [r6, #1]
 800858a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800858e:	2b58      	cmp	r3, #88	; 0x58
 8008590:	d16c      	bne.n	800866c <_strtod_l+0x134>
 8008592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	ab1e      	add	r3, sp, #120	; 0x78
 8008598:	9702      	str	r7, [sp, #8]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	4a8f      	ldr	r2, [pc, #572]	; (80087dc <_strtod_l+0x2a4>)
 800859e:	ab1f      	add	r3, sp, #124	; 0x7c
 80085a0:	a91d      	add	r1, sp, #116	; 0x74
 80085a2:	4620      	mov	r0, r4
 80085a4:	f001 fd40 	bl	800a028 <__gethex>
 80085a8:	f010 0707 	ands.w	r7, r0, #7
 80085ac:	4605      	mov	r5, r0
 80085ae:	d005      	beq.n	80085bc <_strtod_l+0x84>
 80085b0:	2f06      	cmp	r7, #6
 80085b2:	d12a      	bne.n	800860a <_strtod_l+0xd2>
 80085b4:	3601      	adds	r6, #1
 80085b6:	2300      	movs	r3, #0
 80085b8:	961d      	str	r6, [sp, #116]	; 0x74
 80085ba:	930e      	str	r3, [sp, #56]	; 0x38
 80085bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f040 8596 	bne.w	80090f0 <_strtod_l+0xbb8>
 80085c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c6:	b1db      	cbz	r3, 8008600 <_strtod_l+0xc8>
 80085c8:	4652      	mov	r2, sl
 80085ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085ce:	ec43 2b10 	vmov	d0, r2, r3
 80085d2:	b023      	add	sp, #140	; 0x8c
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	2a20      	cmp	r2, #32
 80085da:	d1ce      	bne.n	800857a <_strtod_l+0x42>
 80085dc:	3301      	adds	r3, #1
 80085de:	931d      	str	r3, [sp, #116]	; 0x74
 80085e0:	e7c0      	b.n	8008564 <_strtod_l+0x2c>
 80085e2:	2a2d      	cmp	r2, #45	; 0x2d
 80085e4:	d1c9      	bne.n	800857a <_strtod_l+0x42>
 80085e6:	2201      	movs	r2, #1
 80085e8:	920e      	str	r2, [sp, #56]	; 0x38
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	921d      	str	r2, [sp, #116]	; 0x74
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1c4      	bne.n	800857e <_strtod_l+0x46>
 80085f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f040 8576 	bne.w	80090ec <_strtod_l+0xbb4>
 8008600:	4652      	mov	r2, sl
 8008602:	465b      	mov	r3, fp
 8008604:	e7e3      	b.n	80085ce <_strtod_l+0x96>
 8008606:	2200      	movs	r2, #0
 8008608:	e7ee      	b.n	80085e8 <_strtod_l+0xb0>
 800860a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800860c:	b13a      	cbz	r2, 800861e <_strtod_l+0xe6>
 800860e:	2135      	movs	r1, #53	; 0x35
 8008610:	a820      	add	r0, sp, #128	; 0x80
 8008612:	f002 fcb4 	bl	800af7e <__copybits>
 8008616:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008618:	4620      	mov	r0, r4
 800861a:	f002 f879 	bl	800a710 <_Bfree>
 800861e:	3f01      	subs	r7, #1
 8008620:	2f05      	cmp	r7, #5
 8008622:	d807      	bhi.n	8008634 <_strtod_l+0xfc>
 8008624:	e8df f007 	tbb	[pc, r7]
 8008628:	1d180b0e 	.word	0x1d180b0e
 800862c:	030e      	.short	0x030e
 800862e:	f04f 0b00 	mov.w	fp, #0
 8008632:	46da      	mov	sl, fp
 8008634:	0728      	lsls	r0, r5, #28
 8008636:	d5c1      	bpl.n	80085bc <_strtod_l+0x84>
 8008638:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800863c:	e7be      	b.n	80085bc <_strtod_l+0x84>
 800863e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008642:	e7f7      	b.n	8008634 <_strtod_l+0xfc>
 8008644:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008648:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800864a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800864e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008652:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008656:	e7ed      	b.n	8008634 <_strtod_l+0xfc>
 8008658:	f8df b184 	ldr.w	fp, [pc, #388]	; 80087e0 <_strtod_l+0x2a8>
 800865c:	f04f 0a00 	mov.w	sl, #0
 8008660:	e7e8      	b.n	8008634 <_strtod_l+0xfc>
 8008662:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008666:	f04f 3aff 	mov.w	sl, #4294967295
 800866a:	e7e3      	b.n	8008634 <_strtod_l+0xfc>
 800866c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	921d      	str	r2, [sp, #116]	; 0x74
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b30      	cmp	r3, #48	; 0x30
 8008676:	d0f9      	beq.n	800866c <_strtod_l+0x134>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d09f      	beq.n	80085bc <_strtod_l+0x84>
 800867c:	2301      	movs	r3, #1
 800867e:	f04f 0900 	mov.w	r9, #0
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008686:	930a      	str	r3, [sp, #40]	; 0x28
 8008688:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800868c:	464f      	mov	r7, r9
 800868e:	220a      	movs	r2, #10
 8008690:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008692:	7806      	ldrb	r6, [r0, #0]
 8008694:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008698:	b2d9      	uxtb	r1, r3
 800869a:	2909      	cmp	r1, #9
 800869c:	d92a      	bls.n	80086f4 <_strtod_l+0x1bc>
 800869e:	9907      	ldr	r1, [sp, #28]
 80086a0:	462a      	mov	r2, r5
 80086a2:	f002 fedd 	bl	800b460 <strncmp>
 80086a6:	b398      	cbz	r0, 8008710 <_strtod_l+0x1d8>
 80086a8:	2000      	movs	r0, #0
 80086aa:	4633      	mov	r3, r6
 80086ac:	463d      	mov	r5, r7
 80086ae:	9007      	str	r0, [sp, #28]
 80086b0:	4602      	mov	r2, r0
 80086b2:	2b65      	cmp	r3, #101	; 0x65
 80086b4:	d001      	beq.n	80086ba <_strtod_l+0x182>
 80086b6:	2b45      	cmp	r3, #69	; 0x45
 80086b8:	d118      	bne.n	80086ec <_strtod_l+0x1b4>
 80086ba:	b91d      	cbnz	r5, 80086c4 <_strtod_l+0x18c>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	4303      	orrs	r3, r0
 80086c0:	d098      	beq.n	80085f4 <_strtod_l+0xbc>
 80086c2:	2500      	movs	r5, #0
 80086c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80086c8:	f108 0301 	add.w	r3, r8, #1
 80086cc:	931d      	str	r3, [sp, #116]	; 0x74
 80086ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80086d2:	2b2b      	cmp	r3, #43	; 0x2b
 80086d4:	d075      	beq.n	80087c2 <_strtod_l+0x28a>
 80086d6:	2b2d      	cmp	r3, #45	; 0x2d
 80086d8:	d07b      	beq.n	80087d2 <_strtod_l+0x29a>
 80086da:	f04f 0c00 	mov.w	ip, #0
 80086de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80086e2:	2909      	cmp	r1, #9
 80086e4:	f240 8082 	bls.w	80087ec <_strtod_l+0x2b4>
 80086e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80086ec:	2600      	movs	r6, #0
 80086ee:	e09d      	b.n	800882c <_strtod_l+0x2f4>
 80086f0:	2300      	movs	r3, #0
 80086f2:	e7c4      	b.n	800867e <_strtod_l+0x146>
 80086f4:	2f08      	cmp	r7, #8
 80086f6:	bfd8      	it	le
 80086f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80086fa:	f100 0001 	add.w	r0, r0, #1
 80086fe:	bfda      	itte	le
 8008700:	fb02 3301 	mlale	r3, r2, r1, r3
 8008704:	9309      	strle	r3, [sp, #36]	; 0x24
 8008706:	fb02 3909 	mlagt	r9, r2, r9, r3
 800870a:	3701      	adds	r7, #1
 800870c:	901d      	str	r0, [sp, #116]	; 0x74
 800870e:	e7bf      	b.n	8008690 <_strtod_l+0x158>
 8008710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008712:	195a      	adds	r2, r3, r5
 8008714:	921d      	str	r2, [sp, #116]	; 0x74
 8008716:	5d5b      	ldrb	r3, [r3, r5]
 8008718:	2f00      	cmp	r7, #0
 800871a:	d037      	beq.n	800878c <_strtod_l+0x254>
 800871c:	9007      	str	r0, [sp, #28]
 800871e:	463d      	mov	r5, r7
 8008720:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008724:	2a09      	cmp	r2, #9
 8008726:	d912      	bls.n	800874e <_strtod_l+0x216>
 8008728:	2201      	movs	r2, #1
 800872a:	e7c2      	b.n	80086b2 <_strtod_l+0x17a>
 800872c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	921d      	str	r2, [sp, #116]	; 0x74
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	3001      	adds	r0, #1
 8008736:	2b30      	cmp	r3, #48	; 0x30
 8008738:	d0f8      	beq.n	800872c <_strtod_l+0x1f4>
 800873a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800873e:	2a08      	cmp	r2, #8
 8008740:	f200 84db 	bhi.w	80090fa <_strtod_l+0xbc2>
 8008744:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008746:	9007      	str	r0, [sp, #28]
 8008748:	2000      	movs	r0, #0
 800874a:	920a      	str	r2, [sp, #40]	; 0x28
 800874c:	4605      	mov	r5, r0
 800874e:	3b30      	subs	r3, #48	; 0x30
 8008750:	f100 0201 	add.w	r2, r0, #1
 8008754:	d014      	beq.n	8008780 <_strtod_l+0x248>
 8008756:	9907      	ldr	r1, [sp, #28]
 8008758:	4411      	add	r1, r2
 800875a:	9107      	str	r1, [sp, #28]
 800875c:	462a      	mov	r2, r5
 800875e:	eb00 0e05 	add.w	lr, r0, r5
 8008762:	210a      	movs	r1, #10
 8008764:	4572      	cmp	r2, lr
 8008766:	d113      	bne.n	8008790 <_strtod_l+0x258>
 8008768:	182a      	adds	r2, r5, r0
 800876a:	2a08      	cmp	r2, #8
 800876c:	f105 0501 	add.w	r5, r5, #1
 8008770:	4405      	add	r5, r0
 8008772:	dc1c      	bgt.n	80087ae <_strtod_l+0x276>
 8008774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008776:	220a      	movs	r2, #10
 8008778:	fb02 3301 	mla	r3, r2, r1, r3
 800877c:	9309      	str	r3, [sp, #36]	; 0x24
 800877e:	2200      	movs	r2, #0
 8008780:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008782:	1c59      	adds	r1, r3, #1
 8008784:	911d      	str	r1, [sp, #116]	; 0x74
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	4610      	mov	r0, r2
 800878a:	e7c9      	b.n	8008720 <_strtod_l+0x1e8>
 800878c:	4638      	mov	r0, r7
 800878e:	e7d2      	b.n	8008736 <_strtod_l+0x1fe>
 8008790:	2a08      	cmp	r2, #8
 8008792:	dc04      	bgt.n	800879e <_strtod_l+0x266>
 8008794:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008796:	434e      	muls	r6, r1
 8008798:	9609      	str	r6, [sp, #36]	; 0x24
 800879a:	3201      	adds	r2, #1
 800879c:	e7e2      	b.n	8008764 <_strtod_l+0x22c>
 800879e:	f102 0c01 	add.w	ip, r2, #1
 80087a2:	f1bc 0f10 	cmp.w	ip, #16
 80087a6:	bfd8      	it	le
 80087a8:	fb01 f909 	mulle.w	r9, r1, r9
 80087ac:	e7f5      	b.n	800879a <_strtod_l+0x262>
 80087ae:	2d10      	cmp	r5, #16
 80087b0:	bfdc      	itt	le
 80087b2:	220a      	movle	r2, #10
 80087b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80087b8:	e7e1      	b.n	800877e <_strtod_l+0x246>
 80087ba:	2300      	movs	r3, #0
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	2201      	movs	r2, #1
 80087c0:	e77c      	b.n	80086bc <_strtod_l+0x184>
 80087c2:	f04f 0c00 	mov.w	ip, #0
 80087c6:	f108 0302 	add.w	r3, r8, #2
 80087ca:	931d      	str	r3, [sp, #116]	; 0x74
 80087cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80087d0:	e785      	b.n	80086de <_strtod_l+0x1a6>
 80087d2:	f04f 0c01 	mov.w	ip, #1
 80087d6:	e7f6      	b.n	80087c6 <_strtod_l+0x28e>
 80087d8:	0800d7c8 	.word	0x0800d7c8
 80087dc:	0800d578 	.word	0x0800d578
 80087e0:	7ff00000 	.word	0x7ff00000
 80087e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087e6:	1c59      	adds	r1, r3, #1
 80087e8:	911d      	str	r1, [sp, #116]	; 0x74
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	2b30      	cmp	r3, #48	; 0x30
 80087ee:	d0f9      	beq.n	80087e4 <_strtod_l+0x2ac>
 80087f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80087f4:	2908      	cmp	r1, #8
 80087f6:	f63f af79 	bhi.w	80086ec <_strtod_l+0x1b4>
 80087fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80087fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008800:	9308      	str	r3, [sp, #32]
 8008802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008804:	1c59      	adds	r1, r3, #1
 8008806:	911d      	str	r1, [sp, #116]	; 0x74
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800880e:	2e09      	cmp	r6, #9
 8008810:	d937      	bls.n	8008882 <_strtod_l+0x34a>
 8008812:	9e08      	ldr	r6, [sp, #32]
 8008814:	1b89      	subs	r1, r1, r6
 8008816:	2908      	cmp	r1, #8
 8008818:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800881c:	dc02      	bgt.n	8008824 <_strtod_l+0x2ec>
 800881e:	4576      	cmp	r6, lr
 8008820:	bfa8      	it	ge
 8008822:	4676      	movge	r6, lr
 8008824:	f1bc 0f00 	cmp.w	ip, #0
 8008828:	d000      	beq.n	800882c <_strtod_l+0x2f4>
 800882a:	4276      	negs	r6, r6
 800882c:	2d00      	cmp	r5, #0
 800882e:	d14f      	bne.n	80088d0 <_strtod_l+0x398>
 8008830:	9904      	ldr	r1, [sp, #16]
 8008832:	4301      	orrs	r1, r0
 8008834:	f47f aec2 	bne.w	80085bc <_strtod_l+0x84>
 8008838:	2a00      	cmp	r2, #0
 800883a:	f47f aedb 	bne.w	80085f4 <_strtod_l+0xbc>
 800883e:	2b69      	cmp	r3, #105	; 0x69
 8008840:	d027      	beq.n	8008892 <_strtod_l+0x35a>
 8008842:	dc24      	bgt.n	800888e <_strtod_l+0x356>
 8008844:	2b49      	cmp	r3, #73	; 0x49
 8008846:	d024      	beq.n	8008892 <_strtod_l+0x35a>
 8008848:	2b4e      	cmp	r3, #78	; 0x4e
 800884a:	f47f aed3 	bne.w	80085f4 <_strtod_l+0xbc>
 800884e:	499e      	ldr	r1, [pc, #632]	; (8008ac8 <_strtod_l+0x590>)
 8008850:	a81d      	add	r0, sp, #116	; 0x74
 8008852:	f001 fe41 	bl	800a4d8 <__match>
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f aecc 	beq.w	80085f4 <_strtod_l+0xbc>
 800885c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b28      	cmp	r3, #40	; 0x28
 8008862:	d12d      	bne.n	80088c0 <_strtod_l+0x388>
 8008864:	4999      	ldr	r1, [pc, #612]	; (8008acc <_strtod_l+0x594>)
 8008866:	aa20      	add	r2, sp, #128	; 0x80
 8008868:	a81d      	add	r0, sp, #116	; 0x74
 800886a:	f001 fe49 	bl	800a500 <__hexnan>
 800886e:	2805      	cmp	r0, #5
 8008870:	d126      	bne.n	80088c0 <_strtod_l+0x388>
 8008872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008874:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008878:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800887c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008880:	e69c      	b.n	80085bc <_strtod_l+0x84>
 8008882:	210a      	movs	r1, #10
 8008884:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008888:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800888c:	e7b9      	b.n	8008802 <_strtod_l+0x2ca>
 800888e:	2b6e      	cmp	r3, #110	; 0x6e
 8008890:	e7db      	b.n	800884a <_strtod_l+0x312>
 8008892:	498f      	ldr	r1, [pc, #572]	; (8008ad0 <_strtod_l+0x598>)
 8008894:	a81d      	add	r0, sp, #116	; 0x74
 8008896:	f001 fe1f 	bl	800a4d8 <__match>
 800889a:	2800      	cmp	r0, #0
 800889c:	f43f aeaa 	beq.w	80085f4 <_strtod_l+0xbc>
 80088a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088a2:	498c      	ldr	r1, [pc, #560]	; (8008ad4 <_strtod_l+0x59c>)
 80088a4:	3b01      	subs	r3, #1
 80088a6:	a81d      	add	r0, sp, #116	; 0x74
 80088a8:	931d      	str	r3, [sp, #116]	; 0x74
 80088aa:	f001 fe15 	bl	800a4d8 <__match>
 80088ae:	b910      	cbnz	r0, 80088b6 <_strtod_l+0x37e>
 80088b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088b2:	3301      	adds	r3, #1
 80088b4:	931d      	str	r3, [sp, #116]	; 0x74
 80088b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008ae4 <_strtod_l+0x5ac>
 80088ba:	f04f 0a00 	mov.w	sl, #0
 80088be:	e67d      	b.n	80085bc <_strtod_l+0x84>
 80088c0:	4885      	ldr	r0, [pc, #532]	; (8008ad8 <_strtod_l+0x5a0>)
 80088c2:	f002 fdb5 	bl	800b430 <nan>
 80088c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80088ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80088ce:	e675      	b.n	80085bc <_strtod_l+0x84>
 80088d0:	9b07      	ldr	r3, [sp, #28]
 80088d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088d4:	1af3      	subs	r3, r6, r3
 80088d6:	2f00      	cmp	r7, #0
 80088d8:	bf08      	it	eq
 80088da:	462f      	moveq	r7, r5
 80088dc:	2d10      	cmp	r5, #16
 80088de:	9308      	str	r3, [sp, #32]
 80088e0:	46a8      	mov	r8, r5
 80088e2:	bfa8      	it	ge
 80088e4:	f04f 0810 	movge.w	r8, #16
 80088e8:	f7f7 fe0c 	bl	8000504 <__aeabi_ui2d>
 80088ec:	2d09      	cmp	r5, #9
 80088ee:	4682      	mov	sl, r0
 80088f0:	468b      	mov	fp, r1
 80088f2:	dd13      	ble.n	800891c <_strtod_l+0x3e4>
 80088f4:	4b79      	ldr	r3, [pc, #484]	; (8008adc <_strtod_l+0x5a4>)
 80088f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80088fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	4682      	mov	sl, r0
 8008904:	4648      	mov	r0, r9
 8008906:	468b      	mov	fp, r1
 8008908:	f7f7 fdfc 	bl	8000504 <__aeabi_ui2d>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4650      	mov	r0, sl
 8008912:	4659      	mov	r1, fp
 8008914:	f7f7 fcba 	bl	800028c <__adddf3>
 8008918:	4682      	mov	sl, r0
 800891a:	468b      	mov	fp, r1
 800891c:	2d0f      	cmp	r5, #15
 800891e:	dc38      	bgt.n	8008992 <_strtod_l+0x45a>
 8008920:	9b08      	ldr	r3, [sp, #32]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f43f ae4a 	beq.w	80085bc <_strtod_l+0x84>
 8008928:	dd24      	ble.n	8008974 <_strtod_l+0x43c>
 800892a:	2b16      	cmp	r3, #22
 800892c:	dc0b      	bgt.n	8008946 <_strtod_l+0x40e>
 800892e:	4d6b      	ldr	r5, [pc, #428]	; (8008adc <_strtod_l+0x5a4>)
 8008930:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008934:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008938:	4652      	mov	r2, sl
 800893a:	465b      	mov	r3, fp
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	4682      	mov	sl, r0
 8008942:	468b      	mov	fp, r1
 8008944:	e63a      	b.n	80085bc <_strtod_l+0x84>
 8008946:	9a08      	ldr	r2, [sp, #32]
 8008948:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800894c:	4293      	cmp	r3, r2
 800894e:	db20      	blt.n	8008992 <_strtod_l+0x45a>
 8008950:	4c62      	ldr	r4, [pc, #392]	; (8008adc <_strtod_l+0x5a4>)
 8008952:	f1c5 050f 	rsb	r5, r5, #15
 8008956:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008962:	f7f7 fe49 	bl	80005f8 <__aeabi_dmul>
 8008966:	9b08      	ldr	r3, [sp, #32]
 8008968:	1b5d      	subs	r5, r3, r5
 800896a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800896e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008972:	e7e3      	b.n	800893c <_strtod_l+0x404>
 8008974:	9b08      	ldr	r3, [sp, #32]
 8008976:	3316      	adds	r3, #22
 8008978:	db0b      	blt.n	8008992 <_strtod_l+0x45a>
 800897a:	9b07      	ldr	r3, [sp, #28]
 800897c:	4a57      	ldr	r2, [pc, #348]	; (8008adc <_strtod_l+0x5a4>)
 800897e:	1b9e      	subs	r6, r3, r6
 8008980:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008988:	4650      	mov	r0, sl
 800898a:	4659      	mov	r1, fp
 800898c:	f7f7 ff5e 	bl	800084c <__aeabi_ddiv>
 8008990:	e7d6      	b.n	8008940 <_strtod_l+0x408>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	eba5 0808 	sub.w	r8, r5, r8
 8008998:	4498      	add	r8, r3
 800899a:	f1b8 0f00 	cmp.w	r8, #0
 800899e:	dd71      	ble.n	8008a84 <_strtod_l+0x54c>
 80089a0:	f018 030f 	ands.w	r3, r8, #15
 80089a4:	d00a      	beq.n	80089bc <_strtod_l+0x484>
 80089a6:	494d      	ldr	r1, [pc, #308]	; (8008adc <_strtod_l+0x5a4>)
 80089a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ac:	4652      	mov	r2, sl
 80089ae:	465b      	mov	r3, fp
 80089b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b4:	f7f7 fe20 	bl	80005f8 <__aeabi_dmul>
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	f038 080f 	bics.w	r8, r8, #15
 80089c0:	d04d      	beq.n	8008a5e <_strtod_l+0x526>
 80089c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80089c6:	dd22      	ble.n	8008a0e <_strtod_l+0x4d6>
 80089c8:	2500      	movs	r5, #0
 80089ca:	462e      	mov	r6, r5
 80089cc:	9509      	str	r5, [sp, #36]	; 0x24
 80089ce:	9507      	str	r5, [sp, #28]
 80089d0:	2322      	movs	r3, #34	; 0x22
 80089d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008ae4 <_strtod_l+0x5ac>
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	f04f 0a00 	mov.w	sl, #0
 80089dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f43f adec 	beq.w	80085bc <_strtod_l+0x84>
 80089e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80089e6:	4620      	mov	r0, r4
 80089e8:	f001 fe92 	bl	800a710 <_Bfree>
 80089ec:	9907      	ldr	r1, [sp, #28]
 80089ee:	4620      	mov	r0, r4
 80089f0:	f001 fe8e 	bl	800a710 <_Bfree>
 80089f4:	4631      	mov	r1, r6
 80089f6:	4620      	mov	r0, r4
 80089f8:	f001 fe8a 	bl	800a710 <_Bfree>
 80089fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089fe:	4620      	mov	r0, r4
 8008a00:	f001 fe86 	bl	800a710 <_Bfree>
 8008a04:	4629      	mov	r1, r5
 8008a06:	4620      	mov	r0, r4
 8008a08:	f001 fe82 	bl	800a710 <_Bfree>
 8008a0c:	e5d6      	b.n	80085bc <_strtod_l+0x84>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008a14:	4650      	mov	r0, sl
 8008a16:	4659      	mov	r1, fp
 8008a18:	4699      	mov	r9, r3
 8008a1a:	f1b8 0f01 	cmp.w	r8, #1
 8008a1e:	dc21      	bgt.n	8008a64 <_strtod_l+0x52c>
 8008a20:	b10b      	cbz	r3, 8008a26 <_strtod_l+0x4ee>
 8008a22:	4682      	mov	sl, r0
 8008a24:	468b      	mov	fp, r1
 8008a26:	4b2e      	ldr	r3, [pc, #184]	; (8008ae0 <_strtod_l+0x5a8>)
 8008a28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008a30:	4652      	mov	r2, sl
 8008a32:	465b      	mov	r3, fp
 8008a34:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a38:	f7f7 fdde 	bl	80005f8 <__aeabi_dmul>
 8008a3c:	4b29      	ldr	r3, [pc, #164]	; (8008ae4 <_strtod_l+0x5ac>)
 8008a3e:	460a      	mov	r2, r1
 8008a40:	400b      	ands	r3, r1
 8008a42:	4929      	ldr	r1, [pc, #164]	; (8008ae8 <_strtod_l+0x5b0>)
 8008a44:	428b      	cmp	r3, r1
 8008a46:	4682      	mov	sl, r0
 8008a48:	d8be      	bhi.n	80089c8 <_strtod_l+0x490>
 8008a4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a4e:	428b      	cmp	r3, r1
 8008a50:	bf86      	itte	hi
 8008a52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008aec <_strtod_l+0x5b4>
 8008a56:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	e081      	b.n	8008b68 <_strtod_l+0x630>
 8008a64:	f018 0f01 	tst.w	r8, #1
 8008a68:	d007      	beq.n	8008a7a <_strtod_l+0x542>
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <_strtod_l+0x5a8>)
 8008a6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	f109 0901 	add.w	r9, r9, #1
 8008a7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a82:	e7ca      	b.n	8008a1a <_strtod_l+0x4e2>
 8008a84:	d0eb      	beq.n	8008a5e <_strtod_l+0x526>
 8008a86:	f1c8 0800 	rsb	r8, r8, #0
 8008a8a:	f018 020f 	ands.w	r2, r8, #15
 8008a8e:	d00a      	beq.n	8008aa6 <_strtod_l+0x56e>
 8008a90:	4b12      	ldr	r3, [pc, #72]	; (8008adc <_strtod_l+0x5a4>)
 8008a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a96:	4650      	mov	r0, sl
 8008a98:	4659      	mov	r1, fp
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fed5 	bl	800084c <__aeabi_ddiv>
 8008aa2:	4682      	mov	sl, r0
 8008aa4:	468b      	mov	fp, r1
 8008aa6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008aaa:	d0d8      	beq.n	8008a5e <_strtod_l+0x526>
 8008aac:	f1b8 0f1f 	cmp.w	r8, #31
 8008ab0:	dd1e      	ble.n	8008af0 <_strtod_l+0x5b8>
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	462e      	mov	r6, r5
 8008ab6:	9509      	str	r5, [sp, #36]	; 0x24
 8008ab8:	9507      	str	r5, [sp, #28]
 8008aba:	2322      	movs	r3, #34	; 0x22
 8008abc:	f04f 0a00 	mov.w	sl, #0
 8008ac0:	f04f 0b00 	mov.w	fp, #0
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	e789      	b.n	80089dc <_strtod_l+0x4a4>
 8008ac8:	0800d549 	.word	0x0800d549
 8008acc:	0800d58c 	.word	0x0800d58c
 8008ad0:	0800d541 	.word	0x0800d541
 8008ad4:	0800d6cc 	.word	0x0800d6cc
 8008ad8:	0800d988 	.word	0x0800d988
 8008adc:	0800d868 	.word	0x0800d868
 8008ae0:	0800d840 	.word	0x0800d840
 8008ae4:	7ff00000 	.word	0x7ff00000
 8008ae8:	7ca00000 	.word	0x7ca00000
 8008aec:	7fefffff 	.word	0x7fefffff
 8008af0:	f018 0310 	ands.w	r3, r8, #16
 8008af4:	bf18      	it	ne
 8008af6:	236a      	movne	r3, #106	; 0x6a
 8008af8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008eb0 <_strtod_l+0x978>
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	4650      	mov	r0, sl
 8008b00:	4659      	mov	r1, fp
 8008b02:	2300      	movs	r3, #0
 8008b04:	f018 0f01 	tst.w	r8, #1
 8008b08:	d004      	beq.n	8008b14 <_strtod_l+0x5dc>
 8008b0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b0e:	f7f7 fd73 	bl	80005f8 <__aeabi_dmul>
 8008b12:	2301      	movs	r3, #1
 8008b14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008b18:	f109 0908 	add.w	r9, r9, #8
 8008b1c:	d1f2      	bne.n	8008b04 <_strtod_l+0x5cc>
 8008b1e:	b10b      	cbz	r3, 8008b24 <_strtod_l+0x5ec>
 8008b20:	4682      	mov	sl, r0
 8008b22:	468b      	mov	fp, r1
 8008b24:	9b04      	ldr	r3, [sp, #16]
 8008b26:	b1bb      	cbz	r3, 8008b58 <_strtod_l+0x620>
 8008b28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008b2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	4659      	mov	r1, fp
 8008b34:	dd10      	ble.n	8008b58 <_strtod_l+0x620>
 8008b36:	2b1f      	cmp	r3, #31
 8008b38:	f340 8128 	ble.w	8008d8c <_strtod_l+0x854>
 8008b3c:	2b34      	cmp	r3, #52	; 0x34
 8008b3e:	bfde      	ittt	le
 8008b40:	3b20      	suble	r3, #32
 8008b42:	f04f 32ff 	movle.w	r2, #4294967295
 8008b46:	fa02 f303 	lslle.w	r3, r2, r3
 8008b4a:	f04f 0a00 	mov.w	sl, #0
 8008b4e:	bfcc      	ite	gt
 8008b50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008b54:	ea03 0b01 	andle.w	fp, r3, r1
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	4659      	mov	r1, fp
 8008b60:	f7f7 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d1a4      	bne.n	8008ab2 <_strtod_l+0x57a>
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b6e:	462b      	mov	r3, r5
 8008b70:	463a      	mov	r2, r7
 8008b72:	4620      	mov	r0, r4
 8008b74:	f001 fe38 	bl	800a7e8 <__s2b>
 8008b78:	9009      	str	r0, [sp, #36]	; 0x24
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f43f af24 	beq.w	80089c8 <_strtod_l+0x490>
 8008b80:	9b07      	ldr	r3, [sp, #28]
 8008b82:	1b9e      	subs	r6, r3, r6
 8008b84:	9b08      	ldr	r3, [sp, #32]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfb4      	ite	lt
 8008b8a:	4633      	movlt	r3, r6
 8008b8c:	2300      	movge	r3, #0
 8008b8e:	9310      	str	r3, [sp, #64]	; 0x40
 8008b90:	9b08      	ldr	r3, [sp, #32]
 8008b92:	2500      	movs	r5, #0
 8008b94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b98:	9318      	str	r3, [sp, #96]	; 0x60
 8008b9a:	462e      	mov	r6, r5
 8008b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	6859      	ldr	r1, [r3, #4]
 8008ba2:	f001 fd75 	bl	800a690 <_Balloc>
 8008ba6:	9007      	str	r0, [sp, #28]
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	f43f af11 	beq.w	80089d0 <_strtod_l+0x498>
 8008bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb0:	691a      	ldr	r2, [r3, #16]
 8008bb2:	3202      	adds	r2, #2
 8008bb4:	f103 010c 	add.w	r1, r3, #12
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	300c      	adds	r0, #12
 8008bbc:	f001 fd5a 	bl	800a674 <memcpy>
 8008bc0:	ec4b ab10 	vmov	d0, sl, fp
 8008bc4:	aa20      	add	r2, sp, #128	; 0x80
 8008bc6:	a91f      	add	r1, sp, #124	; 0x7c
 8008bc8:	4620      	mov	r0, r4
 8008bca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008bce:	f002 f947 	bl	800ae60 <__d2b>
 8008bd2:	901e      	str	r0, [sp, #120]	; 0x78
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	f43f aefb 	beq.w	80089d0 <_strtod_l+0x498>
 8008bda:	2101      	movs	r1, #1
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f001 fe9d 	bl	800a91c <__i2b>
 8008be2:	4606      	mov	r6, r0
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f43f aef3 	beq.w	80089d0 <_strtod_l+0x498>
 8008bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bec:	9904      	ldr	r1, [sp, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfab      	itete	ge
 8008bf2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008bf4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008bf6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008bf8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008bfc:	bfac      	ite	ge
 8008bfe:	eb03 0902 	addge.w	r9, r3, r2
 8008c02:	1ad7      	sublt	r7, r2, r3
 8008c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c06:	eba3 0801 	sub.w	r8, r3, r1
 8008c0a:	4490      	add	r8, r2
 8008c0c:	4ba3      	ldr	r3, [pc, #652]	; (8008e9c <_strtod_l+0x964>)
 8008c0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c12:	4598      	cmp	r8, r3
 8008c14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c18:	f280 80cc 	bge.w	8008db4 <_strtod_l+0x87c>
 8008c1c:	eba3 0308 	sub.w	r3, r3, r8
 8008c20:	2b1f      	cmp	r3, #31
 8008c22:	eba2 0203 	sub.w	r2, r2, r3
 8008c26:	f04f 0101 	mov.w	r1, #1
 8008c2a:	f300 80b6 	bgt.w	8008d9a <_strtod_l+0x862>
 8008c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c32:	9311      	str	r3, [sp, #68]	; 0x44
 8008c34:	2300      	movs	r3, #0
 8008c36:	930c      	str	r3, [sp, #48]	; 0x30
 8008c38:	eb09 0802 	add.w	r8, r9, r2
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	45c1      	cmp	r9, r8
 8008c40:	4417      	add	r7, r2
 8008c42:	441f      	add	r7, r3
 8008c44:	464b      	mov	r3, r9
 8008c46:	bfa8      	it	ge
 8008c48:	4643      	movge	r3, r8
 8008c4a:	42bb      	cmp	r3, r7
 8008c4c:	bfa8      	it	ge
 8008c4e:	463b      	movge	r3, r7
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfc2      	ittt	gt
 8008c54:	eba8 0803 	subgt.w	r8, r8, r3
 8008c58:	1aff      	subgt	r7, r7, r3
 8008c5a:	eba9 0903 	subgt.w	r9, r9, r3
 8008c5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dd17      	ble.n	8008c94 <_strtod_l+0x75c>
 8008c64:	4631      	mov	r1, r6
 8008c66:	461a      	mov	r2, r3
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f001 ff13 	bl	800aa94 <__pow5mult>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f43f aead 	beq.w	80089d0 <_strtod_l+0x498>
 8008c76:	4601      	mov	r1, r0
 8008c78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f001 fe64 	bl	800a948 <__multiply>
 8008c80:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c82:	2800      	cmp	r0, #0
 8008c84:	f43f aea4 	beq.w	80089d0 <_strtod_l+0x498>
 8008c88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f001 fd40 	bl	800a710 <_Bfree>
 8008c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c92:	931e      	str	r3, [sp, #120]	; 0x78
 8008c94:	f1b8 0f00 	cmp.w	r8, #0
 8008c98:	f300 8091 	bgt.w	8008dbe <_strtod_l+0x886>
 8008c9c:	9b08      	ldr	r3, [sp, #32]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd08      	ble.n	8008cb4 <_strtod_l+0x77c>
 8008ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ca4:	9907      	ldr	r1, [sp, #28]
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f001 fef4 	bl	800aa94 <__pow5mult>
 8008cac:	9007      	str	r0, [sp, #28]
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f ae8e 	beq.w	80089d0 <_strtod_l+0x498>
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	dd08      	ble.n	8008cca <_strtod_l+0x792>
 8008cb8:	9907      	ldr	r1, [sp, #28]
 8008cba:	463a      	mov	r2, r7
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f001 ff43 	bl	800ab48 <__lshift>
 8008cc2:	9007      	str	r0, [sp, #28]
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f43f ae83 	beq.w	80089d0 <_strtod_l+0x498>
 8008cca:	f1b9 0f00 	cmp.w	r9, #0
 8008cce:	dd08      	ble.n	8008ce2 <_strtod_l+0x7aa>
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	464a      	mov	r2, r9
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f001 ff37 	bl	800ab48 <__lshift>
 8008cda:	4606      	mov	r6, r0
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f43f ae77 	beq.w	80089d0 <_strtod_l+0x498>
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f001 ffb6 	bl	800ac58 <__mdiff>
 8008cec:	4605      	mov	r5, r0
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f43f ae6e 	beq.w	80089d0 <_strtod_l+0x498>
 8008cf4:	68c3      	ldr	r3, [r0, #12]
 8008cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60c3      	str	r3, [r0, #12]
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	f001 ff8f 	bl	800ac20 <__mcmp>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	da65      	bge.n	8008dd2 <_strtod_l+0x89a>
 8008d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d08:	ea53 030a 	orrs.w	r3, r3, sl
 8008d0c:	f040 8087 	bne.w	8008e1e <_strtod_l+0x8e6>
 8008d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 8082 	bne.w	8008e1e <_strtod_l+0x8e6>
 8008d1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d1e:	0d1b      	lsrs	r3, r3, #20
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d26:	d97a      	bls.n	8008e1e <_strtod_l+0x8e6>
 8008d28:	696b      	ldr	r3, [r5, #20]
 8008d2a:	b913      	cbnz	r3, 8008d32 <_strtod_l+0x7fa>
 8008d2c:	692b      	ldr	r3, [r5, #16]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	dd75      	ble.n	8008e1e <_strtod_l+0x8e6>
 8008d32:	4629      	mov	r1, r5
 8008d34:	2201      	movs	r2, #1
 8008d36:	4620      	mov	r0, r4
 8008d38:	f001 ff06 	bl	800ab48 <__lshift>
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4605      	mov	r5, r0
 8008d40:	f001 ff6e 	bl	800ac20 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	dd6a      	ble.n	8008e1e <_strtod_l+0x8e6>
 8008d48:	9904      	ldr	r1, [sp, #16]
 8008d4a:	4a55      	ldr	r2, [pc, #340]	; (8008ea0 <_strtod_l+0x968>)
 8008d4c:	465b      	mov	r3, fp
 8008d4e:	2900      	cmp	r1, #0
 8008d50:	f000 8085 	beq.w	8008e5e <_strtod_l+0x926>
 8008d54:	ea02 010b 	and.w	r1, r2, fp
 8008d58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d5c:	dc7f      	bgt.n	8008e5e <_strtod_l+0x926>
 8008d5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d62:	f77f aeaa 	ble.w	8008aba <_strtod_l+0x582>
 8008d66:	4a4f      	ldr	r2, [pc, #316]	; (8008ea4 <_strtod_l+0x96c>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008d6e:	4650      	mov	r0, sl
 8008d70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008d74:	4659      	mov	r1, fp
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4303      	orrs	r3, r0
 8008d7e:	bf08      	it	eq
 8008d80:	2322      	moveq	r3, #34	; 0x22
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	bf08      	it	eq
 8008d88:	6023      	streq	r3, [r4, #0]
 8008d8a:	e62b      	b.n	80089e4 <_strtod_l+0x4ac>
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	ea03 0a0a 	and.w	sl, r3, sl
 8008d98:	e6de      	b.n	8008b58 <_strtod_l+0x620>
 8008d9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008d9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008da2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008da6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008daa:	fa01 f308 	lsl.w	r3, r1, r8
 8008dae:	930c      	str	r3, [sp, #48]	; 0x30
 8008db0:	9111      	str	r1, [sp, #68]	; 0x44
 8008db2:	e741      	b.n	8008c38 <_strtod_l+0x700>
 8008db4:	2300      	movs	r3, #0
 8008db6:	930c      	str	r3, [sp, #48]	; 0x30
 8008db8:	2301      	movs	r3, #1
 8008dba:	9311      	str	r3, [sp, #68]	; 0x44
 8008dbc:	e73c      	b.n	8008c38 <_strtod_l+0x700>
 8008dbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f001 fec0 	bl	800ab48 <__lshift>
 8008dc8:	901e      	str	r0, [sp, #120]	; 0x78
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f47f af66 	bne.w	8008c9c <_strtod_l+0x764>
 8008dd0:	e5fe      	b.n	80089d0 <_strtod_l+0x498>
 8008dd2:	465f      	mov	r7, fp
 8008dd4:	d16e      	bne.n	8008eb4 <_strtod_l+0x97c>
 8008dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ddc:	b342      	cbz	r2, 8008e30 <_strtod_l+0x8f8>
 8008dde:	4a32      	ldr	r2, [pc, #200]	; (8008ea8 <_strtod_l+0x970>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d128      	bne.n	8008e36 <_strtod_l+0x8fe>
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	4650      	mov	r0, sl
 8008de8:	b1eb      	cbz	r3, 8008e26 <_strtod_l+0x8ee>
 8008dea:	4a2d      	ldr	r2, [pc, #180]	; (8008ea0 <_strtod_l+0x968>)
 8008dec:	403a      	ands	r2, r7
 8008dee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008df2:	f04f 31ff 	mov.w	r1, #4294967295
 8008df6:	d819      	bhi.n	8008e2c <_strtod_l+0x8f4>
 8008df8:	0d12      	lsrs	r2, r2, #20
 8008dfa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008e02:	4298      	cmp	r0, r3
 8008e04:	d117      	bne.n	8008e36 <_strtod_l+0x8fe>
 8008e06:	4b29      	ldr	r3, [pc, #164]	; (8008eac <_strtod_l+0x974>)
 8008e08:	429f      	cmp	r7, r3
 8008e0a:	d102      	bne.n	8008e12 <_strtod_l+0x8da>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f43f addf 	beq.w	80089d0 <_strtod_l+0x498>
 8008e12:	4b23      	ldr	r3, [pc, #140]	; (8008ea0 <_strtod_l+0x968>)
 8008e14:	403b      	ands	r3, r7
 8008e16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008e1a:	f04f 0a00 	mov.w	sl, #0
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1a0      	bne.n	8008d66 <_strtod_l+0x82e>
 8008e24:	e5de      	b.n	80089e4 <_strtod_l+0x4ac>
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2a:	e7ea      	b.n	8008e02 <_strtod_l+0x8ca>
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	e7e8      	b.n	8008e02 <_strtod_l+0x8ca>
 8008e30:	ea53 030a 	orrs.w	r3, r3, sl
 8008e34:	d088      	beq.n	8008d48 <_strtod_l+0x810>
 8008e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e38:	b1db      	cbz	r3, 8008e72 <_strtod_l+0x93a>
 8008e3a:	423b      	tst	r3, r7
 8008e3c:	d0ef      	beq.n	8008e1e <_strtod_l+0x8e6>
 8008e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e40:	9a04      	ldr	r2, [sp, #16]
 8008e42:	4650      	mov	r0, sl
 8008e44:	4659      	mov	r1, fp
 8008e46:	b1c3      	cbz	r3, 8008e7a <_strtod_l+0x942>
 8008e48:	f7ff fb5a 	bl	8008500 <sulp>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e54:	f7f7 fa1a 	bl	800028c <__adddf3>
 8008e58:	4682      	mov	sl, r0
 8008e5a:	468b      	mov	fp, r1
 8008e5c:	e7df      	b.n	8008e1e <_strtod_l+0x8e6>
 8008e5e:	4013      	ands	r3, r2
 8008e60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e6c:	f04f 3aff 	mov.w	sl, #4294967295
 8008e70:	e7d5      	b.n	8008e1e <_strtod_l+0x8e6>
 8008e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e74:	ea13 0f0a 	tst.w	r3, sl
 8008e78:	e7e0      	b.n	8008e3c <_strtod_l+0x904>
 8008e7a:	f7ff fb41 	bl	8008500 <sulp>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e86:	f7f7 f9ff 	bl	8000288 <__aeabi_dsub>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	f7f7 fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d0c1      	beq.n	8008e1e <_strtod_l+0x8e6>
 8008e9a:	e60e      	b.n	8008aba <_strtod_l+0x582>
 8008e9c:	fffffc02 	.word	0xfffffc02
 8008ea0:	7ff00000 	.word	0x7ff00000
 8008ea4:	39500000 	.word	0x39500000
 8008ea8:	000fffff 	.word	0x000fffff
 8008eac:	7fefffff 	.word	0x7fefffff
 8008eb0:	0800d5a0 	.word	0x0800d5a0
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f002 f82e 	bl	800af18 <__ratio>
 8008ebc:	ec59 8b10 	vmov	r8, r9, d0
 8008ec0:	ee10 0a10 	vmov	r0, s0
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eca:	4649      	mov	r1, r9
 8008ecc:	f7f7 fe10 	bl	8000af0 <__aeabi_dcmple>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d07c      	beq.n	8008fce <_strtod_l+0xa96>
 8008ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d04c      	beq.n	8008f74 <_strtod_l+0xa3c>
 8008eda:	4b95      	ldr	r3, [pc, #596]	; (8009130 <_strtod_l+0xbf8>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008ee2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009130 <_strtod_l+0xbf8>
 8008ee6:	f04f 0800 	mov.w	r8, #0
 8008eea:	4b92      	ldr	r3, [pc, #584]	; (8009134 <_strtod_l+0xbfc>)
 8008eec:	403b      	ands	r3, r7
 8008eee:	9311      	str	r3, [sp, #68]	; 0x44
 8008ef0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ef2:	4b91      	ldr	r3, [pc, #580]	; (8009138 <_strtod_l+0xc00>)
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	f040 80b2 	bne.w	800905e <_strtod_l+0xb26>
 8008efa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008f06:	ec4b ab10 	vmov	d0, sl, fp
 8008f0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008f0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f12:	f001 ff29 	bl	800ad68 <__ulp>
 8008f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f1a:	ec53 2b10 	vmov	r2, r3, d0
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	4652      	mov	r2, sl
 8008f24:	465b      	mov	r3, fp
 8008f26:	f7f7 f9b1 	bl	800028c <__adddf3>
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4981      	ldr	r1, [pc, #516]	; (8009134 <_strtod_l+0xbfc>)
 8008f2e:	4a83      	ldr	r2, [pc, #524]	; (800913c <_strtod_l+0xc04>)
 8008f30:	4019      	ands	r1, r3
 8008f32:	4291      	cmp	r1, r2
 8008f34:	4682      	mov	sl, r0
 8008f36:	d95e      	bls.n	8008ff6 <_strtod_l+0xabe>
 8008f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d103      	bne.n	8008f4a <_strtod_l+0xa12>
 8008f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f44:	3301      	adds	r3, #1
 8008f46:	f43f ad43 	beq.w	80089d0 <_strtod_l+0x498>
 8008f4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009148 <_strtod_l+0xc10>
 8008f4e:	f04f 3aff 	mov.w	sl, #4294967295
 8008f52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f54:	4620      	mov	r0, r4
 8008f56:	f001 fbdb 	bl	800a710 <_Bfree>
 8008f5a:	9907      	ldr	r1, [sp, #28]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f001 fbd7 	bl	800a710 <_Bfree>
 8008f62:	4631      	mov	r1, r6
 8008f64:	4620      	mov	r0, r4
 8008f66:	f001 fbd3 	bl	800a710 <_Bfree>
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f001 fbcf 	bl	800a710 <_Bfree>
 8008f72:	e613      	b.n	8008b9c <_strtod_l+0x664>
 8008f74:	f1ba 0f00 	cmp.w	sl, #0
 8008f78:	d11b      	bne.n	8008fb2 <_strtod_l+0xa7a>
 8008f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f7e:	b9f3      	cbnz	r3, 8008fbe <_strtod_l+0xa86>
 8008f80:	4b6b      	ldr	r3, [pc, #428]	; (8009130 <_strtod_l+0xbf8>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	4640      	mov	r0, r8
 8008f86:	4649      	mov	r1, r9
 8008f88:	f7f7 fda8 	bl	8000adc <__aeabi_dcmplt>
 8008f8c:	b9d0      	cbnz	r0, 8008fc4 <_strtod_l+0xa8c>
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	4b6b      	ldr	r3, [pc, #428]	; (8009140 <_strtod_l+0xc08>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	f7f7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4689      	mov	r9, r1
 8008f9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008fa2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008fa6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fa8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008fac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008fb0:	e79b      	b.n	8008eea <_strtod_l+0x9b2>
 8008fb2:	f1ba 0f01 	cmp.w	sl, #1
 8008fb6:	d102      	bne.n	8008fbe <_strtod_l+0xa86>
 8008fb8:	2f00      	cmp	r7, #0
 8008fba:	f43f ad7e 	beq.w	8008aba <_strtod_l+0x582>
 8008fbe:	4b61      	ldr	r3, [pc, #388]	; (8009144 <_strtod_l+0xc0c>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	e78c      	b.n	8008ede <_strtod_l+0x9a6>
 8008fc4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009140 <_strtod_l+0xc08>
 8008fc8:	f04f 0800 	mov.w	r8, #0
 8008fcc:	e7e7      	b.n	8008f9e <_strtod_l+0xa66>
 8008fce:	4b5c      	ldr	r3, [pc, #368]	; (8009140 <_strtod_l+0xc08>)
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f7f7 fb0f 	bl	80005f8 <__aeabi_dmul>
 8008fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fdc:	4680      	mov	r8, r0
 8008fde:	4689      	mov	r9, r1
 8008fe0:	b933      	cbnz	r3, 8008ff0 <_strtod_l+0xab8>
 8008fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fe6:	9012      	str	r0, [sp, #72]	; 0x48
 8008fe8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008fee:	e7dd      	b.n	8008fac <_strtod_l+0xa74>
 8008ff0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008ff4:	e7f9      	b.n	8008fea <_strtod_l+0xab2>
 8008ff6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ffa:	9b04      	ldr	r3, [sp, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1a8      	bne.n	8008f52 <_strtod_l+0xa1a>
 8009000:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009004:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009006:	0d1b      	lsrs	r3, r3, #20
 8009008:	051b      	lsls	r3, r3, #20
 800900a:	429a      	cmp	r2, r3
 800900c:	d1a1      	bne.n	8008f52 <_strtod_l+0xa1a>
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 fe51 	bl	8000cb8 <__aeabi_d2lz>
 8009016:	f7f7 fac1 	bl	800059c <__aeabi_l2d>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4640      	mov	r0, r8
 8009020:	4649      	mov	r1, r9
 8009022:	f7f7 f931 	bl	8000288 <__aeabi_dsub>
 8009026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800902c:	ea43 030a 	orr.w	r3, r3, sl
 8009030:	4313      	orrs	r3, r2
 8009032:	4680      	mov	r8, r0
 8009034:	4689      	mov	r9, r1
 8009036:	d053      	beq.n	80090e0 <_strtod_l+0xba8>
 8009038:	a335      	add	r3, pc, #212	; (adr r3, 8009110 <_strtod_l+0xbd8>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 fd4d 	bl	8000adc <__aeabi_dcmplt>
 8009042:	2800      	cmp	r0, #0
 8009044:	f47f acce 	bne.w	80089e4 <_strtod_l+0x4ac>
 8009048:	a333      	add	r3, pc, #204	; (adr r3, 8009118 <_strtod_l+0xbe0>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 fd61 	bl	8000b18 <__aeabi_dcmpgt>
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f af7b 	beq.w	8008f52 <_strtod_l+0xa1a>
 800905c:	e4c2      	b.n	80089e4 <_strtod_l+0x4ac>
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	b333      	cbz	r3, 80090b0 <_strtod_l+0xb78>
 8009062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009064:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009068:	d822      	bhi.n	80090b0 <_strtod_l+0xb78>
 800906a:	a32d      	add	r3, pc, #180	; (adr r3, 8009120 <_strtod_l+0xbe8>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	4640      	mov	r0, r8
 8009072:	4649      	mov	r1, r9
 8009074:	f7f7 fd3c 	bl	8000af0 <__aeabi_dcmple>
 8009078:	b1a0      	cbz	r0, 80090a4 <_strtod_l+0xb6c>
 800907a:	4649      	mov	r1, r9
 800907c:	4640      	mov	r0, r8
 800907e:	f7f7 fd93 	bl	8000ba8 <__aeabi_d2uiz>
 8009082:	2801      	cmp	r0, #1
 8009084:	bf38      	it	cc
 8009086:	2001      	movcc	r0, #1
 8009088:	f7f7 fa3c 	bl	8000504 <__aeabi_ui2d>
 800908c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800908e:	4680      	mov	r8, r0
 8009090:	4689      	mov	r9, r1
 8009092:	bb13      	cbnz	r3, 80090da <_strtod_l+0xba2>
 8009094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009098:	9014      	str	r0, [sp, #80]	; 0x50
 800909a:	9315      	str	r3, [sp, #84]	; 0x54
 800909c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80090a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80090a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	930d      	str	r3, [sp, #52]	; 0x34
 80090b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80090bc:	f001 fe54 	bl	800ad68 <__ulp>
 80090c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090c4:	ec53 2b10 	vmov	r2, r3, d0
 80090c8:	f7f7 fa96 	bl	80005f8 <__aeabi_dmul>
 80090cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	4682      	mov	sl, r0
 80090d6:	468b      	mov	fp, r1
 80090d8:	e78f      	b.n	8008ffa <_strtod_l+0xac2>
 80090da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80090de:	e7dd      	b.n	800909c <_strtod_l+0xb64>
 80090e0:	a311      	add	r3, pc, #68	; (adr r3, 8009128 <_strtod_l+0xbf0>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 fcf9 	bl	8000adc <__aeabi_dcmplt>
 80090ea:	e7b4      	b.n	8009056 <_strtod_l+0xb1e>
 80090ec:	2300      	movs	r3, #0
 80090ee:	930e      	str	r3, [sp, #56]	; 0x38
 80090f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	f7ff ba65 	b.w	80085c4 <_strtod_l+0x8c>
 80090fa:	2b65      	cmp	r3, #101	; 0x65
 80090fc:	f43f ab5d 	beq.w	80087ba <_strtod_l+0x282>
 8009100:	2b45      	cmp	r3, #69	; 0x45
 8009102:	f43f ab5a 	beq.w	80087ba <_strtod_l+0x282>
 8009106:	2201      	movs	r2, #1
 8009108:	f7ff bb92 	b.w	8008830 <_strtod_l+0x2f8>
 800910c:	f3af 8000 	nop.w
 8009110:	94a03595 	.word	0x94a03595
 8009114:	3fdfffff 	.word	0x3fdfffff
 8009118:	35afe535 	.word	0x35afe535
 800911c:	3fe00000 	.word	0x3fe00000
 8009120:	ffc00000 	.word	0xffc00000
 8009124:	41dfffff 	.word	0x41dfffff
 8009128:	94a03595 	.word	0x94a03595
 800912c:	3fcfffff 	.word	0x3fcfffff
 8009130:	3ff00000 	.word	0x3ff00000
 8009134:	7ff00000 	.word	0x7ff00000
 8009138:	7fe00000 	.word	0x7fe00000
 800913c:	7c9fffff 	.word	0x7c9fffff
 8009140:	3fe00000 	.word	0x3fe00000
 8009144:	bff00000 	.word	0xbff00000
 8009148:	7fefffff 	.word	0x7fefffff

0800914c <_strtod_r>:
 800914c:	4b01      	ldr	r3, [pc, #4]	; (8009154 <_strtod_r+0x8>)
 800914e:	f7ff b9f3 	b.w	8008538 <_strtod_l>
 8009152:	bf00      	nop
 8009154:	200001a8 	.word	0x200001a8

08009158 <_strtol_l.isra.0>:
 8009158:	2b01      	cmp	r3, #1
 800915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915e:	d001      	beq.n	8009164 <_strtol_l.isra.0+0xc>
 8009160:	2b24      	cmp	r3, #36	; 0x24
 8009162:	d906      	bls.n	8009172 <_strtol_l.isra.0+0x1a>
 8009164:	f7fe fafa 	bl	800775c <__errno>
 8009168:	2316      	movs	r3, #22
 800916a:	6003      	str	r3, [r0, #0]
 800916c:	2000      	movs	r0, #0
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	4f3a      	ldr	r7, [pc, #232]	; (800925c <_strtol_l.isra.0+0x104>)
 8009174:	468e      	mov	lr, r1
 8009176:	4676      	mov	r6, lr
 8009178:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800917c:	5de5      	ldrb	r5, [r4, r7]
 800917e:	f015 0508 	ands.w	r5, r5, #8
 8009182:	d1f8      	bne.n	8009176 <_strtol_l.isra.0+0x1e>
 8009184:	2c2d      	cmp	r4, #45	; 0x2d
 8009186:	d134      	bne.n	80091f2 <_strtol_l.isra.0+0x9a>
 8009188:	f89e 4000 	ldrb.w	r4, [lr]
 800918c:	f04f 0801 	mov.w	r8, #1
 8009190:	f106 0e02 	add.w	lr, r6, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05c      	beq.n	8009252 <_strtol_l.isra.0+0xfa>
 8009198:	2b10      	cmp	r3, #16
 800919a:	d10c      	bne.n	80091b6 <_strtol_l.isra.0+0x5e>
 800919c:	2c30      	cmp	r4, #48	; 0x30
 800919e:	d10a      	bne.n	80091b6 <_strtol_l.isra.0+0x5e>
 80091a0:	f89e 4000 	ldrb.w	r4, [lr]
 80091a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80091a8:	2c58      	cmp	r4, #88	; 0x58
 80091aa:	d14d      	bne.n	8009248 <_strtol_l.isra.0+0xf0>
 80091ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80091b0:	2310      	movs	r3, #16
 80091b2:	f10e 0e02 	add.w	lr, lr, #2
 80091b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80091ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091be:	2600      	movs	r6, #0
 80091c0:	fbbc f9f3 	udiv	r9, ip, r3
 80091c4:	4635      	mov	r5, r6
 80091c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80091ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091ce:	2f09      	cmp	r7, #9
 80091d0:	d818      	bhi.n	8009204 <_strtol_l.isra.0+0xac>
 80091d2:	463c      	mov	r4, r7
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	dd24      	ble.n	8009222 <_strtol_l.isra.0+0xca>
 80091d8:	2e00      	cmp	r6, #0
 80091da:	db1f      	blt.n	800921c <_strtol_l.isra.0+0xc4>
 80091dc:	45a9      	cmp	r9, r5
 80091de:	d31d      	bcc.n	800921c <_strtol_l.isra.0+0xc4>
 80091e0:	d101      	bne.n	80091e6 <_strtol_l.isra.0+0x8e>
 80091e2:	45a2      	cmp	sl, r4
 80091e4:	db1a      	blt.n	800921c <_strtol_l.isra.0+0xc4>
 80091e6:	fb05 4503 	mla	r5, r5, r3, r4
 80091ea:	2601      	movs	r6, #1
 80091ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80091f0:	e7eb      	b.n	80091ca <_strtol_l.isra.0+0x72>
 80091f2:	2c2b      	cmp	r4, #43	; 0x2b
 80091f4:	bf08      	it	eq
 80091f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80091fa:	46a8      	mov	r8, r5
 80091fc:	bf08      	it	eq
 80091fe:	f106 0e02 	addeq.w	lr, r6, #2
 8009202:	e7c7      	b.n	8009194 <_strtol_l.isra.0+0x3c>
 8009204:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009208:	2f19      	cmp	r7, #25
 800920a:	d801      	bhi.n	8009210 <_strtol_l.isra.0+0xb8>
 800920c:	3c37      	subs	r4, #55	; 0x37
 800920e:	e7e1      	b.n	80091d4 <_strtol_l.isra.0+0x7c>
 8009210:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009214:	2f19      	cmp	r7, #25
 8009216:	d804      	bhi.n	8009222 <_strtol_l.isra.0+0xca>
 8009218:	3c57      	subs	r4, #87	; 0x57
 800921a:	e7db      	b.n	80091d4 <_strtol_l.isra.0+0x7c>
 800921c:	f04f 36ff 	mov.w	r6, #4294967295
 8009220:	e7e4      	b.n	80091ec <_strtol_l.isra.0+0x94>
 8009222:	2e00      	cmp	r6, #0
 8009224:	da05      	bge.n	8009232 <_strtol_l.isra.0+0xda>
 8009226:	2322      	movs	r3, #34	; 0x22
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	4665      	mov	r5, ip
 800922c:	b942      	cbnz	r2, 8009240 <_strtol_l.isra.0+0xe8>
 800922e:	4628      	mov	r0, r5
 8009230:	e79d      	b.n	800916e <_strtol_l.isra.0+0x16>
 8009232:	f1b8 0f00 	cmp.w	r8, #0
 8009236:	d000      	beq.n	800923a <_strtol_l.isra.0+0xe2>
 8009238:	426d      	negs	r5, r5
 800923a:	2a00      	cmp	r2, #0
 800923c:	d0f7      	beq.n	800922e <_strtol_l.isra.0+0xd6>
 800923e:	b10e      	cbz	r6, 8009244 <_strtol_l.isra.0+0xec>
 8009240:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009244:	6011      	str	r1, [r2, #0]
 8009246:	e7f2      	b.n	800922e <_strtol_l.isra.0+0xd6>
 8009248:	2430      	movs	r4, #48	; 0x30
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1b3      	bne.n	80091b6 <_strtol_l.isra.0+0x5e>
 800924e:	2308      	movs	r3, #8
 8009250:	e7b1      	b.n	80091b6 <_strtol_l.isra.0+0x5e>
 8009252:	2c30      	cmp	r4, #48	; 0x30
 8009254:	d0a4      	beq.n	80091a0 <_strtol_l.isra.0+0x48>
 8009256:	230a      	movs	r3, #10
 8009258:	e7ad      	b.n	80091b6 <_strtol_l.isra.0+0x5e>
 800925a:	bf00      	nop
 800925c:	0800d5c9 	.word	0x0800d5c9

08009260 <_strtol_r>:
 8009260:	f7ff bf7a 	b.w	8009158 <_strtol_l.isra.0>

08009264 <quorem>:
 8009264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	6903      	ldr	r3, [r0, #16]
 800926a:	690c      	ldr	r4, [r1, #16]
 800926c:	42a3      	cmp	r3, r4
 800926e:	4607      	mov	r7, r0
 8009270:	f2c0 8081 	blt.w	8009376 <quorem+0x112>
 8009274:	3c01      	subs	r4, #1
 8009276:	f101 0814 	add.w	r8, r1, #20
 800927a:	f100 0514 	add.w	r5, r0, #20
 800927e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800928c:	3301      	adds	r3, #1
 800928e:	429a      	cmp	r2, r3
 8009290:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009298:	fbb2 f6f3 	udiv	r6, r2, r3
 800929c:	d331      	bcc.n	8009302 <quorem+0x9e>
 800929e:	f04f 0e00 	mov.w	lr, #0
 80092a2:	4640      	mov	r0, r8
 80092a4:	46ac      	mov	ip, r5
 80092a6:	46f2      	mov	sl, lr
 80092a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80092ac:	b293      	uxth	r3, r2
 80092ae:	fb06 e303 	mla	r3, r6, r3, lr
 80092b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ebaa 0303 	sub.w	r3, sl, r3
 80092bc:	0c12      	lsrs	r2, r2, #16
 80092be:	f8dc a000 	ldr.w	sl, [ip]
 80092c2:	fb06 e202 	mla	r2, r6, r2, lr
 80092c6:	fa13 f38a 	uxtah	r3, r3, sl
 80092ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092ce:	fa1f fa82 	uxth.w	sl, r2
 80092d2:	f8dc 2000 	ldr.w	r2, [ip]
 80092d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80092da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092e4:	4581      	cmp	r9, r0
 80092e6:	f84c 3b04 	str.w	r3, [ip], #4
 80092ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092ee:	d2db      	bcs.n	80092a8 <quorem+0x44>
 80092f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80092f4:	b92b      	cbnz	r3, 8009302 <quorem+0x9e>
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	3b04      	subs	r3, #4
 80092fa:	429d      	cmp	r5, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	d32e      	bcc.n	800935e <quorem+0xfa>
 8009300:	613c      	str	r4, [r7, #16]
 8009302:	4638      	mov	r0, r7
 8009304:	f001 fc8c 	bl	800ac20 <__mcmp>
 8009308:	2800      	cmp	r0, #0
 800930a:	db24      	blt.n	8009356 <quorem+0xf2>
 800930c:	3601      	adds	r6, #1
 800930e:	4628      	mov	r0, r5
 8009310:	f04f 0c00 	mov.w	ip, #0
 8009314:	f858 2b04 	ldr.w	r2, [r8], #4
 8009318:	f8d0 e000 	ldr.w	lr, [r0]
 800931c:	b293      	uxth	r3, r2
 800931e:	ebac 0303 	sub.w	r3, ip, r3
 8009322:	0c12      	lsrs	r2, r2, #16
 8009324:	fa13 f38e 	uxtah	r3, r3, lr
 8009328:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800932c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009330:	b29b      	uxth	r3, r3
 8009332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009336:	45c1      	cmp	r9, r8
 8009338:	f840 3b04 	str.w	r3, [r0], #4
 800933c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009340:	d2e8      	bcs.n	8009314 <quorem+0xb0>
 8009342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800934a:	b922      	cbnz	r2, 8009356 <quorem+0xf2>
 800934c:	3b04      	subs	r3, #4
 800934e:	429d      	cmp	r5, r3
 8009350:	461a      	mov	r2, r3
 8009352:	d30a      	bcc.n	800936a <quorem+0x106>
 8009354:	613c      	str	r4, [r7, #16]
 8009356:	4630      	mov	r0, r6
 8009358:	b003      	add	sp, #12
 800935a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	3b04      	subs	r3, #4
 8009362:	2a00      	cmp	r2, #0
 8009364:	d1cc      	bne.n	8009300 <quorem+0x9c>
 8009366:	3c01      	subs	r4, #1
 8009368:	e7c7      	b.n	80092fa <quorem+0x96>
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	3b04      	subs	r3, #4
 800936e:	2a00      	cmp	r2, #0
 8009370:	d1f0      	bne.n	8009354 <quorem+0xf0>
 8009372:	3c01      	subs	r4, #1
 8009374:	e7eb      	b.n	800934e <quorem+0xea>
 8009376:	2000      	movs	r0, #0
 8009378:	e7ee      	b.n	8009358 <quorem+0xf4>
 800937a:	0000      	movs	r0, r0
 800937c:	0000      	movs	r0, r0
	...

08009380 <_dtoa_r>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	ed2d 8b02 	vpush	{d8}
 8009388:	ec57 6b10 	vmov	r6, r7, d0
 800938c:	b095      	sub	sp, #84	; 0x54
 800938e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009394:	9105      	str	r1, [sp, #20]
 8009396:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800939a:	4604      	mov	r4, r0
 800939c:	9209      	str	r2, [sp, #36]	; 0x24
 800939e:	930f      	str	r3, [sp, #60]	; 0x3c
 80093a0:	b975      	cbnz	r5, 80093c0 <_dtoa_r+0x40>
 80093a2:	2010      	movs	r0, #16
 80093a4:	f001 f94c 	bl	800a640 <malloc>
 80093a8:	4602      	mov	r2, r0
 80093aa:	6260      	str	r0, [r4, #36]	; 0x24
 80093ac:	b920      	cbnz	r0, 80093b8 <_dtoa_r+0x38>
 80093ae:	4bb2      	ldr	r3, [pc, #712]	; (8009678 <_dtoa_r+0x2f8>)
 80093b0:	21ea      	movs	r1, #234	; 0xea
 80093b2:	48b2      	ldr	r0, [pc, #712]	; (800967c <_dtoa_r+0x2fc>)
 80093b4:	f002 f874 	bl	800b4a0 <__assert_func>
 80093b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093bc:	6005      	str	r5, [r0, #0]
 80093be:	60c5      	str	r5, [r0, #12]
 80093c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	b151      	cbz	r1, 80093dc <_dtoa_r+0x5c>
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	604a      	str	r2, [r1, #4]
 80093ca:	2301      	movs	r3, #1
 80093cc:	4093      	lsls	r3, r2
 80093ce:	608b      	str	r3, [r1, #8]
 80093d0:	4620      	mov	r0, r4
 80093d2:	f001 f99d 	bl	800a710 <_Bfree>
 80093d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	1e3b      	subs	r3, r7, #0
 80093de:	bfb9      	ittee	lt
 80093e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093e4:	9303      	strlt	r3, [sp, #12]
 80093e6:	2300      	movge	r3, #0
 80093e8:	f8c8 3000 	strge.w	r3, [r8]
 80093ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80093f0:	4ba3      	ldr	r3, [pc, #652]	; (8009680 <_dtoa_r+0x300>)
 80093f2:	bfbc      	itt	lt
 80093f4:	2201      	movlt	r2, #1
 80093f6:	f8c8 2000 	strlt.w	r2, [r8]
 80093fa:	ea33 0309 	bics.w	r3, r3, r9
 80093fe:	d11b      	bne.n	8009438 <_dtoa_r+0xb8>
 8009400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009402:	f242 730f 	movw	r3, #9999	; 0x270f
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800940c:	4333      	orrs	r3, r6
 800940e:	f000 857a 	beq.w	8009f06 <_dtoa_r+0xb86>
 8009412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009414:	b963      	cbnz	r3, 8009430 <_dtoa_r+0xb0>
 8009416:	4b9b      	ldr	r3, [pc, #620]	; (8009684 <_dtoa_r+0x304>)
 8009418:	e024      	b.n	8009464 <_dtoa_r+0xe4>
 800941a:	4b9b      	ldr	r3, [pc, #620]	; (8009688 <_dtoa_r+0x308>)
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	9800      	ldr	r0, [sp, #0]
 8009426:	b015      	add	sp, #84	; 0x54
 8009428:	ecbd 8b02 	vpop	{d8}
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	4b94      	ldr	r3, [pc, #592]	; (8009684 <_dtoa_r+0x304>)
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	3303      	adds	r3, #3
 8009436:	e7f3      	b.n	8009420 <_dtoa_r+0xa0>
 8009438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	ec51 0b17 	vmov	r0, r1, d7
 8009442:	2300      	movs	r3, #0
 8009444:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009448:	f7f7 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800944c:	4680      	mov	r8, r0
 800944e:	b158      	cbz	r0, 8009468 <_dtoa_r+0xe8>
 8009450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009452:	2301      	movs	r3, #1
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8551 	beq.w	8009f00 <_dtoa_r+0xb80>
 800945e:	488b      	ldr	r0, [pc, #556]	; (800968c <_dtoa_r+0x30c>)
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	1e43      	subs	r3, r0, #1
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	e7dd      	b.n	8009424 <_dtoa_r+0xa4>
 8009468:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800946c:	aa12      	add	r2, sp, #72	; 0x48
 800946e:	a913      	add	r1, sp, #76	; 0x4c
 8009470:	4620      	mov	r0, r4
 8009472:	f001 fcf5 	bl	800ae60 <__d2b>
 8009476:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800947a:	4683      	mov	fp, r0
 800947c:	2d00      	cmp	r5, #0
 800947e:	d07c      	beq.n	800957a <_dtoa_r+0x1fa>
 8009480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009482:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800948a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800948e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800949a:	4b7d      	ldr	r3, [pc, #500]	; (8009690 <_dtoa_r+0x310>)
 800949c:	2200      	movs	r2, #0
 800949e:	4630      	mov	r0, r6
 80094a0:	4639      	mov	r1, r7
 80094a2:	f7f6 fef1 	bl	8000288 <__aeabi_dsub>
 80094a6:	a36e      	add	r3, pc, #440	; (adr r3, 8009660 <_dtoa_r+0x2e0>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	a36d      	add	r3, pc, #436	; (adr r3, 8009668 <_dtoa_r+0x2e8>)
 80094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b6:	f7f6 fee9 	bl	800028c <__adddf3>
 80094ba:	4606      	mov	r6, r0
 80094bc:	4628      	mov	r0, r5
 80094be:	460f      	mov	r7, r1
 80094c0:	f7f7 f830 	bl	8000524 <__aeabi_i2d>
 80094c4:	a36a      	add	r3, pc, #424	; (adr r3, 8009670 <_dtoa_r+0x2f0>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f7 f895 	bl	80005f8 <__aeabi_dmul>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4630      	mov	r0, r6
 80094d4:	4639      	mov	r1, r7
 80094d6:	f7f6 fed9 	bl	800028c <__adddf3>
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	f7f7 fb3b 	bl	8000b58 <__aeabi_d2iz>
 80094e2:	2200      	movs	r2, #0
 80094e4:	4682      	mov	sl, r0
 80094e6:	2300      	movs	r3, #0
 80094e8:	4630      	mov	r0, r6
 80094ea:	4639      	mov	r1, r7
 80094ec:	f7f7 faf6 	bl	8000adc <__aeabi_dcmplt>
 80094f0:	b148      	cbz	r0, 8009506 <_dtoa_r+0x186>
 80094f2:	4650      	mov	r0, sl
 80094f4:	f7f7 f816 	bl	8000524 <__aeabi_i2d>
 80094f8:	4632      	mov	r2, r6
 80094fa:	463b      	mov	r3, r7
 80094fc:	f7f7 fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009500:	b908      	cbnz	r0, 8009506 <_dtoa_r+0x186>
 8009502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009506:	f1ba 0f16 	cmp.w	sl, #22
 800950a:	d854      	bhi.n	80095b6 <_dtoa_r+0x236>
 800950c:	4b61      	ldr	r3, [pc, #388]	; (8009694 <_dtoa_r+0x314>)
 800950e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800951a:	f7f7 fadf 	bl	8000adc <__aeabi_dcmplt>
 800951e:	2800      	cmp	r0, #0
 8009520:	d04b      	beq.n	80095ba <_dtoa_r+0x23a>
 8009522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009526:	2300      	movs	r3, #0
 8009528:	930e      	str	r3, [sp, #56]	; 0x38
 800952a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800952c:	1b5d      	subs	r5, r3, r5
 800952e:	1e6b      	subs	r3, r5, #1
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	bf43      	ittte	mi
 8009534:	2300      	movmi	r3, #0
 8009536:	f1c5 0801 	rsbmi	r8, r5, #1
 800953a:	9304      	strmi	r3, [sp, #16]
 800953c:	f04f 0800 	movpl.w	r8, #0
 8009540:	f1ba 0f00 	cmp.w	sl, #0
 8009544:	db3b      	blt.n	80095be <_dtoa_r+0x23e>
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800954c:	4453      	add	r3, sl
 800954e:	9304      	str	r3, [sp, #16]
 8009550:	2300      	movs	r3, #0
 8009552:	9306      	str	r3, [sp, #24]
 8009554:	9b05      	ldr	r3, [sp, #20]
 8009556:	2b09      	cmp	r3, #9
 8009558:	d869      	bhi.n	800962e <_dtoa_r+0x2ae>
 800955a:	2b05      	cmp	r3, #5
 800955c:	bfc4      	itt	gt
 800955e:	3b04      	subgt	r3, #4
 8009560:	9305      	strgt	r3, [sp, #20]
 8009562:	9b05      	ldr	r3, [sp, #20]
 8009564:	f1a3 0302 	sub.w	r3, r3, #2
 8009568:	bfcc      	ite	gt
 800956a:	2500      	movgt	r5, #0
 800956c:	2501      	movle	r5, #1
 800956e:	2b03      	cmp	r3, #3
 8009570:	d869      	bhi.n	8009646 <_dtoa_r+0x2c6>
 8009572:	e8df f003 	tbb	[pc, r3]
 8009576:	4e2c      	.short	0x4e2c
 8009578:	5a4c      	.short	0x5a4c
 800957a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800957e:	441d      	add	r5, r3
 8009580:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009584:	2b20      	cmp	r3, #32
 8009586:	bfc1      	itttt	gt
 8009588:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800958c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009590:	fa09 f303 	lslgt.w	r3, r9, r3
 8009594:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009598:	bfda      	itte	le
 800959a:	f1c3 0320 	rsble	r3, r3, #32
 800959e:	fa06 f003 	lslle.w	r0, r6, r3
 80095a2:	4318      	orrgt	r0, r3
 80095a4:	f7f6 ffae 	bl	8000504 <__aeabi_ui2d>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4606      	mov	r6, r0
 80095ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80095b0:	3d01      	subs	r5, #1
 80095b2:	9310      	str	r3, [sp, #64]	; 0x40
 80095b4:	e771      	b.n	800949a <_dtoa_r+0x11a>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e7b6      	b.n	8009528 <_dtoa_r+0x1a8>
 80095ba:	900e      	str	r0, [sp, #56]	; 0x38
 80095bc:	e7b5      	b.n	800952a <_dtoa_r+0x1aa>
 80095be:	f1ca 0300 	rsb	r3, sl, #0
 80095c2:	9306      	str	r3, [sp, #24]
 80095c4:	2300      	movs	r3, #0
 80095c6:	eba8 080a 	sub.w	r8, r8, sl
 80095ca:	930d      	str	r3, [sp, #52]	; 0x34
 80095cc:	e7c2      	b.n	8009554 <_dtoa_r+0x1d4>
 80095ce:	2300      	movs	r3, #0
 80095d0:	9308      	str	r3, [sp, #32]
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc39      	bgt.n	800964c <_dtoa_r+0x2cc>
 80095d8:	f04f 0901 	mov.w	r9, #1
 80095dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80095e0:	464b      	mov	r3, r9
 80095e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80095e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095e8:	2200      	movs	r2, #0
 80095ea:	6042      	str	r2, [r0, #4]
 80095ec:	2204      	movs	r2, #4
 80095ee:	f102 0614 	add.w	r6, r2, #20
 80095f2:	429e      	cmp	r6, r3
 80095f4:	6841      	ldr	r1, [r0, #4]
 80095f6:	d92f      	bls.n	8009658 <_dtoa_r+0x2d8>
 80095f8:	4620      	mov	r0, r4
 80095fa:	f001 f849 	bl	800a690 <_Balloc>
 80095fe:	9000      	str	r0, [sp, #0]
 8009600:	2800      	cmp	r0, #0
 8009602:	d14b      	bne.n	800969c <_dtoa_r+0x31c>
 8009604:	4b24      	ldr	r3, [pc, #144]	; (8009698 <_dtoa_r+0x318>)
 8009606:	4602      	mov	r2, r0
 8009608:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800960c:	e6d1      	b.n	80093b2 <_dtoa_r+0x32>
 800960e:	2301      	movs	r3, #1
 8009610:	e7de      	b.n	80095d0 <_dtoa_r+0x250>
 8009612:	2300      	movs	r3, #0
 8009614:	9308      	str	r3, [sp, #32]
 8009616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009618:	eb0a 0903 	add.w	r9, sl, r3
 800961c:	f109 0301 	add.w	r3, r9, #1
 8009620:	2b01      	cmp	r3, #1
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	bfb8      	it	lt
 8009626:	2301      	movlt	r3, #1
 8009628:	e7dd      	b.n	80095e6 <_dtoa_r+0x266>
 800962a:	2301      	movs	r3, #1
 800962c:	e7f2      	b.n	8009614 <_dtoa_r+0x294>
 800962e:	2501      	movs	r5, #1
 8009630:	2300      	movs	r3, #0
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	9508      	str	r5, [sp, #32]
 8009636:	f04f 39ff 	mov.w	r9, #4294967295
 800963a:	2200      	movs	r2, #0
 800963c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009640:	2312      	movs	r3, #18
 8009642:	9209      	str	r2, [sp, #36]	; 0x24
 8009644:	e7cf      	b.n	80095e6 <_dtoa_r+0x266>
 8009646:	2301      	movs	r3, #1
 8009648:	9308      	str	r3, [sp, #32]
 800964a:	e7f4      	b.n	8009636 <_dtoa_r+0x2b6>
 800964c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009650:	f8cd 9004 	str.w	r9, [sp, #4]
 8009654:	464b      	mov	r3, r9
 8009656:	e7c6      	b.n	80095e6 <_dtoa_r+0x266>
 8009658:	3101      	adds	r1, #1
 800965a:	6041      	str	r1, [r0, #4]
 800965c:	0052      	lsls	r2, r2, #1
 800965e:	e7c6      	b.n	80095ee <_dtoa_r+0x26e>
 8009660:	636f4361 	.word	0x636f4361
 8009664:	3fd287a7 	.word	0x3fd287a7
 8009668:	8b60c8b3 	.word	0x8b60c8b3
 800966c:	3fc68a28 	.word	0x3fc68a28
 8009670:	509f79fb 	.word	0x509f79fb
 8009674:	3fd34413 	.word	0x3fd34413
 8009678:	0800d6d6 	.word	0x0800d6d6
 800967c:	0800d6ed 	.word	0x0800d6ed
 8009680:	7ff00000 	.word	0x7ff00000
 8009684:	0800d6d2 	.word	0x0800d6d2
 8009688:	0800d6c9 	.word	0x0800d6c9
 800968c:	0800d54d 	.word	0x0800d54d
 8009690:	3ff80000 	.word	0x3ff80000
 8009694:	0800d868 	.word	0x0800d868
 8009698:	0800d74c 	.word	0x0800d74c
 800969c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800969e:	9a00      	ldr	r2, [sp, #0]
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	9b01      	ldr	r3, [sp, #4]
 80096a4:	2b0e      	cmp	r3, #14
 80096a6:	f200 80ad 	bhi.w	8009804 <_dtoa_r+0x484>
 80096aa:	2d00      	cmp	r5, #0
 80096ac:	f000 80aa 	beq.w	8009804 <_dtoa_r+0x484>
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	dd36      	ble.n	8009724 <_dtoa_r+0x3a4>
 80096b6:	4ac3      	ldr	r2, [pc, #780]	; (80099c4 <_dtoa_r+0x644>)
 80096b8:	f00a 030f 	and.w	r3, sl, #15
 80096bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096c0:	ed93 7b00 	vldr	d7, [r3]
 80096c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80096c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80096cc:	eeb0 8a47 	vmov.f32	s16, s14
 80096d0:	eef0 8a67 	vmov.f32	s17, s15
 80096d4:	d016      	beq.n	8009704 <_dtoa_r+0x384>
 80096d6:	4bbc      	ldr	r3, [pc, #752]	; (80099c8 <_dtoa_r+0x648>)
 80096d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096e0:	f7f7 f8b4 	bl	800084c <__aeabi_ddiv>
 80096e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096e8:	f007 070f 	and.w	r7, r7, #15
 80096ec:	2503      	movs	r5, #3
 80096ee:	4eb6      	ldr	r6, [pc, #728]	; (80099c8 <_dtoa_r+0x648>)
 80096f0:	b957      	cbnz	r7, 8009708 <_dtoa_r+0x388>
 80096f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f6:	ec53 2b18 	vmov	r2, r3, d8
 80096fa:	f7f7 f8a7 	bl	800084c <__aeabi_ddiv>
 80096fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009702:	e029      	b.n	8009758 <_dtoa_r+0x3d8>
 8009704:	2502      	movs	r5, #2
 8009706:	e7f2      	b.n	80096ee <_dtoa_r+0x36e>
 8009708:	07f9      	lsls	r1, r7, #31
 800970a:	d508      	bpl.n	800971e <_dtoa_r+0x39e>
 800970c:	ec51 0b18 	vmov	r0, r1, d8
 8009710:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009714:	f7f6 ff70 	bl	80005f8 <__aeabi_dmul>
 8009718:	ec41 0b18 	vmov	d8, r0, r1
 800971c:	3501      	adds	r5, #1
 800971e:	107f      	asrs	r7, r7, #1
 8009720:	3608      	adds	r6, #8
 8009722:	e7e5      	b.n	80096f0 <_dtoa_r+0x370>
 8009724:	f000 80a6 	beq.w	8009874 <_dtoa_r+0x4f4>
 8009728:	f1ca 0600 	rsb	r6, sl, #0
 800972c:	4ba5      	ldr	r3, [pc, #660]	; (80099c4 <_dtoa_r+0x644>)
 800972e:	4fa6      	ldr	r7, [pc, #664]	; (80099c8 <_dtoa_r+0x648>)
 8009730:	f006 020f 	and.w	r2, r6, #15
 8009734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009748:	1136      	asrs	r6, r6, #4
 800974a:	2300      	movs	r3, #0
 800974c:	2502      	movs	r5, #2
 800974e:	2e00      	cmp	r6, #0
 8009750:	f040 8085 	bne.w	800985e <_dtoa_r+0x4de>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1d2      	bne.n	80096fe <_dtoa_r+0x37e>
 8009758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 808c 	beq.w	8009878 <_dtoa_r+0x4f8>
 8009760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009764:	4b99      	ldr	r3, [pc, #612]	; (80099cc <_dtoa_r+0x64c>)
 8009766:	2200      	movs	r2, #0
 8009768:	4630      	mov	r0, r6
 800976a:	4639      	mov	r1, r7
 800976c:	f7f7 f9b6 	bl	8000adc <__aeabi_dcmplt>
 8009770:	2800      	cmp	r0, #0
 8009772:	f000 8081 	beq.w	8009878 <_dtoa_r+0x4f8>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d07d      	beq.n	8009878 <_dtoa_r+0x4f8>
 800977c:	f1b9 0f00 	cmp.w	r9, #0
 8009780:	dd3c      	ble.n	80097fc <_dtoa_r+0x47c>
 8009782:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	2200      	movs	r2, #0
 800978a:	4b91      	ldr	r3, [pc, #580]	; (80099d0 <_dtoa_r+0x650>)
 800978c:	4630      	mov	r0, r6
 800978e:	4639      	mov	r1, r7
 8009790:	f7f6 ff32 	bl	80005f8 <__aeabi_dmul>
 8009794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009798:	3501      	adds	r5, #1
 800979a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800979e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7f6 febe 	bl	8000524 <__aeabi_i2d>
 80097a8:	4632      	mov	r2, r6
 80097aa:	463b      	mov	r3, r7
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4b88      	ldr	r3, [pc, #544]	; (80099d4 <_dtoa_r+0x654>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	f7f6 fd6a 	bl	800028c <__adddf3>
 80097b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80097bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c0:	9303      	str	r3, [sp, #12]
 80097c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d15c      	bne.n	8009882 <_dtoa_r+0x502>
 80097c8:	4b83      	ldr	r3, [pc, #524]	; (80099d8 <_dtoa_r+0x658>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	f7f6 fd5a 	bl	8000288 <__aeabi_dsub>
 80097d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097d8:	4606      	mov	r6, r0
 80097da:	460f      	mov	r7, r1
 80097dc:	f7f7 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	f040 8296 	bne.w	8009d12 <_dtoa_r+0x992>
 80097e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80097ea:	4630      	mov	r0, r6
 80097ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097f0:	4639      	mov	r1, r7
 80097f2:	f7f7 f973 	bl	8000adc <__aeabi_dcmplt>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f040 8288 	bne.w	8009d0c <_dtoa_r+0x98c>
 80097fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009800:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009806:	2b00      	cmp	r3, #0
 8009808:	f2c0 8158 	blt.w	8009abc <_dtoa_r+0x73c>
 800980c:	f1ba 0f0e 	cmp.w	sl, #14
 8009810:	f300 8154 	bgt.w	8009abc <_dtoa_r+0x73c>
 8009814:	4b6b      	ldr	r3, [pc, #428]	; (80099c4 <_dtoa_r+0x644>)
 8009816:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800981a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800981e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	f280 80e3 	bge.w	80099ec <_dtoa_r+0x66c>
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f300 80df 	bgt.w	80099ec <_dtoa_r+0x66c>
 800982e:	f040 826d 	bne.w	8009d0c <_dtoa_r+0x98c>
 8009832:	4b69      	ldr	r3, [pc, #420]	; (80099d8 <_dtoa_r+0x658>)
 8009834:	2200      	movs	r2, #0
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fedd 	bl	80005f8 <__aeabi_dmul>
 800983e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009842:	f7f7 f95f 	bl	8000b04 <__aeabi_dcmpge>
 8009846:	9e01      	ldr	r6, [sp, #4]
 8009848:	4637      	mov	r7, r6
 800984a:	2800      	cmp	r0, #0
 800984c:	f040 8243 	bne.w	8009cd6 <_dtoa_r+0x956>
 8009850:	9d00      	ldr	r5, [sp, #0]
 8009852:	2331      	movs	r3, #49	; 0x31
 8009854:	f805 3b01 	strb.w	r3, [r5], #1
 8009858:	f10a 0a01 	add.w	sl, sl, #1
 800985c:	e23f      	b.n	8009cde <_dtoa_r+0x95e>
 800985e:	07f2      	lsls	r2, r6, #31
 8009860:	d505      	bpl.n	800986e <_dtoa_r+0x4ee>
 8009862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009866:	f7f6 fec7 	bl	80005f8 <__aeabi_dmul>
 800986a:	3501      	adds	r5, #1
 800986c:	2301      	movs	r3, #1
 800986e:	1076      	asrs	r6, r6, #1
 8009870:	3708      	adds	r7, #8
 8009872:	e76c      	b.n	800974e <_dtoa_r+0x3ce>
 8009874:	2502      	movs	r5, #2
 8009876:	e76f      	b.n	8009758 <_dtoa_r+0x3d8>
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	f8cd a01c 	str.w	sl, [sp, #28]
 800987e:	930c      	str	r3, [sp, #48]	; 0x30
 8009880:	e78d      	b.n	800979e <_dtoa_r+0x41e>
 8009882:	9900      	ldr	r1, [sp, #0]
 8009884:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009888:	4b4e      	ldr	r3, [pc, #312]	; (80099c4 <_dtoa_r+0x644>)
 800988a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800988e:	4401      	add	r1, r0
 8009890:	9102      	str	r1, [sp, #8]
 8009892:	9908      	ldr	r1, [sp, #32]
 8009894:	eeb0 8a47 	vmov.f32	s16, s14
 8009898:	eef0 8a67 	vmov.f32	s17, s15
 800989c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	d045      	beq.n	8009934 <_dtoa_r+0x5b4>
 80098a8:	494c      	ldr	r1, [pc, #304]	; (80099dc <_dtoa_r+0x65c>)
 80098aa:	2000      	movs	r0, #0
 80098ac:	f7f6 ffce 	bl	800084c <__aeabi_ddiv>
 80098b0:	ec53 2b18 	vmov	r2, r3, d8
 80098b4:	f7f6 fce8 	bl	8000288 <__aeabi_dsub>
 80098b8:	9d00      	ldr	r5, [sp, #0]
 80098ba:	ec41 0b18 	vmov	d8, r0, r1
 80098be:	4639      	mov	r1, r7
 80098c0:	4630      	mov	r0, r6
 80098c2:	f7f7 f949 	bl	8000b58 <__aeabi_d2iz>
 80098c6:	900c      	str	r0, [sp, #48]	; 0x30
 80098c8:	f7f6 fe2c 	bl	8000524 <__aeabi_i2d>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f6 fcd8 	bl	8000288 <__aeabi_dsub>
 80098d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098da:	3330      	adds	r3, #48	; 0x30
 80098dc:	f805 3b01 	strb.w	r3, [r5], #1
 80098e0:	ec53 2b18 	vmov	r2, r3, d8
 80098e4:	4606      	mov	r6, r0
 80098e6:	460f      	mov	r7, r1
 80098e8:	f7f7 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d165      	bne.n	80099bc <_dtoa_r+0x63c>
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	4935      	ldr	r1, [pc, #212]	; (80099cc <_dtoa_r+0x64c>)
 80098f6:	2000      	movs	r0, #0
 80098f8:	f7f6 fcc6 	bl	8000288 <__aeabi_dsub>
 80098fc:	ec53 2b18 	vmov	r2, r3, d8
 8009900:	f7f7 f8ec 	bl	8000adc <__aeabi_dcmplt>
 8009904:	2800      	cmp	r0, #0
 8009906:	f040 80b9 	bne.w	8009a7c <_dtoa_r+0x6fc>
 800990a:	9b02      	ldr	r3, [sp, #8]
 800990c:	429d      	cmp	r5, r3
 800990e:	f43f af75 	beq.w	80097fc <_dtoa_r+0x47c>
 8009912:	4b2f      	ldr	r3, [pc, #188]	; (80099d0 <_dtoa_r+0x650>)
 8009914:	ec51 0b18 	vmov	r0, r1, d8
 8009918:	2200      	movs	r2, #0
 800991a:	f7f6 fe6d 	bl	80005f8 <__aeabi_dmul>
 800991e:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <_dtoa_r+0x650>)
 8009920:	ec41 0b18 	vmov	d8, r0, r1
 8009924:	2200      	movs	r2, #0
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	4606      	mov	r6, r0
 8009930:	460f      	mov	r7, r1
 8009932:	e7c4      	b.n	80098be <_dtoa_r+0x53e>
 8009934:	ec51 0b17 	vmov	r0, r1, d7
 8009938:	f7f6 fe5e 	bl	80005f8 <__aeabi_dmul>
 800993c:	9b02      	ldr	r3, [sp, #8]
 800993e:	9d00      	ldr	r5, [sp, #0]
 8009940:	930c      	str	r3, [sp, #48]	; 0x30
 8009942:	ec41 0b18 	vmov	d8, r0, r1
 8009946:	4639      	mov	r1, r7
 8009948:	4630      	mov	r0, r6
 800994a:	f7f7 f905 	bl	8000b58 <__aeabi_d2iz>
 800994e:	9011      	str	r0, [sp, #68]	; 0x44
 8009950:	f7f6 fde8 	bl	8000524 <__aeabi_i2d>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4630      	mov	r0, r6
 800995a:	4639      	mov	r1, r7
 800995c:	f7f6 fc94 	bl	8000288 <__aeabi_dsub>
 8009960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009962:	3330      	adds	r3, #48	; 0x30
 8009964:	f805 3b01 	strb.w	r3, [r5], #1
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	429d      	cmp	r5, r3
 800996c:	4606      	mov	r6, r0
 800996e:	460f      	mov	r7, r1
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	d134      	bne.n	80099e0 <_dtoa_r+0x660>
 8009976:	4b19      	ldr	r3, [pc, #100]	; (80099dc <_dtoa_r+0x65c>)
 8009978:	ec51 0b18 	vmov	r0, r1, d8
 800997c:	f7f6 fc86 	bl	800028c <__adddf3>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4630      	mov	r0, r6
 8009986:	4639      	mov	r1, r7
 8009988:	f7f7 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800998c:	2800      	cmp	r0, #0
 800998e:	d175      	bne.n	8009a7c <_dtoa_r+0x6fc>
 8009990:	ec53 2b18 	vmov	r2, r3, d8
 8009994:	4911      	ldr	r1, [pc, #68]	; (80099dc <_dtoa_r+0x65c>)
 8009996:	2000      	movs	r0, #0
 8009998:	f7f6 fc76 	bl	8000288 <__aeabi_dsub>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f7 f89a 	bl	8000adc <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f af27 	beq.w	80097fc <_dtoa_r+0x47c>
 80099ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099b0:	1e6b      	subs	r3, r5, #1
 80099b2:	930c      	str	r3, [sp, #48]	; 0x30
 80099b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099b8:	2b30      	cmp	r3, #48	; 0x30
 80099ba:	d0f8      	beq.n	80099ae <_dtoa_r+0x62e>
 80099bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80099c0:	e04a      	b.n	8009a58 <_dtoa_r+0x6d8>
 80099c2:	bf00      	nop
 80099c4:	0800d868 	.word	0x0800d868
 80099c8:	0800d840 	.word	0x0800d840
 80099cc:	3ff00000 	.word	0x3ff00000
 80099d0:	40240000 	.word	0x40240000
 80099d4:	401c0000 	.word	0x401c0000
 80099d8:	40140000 	.word	0x40140000
 80099dc:	3fe00000 	.word	0x3fe00000
 80099e0:	4baf      	ldr	r3, [pc, #700]	; (8009ca0 <_dtoa_r+0x920>)
 80099e2:	f7f6 fe09 	bl	80005f8 <__aeabi_dmul>
 80099e6:	4606      	mov	r6, r0
 80099e8:	460f      	mov	r7, r1
 80099ea:	e7ac      	b.n	8009946 <_dtoa_r+0x5c6>
 80099ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099f0:	9d00      	ldr	r5, [sp, #0]
 80099f2:	4642      	mov	r2, r8
 80099f4:	464b      	mov	r3, r9
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f6 ff27 	bl	800084c <__aeabi_ddiv>
 80099fe:	f7f7 f8ab 	bl	8000b58 <__aeabi_d2iz>
 8009a02:	9002      	str	r0, [sp, #8]
 8009a04:	f7f6 fd8e 	bl	8000524 <__aeabi_i2d>
 8009a08:	4642      	mov	r2, r8
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	f7f6 fdf4 	bl	80005f8 <__aeabi_dmul>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4630      	mov	r0, r6
 8009a16:	4639      	mov	r1, r7
 8009a18:	f7f6 fc36 	bl	8000288 <__aeabi_dsub>
 8009a1c:	9e02      	ldr	r6, [sp, #8]
 8009a1e:	9f01      	ldr	r7, [sp, #4]
 8009a20:	3630      	adds	r6, #48	; 0x30
 8009a22:	f805 6b01 	strb.w	r6, [r5], #1
 8009a26:	9e00      	ldr	r6, [sp, #0]
 8009a28:	1bae      	subs	r6, r5, r6
 8009a2a:	42b7      	cmp	r7, r6
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	d137      	bne.n	8009aa2 <_dtoa_r+0x722>
 8009a32:	f7f6 fc2b 	bl	800028c <__adddf3>
 8009a36:	4642      	mov	r2, r8
 8009a38:	464b      	mov	r3, r9
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	f7f7 f86b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a42:	b9c8      	cbnz	r0, 8009a78 <_dtoa_r+0x6f8>
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	4630      	mov	r0, r6
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f7f7 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a50:	b110      	cbz	r0, 8009a58 <_dtoa_r+0x6d8>
 8009a52:	9b02      	ldr	r3, [sp, #8]
 8009a54:	07d9      	lsls	r1, r3, #31
 8009a56:	d40f      	bmi.n	8009a78 <_dtoa_r+0x6f8>
 8009a58:	4620      	mov	r0, r4
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	f000 fe58 	bl	800a710 <_Bfree>
 8009a60:	2300      	movs	r3, #0
 8009a62:	702b      	strb	r3, [r5, #0]
 8009a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a66:	f10a 0001 	add.w	r0, sl, #1
 8009a6a:	6018      	str	r0, [r3, #0]
 8009a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f43f acd8 	beq.w	8009424 <_dtoa_r+0xa4>
 8009a74:	601d      	str	r5, [r3, #0]
 8009a76:	e4d5      	b.n	8009424 <_dtoa_r+0xa4>
 8009a78:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	461d      	mov	r5, r3
 8009a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a84:	2a39      	cmp	r2, #57	; 0x39
 8009a86:	d108      	bne.n	8009a9a <_dtoa_r+0x71a>
 8009a88:	9a00      	ldr	r2, [sp, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d1f7      	bne.n	8009a7e <_dtoa_r+0x6fe>
 8009a8e:	9a07      	ldr	r2, [sp, #28]
 8009a90:	9900      	ldr	r1, [sp, #0]
 8009a92:	3201      	adds	r2, #1
 8009a94:	9207      	str	r2, [sp, #28]
 8009a96:	2230      	movs	r2, #48	; 0x30
 8009a98:	700a      	strb	r2, [r1, #0]
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	3201      	adds	r2, #1
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e78c      	b.n	80099bc <_dtoa_r+0x63c>
 8009aa2:	4b7f      	ldr	r3, [pc, #508]	; (8009ca0 <_dtoa_r+0x920>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f7f6 fda7 	bl	80005f8 <__aeabi_dmul>
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	f7f7 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d09b      	beq.n	80099f2 <_dtoa_r+0x672>
 8009aba:	e7cd      	b.n	8009a58 <_dtoa_r+0x6d8>
 8009abc:	9a08      	ldr	r2, [sp, #32]
 8009abe:	2a00      	cmp	r2, #0
 8009ac0:	f000 80c4 	beq.w	8009c4c <_dtoa_r+0x8cc>
 8009ac4:	9a05      	ldr	r2, [sp, #20]
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	f300 80a8 	bgt.w	8009c1c <_dtoa_r+0x89c>
 8009acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ace:	2a00      	cmp	r2, #0
 8009ad0:	f000 80a0 	beq.w	8009c14 <_dtoa_r+0x894>
 8009ad4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ad8:	9e06      	ldr	r6, [sp, #24]
 8009ada:	4645      	mov	r5, r8
 8009adc:	9a04      	ldr	r2, [sp, #16]
 8009ade:	2101      	movs	r1, #1
 8009ae0:	441a      	add	r2, r3
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4498      	add	r8, r3
 8009ae6:	9204      	str	r2, [sp, #16]
 8009ae8:	f000 ff18 	bl	800a91c <__i2b>
 8009aec:	4607      	mov	r7, r0
 8009aee:	2d00      	cmp	r5, #0
 8009af0:	dd0b      	ble.n	8009b0a <_dtoa_r+0x78a>
 8009af2:	9b04      	ldr	r3, [sp, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dd08      	ble.n	8009b0a <_dtoa_r+0x78a>
 8009af8:	42ab      	cmp	r3, r5
 8009afa:	9a04      	ldr	r2, [sp, #16]
 8009afc:	bfa8      	it	ge
 8009afe:	462b      	movge	r3, r5
 8009b00:	eba8 0803 	sub.w	r8, r8, r3
 8009b04:	1aed      	subs	r5, r5, r3
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9b06      	ldr	r3, [sp, #24]
 8009b0c:	b1fb      	cbz	r3, 8009b4e <_dtoa_r+0x7ce>
 8009b0e:	9b08      	ldr	r3, [sp, #32]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 809f 	beq.w	8009c54 <_dtoa_r+0x8d4>
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	dd11      	ble.n	8009b3e <_dtoa_r+0x7be>
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	4632      	mov	r2, r6
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 ffb8 	bl	800aa94 <__pow5mult>
 8009b24:	465a      	mov	r2, fp
 8009b26:	4601      	mov	r1, r0
 8009b28:	4607      	mov	r7, r0
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 ff0c 	bl	800a948 <__multiply>
 8009b30:	4659      	mov	r1, fp
 8009b32:	9007      	str	r0, [sp, #28]
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 fdeb 	bl	800a710 <_Bfree>
 8009b3a:	9b07      	ldr	r3, [sp, #28]
 8009b3c:	469b      	mov	fp, r3
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	1b9a      	subs	r2, r3, r6
 8009b42:	d004      	beq.n	8009b4e <_dtoa_r+0x7ce>
 8009b44:	4659      	mov	r1, fp
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 ffa4 	bl	800aa94 <__pow5mult>
 8009b4c:	4683      	mov	fp, r0
 8009b4e:	2101      	movs	r1, #1
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fee3 	bl	800a91c <__i2b>
 8009b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	dd7c      	ble.n	8009c58 <_dtoa_r+0x8d8>
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4601      	mov	r1, r0
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 ff96 	bl	800aa94 <__pow5mult>
 8009b68:	9b05      	ldr	r3, [sp, #20]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	dd76      	ble.n	8009c5e <_dtoa_r+0x8de>
 8009b70:	2300      	movs	r3, #0
 8009b72:	9306      	str	r3, [sp, #24]
 8009b74:	6933      	ldr	r3, [r6, #16]
 8009b76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b7a:	6918      	ldr	r0, [r3, #16]
 8009b7c:	f000 fe7e 	bl	800a87c <__hi0bits>
 8009b80:	f1c0 0020 	rsb	r0, r0, #32
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	4418      	add	r0, r3
 8009b88:	f010 001f 	ands.w	r0, r0, #31
 8009b8c:	f000 8086 	beq.w	8009c9c <_dtoa_r+0x91c>
 8009b90:	f1c0 0320 	rsb	r3, r0, #32
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	dd7f      	ble.n	8009c98 <_dtoa_r+0x918>
 8009b98:	f1c0 001c 	rsb	r0, r0, #28
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4403      	add	r3, r0
 8009ba0:	4480      	add	r8, r0
 8009ba2:	4405      	add	r5, r0
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	f1b8 0f00 	cmp.w	r8, #0
 8009baa:	dd05      	ble.n	8009bb8 <_dtoa_r+0x838>
 8009bac:	4659      	mov	r1, fp
 8009bae:	4642      	mov	r2, r8
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 ffc9 	bl	800ab48 <__lshift>
 8009bb6:	4683      	mov	fp, r0
 8009bb8:	9b04      	ldr	r3, [sp, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd05      	ble.n	8009bca <_dtoa_r+0x84a>
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 ffc0 	bl	800ab48 <__lshift>
 8009bc8:	4606      	mov	r6, r0
 8009bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d069      	beq.n	8009ca4 <_dtoa_r+0x924>
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4658      	mov	r0, fp
 8009bd4:	f001 f824 	bl	800ac20 <__mcmp>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	da63      	bge.n	8009ca4 <_dtoa_r+0x924>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4659      	mov	r1, fp
 8009be0:	220a      	movs	r2, #10
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 fdb6 	bl	800a754 <__multadd>
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bee:	4683      	mov	fp, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 818f 	beq.w	8009f14 <_dtoa_r+0xb94>
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	220a      	movs	r2, #10
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fda9 	bl	800a754 <__multadd>
 8009c02:	f1b9 0f00 	cmp.w	r9, #0
 8009c06:	4607      	mov	r7, r0
 8009c08:	f300 808e 	bgt.w	8009d28 <_dtoa_r+0x9a8>
 8009c0c:	9b05      	ldr	r3, [sp, #20]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	dc50      	bgt.n	8009cb4 <_dtoa_r+0x934>
 8009c12:	e089      	b.n	8009d28 <_dtoa_r+0x9a8>
 8009c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c1a:	e75d      	b.n	8009ad8 <_dtoa_r+0x758>
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	1e5e      	subs	r6, r3, #1
 8009c20:	9b06      	ldr	r3, [sp, #24]
 8009c22:	42b3      	cmp	r3, r6
 8009c24:	bfbf      	itttt	lt
 8009c26:	9b06      	ldrlt	r3, [sp, #24]
 8009c28:	9606      	strlt	r6, [sp, #24]
 8009c2a:	1af2      	sublt	r2, r6, r3
 8009c2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009c2e:	bfb6      	itet	lt
 8009c30:	189b      	addlt	r3, r3, r2
 8009c32:	1b9e      	subge	r6, r3, r6
 8009c34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	bfb8      	it	lt
 8009c3a:	2600      	movlt	r6, #0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bfb5      	itete	lt
 8009c40:	eba8 0503 	sublt.w	r5, r8, r3
 8009c44:	9b01      	ldrge	r3, [sp, #4]
 8009c46:	2300      	movlt	r3, #0
 8009c48:	4645      	movge	r5, r8
 8009c4a:	e747      	b.n	8009adc <_dtoa_r+0x75c>
 8009c4c:	9e06      	ldr	r6, [sp, #24]
 8009c4e:	9f08      	ldr	r7, [sp, #32]
 8009c50:	4645      	mov	r5, r8
 8009c52:	e74c      	b.n	8009aee <_dtoa_r+0x76e>
 8009c54:	9a06      	ldr	r2, [sp, #24]
 8009c56:	e775      	b.n	8009b44 <_dtoa_r+0x7c4>
 8009c58:	9b05      	ldr	r3, [sp, #20]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	dc18      	bgt.n	8009c90 <_dtoa_r+0x910>
 8009c5e:	9b02      	ldr	r3, [sp, #8]
 8009c60:	b9b3      	cbnz	r3, 8009c90 <_dtoa_r+0x910>
 8009c62:	9b03      	ldr	r3, [sp, #12]
 8009c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c68:	b9a3      	cbnz	r3, 8009c94 <_dtoa_r+0x914>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c70:	0d1b      	lsrs	r3, r3, #20
 8009c72:	051b      	lsls	r3, r3, #20
 8009c74:	b12b      	cbz	r3, 8009c82 <_dtoa_r+0x902>
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	f108 0801 	add.w	r8, r8, #1
 8009c80:	2301      	movs	r3, #1
 8009c82:	9306      	str	r3, [sp, #24]
 8009c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f47f af74 	bne.w	8009b74 <_dtoa_r+0x7f4>
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	e779      	b.n	8009b84 <_dtoa_r+0x804>
 8009c90:	2300      	movs	r3, #0
 8009c92:	e7f6      	b.n	8009c82 <_dtoa_r+0x902>
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	e7f4      	b.n	8009c82 <_dtoa_r+0x902>
 8009c98:	d085      	beq.n	8009ba6 <_dtoa_r+0x826>
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	301c      	adds	r0, #28
 8009c9e:	e77d      	b.n	8009b9c <_dtoa_r+0x81c>
 8009ca0:	40240000 	.word	0x40240000
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dc38      	bgt.n	8009d1c <_dtoa_r+0x99c>
 8009caa:	9b05      	ldr	r3, [sp, #20]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	dd35      	ble.n	8009d1c <_dtoa_r+0x99c>
 8009cb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009cb4:	f1b9 0f00 	cmp.w	r9, #0
 8009cb8:	d10d      	bne.n	8009cd6 <_dtoa_r+0x956>
 8009cba:	4631      	mov	r1, r6
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	2205      	movs	r2, #5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 fd47 	bl	800a754 <__multadd>
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	4606      	mov	r6, r0
 8009cca:	4658      	mov	r0, fp
 8009ccc:	f000 ffa8 	bl	800ac20 <__mcmp>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f73f adbd 	bgt.w	8009850 <_dtoa_r+0x4d0>
 8009cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd8:	9d00      	ldr	r5, [sp, #0]
 8009cda:	ea6f 0a03 	mvn.w	sl, r3
 8009cde:	f04f 0800 	mov.w	r8, #0
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 fd13 	bl	800a710 <_Bfree>
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	f43f aeb4 	beq.w	8009a58 <_dtoa_r+0x6d8>
 8009cf0:	f1b8 0f00 	cmp.w	r8, #0
 8009cf4:	d005      	beq.n	8009d02 <_dtoa_r+0x982>
 8009cf6:	45b8      	cmp	r8, r7
 8009cf8:	d003      	beq.n	8009d02 <_dtoa_r+0x982>
 8009cfa:	4641      	mov	r1, r8
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 fd07 	bl	800a710 <_Bfree>
 8009d02:	4639      	mov	r1, r7
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 fd03 	bl	800a710 <_Bfree>
 8009d0a:	e6a5      	b.n	8009a58 <_dtoa_r+0x6d8>
 8009d0c:	2600      	movs	r6, #0
 8009d0e:	4637      	mov	r7, r6
 8009d10:	e7e1      	b.n	8009cd6 <_dtoa_r+0x956>
 8009d12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d18:	4637      	mov	r7, r6
 8009d1a:	e599      	b.n	8009850 <_dtoa_r+0x4d0>
 8009d1c:	9b08      	ldr	r3, [sp, #32]
 8009d1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 80fd 	beq.w	8009f22 <_dtoa_r+0xba2>
 8009d28:	2d00      	cmp	r5, #0
 8009d2a:	dd05      	ble.n	8009d38 <_dtoa_r+0x9b8>
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	462a      	mov	r2, r5
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 ff09 	bl	800ab48 <__lshift>
 8009d36:	4607      	mov	r7, r0
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d05c      	beq.n	8009df8 <_dtoa_r+0xa78>
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fca5 	bl	800a690 <_Balloc>
 8009d46:	4605      	mov	r5, r0
 8009d48:	b928      	cbnz	r0, 8009d56 <_dtoa_r+0x9d6>
 8009d4a:	4b80      	ldr	r3, [pc, #512]	; (8009f4c <_dtoa_r+0xbcc>)
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d52:	f7ff bb2e 	b.w	80093b2 <_dtoa_r+0x32>
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	3202      	adds	r2, #2
 8009d5a:	0092      	lsls	r2, r2, #2
 8009d5c:	f107 010c 	add.w	r1, r7, #12
 8009d60:	300c      	adds	r0, #12
 8009d62:	f000 fc87 	bl	800a674 <memcpy>
 8009d66:	2201      	movs	r2, #1
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 feec 	bl	800ab48 <__lshift>
 8009d70:	9b00      	ldr	r3, [sp, #0]
 8009d72:	3301      	adds	r3, #1
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	444b      	add	r3, r9
 8009d7a:	9307      	str	r3, [sp, #28]
 8009d7c:	9b02      	ldr	r3, [sp, #8]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	46b8      	mov	r8, r7
 8009d84:	9306      	str	r3, [sp, #24]
 8009d86:	4607      	mov	r7, r0
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	4658      	mov	r0, fp
 8009d90:	9302      	str	r3, [sp, #8]
 8009d92:	f7ff fa67 	bl	8009264 <quorem>
 8009d96:	4603      	mov	r3, r0
 8009d98:	3330      	adds	r3, #48	; 0x30
 8009d9a:	9004      	str	r0, [sp, #16]
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	4658      	mov	r0, fp
 8009da0:	9308      	str	r3, [sp, #32]
 8009da2:	f000 ff3d 	bl	800ac20 <__mcmp>
 8009da6:	463a      	mov	r2, r7
 8009da8:	4681      	mov	r9, r0
 8009daa:	4631      	mov	r1, r6
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 ff53 	bl	800ac58 <__mdiff>
 8009db2:	68c2      	ldr	r2, [r0, #12]
 8009db4:	9b08      	ldr	r3, [sp, #32]
 8009db6:	4605      	mov	r5, r0
 8009db8:	bb02      	cbnz	r2, 8009dfc <_dtoa_r+0xa7c>
 8009dba:	4601      	mov	r1, r0
 8009dbc:	4658      	mov	r0, fp
 8009dbe:	f000 ff2f 	bl	800ac20 <__mcmp>
 8009dc2:	9b08      	ldr	r3, [sp, #32]
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4620      	mov	r0, r4
 8009dca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009dce:	f000 fc9f 	bl	800a710 <_Bfree>
 8009dd2:	9b05      	ldr	r3, [sp, #20]
 8009dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dd6:	9d01      	ldr	r5, [sp, #4]
 8009dd8:	ea43 0102 	orr.w	r1, r3, r2
 8009ddc:	9b06      	ldr	r3, [sp, #24]
 8009dde:	430b      	orrs	r3, r1
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	d10d      	bne.n	8009e00 <_dtoa_r+0xa80>
 8009de4:	2b39      	cmp	r3, #57	; 0x39
 8009de6:	d029      	beq.n	8009e3c <_dtoa_r+0xabc>
 8009de8:	f1b9 0f00 	cmp.w	r9, #0
 8009dec:	dd01      	ble.n	8009df2 <_dtoa_r+0xa72>
 8009dee:	9b04      	ldr	r3, [sp, #16]
 8009df0:	3331      	adds	r3, #49	; 0x31
 8009df2:	9a02      	ldr	r2, [sp, #8]
 8009df4:	7013      	strb	r3, [r2, #0]
 8009df6:	e774      	b.n	8009ce2 <_dtoa_r+0x962>
 8009df8:	4638      	mov	r0, r7
 8009dfa:	e7b9      	b.n	8009d70 <_dtoa_r+0x9f0>
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	e7e2      	b.n	8009dc6 <_dtoa_r+0xa46>
 8009e00:	f1b9 0f00 	cmp.w	r9, #0
 8009e04:	db06      	blt.n	8009e14 <_dtoa_r+0xa94>
 8009e06:	9905      	ldr	r1, [sp, #20]
 8009e08:	ea41 0909 	orr.w	r9, r1, r9
 8009e0c:	9906      	ldr	r1, [sp, #24]
 8009e0e:	ea59 0101 	orrs.w	r1, r9, r1
 8009e12:	d120      	bne.n	8009e56 <_dtoa_r+0xad6>
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	ddec      	ble.n	8009df2 <_dtoa_r+0xa72>
 8009e18:	4659      	mov	r1, fp
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	f000 fe92 	bl	800ab48 <__lshift>
 8009e24:	4631      	mov	r1, r6
 8009e26:	4683      	mov	fp, r0
 8009e28:	f000 fefa 	bl	800ac20 <__mcmp>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	dc02      	bgt.n	8009e38 <_dtoa_r+0xab8>
 8009e32:	d1de      	bne.n	8009df2 <_dtoa_r+0xa72>
 8009e34:	07da      	lsls	r2, r3, #31
 8009e36:	d5dc      	bpl.n	8009df2 <_dtoa_r+0xa72>
 8009e38:	2b39      	cmp	r3, #57	; 0x39
 8009e3a:	d1d8      	bne.n	8009dee <_dtoa_r+0xa6e>
 8009e3c:	9a02      	ldr	r2, [sp, #8]
 8009e3e:	2339      	movs	r3, #57	; 0x39
 8009e40:	7013      	strb	r3, [r2, #0]
 8009e42:	462b      	mov	r3, r5
 8009e44:	461d      	mov	r5, r3
 8009e46:	3b01      	subs	r3, #1
 8009e48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e4c:	2a39      	cmp	r2, #57	; 0x39
 8009e4e:	d050      	beq.n	8009ef2 <_dtoa_r+0xb72>
 8009e50:	3201      	adds	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	e745      	b.n	8009ce2 <_dtoa_r+0x962>
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	dd03      	ble.n	8009e62 <_dtoa_r+0xae2>
 8009e5a:	2b39      	cmp	r3, #57	; 0x39
 8009e5c:	d0ee      	beq.n	8009e3c <_dtoa_r+0xabc>
 8009e5e:	3301      	adds	r3, #1
 8009e60:	e7c7      	b.n	8009df2 <_dtoa_r+0xa72>
 8009e62:	9a01      	ldr	r2, [sp, #4]
 8009e64:	9907      	ldr	r1, [sp, #28]
 8009e66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e6a:	428a      	cmp	r2, r1
 8009e6c:	d02a      	beq.n	8009ec4 <_dtoa_r+0xb44>
 8009e6e:	4659      	mov	r1, fp
 8009e70:	2300      	movs	r3, #0
 8009e72:	220a      	movs	r2, #10
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fc6d 	bl	800a754 <__multadd>
 8009e7a:	45b8      	cmp	r8, r7
 8009e7c:	4683      	mov	fp, r0
 8009e7e:	f04f 0300 	mov.w	r3, #0
 8009e82:	f04f 020a 	mov.w	r2, #10
 8009e86:	4641      	mov	r1, r8
 8009e88:	4620      	mov	r0, r4
 8009e8a:	d107      	bne.n	8009e9c <_dtoa_r+0xb1c>
 8009e8c:	f000 fc62 	bl	800a754 <__multadd>
 8009e90:	4680      	mov	r8, r0
 8009e92:	4607      	mov	r7, r0
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	3301      	adds	r3, #1
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	e775      	b.n	8009d88 <_dtoa_r+0xa08>
 8009e9c:	f000 fc5a 	bl	800a754 <__multadd>
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	220a      	movs	r2, #10
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fc53 	bl	800a754 <__multadd>
 8009eae:	4607      	mov	r7, r0
 8009eb0:	e7f0      	b.n	8009e94 <_dtoa_r+0xb14>
 8009eb2:	f1b9 0f00 	cmp.w	r9, #0
 8009eb6:	9a00      	ldr	r2, [sp, #0]
 8009eb8:	bfcc      	ite	gt
 8009eba:	464d      	movgt	r5, r9
 8009ebc:	2501      	movle	r5, #1
 8009ebe:	4415      	add	r5, r2
 8009ec0:	f04f 0800 	mov.w	r8, #0
 8009ec4:	4659      	mov	r1, fp
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	4620      	mov	r0, r4
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	f000 fe3c 	bl	800ab48 <__lshift>
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4683      	mov	fp, r0
 8009ed4:	f000 fea4 	bl	800ac20 <__mcmp>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	dcb2      	bgt.n	8009e42 <_dtoa_r+0xac2>
 8009edc:	d102      	bne.n	8009ee4 <_dtoa_r+0xb64>
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	07db      	lsls	r3, r3, #31
 8009ee2:	d4ae      	bmi.n	8009e42 <_dtoa_r+0xac2>
 8009ee4:	462b      	mov	r3, r5
 8009ee6:	461d      	mov	r5, r3
 8009ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eec:	2a30      	cmp	r2, #48	; 0x30
 8009eee:	d0fa      	beq.n	8009ee6 <_dtoa_r+0xb66>
 8009ef0:	e6f7      	b.n	8009ce2 <_dtoa_r+0x962>
 8009ef2:	9a00      	ldr	r2, [sp, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d1a5      	bne.n	8009e44 <_dtoa_r+0xac4>
 8009ef8:	f10a 0a01 	add.w	sl, sl, #1
 8009efc:	2331      	movs	r3, #49	; 0x31
 8009efe:	e779      	b.n	8009df4 <_dtoa_r+0xa74>
 8009f00:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <_dtoa_r+0xbd0>)
 8009f02:	f7ff baaf 	b.w	8009464 <_dtoa_r+0xe4>
 8009f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f47f aa86 	bne.w	800941a <_dtoa_r+0x9a>
 8009f0e:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <_dtoa_r+0xbd4>)
 8009f10:	f7ff baa8 	b.w	8009464 <_dtoa_r+0xe4>
 8009f14:	f1b9 0f00 	cmp.w	r9, #0
 8009f18:	dc03      	bgt.n	8009f22 <_dtoa_r+0xba2>
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	f73f aec9 	bgt.w	8009cb4 <_dtoa_r+0x934>
 8009f22:	9d00      	ldr	r5, [sp, #0]
 8009f24:	4631      	mov	r1, r6
 8009f26:	4658      	mov	r0, fp
 8009f28:	f7ff f99c 	bl	8009264 <quorem>
 8009f2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f30:	f805 3b01 	strb.w	r3, [r5], #1
 8009f34:	9a00      	ldr	r2, [sp, #0]
 8009f36:	1aaa      	subs	r2, r5, r2
 8009f38:	4591      	cmp	r9, r2
 8009f3a:	ddba      	ble.n	8009eb2 <_dtoa_r+0xb32>
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	2300      	movs	r3, #0
 8009f40:	220a      	movs	r2, #10
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fc06 	bl	800a754 <__multadd>
 8009f48:	4683      	mov	fp, r0
 8009f4a:	e7eb      	b.n	8009f24 <_dtoa_r+0xba4>
 8009f4c:	0800d74c 	.word	0x0800d74c
 8009f50:	0800d54c 	.word	0x0800d54c
 8009f54:	0800d6c9 	.word	0x0800d6c9

08009f58 <rshift>:
 8009f58:	6903      	ldr	r3, [r0, #16]
 8009f5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f66:	f100 0414 	add.w	r4, r0, #20
 8009f6a:	dd45      	ble.n	8009ff8 <rshift+0xa0>
 8009f6c:	f011 011f 	ands.w	r1, r1, #31
 8009f70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f78:	d10c      	bne.n	8009f94 <rshift+0x3c>
 8009f7a:	f100 0710 	add.w	r7, r0, #16
 8009f7e:	4629      	mov	r1, r5
 8009f80:	42b1      	cmp	r1, r6
 8009f82:	d334      	bcc.n	8009fee <rshift+0x96>
 8009f84:	1a9b      	subs	r3, r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	1eea      	subs	r2, r5, #3
 8009f8a:	4296      	cmp	r6, r2
 8009f8c:	bf38      	it	cc
 8009f8e:	2300      	movcc	r3, #0
 8009f90:	4423      	add	r3, r4
 8009f92:	e015      	b.n	8009fc0 <rshift+0x68>
 8009f94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f98:	f1c1 0820 	rsb	r8, r1, #32
 8009f9c:	40cf      	lsrs	r7, r1
 8009f9e:	f105 0e04 	add.w	lr, r5, #4
 8009fa2:	46a1      	mov	r9, r4
 8009fa4:	4576      	cmp	r6, lr
 8009fa6:	46f4      	mov	ip, lr
 8009fa8:	d815      	bhi.n	8009fd6 <rshift+0x7e>
 8009faa:	1a9b      	subs	r3, r3, r2
 8009fac:	009a      	lsls	r2, r3, #2
 8009fae:	3a04      	subs	r2, #4
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	42ae      	cmp	r6, r5
 8009fb4:	bf38      	it	cc
 8009fb6:	2200      	movcc	r2, #0
 8009fb8:	18a3      	adds	r3, r4, r2
 8009fba:	50a7      	str	r7, [r4, r2]
 8009fbc:	b107      	cbz	r7, 8009fc0 <rshift+0x68>
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	1b1a      	subs	r2, r3, r4
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fc8:	bf08      	it	eq
 8009fca:	2300      	moveq	r3, #0
 8009fcc:	6102      	str	r2, [r0, #16]
 8009fce:	bf08      	it	eq
 8009fd0:	6143      	streq	r3, [r0, #20]
 8009fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fd6:	f8dc c000 	ldr.w	ip, [ip]
 8009fda:	fa0c fc08 	lsl.w	ip, ip, r8
 8009fde:	ea4c 0707 	orr.w	r7, ip, r7
 8009fe2:	f849 7b04 	str.w	r7, [r9], #4
 8009fe6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fea:	40cf      	lsrs	r7, r1
 8009fec:	e7da      	b.n	8009fa4 <rshift+0x4c>
 8009fee:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ff2:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ff6:	e7c3      	b.n	8009f80 <rshift+0x28>
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	e7e1      	b.n	8009fc0 <rshift+0x68>

08009ffc <__hexdig_fun>:
 8009ffc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a000:	2b09      	cmp	r3, #9
 800a002:	d802      	bhi.n	800a00a <__hexdig_fun+0xe>
 800a004:	3820      	subs	r0, #32
 800a006:	b2c0      	uxtb	r0, r0
 800a008:	4770      	bx	lr
 800a00a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d801      	bhi.n	800a016 <__hexdig_fun+0x1a>
 800a012:	3847      	subs	r0, #71	; 0x47
 800a014:	e7f7      	b.n	800a006 <__hexdig_fun+0xa>
 800a016:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a01a:	2b05      	cmp	r3, #5
 800a01c:	d801      	bhi.n	800a022 <__hexdig_fun+0x26>
 800a01e:	3827      	subs	r0, #39	; 0x27
 800a020:	e7f1      	b.n	800a006 <__hexdig_fun+0xa>
 800a022:	2000      	movs	r0, #0
 800a024:	4770      	bx	lr
	...

0800a028 <__gethex>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	ed2d 8b02 	vpush	{d8}
 800a030:	b089      	sub	sp, #36	; 0x24
 800a032:	ee08 0a10 	vmov	s16, r0
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	4bbc      	ldr	r3, [pc, #752]	; (800a32c <__gethex+0x304>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	4618      	mov	r0, r3
 800a040:	468b      	mov	fp, r1
 800a042:	4690      	mov	r8, r2
 800a044:	f7f6 f8c4 	bl	80001d0 <strlen>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	f8db 2000 	ldr.w	r2, [fp]
 800a04e:	4403      	add	r3, r0
 800a050:	4682      	mov	sl, r0
 800a052:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	1c93      	adds	r3, r2, #2
 800a05a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a05e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a062:	32fe      	adds	r2, #254	; 0xfe
 800a064:	18d1      	adds	r1, r2, r3
 800a066:	461f      	mov	r7, r3
 800a068:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a06c:	9100      	str	r1, [sp, #0]
 800a06e:	2830      	cmp	r0, #48	; 0x30
 800a070:	d0f8      	beq.n	800a064 <__gethex+0x3c>
 800a072:	f7ff ffc3 	bl	8009ffc <__hexdig_fun>
 800a076:	4604      	mov	r4, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	d13a      	bne.n	800a0f2 <__gethex+0xca>
 800a07c:	9901      	ldr	r1, [sp, #4]
 800a07e:	4652      	mov	r2, sl
 800a080:	4638      	mov	r0, r7
 800a082:	f001 f9ed 	bl	800b460 <strncmp>
 800a086:	4605      	mov	r5, r0
 800a088:	2800      	cmp	r0, #0
 800a08a:	d168      	bne.n	800a15e <__gethex+0x136>
 800a08c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a090:	eb07 060a 	add.w	r6, r7, sl
 800a094:	f7ff ffb2 	bl	8009ffc <__hexdig_fun>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d062      	beq.n	800a162 <__gethex+0x13a>
 800a09c:	4633      	mov	r3, r6
 800a09e:	7818      	ldrb	r0, [r3, #0]
 800a0a0:	2830      	cmp	r0, #48	; 0x30
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	f103 0301 	add.w	r3, r3, #1
 800a0a8:	d0f9      	beq.n	800a09e <__gethex+0x76>
 800a0aa:	f7ff ffa7 	bl	8009ffc <__hexdig_fun>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	fab0 f480 	clz	r4, r0
 800a0b4:	0964      	lsrs	r4, r4, #5
 800a0b6:	4635      	mov	r5, r6
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	463a      	mov	r2, r7
 800a0bc:	4616      	mov	r6, r2
 800a0be:	3201      	adds	r2, #1
 800a0c0:	7830      	ldrb	r0, [r6, #0]
 800a0c2:	f7ff ff9b 	bl	8009ffc <__hexdig_fun>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d1f8      	bne.n	800a0bc <__gethex+0x94>
 800a0ca:	9901      	ldr	r1, [sp, #4]
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f001 f9c6 	bl	800b460 <strncmp>
 800a0d4:	b980      	cbnz	r0, 800a0f8 <__gethex+0xd0>
 800a0d6:	b94d      	cbnz	r5, 800a0ec <__gethex+0xc4>
 800a0d8:	eb06 050a 	add.w	r5, r6, sl
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4616      	mov	r6, r2
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	7830      	ldrb	r0, [r6, #0]
 800a0e4:	f7ff ff8a 	bl	8009ffc <__hexdig_fun>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1f8      	bne.n	800a0de <__gethex+0xb6>
 800a0ec:	1bad      	subs	r5, r5, r6
 800a0ee:	00ad      	lsls	r5, r5, #2
 800a0f0:	e004      	b.n	800a0fc <__gethex+0xd4>
 800a0f2:	2400      	movs	r4, #0
 800a0f4:	4625      	mov	r5, r4
 800a0f6:	e7e0      	b.n	800a0ba <__gethex+0x92>
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	d1f7      	bne.n	800a0ec <__gethex+0xc4>
 800a0fc:	7833      	ldrb	r3, [r6, #0]
 800a0fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a102:	2b50      	cmp	r3, #80	; 0x50
 800a104:	d13b      	bne.n	800a17e <__gethex+0x156>
 800a106:	7873      	ldrb	r3, [r6, #1]
 800a108:	2b2b      	cmp	r3, #43	; 0x2b
 800a10a:	d02c      	beq.n	800a166 <__gethex+0x13e>
 800a10c:	2b2d      	cmp	r3, #45	; 0x2d
 800a10e:	d02e      	beq.n	800a16e <__gethex+0x146>
 800a110:	1c71      	adds	r1, r6, #1
 800a112:	f04f 0900 	mov.w	r9, #0
 800a116:	7808      	ldrb	r0, [r1, #0]
 800a118:	f7ff ff70 	bl	8009ffc <__hexdig_fun>
 800a11c:	1e43      	subs	r3, r0, #1
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b18      	cmp	r3, #24
 800a122:	d82c      	bhi.n	800a17e <__gethex+0x156>
 800a124:	f1a0 0210 	sub.w	r2, r0, #16
 800a128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a12c:	f7ff ff66 	bl	8009ffc <__hexdig_fun>
 800a130:	1e43      	subs	r3, r0, #1
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b18      	cmp	r3, #24
 800a136:	d91d      	bls.n	800a174 <__gethex+0x14c>
 800a138:	f1b9 0f00 	cmp.w	r9, #0
 800a13c:	d000      	beq.n	800a140 <__gethex+0x118>
 800a13e:	4252      	negs	r2, r2
 800a140:	4415      	add	r5, r2
 800a142:	f8cb 1000 	str.w	r1, [fp]
 800a146:	b1e4      	cbz	r4, 800a182 <__gethex+0x15a>
 800a148:	9b00      	ldr	r3, [sp, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bf14      	ite	ne
 800a14e:	2700      	movne	r7, #0
 800a150:	2706      	moveq	r7, #6
 800a152:	4638      	mov	r0, r7
 800a154:	b009      	add	sp, #36	; 0x24
 800a156:	ecbd 8b02 	vpop	{d8}
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	463e      	mov	r6, r7
 800a160:	4625      	mov	r5, r4
 800a162:	2401      	movs	r4, #1
 800a164:	e7ca      	b.n	800a0fc <__gethex+0xd4>
 800a166:	f04f 0900 	mov.w	r9, #0
 800a16a:	1cb1      	adds	r1, r6, #2
 800a16c:	e7d3      	b.n	800a116 <__gethex+0xee>
 800a16e:	f04f 0901 	mov.w	r9, #1
 800a172:	e7fa      	b.n	800a16a <__gethex+0x142>
 800a174:	230a      	movs	r3, #10
 800a176:	fb03 0202 	mla	r2, r3, r2, r0
 800a17a:	3a10      	subs	r2, #16
 800a17c:	e7d4      	b.n	800a128 <__gethex+0x100>
 800a17e:	4631      	mov	r1, r6
 800a180:	e7df      	b.n	800a142 <__gethex+0x11a>
 800a182:	1bf3      	subs	r3, r6, r7
 800a184:	3b01      	subs	r3, #1
 800a186:	4621      	mov	r1, r4
 800a188:	2b07      	cmp	r3, #7
 800a18a:	dc0b      	bgt.n	800a1a4 <__gethex+0x17c>
 800a18c:	ee18 0a10 	vmov	r0, s16
 800a190:	f000 fa7e 	bl	800a690 <_Balloc>
 800a194:	4604      	mov	r4, r0
 800a196:	b940      	cbnz	r0, 800a1aa <__gethex+0x182>
 800a198:	4b65      	ldr	r3, [pc, #404]	; (800a330 <__gethex+0x308>)
 800a19a:	4602      	mov	r2, r0
 800a19c:	21de      	movs	r1, #222	; 0xde
 800a19e:	4865      	ldr	r0, [pc, #404]	; (800a334 <__gethex+0x30c>)
 800a1a0:	f001 f97e 	bl	800b4a0 <__assert_func>
 800a1a4:	3101      	adds	r1, #1
 800a1a6:	105b      	asrs	r3, r3, #1
 800a1a8:	e7ee      	b.n	800a188 <__gethex+0x160>
 800a1aa:	f100 0914 	add.w	r9, r0, #20
 800a1ae:	f04f 0b00 	mov.w	fp, #0
 800a1b2:	f1ca 0301 	rsb	r3, sl, #1
 800a1b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1ba:	f8cd b000 	str.w	fp, [sp]
 800a1be:	9306      	str	r3, [sp, #24]
 800a1c0:	42b7      	cmp	r7, r6
 800a1c2:	d340      	bcc.n	800a246 <__gethex+0x21e>
 800a1c4:	9802      	ldr	r0, [sp, #8]
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	f840 3b04 	str.w	r3, [r0], #4
 800a1cc:	eba0 0009 	sub.w	r0, r0, r9
 800a1d0:	1080      	asrs	r0, r0, #2
 800a1d2:	0146      	lsls	r6, r0, #5
 800a1d4:	6120      	str	r0, [r4, #16]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fb50 	bl	800a87c <__hi0bits>
 800a1dc:	1a30      	subs	r0, r6, r0
 800a1de:	f8d8 6000 	ldr.w	r6, [r8]
 800a1e2:	42b0      	cmp	r0, r6
 800a1e4:	dd63      	ble.n	800a2ae <__gethex+0x286>
 800a1e6:	1b87      	subs	r7, r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 feea 	bl	800afc4 <__any_on>
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	b1a8      	cbz	r0, 800a220 <__gethex+0x1f8>
 800a1f4:	1e7b      	subs	r3, r7, #1
 800a1f6:	1159      	asrs	r1, r3, #5
 800a1f8:	f003 021f 	and.w	r2, r3, #31
 800a1fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a200:	f04f 0a01 	mov.w	sl, #1
 800a204:	fa0a f202 	lsl.w	r2, sl, r2
 800a208:	420a      	tst	r2, r1
 800a20a:	d009      	beq.n	800a220 <__gethex+0x1f8>
 800a20c:	4553      	cmp	r3, sl
 800a20e:	dd05      	ble.n	800a21c <__gethex+0x1f4>
 800a210:	1eb9      	subs	r1, r7, #2
 800a212:	4620      	mov	r0, r4
 800a214:	f000 fed6 	bl	800afc4 <__any_on>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d145      	bne.n	800a2a8 <__gethex+0x280>
 800a21c:	f04f 0a02 	mov.w	sl, #2
 800a220:	4639      	mov	r1, r7
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff fe98 	bl	8009f58 <rshift>
 800a228:	443d      	add	r5, r7
 800a22a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a22e:	42ab      	cmp	r3, r5
 800a230:	da4c      	bge.n	800a2cc <__gethex+0x2a4>
 800a232:	ee18 0a10 	vmov	r0, s16
 800a236:	4621      	mov	r1, r4
 800a238:	f000 fa6a 	bl	800a710 <_Bfree>
 800a23c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a23e:	2300      	movs	r3, #0
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	27a3      	movs	r7, #163	; 0xa3
 800a244:	e785      	b.n	800a152 <__gethex+0x12a>
 800a246:	1e73      	subs	r3, r6, #1
 800a248:	9a05      	ldr	r2, [sp, #20]
 800a24a:	9303      	str	r3, [sp, #12]
 800a24c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a250:	4293      	cmp	r3, r2
 800a252:	d019      	beq.n	800a288 <__gethex+0x260>
 800a254:	f1bb 0f20 	cmp.w	fp, #32
 800a258:	d107      	bne.n	800a26a <__gethex+0x242>
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	9a00      	ldr	r2, [sp, #0]
 800a25e:	f843 2b04 	str.w	r2, [r3], #4
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	2300      	movs	r3, #0
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	469b      	mov	fp, r3
 800a26a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a26e:	f7ff fec5 	bl	8009ffc <__hexdig_fun>
 800a272:	9b00      	ldr	r3, [sp, #0]
 800a274:	f000 000f 	and.w	r0, r0, #15
 800a278:	fa00 f00b 	lsl.w	r0, r0, fp
 800a27c:	4303      	orrs	r3, r0
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	f10b 0b04 	add.w	fp, fp, #4
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	e00d      	b.n	800a2a4 <__gethex+0x27c>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	9a06      	ldr	r2, [sp, #24]
 800a28c:	4413      	add	r3, r2
 800a28e:	42bb      	cmp	r3, r7
 800a290:	d3e0      	bcc.n	800a254 <__gethex+0x22c>
 800a292:	4618      	mov	r0, r3
 800a294:	9901      	ldr	r1, [sp, #4]
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	4652      	mov	r2, sl
 800a29a:	f001 f8e1 	bl	800b460 <strncmp>
 800a29e:	9b07      	ldr	r3, [sp, #28]
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d1d7      	bne.n	800a254 <__gethex+0x22c>
 800a2a4:	461e      	mov	r6, r3
 800a2a6:	e78b      	b.n	800a1c0 <__gethex+0x198>
 800a2a8:	f04f 0a03 	mov.w	sl, #3
 800a2ac:	e7b8      	b.n	800a220 <__gethex+0x1f8>
 800a2ae:	da0a      	bge.n	800a2c6 <__gethex+0x29e>
 800a2b0:	1a37      	subs	r7, r6, r0
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	ee18 0a10 	vmov	r0, s16
 800a2b8:	463a      	mov	r2, r7
 800a2ba:	f000 fc45 	bl	800ab48 <__lshift>
 800a2be:	1bed      	subs	r5, r5, r7
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	f100 0914 	add.w	r9, r0, #20
 800a2c6:	f04f 0a00 	mov.w	sl, #0
 800a2ca:	e7ae      	b.n	800a22a <__gethex+0x202>
 800a2cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2d0:	42a8      	cmp	r0, r5
 800a2d2:	dd72      	ble.n	800a3ba <__gethex+0x392>
 800a2d4:	1b45      	subs	r5, r0, r5
 800a2d6:	42ae      	cmp	r6, r5
 800a2d8:	dc36      	bgt.n	800a348 <__gethex+0x320>
 800a2da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d02a      	beq.n	800a338 <__gethex+0x310>
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d02c      	beq.n	800a340 <__gethex+0x318>
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d115      	bne.n	800a316 <__gethex+0x2ee>
 800a2ea:	42ae      	cmp	r6, r5
 800a2ec:	d113      	bne.n	800a316 <__gethex+0x2ee>
 800a2ee:	2e01      	cmp	r6, #1
 800a2f0:	d10b      	bne.n	800a30a <__gethex+0x2e2>
 800a2f2:	9a04      	ldr	r2, [sp, #16]
 800a2f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	6123      	str	r3, [r4, #16]
 800a2fe:	f8c9 3000 	str.w	r3, [r9]
 800a302:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a304:	2762      	movs	r7, #98	; 0x62
 800a306:	601c      	str	r4, [r3, #0]
 800a308:	e723      	b.n	800a152 <__gethex+0x12a>
 800a30a:	1e71      	subs	r1, r6, #1
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fe59 	bl	800afc4 <__any_on>
 800a312:	2800      	cmp	r0, #0
 800a314:	d1ed      	bne.n	800a2f2 <__gethex+0x2ca>
 800a316:	ee18 0a10 	vmov	r0, s16
 800a31a:	4621      	mov	r1, r4
 800a31c:	f000 f9f8 	bl	800a710 <_Bfree>
 800a320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a322:	2300      	movs	r3, #0
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	2750      	movs	r7, #80	; 0x50
 800a328:	e713      	b.n	800a152 <__gethex+0x12a>
 800a32a:	bf00      	nop
 800a32c:	0800d7c8 	.word	0x0800d7c8
 800a330:	0800d74c 	.word	0x0800d74c
 800a334:	0800d75d 	.word	0x0800d75d
 800a338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1eb      	bne.n	800a316 <__gethex+0x2ee>
 800a33e:	e7d8      	b.n	800a2f2 <__gethex+0x2ca>
 800a340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1d5      	bne.n	800a2f2 <__gethex+0x2ca>
 800a346:	e7e6      	b.n	800a316 <__gethex+0x2ee>
 800a348:	1e6f      	subs	r7, r5, #1
 800a34a:	f1ba 0f00 	cmp.w	sl, #0
 800a34e:	d131      	bne.n	800a3b4 <__gethex+0x38c>
 800a350:	b127      	cbz	r7, 800a35c <__gethex+0x334>
 800a352:	4639      	mov	r1, r7
 800a354:	4620      	mov	r0, r4
 800a356:	f000 fe35 	bl	800afc4 <__any_on>
 800a35a:	4682      	mov	sl, r0
 800a35c:	117b      	asrs	r3, r7, #5
 800a35e:	2101      	movs	r1, #1
 800a360:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a364:	f007 071f 	and.w	r7, r7, #31
 800a368:	fa01 f707 	lsl.w	r7, r1, r7
 800a36c:	421f      	tst	r7, r3
 800a36e:	4629      	mov	r1, r5
 800a370:	4620      	mov	r0, r4
 800a372:	bf18      	it	ne
 800a374:	f04a 0a02 	orrne.w	sl, sl, #2
 800a378:	1b76      	subs	r6, r6, r5
 800a37a:	f7ff fded 	bl	8009f58 <rshift>
 800a37e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a382:	2702      	movs	r7, #2
 800a384:	f1ba 0f00 	cmp.w	sl, #0
 800a388:	d048      	beq.n	800a41c <__gethex+0x3f4>
 800a38a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d015      	beq.n	800a3be <__gethex+0x396>
 800a392:	2b03      	cmp	r3, #3
 800a394:	d017      	beq.n	800a3c6 <__gethex+0x39e>
 800a396:	2b01      	cmp	r3, #1
 800a398:	d109      	bne.n	800a3ae <__gethex+0x386>
 800a39a:	f01a 0f02 	tst.w	sl, #2
 800a39e:	d006      	beq.n	800a3ae <__gethex+0x386>
 800a3a0:	f8d9 0000 	ldr.w	r0, [r9]
 800a3a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800a3a8:	f01a 0f01 	tst.w	sl, #1
 800a3ac:	d10e      	bne.n	800a3cc <__gethex+0x3a4>
 800a3ae:	f047 0710 	orr.w	r7, r7, #16
 800a3b2:	e033      	b.n	800a41c <__gethex+0x3f4>
 800a3b4:	f04f 0a01 	mov.w	sl, #1
 800a3b8:	e7d0      	b.n	800a35c <__gethex+0x334>
 800a3ba:	2701      	movs	r7, #1
 800a3bc:	e7e2      	b.n	800a384 <__gethex+0x35c>
 800a3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3c0:	f1c3 0301 	rsb	r3, r3, #1
 800a3c4:	9315      	str	r3, [sp, #84]	; 0x54
 800a3c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0f0      	beq.n	800a3ae <__gethex+0x386>
 800a3cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3d0:	f104 0314 	add.w	r3, r4, #20
 800a3d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a3dc:	f04f 0c00 	mov.w	ip, #0
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a3ea:	d01c      	beq.n	800a426 <__gethex+0x3fe>
 800a3ec:	3201      	adds	r2, #1
 800a3ee:	6002      	str	r2, [r0, #0]
 800a3f0:	2f02      	cmp	r7, #2
 800a3f2:	f104 0314 	add.w	r3, r4, #20
 800a3f6:	d13f      	bne.n	800a478 <__gethex+0x450>
 800a3f8:	f8d8 2000 	ldr.w	r2, [r8]
 800a3fc:	3a01      	subs	r2, #1
 800a3fe:	42b2      	cmp	r2, r6
 800a400:	d10a      	bne.n	800a418 <__gethex+0x3f0>
 800a402:	1171      	asrs	r1, r6, #5
 800a404:	2201      	movs	r2, #1
 800a406:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a40a:	f006 061f 	and.w	r6, r6, #31
 800a40e:	fa02 f606 	lsl.w	r6, r2, r6
 800a412:	421e      	tst	r6, r3
 800a414:	bf18      	it	ne
 800a416:	4617      	movne	r7, r2
 800a418:	f047 0720 	orr.w	r7, r7, #32
 800a41c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a41e:	601c      	str	r4, [r3, #0]
 800a420:	9b04      	ldr	r3, [sp, #16]
 800a422:	601d      	str	r5, [r3, #0]
 800a424:	e695      	b.n	800a152 <__gethex+0x12a>
 800a426:	4299      	cmp	r1, r3
 800a428:	f843 cc04 	str.w	ip, [r3, #-4]
 800a42c:	d8d8      	bhi.n	800a3e0 <__gethex+0x3b8>
 800a42e:	68a3      	ldr	r3, [r4, #8]
 800a430:	459b      	cmp	fp, r3
 800a432:	db19      	blt.n	800a468 <__gethex+0x440>
 800a434:	6861      	ldr	r1, [r4, #4]
 800a436:	ee18 0a10 	vmov	r0, s16
 800a43a:	3101      	adds	r1, #1
 800a43c:	f000 f928 	bl	800a690 <_Balloc>
 800a440:	4681      	mov	r9, r0
 800a442:	b918      	cbnz	r0, 800a44c <__gethex+0x424>
 800a444:	4b1a      	ldr	r3, [pc, #104]	; (800a4b0 <__gethex+0x488>)
 800a446:	4602      	mov	r2, r0
 800a448:	2184      	movs	r1, #132	; 0x84
 800a44a:	e6a8      	b.n	800a19e <__gethex+0x176>
 800a44c:	6922      	ldr	r2, [r4, #16]
 800a44e:	3202      	adds	r2, #2
 800a450:	f104 010c 	add.w	r1, r4, #12
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	300c      	adds	r0, #12
 800a458:	f000 f90c 	bl	800a674 <memcpy>
 800a45c:	4621      	mov	r1, r4
 800a45e:	ee18 0a10 	vmov	r0, s16
 800a462:	f000 f955 	bl	800a710 <_Bfree>
 800a466:	464c      	mov	r4, r9
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a470:	6122      	str	r2, [r4, #16]
 800a472:	2201      	movs	r2, #1
 800a474:	615a      	str	r2, [r3, #20]
 800a476:	e7bb      	b.n	800a3f0 <__gethex+0x3c8>
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	455a      	cmp	r2, fp
 800a47c:	dd0b      	ble.n	800a496 <__gethex+0x46e>
 800a47e:	2101      	movs	r1, #1
 800a480:	4620      	mov	r0, r4
 800a482:	f7ff fd69 	bl	8009f58 <rshift>
 800a486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a48a:	3501      	adds	r5, #1
 800a48c:	42ab      	cmp	r3, r5
 800a48e:	f6ff aed0 	blt.w	800a232 <__gethex+0x20a>
 800a492:	2701      	movs	r7, #1
 800a494:	e7c0      	b.n	800a418 <__gethex+0x3f0>
 800a496:	f016 061f 	ands.w	r6, r6, #31
 800a49a:	d0fa      	beq.n	800a492 <__gethex+0x46a>
 800a49c:	449a      	add	sl, r3
 800a49e:	f1c6 0620 	rsb	r6, r6, #32
 800a4a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a4a6:	f000 f9e9 	bl	800a87c <__hi0bits>
 800a4aa:	42b0      	cmp	r0, r6
 800a4ac:	dbe7      	blt.n	800a47e <__gethex+0x456>
 800a4ae:	e7f0      	b.n	800a492 <__gethex+0x46a>
 800a4b0:	0800d74c 	.word	0x0800d74c

0800a4b4 <L_shift>:
 800a4b4:	f1c2 0208 	rsb	r2, r2, #8
 800a4b8:	0092      	lsls	r2, r2, #2
 800a4ba:	b570      	push	{r4, r5, r6, lr}
 800a4bc:	f1c2 0620 	rsb	r6, r2, #32
 800a4c0:	6843      	ldr	r3, [r0, #4]
 800a4c2:	6804      	ldr	r4, [r0, #0]
 800a4c4:	fa03 f506 	lsl.w	r5, r3, r6
 800a4c8:	432c      	orrs	r4, r5
 800a4ca:	40d3      	lsrs	r3, r2
 800a4cc:	6004      	str	r4, [r0, #0]
 800a4ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4d2:	4288      	cmp	r0, r1
 800a4d4:	d3f4      	bcc.n	800a4c0 <L_shift+0xc>
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}

0800a4d8 <__match>:
 800a4d8:	b530      	push	{r4, r5, lr}
 800a4da:	6803      	ldr	r3, [r0, #0]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e2:	b914      	cbnz	r4, 800a4ea <__match+0x12>
 800a4e4:	6003      	str	r3, [r0, #0]
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	bd30      	pop	{r4, r5, pc}
 800a4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a4f2:	2d19      	cmp	r5, #25
 800a4f4:	bf98      	it	ls
 800a4f6:	3220      	addls	r2, #32
 800a4f8:	42a2      	cmp	r2, r4
 800a4fa:	d0f0      	beq.n	800a4de <__match+0x6>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e7f3      	b.n	800a4e8 <__match+0x10>

0800a500 <__hexnan>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	680b      	ldr	r3, [r1, #0]
 800a506:	6801      	ldr	r1, [r0, #0]
 800a508:	115e      	asrs	r6, r3, #5
 800a50a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a50e:	f013 031f 	ands.w	r3, r3, #31
 800a512:	b087      	sub	sp, #28
 800a514:	bf18      	it	ne
 800a516:	3604      	addne	r6, #4
 800a518:	2500      	movs	r5, #0
 800a51a:	1f37      	subs	r7, r6, #4
 800a51c:	4682      	mov	sl, r0
 800a51e:	4690      	mov	r8, r2
 800a520:	9301      	str	r3, [sp, #4]
 800a522:	f846 5c04 	str.w	r5, [r6, #-4]
 800a526:	46b9      	mov	r9, r7
 800a528:	463c      	mov	r4, r7
 800a52a:	9502      	str	r5, [sp, #8]
 800a52c:	46ab      	mov	fp, r5
 800a52e:	784a      	ldrb	r2, [r1, #1]
 800a530:	1c4b      	adds	r3, r1, #1
 800a532:	9303      	str	r3, [sp, #12]
 800a534:	b342      	cbz	r2, 800a588 <__hexnan+0x88>
 800a536:	4610      	mov	r0, r2
 800a538:	9105      	str	r1, [sp, #20]
 800a53a:	9204      	str	r2, [sp, #16]
 800a53c:	f7ff fd5e 	bl	8009ffc <__hexdig_fun>
 800a540:	2800      	cmp	r0, #0
 800a542:	d14f      	bne.n	800a5e4 <__hexnan+0xe4>
 800a544:	9a04      	ldr	r2, [sp, #16]
 800a546:	9905      	ldr	r1, [sp, #20]
 800a548:	2a20      	cmp	r2, #32
 800a54a:	d818      	bhi.n	800a57e <__hexnan+0x7e>
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	459b      	cmp	fp, r3
 800a550:	dd13      	ble.n	800a57a <__hexnan+0x7a>
 800a552:	454c      	cmp	r4, r9
 800a554:	d206      	bcs.n	800a564 <__hexnan+0x64>
 800a556:	2d07      	cmp	r5, #7
 800a558:	dc04      	bgt.n	800a564 <__hexnan+0x64>
 800a55a:	462a      	mov	r2, r5
 800a55c:	4649      	mov	r1, r9
 800a55e:	4620      	mov	r0, r4
 800a560:	f7ff ffa8 	bl	800a4b4 <L_shift>
 800a564:	4544      	cmp	r4, r8
 800a566:	d950      	bls.n	800a60a <__hexnan+0x10a>
 800a568:	2300      	movs	r3, #0
 800a56a:	f1a4 0904 	sub.w	r9, r4, #4
 800a56e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a572:	f8cd b008 	str.w	fp, [sp, #8]
 800a576:	464c      	mov	r4, r9
 800a578:	461d      	mov	r5, r3
 800a57a:	9903      	ldr	r1, [sp, #12]
 800a57c:	e7d7      	b.n	800a52e <__hexnan+0x2e>
 800a57e:	2a29      	cmp	r2, #41	; 0x29
 800a580:	d156      	bne.n	800a630 <__hexnan+0x130>
 800a582:	3102      	adds	r1, #2
 800a584:	f8ca 1000 	str.w	r1, [sl]
 800a588:	f1bb 0f00 	cmp.w	fp, #0
 800a58c:	d050      	beq.n	800a630 <__hexnan+0x130>
 800a58e:	454c      	cmp	r4, r9
 800a590:	d206      	bcs.n	800a5a0 <__hexnan+0xa0>
 800a592:	2d07      	cmp	r5, #7
 800a594:	dc04      	bgt.n	800a5a0 <__hexnan+0xa0>
 800a596:	462a      	mov	r2, r5
 800a598:	4649      	mov	r1, r9
 800a59a:	4620      	mov	r0, r4
 800a59c:	f7ff ff8a 	bl	800a4b4 <L_shift>
 800a5a0:	4544      	cmp	r4, r8
 800a5a2:	d934      	bls.n	800a60e <__hexnan+0x10e>
 800a5a4:	f1a8 0204 	sub.w	r2, r8, #4
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5b2:	429f      	cmp	r7, r3
 800a5b4:	d2f9      	bcs.n	800a5aa <__hexnan+0xaa>
 800a5b6:	1b3b      	subs	r3, r7, r4
 800a5b8:	f023 0303 	bic.w	r3, r3, #3
 800a5bc:	3304      	adds	r3, #4
 800a5be:	3401      	adds	r4, #1
 800a5c0:	3e03      	subs	r6, #3
 800a5c2:	42b4      	cmp	r4, r6
 800a5c4:	bf88      	it	hi
 800a5c6:	2304      	movhi	r3, #4
 800a5c8:	4443      	add	r3, r8
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f843 2b04 	str.w	r2, [r3], #4
 800a5d0:	429f      	cmp	r7, r3
 800a5d2:	d2fb      	bcs.n	800a5cc <__hexnan+0xcc>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	b91b      	cbnz	r3, 800a5e0 <__hexnan+0xe0>
 800a5d8:	4547      	cmp	r7, r8
 800a5da:	d127      	bne.n	800a62c <__hexnan+0x12c>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	2005      	movs	r0, #5
 800a5e2:	e026      	b.n	800a632 <__hexnan+0x132>
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	2d08      	cmp	r5, #8
 800a5e8:	f10b 0b01 	add.w	fp, fp, #1
 800a5ec:	dd06      	ble.n	800a5fc <__hexnan+0xfc>
 800a5ee:	4544      	cmp	r4, r8
 800a5f0:	d9c3      	bls.n	800a57a <__hexnan+0x7a>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5f8:	2501      	movs	r5, #1
 800a5fa:	3c04      	subs	r4, #4
 800a5fc:	6822      	ldr	r2, [r4, #0]
 800a5fe:	f000 000f 	and.w	r0, r0, #15
 800a602:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a606:	6022      	str	r2, [r4, #0]
 800a608:	e7b7      	b.n	800a57a <__hexnan+0x7a>
 800a60a:	2508      	movs	r5, #8
 800a60c:	e7b5      	b.n	800a57a <__hexnan+0x7a>
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0df      	beq.n	800a5d4 <__hexnan+0xd4>
 800a614:	f04f 32ff 	mov.w	r2, #4294967295
 800a618:	f1c3 0320 	rsb	r3, r3, #32
 800a61c:	fa22 f303 	lsr.w	r3, r2, r3
 800a620:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a624:	401a      	ands	r2, r3
 800a626:	f846 2c04 	str.w	r2, [r6, #-4]
 800a62a:	e7d3      	b.n	800a5d4 <__hexnan+0xd4>
 800a62c:	3f04      	subs	r7, #4
 800a62e:	e7d1      	b.n	800a5d4 <__hexnan+0xd4>
 800a630:	2004      	movs	r0, #4
 800a632:	b007      	add	sp, #28
 800a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a638 <_localeconv_r>:
 800a638:	4800      	ldr	r0, [pc, #0]	; (800a63c <_localeconv_r+0x4>)
 800a63a:	4770      	bx	lr
 800a63c:	20000298 	.word	0x20000298

0800a640 <malloc>:
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <malloc+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f000 bd3d 	b.w	800b0c4 <_malloc_r>
 800a64a:	bf00      	nop
 800a64c:	20000140 	.word	0x20000140

0800a650 <__ascii_mbtowc>:
 800a650:	b082      	sub	sp, #8
 800a652:	b901      	cbnz	r1, 800a656 <__ascii_mbtowc+0x6>
 800a654:	a901      	add	r1, sp, #4
 800a656:	b142      	cbz	r2, 800a66a <__ascii_mbtowc+0x1a>
 800a658:	b14b      	cbz	r3, 800a66e <__ascii_mbtowc+0x1e>
 800a65a:	7813      	ldrb	r3, [r2, #0]
 800a65c:	600b      	str	r3, [r1, #0]
 800a65e:	7812      	ldrb	r2, [r2, #0]
 800a660:	1e10      	subs	r0, r2, #0
 800a662:	bf18      	it	ne
 800a664:	2001      	movne	r0, #1
 800a666:	b002      	add	sp, #8
 800a668:	4770      	bx	lr
 800a66a:	4610      	mov	r0, r2
 800a66c:	e7fb      	b.n	800a666 <__ascii_mbtowc+0x16>
 800a66e:	f06f 0001 	mvn.w	r0, #1
 800a672:	e7f8      	b.n	800a666 <__ascii_mbtowc+0x16>

0800a674 <memcpy>:
 800a674:	440a      	add	r2, r1
 800a676:	4291      	cmp	r1, r2
 800a678:	f100 33ff 	add.w	r3, r0, #4294967295
 800a67c:	d100      	bne.n	800a680 <memcpy+0xc>
 800a67e:	4770      	bx	lr
 800a680:	b510      	push	{r4, lr}
 800a682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a68a:	4291      	cmp	r1, r2
 800a68c:	d1f9      	bne.n	800a682 <memcpy+0xe>
 800a68e:	bd10      	pop	{r4, pc}

0800a690 <_Balloc>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	b976      	cbnz	r6, 800a6b8 <_Balloc+0x28>
 800a69a:	2010      	movs	r0, #16
 800a69c:	f7ff ffd0 	bl	800a640 <malloc>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6260      	str	r0, [r4, #36]	; 0x24
 800a6a4:	b920      	cbnz	r0, 800a6b0 <_Balloc+0x20>
 800a6a6:	4b18      	ldr	r3, [pc, #96]	; (800a708 <_Balloc+0x78>)
 800a6a8:	4818      	ldr	r0, [pc, #96]	; (800a70c <_Balloc+0x7c>)
 800a6aa:	2166      	movs	r1, #102	; 0x66
 800a6ac:	f000 fef8 	bl	800b4a0 <__assert_func>
 800a6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6b4:	6006      	str	r6, [r0, #0]
 800a6b6:	60c6      	str	r6, [r0, #12]
 800a6b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6ba:	68f3      	ldr	r3, [r6, #12]
 800a6bc:	b183      	cbz	r3, 800a6e0 <_Balloc+0x50>
 800a6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6c6:	b9b8      	cbnz	r0, 800a6f8 <_Balloc+0x68>
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a6ce:	1d72      	adds	r2, r6, #5
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fc97 	bl	800b006 <_calloc_r>
 800a6d8:	b160      	cbz	r0, 800a6f4 <_Balloc+0x64>
 800a6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6de:	e00e      	b.n	800a6fe <_Balloc+0x6e>
 800a6e0:	2221      	movs	r2, #33	; 0x21
 800a6e2:	2104      	movs	r1, #4
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 fc8e 	bl	800b006 <_calloc_r>
 800a6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ec:	60f0      	str	r0, [r6, #12]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e4      	bne.n	800a6be <_Balloc+0x2e>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}
 800a6f8:	6802      	ldr	r2, [r0, #0]
 800a6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6fe:	2300      	movs	r3, #0
 800a700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a704:	e7f7      	b.n	800a6f6 <_Balloc+0x66>
 800a706:	bf00      	nop
 800a708:	0800d6d6 	.word	0x0800d6d6
 800a70c:	0800d7dc 	.word	0x0800d7dc

0800a710 <_Bfree>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
 800a718:	b976      	cbnz	r6, 800a738 <_Bfree+0x28>
 800a71a:	2010      	movs	r0, #16
 800a71c:	f7ff ff90 	bl	800a640 <malloc>
 800a720:	4602      	mov	r2, r0
 800a722:	6268      	str	r0, [r5, #36]	; 0x24
 800a724:	b920      	cbnz	r0, 800a730 <_Bfree+0x20>
 800a726:	4b09      	ldr	r3, [pc, #36]	; (800a74c <_Bfree+0x3c>)
 800a728:	4809      	ldr	r0, [pc, #36]	; (800a750 <_Bfree+0x40>)
 800a72a:	218a      	movs	r1, #138	; 0x8a
 800a72c:	f000 feb8 	bl	800b4a0 <__assert_func>
 800a730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a734:	6006      	str	r6, [r0, #0]
 800a736:	60c6      	str	r6, [r0, #12]
 800a738:	b13c      	cbz	r4, 800a74a <_Bfree+0x3a>
 800a73a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a73c:	6862      	ldr	r2, [r4, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a744:	6021      	str	r1, [r4, #0]
 800a746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	0800d6d6 	.word	0x0800d6d6
 800a750:	0800d7dc 	.word	0x0800d7dc

0800a754 <__multadd>:
 800a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a758:	690e      	ldr	r6, [r1, #16]
 800a75a:	4607      	mov	r7, r0
 800a75c:	4698      	mov	r8, r3
 800a75e:	460c      	mov	r4, r1
 800a760:	f101 0014 	add.w	r0, r1, #20
 800a764:	2300      	movs	r3, #0
 800a766:	6805      	ldr	r5, [r0, #0]
 800a768:	b2a9      	uxth	r1, r5
 800a76a:	fb02 8101 	mla	r1, r2, r1, r8
 800a76e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a772:	0c2d      	lsrs	r5, r5, #16
 800a774:	fb02 c505 	mla	r5, r2, r5, ip
 800a778:	b289      	uxth	r1, r1
 800a77a:	3301      	adds	r3, #1
 800a77c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a780:	429e      	cmp	r6, r3
 800a782:	f840 1b04 	str.w	r1, [r0], #4
 800a786:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a78a:	dcec      	bgt.n	800a766 <__multadd+0x12>
 800a78c:	f1b8 0f00 	cmp.w	r8, #0
 800a790:	d022      	beq.n	800a7d8 <__multadd+0x84>
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	42b3      	cmp	r3, r6
 800a796:	dc19      	bgt.n	800a7cc <__multadd+0x78>
 800a798:	6861      	ldr	r1, [r4, #4]
 800a79a:	4638      	mov	r0, r7
 800a79c:	3101      	adds	r1, #1
 800a79e:	f7ff ff77 	bl	800a690 <_Balloc>
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	b928      	cbnz	r0, 800a7b2 <__multadd+0x5e>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <__multadd+0x8c>)
 800a7aa:	480e      	ldr	r0, [pc, #56]	; (800a7e4 <__multadd+0x90>)
 800a7ac:	21b5      	movs	r1, #181	; 0xb5
 800a7ae:	f000 fe77 	bl	800b4a0 <__assert_func>
 800a7b2:	6922      	ldr	r2, [r4, #16]
 800a7b4:	3202      	adds	r2, #2
 800a7b6:	f104 010c 	add.w	r1, r4, #12
 800a7ba:	0092      	lsls	r2, r2, #2
 800a7bc:	300c      	adds	r0, #12
 800a7be:	f7ff ff59 	bl	800a674 <memcpy>
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f7ff ffa3 	bl	800a710 <_Bfree>
 800a7ca:	462c      	mov	r4, r5
 800a7cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a7d0:	3601      	adds	r6, #1
 800a7d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a7d6:	6126      	str	r6, [r4, #16]
 800a7d8:	4620      	mov	r0, r4
 800a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7de:	bf00      	nop
 800a7e0:	0800d74c 	.word	0x0800d74c
 800a7e4:	0800d7dc 	.word	0x0800d7dc

0800a7e8 <__s2b>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	4615      	mov	r5, r2
 800a7f0:	461f      	mov	r7, r3
 800a7f2:	2209      	movs	r2, #9
 800a7f4:	3308      	adds	r3, #8
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	2201      	movs	r2, #1
 800a800:	429a      	cmp	r2, r3
 800a802:	db09      	blt.n	800a818 <__s2b+0x30>
 800a804:	4630      	mov	r0, r6
 800a806:	f7ff ff43 	bl	800a690 <_Balloc>
 800a80a:	b940      	cbnz	r0, 800a81e <__s2b+0x36>
 800a80c:	4602      	mov	r2, r0
 800a80e:	4b19      	ldr	r3, [pc, #100]	; (800a874 <__s2b+0x8c>)
 800a810:	4819      	ldr	r0, [pc, #100]	; (800a878 <__s2b+0x90>)
 800a812:	21ce      	movs	r1, #206	; 0xce
 800a814:	f000 fe44 	bl	800b4a0 <__assert_func>
 800a818:	0052      	lsls	r2, r2, #1
 800a81a:	3101      	adds	r1, #1
 800a81c:	e7f0      	b.n	800a800 <__s2b+0x18>
 800a81e:	9b08      	ldr	r3, [sp, #32]
 800a820:	6143      	str	r3, [r0, #20]
 800a822:	2d09      	cmp	r5, #9
 800a824:	f04f 0301 	mov.w	r3, #1
 800a828:	6103      	str	r3, [r0, #16]
 800a82a:	dd16      	ble.n	800a85a <__s2b+0x72>
 800a82c:	f104 0909 	add.w	r9, r4, #9
 800a830:	46c8      	mov	r8, r9
 800a832:	442c      	add	r4, r5
 800a834:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a838:	4601      	mov	r1, r0
 800a83a:	3b30      	subs	r3, #48	; 0x30
 800a83c:	220a      	movs	r2, #10
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff ff88 	bl	800a754 <__multadd>
 800a844:	45a0      	cmp	r8, r4
 800a846:	d1f5      	bne.n	800a834 <__s2b+0x4c>
 800a848:	f1a5 0408 	sub.w	r4, r5, #8
 800a84c:	444c      	add	r4, r9
 800a84e:	1b2d      	subs	r5, r5, r4
 800a850:	1963      	adds	r3, r4, r5
 800a852:	42bb      	cmp	r3, r7
 800a854:	db04      	blt.n	800a860 <__s2b+0x78>
 800a856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a85a:	340a      	adds	r4, #10
 800a85c:	2509      	movs	r5, #9
 800a85e:	e7f6      	b.n	800a84e <__s2b+0x66>
 800a860:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a864:	4601      	mov	r1, r0
 800a866:	3b30      	subs	r3, #48	; 0x30
 800a868:	220a      	movs	r2, #10
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7ff ff72 	bl	800a754 <__multadd>
 800a870:	e7ee      	b.n	800a850 <__s2b+0x68>
 800a872:	bf00      	nop
 800a874:	0800d74c 	.word	0x0800d74c
 800a878:	0800d7dc 	.word	0x0800d7dc

0800a87c <__hi0bits>:
 800a87c:	0c03      	lsrs	r3, r0, #16
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	b9d3      	cbnz	r3, 800a8b8 <__hi0bits+0x3c>
 800a882:	0400      	lsls	r0, r0, #16
 800a884:	2310      	movs	r3, #16
 800a886:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a88a:	bf04      	itt	eq
 800a88c:	0200      	lsleq	r0, r0, #8
 800a88e:	3308      	addeq	r3, #8
 800a890:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a894:	bf04      	itt	eq
 800a896:	0100      	lsleq	r0, r0, #4
 800a898:	3304      	addeq	r3, #4
 800a89a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a89e:	bf04      	itt	eq
 800a8a0:	0080      	lsleq	r0, r0, #2
 800a8a2:	3302      	addeq	r3, #2
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	db05      	blt.n	800a8b4 <__hi0bits+0x38>
 800a8a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8ac:	f103 0301 	add.w	r3, r3, #1
 800a8b0:	bf08      	it	eq
 800a8b2:	2320      	moveq	r3, #32
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	4770      	bx	lr
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e7e4      	b.n	800a886 <__hi0bits+0xa>

0800a8bc <__lo0bits>:
 800a8bc:	6803      	ldr	r3, [r0, #0]
 800a8be:	f013 0207 	ands.w	r2, r3, #7
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	d00b      	beq.n	800a8de <__lo0bits+0x22>
 800a8c6:	07da      	lsls	r2, r3, #31
 800a8c8:	d424      	bmi.n	800a914 <__lo0bits+0x58>
 800a8ca:	0798      	lsls	r0, r3, #30
 800a8cc:	bf49      	itett	mi
 800a8ce:	085b      	lsrmi	r3, r3, #1
 800a8d0:	089b      	lsrpl	r3, r3, #2
 800a8d2:	2001      	movmi	r0, #1
 800a8d4:	600b      	strmi	r3, [r1, #0]
 800a8d6:	bf5c      	itt	pl
 800a8d8:	600b      	strpl	r3, [r1, #0]
 800a8da:	2002      	movpl	r0, #2
 800a8dc:	4770      	bx	lr
 800a8de:	b298      	uxth	r0, r3
 800a8e0:	b9b0      	cbnz	r0, 800a910 <__lo0bits+0x54>
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8ea:	bf04      	itt	eq
 800a8ec:	0a1b      	lsreq	r3, r3, #8
 800a8ee:	3008      	addeq	r0, #8
 800a8f0:	071a      	lsls	r2, r3, #28
 800a8f2:	bf04      	itt	eq
 800a8f4:	091b      	lsreq	r3, r3, #4
 800a8f6:	3004      	addeq	r0, #4
 800a8f8:	079a      	lsls	r2, r3, #30
 800a8fa:	bf04      	itt	eq
 800a8fc:	089b      	lsreq	r3, r3, #2
 800a8fe:	3002      	addeq	r0, #2
 800a900:	07da      	lsls	r2, r3, #31
 800a902:	d403      	bmi.n	800a90c <__lo0bits+0x50>
 800a904:	085b      	lsrs	r3, r3, #1
 800a906:	f100 0001 	add.w	r0, r0, #1
 800a90a:	d005      	beq.n	800a918 <__lo0bits+0x5c>
 800a90c:	600b      	str	r3, [r1, #0]
 800a90e:	4770      	bx	lr
 800a910:	4610      	mov	r0, r2
 800a912:	e7e8      	b.n	800a8e6 <__lo0bits+0x2a>
 800a914:	2000      	movs	r0, #0
 800a916:	4770      	bx	lr
 800a918:	2020      	movs	r0, #32
 800a91a:	4770      	bx	lr

0800a91c <__i2b>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	460c      	mov	r4, r1
 800a920:	2101      	movs	r1, #1
 800a922:	f7ff feb5 	bl	800a690 <_Balloc>
 800a926:	4602      	mov	r2, r0
 800a928:	b928      	cbnz	r0, 800a936 <__i2b+0x1a>
 800a92a:	4b05      	ldr	r3, [pc, #20]	; (800a940 <__i2b+0x24>)
 800a92c:	4805      	ldr	r0, [pc, #20]	; (800a944 <__i2b+0x28>)
 800a92e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a932:	f000 fdb5 	bl	800b4a0 <__assert_func>
 800a936:	2301      	movs	r3, #1
 800a938:	6144      	str	r4, [r0, #20]
 800a93a:	6103      	str	r3, [r0, #16]
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	bf00      	nop
 800a940:	0800d74c 	.word	0x0800d74c
 800a944:	0800d7dc 	.word	0x0800d7dc

0800a948 <__multiply>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	4614      	mov	r4, r2
 800a94e:	690a      	ldr	r2, [r1, #16]
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	bfb8      	it	lt
 800a956:	460b      	movlt	r3, r1
 800a958:	460d      	mov	r5, r1
 800a95a:	bfbc      	itt	lt
 800a95c:	4625      	movlt	r5, r4
 800a95e:	461c      	movlt	r4, r3
 800a960:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a964:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a968:	68ab      	ldr	r3, [r5, #8]
 800a96a:	6869      	ldr	r1, [r5, #4]
 800a96c:	eb0a 0709 	add.w	r7, sl, r9
 800a970:	42bb      	cmp	r3, r7
 800a972:	b085      	sub	sp, #20
 800a974:	bfb8      	it	lt
 800a976:	3101      	addlt	r1, #1
 800a978:	f7ff fe8a 	bl	800a690 <_Balloc>
 800a97c:	b930      	cbnz	r0, 800a98c <__multiply+0x44>
 800a97e:	4602      	mov	r2, r0
 800a980:	4b42      	ldr	r3, [pc, #264]	; (800aa8c <__multiply+0x144>)
 800a982:	4843      	ldr	r0, [pc, #268]	; (800aa90 <__multiply+0x148>)
 800a984:	f240 115d 	movw	r1, #349	; 0x15d
 800a988:	f000 fd8a 	bl	800b4a0 <__assert_func>
 800a98c:	f100 0614 	add.w	r6, r0, #20
 800a990:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a994:	4633      	mov	r3, r6
 800a996:	2200      	movs	r2, #0
 800a998:	4543      	cmp	r3, r8
 800a99a:	d31e      	bcc.n	800a9da <__multiply+0x92>
 800a99c:	f105 0c14 	add.w	ip, r5, #20
 800a9a0:	f104 0314 	add.w	r3, r4, #20
 800a9a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a9a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a9ac:	9202      	str	r2, [sp, #8]
 800a9ae:	ebac 0205 	sub.w	r2, ip, r5
 800a9b2:	3a15      	subs	r2, #21
 800a9b4:	f022 0203 	bic.w	r2, r2, #3
 800a9b8:	3204      	adds	r2, #4
 800a9ba:	f105 0115 	add.w	r1, r5, #21
 800a9be:	458c      	cmp	ip, r1
 800a9c0:	bf38      	it	cc
 800a9c2:	2204      	movcc	r2, #4
 800a9c4:	9201      	str	r2, [sp, #4]
 800a9c6:	9a02      	ldr	r2, [sp, #8]
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d808      	bhi.n	800a9e0 <__multiply+0x98>
 800a9ce:	2f00      	cmp	r7, #0
 800a9d0:	dc55      	bgt.n	800aa7e <__multiply+0x136>
 800a9d2:	6107      	str	r7, [r0, #16]
 800a9d4:	b005      	add	sp, #20
 800a9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9da:	f843 2b04 	str.w	r2, [r3], #4
 800a9de:	e7db      	b.n	800a998 <__multiply+0x50>
 800a9e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9e4:	f1ba 0f00 	cmp.w	sl, #0
 800a9e8:	d020      	beq.n	800aa2c <__multiply+0xe4>
 800a9ea:	f105 0e14 	add.w	lr, r5, #20
 800a9ee:	46b1      	mov	r9, r6
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a9f6:	f8d9 b000 	ldr.w	fp, [r9]
 800a9fa:	b2a1      	uxth	r1, r4
 800a9fc:	fa1f fb8b 	uxth.w	fp, fp
 800aa00:	fb0a b101 	mla	r1, sl, r1, fp
 800aa04:	4411      	add	r1, r2
 800aa06:	f8d9 2000 	ldr.w	r2, [r9]
 800aa0a:	0c24      	lsrs	r4, r4, #16
 800aa0c:	0c12      	lsrs	r2, r2, #16
 800aa0e:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa16:	b289      	uxth	r1, r1
 800aa18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa1c:	45f4      	cmp	ip, lr
 800aa1e:	f849 1b04 	str.w	r1, [r9], #4
 800aa22:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa26:	d8e4      	bhi.n	800a9f2 <__multiply+0xaa>
 800aa28:	9901      	ldr	r1, [sp, #4]
 800aa2a:	5072      	str	r2, [r6, r1]
 800aa2c:	9a03      	ldr	r2, [sp, #12]
 800aa2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa32:	3304      	adds	r3, #4
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	d01f      	beq.n	800aa7a <__multiply+0x132>
 800aa3a:	6834      	ldr	r4, [r6, #0]
 800aa3c:	f105 0114 	add.w	r1, r5, #20
 800aa40:	46b6      	mov	lr, r6
 800aa42:	f04f 0a00 	mov.w	sl, #0
 800aa46:	880a      	ldrh	r2, [r1, #0]
 800aa48:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa4c:	fb09 b202 	mla	r2, r9, r2, fp
 800aa50:	4492      	add	sl, r2
 800aa52:	b2a4      	uxth	r4, r4
 800aa54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa58:	f84e 4b04 	str.w	r4, [lr], #4
 800aa5c:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa60:	f8be 2000 	ldrh.w	r2, [lr]
 800aa64:	0c24      	lsrs	r4, r4, #16
 800aa66:	fb09 2404 	mla	r4, r9, r4, r2
 800aa6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa6e:	458c      	cmp	ip, r1
 800aa70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa74:	d8e7      	bhi.n	800aa46 <__multiply+0xfe>
 800aa76:	9a01      	ldr	r2, [sp, #4]
 800aa78:	50b4      	str	r4, [r6, r2]
 800aa7a:	3604      	adds	r6, #4
 800aa7c:	e7a3      	b.n	800a9c6 <__multiply+0x7e>
 800aa7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1a5      	bne.n	800a9d2 <__multiply+0x8a>
 800aa86:	3f01      	subs	r7, #1
 800aa88:	e7a1      	b.n	800a9ce <__multiply+0x86>
 800aa8a:	bf00      	nop
 800aa8c:	0800d74c 	.word	0x0800d74c
 800aa90:	0800d7dc 	.word	0x0800d7dc

0800aa94 <__pow5mult>:
 800aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa98:	4615      	mov	r5, r2
 800aa9a:	f012 0203 	ands.w	r2, r2, #3
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	d007      	beq.n	800aab4 <__pow5mult+0x20>
 800aaa4:	4c25      	ldr	r4, [pc, #148]	; (800ab3c <__pow5mult+0xa8>)
 800aaa6:	3a01      	subs	r2, #1
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaae:	f7ff fe51 	bl	800a754 <__multadd>
 800aab2:	4607      	mov	r7, r0
 800aab4:	10ad      	asrs	r5, r5, #2
 800aab6:	d03d      	beq.n	800ab34 <__pow5mult+0xa0>
 800aab8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aaba:	b97c      	cbnz	r4, 800aadc <__pow5mult+0x48>
 800aabc:	2010      	movs	r0, #16
 800aabe:	f7ff fdbf 	bl	800a640 <malloc>
 800aac2:	4602      	mov	r2, r0
 800aac4:	6270      	str	r0, [r6, #36]	; 0x24
 800aac6:	b928      	cbnz	r0, 800aad4 <__pow5mult+0x40>
 800aac8:	4b1d      	ldr	r3, [pc, #116]	; (800ab40 <__pow5mult+0xac>)
 800aaca:	481e      	ldr	r0, [pc, #120]	; (800ab44 <__pow5mult+0xb0>)
 800aacc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aad0:	f000 fce6 	bl	800b4a0 <__assert_func>
 800aad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aad8:	6004      	str	r4, [r0, #0]
 800aada:	60c4      	str	r4, [r0, #12]
 800aadc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aae4:	b94c      	cbnz	r4, 800aafa <__pow5mult+0x66>
 800aae6:	f240 2171 	movw	r1, #625	; 0x271
 800aaea:	4630      	mov	r0, r6
 800aaec:	f7ff ff16 	bl	800a91c <__i2b>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	6003      	str	r3, [r0, #0]
 800aafa:	f04f 0900 	mov.w	r9, #0
 800aafe:	07eb      	lsls	r3, r5, #31
 800ab00:	d50a      	bpl.n	800ab18 <__pow5mult+0x84>
 800ab02:	4639      	mov	r1, r7
 800ab04:	4622      	mov	r2, r4
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff ff1e 	bl	800a948 <__multiply>
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	4680      	mov	r8, r0
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff fdfd 	bl	800a710 <_Bfree>
 800ab16:	4647      	mov	r7, r8
 800ab18:	106d      	asrs	r5, r5, #1
 800ab1a:	d00b      	beq.n	800ab34 <__pow5mult+0xa0>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	b938      	cbnz	r0, 800ab30 <__pow5mult+0x9c>
 800ab20:	4622      	mov	r2, r4
 800ab22:	4621      	mov	r1, r4
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff ff0f 	bl	800a948 <__multiply>
 800ab2a:	6020      	str	r0, [r4, #0]
 800ab2c:	f8c0 9000 	str.w	r9, [r0]
 800ab30:	4604      	mov	r4, r0
 800ab32:	e7e4      	b.n	800aafe <__pow5mult+0x6a>
 800ab34:	4638      	mov	r0, r7
 800ab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800d930 	.word	0x0800d930
 800ab40:	0800d6d6 	.word	0x0800d6d6
 800ab44:	0800d7dc 	.word	0x0800d7dc

0800ab48 <__lshift>:
 800ab48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	6849      	ldr	r1, [r1, #4]
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	4607      	mov	r7, r0
 800ab5a:	4691      	mov	r9, r2
 800ab5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab60:	f108 0601 	add.w	r6, r8, #1
 800ab64:	42b3      	cmp	r3, r6
 800ab66:	db0b      	blt.n	800ab80 <__lshift+0x38>
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f7ff fd91 	bl	800a690 <_Balloc>
 800ab6e:	4605      	mov	r5, r0
 800ab70:	b948      	cbnz	r0, 800ab86 <__lshift+0x3e>
 800ab72:	4602      	mov	r2, r0
 800ab74:	4b28      	ldr	r3, [pc, #160]	; (800ac18 <__lshift+0xd0>)
 800ab76:	4829      	ldr	r0, [pc, #164]	; (800ac1c <__lshift+0xd4>)
 800ab78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab7c:	f000 fc90 	bl	800b4a0 <__assert_func>
 800ab80:	3101      	adds	r1, #1
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	e7ee      	b.n	800ab64 <__lshift+0x1c>
 800ab86:	2300      	movs	r3, #0
 800ab88:	f100 0114 	add.w	r1, r0, #20
 800ab8c:	f100 0210 	add.w	r2, r0, #16
 800ab90:	4618      	mov	r0, r3
 800ab92:	4553      	cmp	r3, sl
 800ab94:	db33      	blt.n	800abfe <__lshift+0xb6>
 800ab96:	6920      	ldr	r0, [r4, #16]
 800ab98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab9c:	f104 0314 	add.w	r3, r4, #20
 800aba0:	f019 091f 	ands.w	r9, r9, #31
 800aba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abac:	d02b      	beq.n	800ac06 <__lshift+0xbe>
 800abae:	f1c9 0e20 	rsb	lr, r9, #32
 800abb2:	468a      	mov	sl, r1
 800abb4:	2200      	movs	r2, #0
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	fa00 f009 	lsl.w	r0, r0, r9
 800abbc:	4302      	orrs	r2, r0
 800abbe:	f84a 2b04 	str.w	r2, [sl], #4
 800abc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc6:	459c      	cmp	ip, r3
 800abc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800abcc:	d8f3      	bhi.n	800abb6 <__lshift+0x6e>
 800abce:	ebac 0304 	sub.w	r3, ip, r4
 800abd2:	3b15      	subs	r3, #21
 800abd4:	f023 0303 	bic.w	r3, r3, #3
 800abd8:	3304      	adds	r3, #4
 800abda:	f104 0015 	add.w	r0, r4, #21
 800abde:	4584      	cmp	ip, r0
 800abe0:	bf38      	it	cc
 800abe2:	2304      	movcc	r3, #4
 800abe4:	50ca      	str	r2, [r1, r3]
 800abe6:	b10a      	cbz	r2, 800abec <__lshift+0xa4>
 800abe8:	f108 0602 	add.w	r6, r8, #2
 800abec:	3e01      	subs	r6, #1
 800abee:	4638      	mov	r0, r7
 800abf0:	612e      	str	r6, [r5, #16]
 800abf2:	4621      	mov	r1, r4
 800abf4:	f7ff fd8c 	bl	800a710 <_Bfree>
 800abf8:	4628      	mov	r0, r5
 800abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac02:	3301      	adds	r3, #1
 800ac04:	e7c5      	b.n	800ab92 <__lshift+0x4a>
 800ac06:	3904      	subs	r1, #4
 800ac08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac10:	459c      	cmp	ip, r3
 800ac12:	d8f9      	bhi.n	800ac08 <__lshift+0xc0>
 800ac14:	e7ea      	b.n	800abec <__lshift+0xa4>
 800ac16:	bf00      	nop
 800ac18:	0800d74c 	.word	0x0800d74c
 800ac1c:	0800d7dc 	.word	0x0800d7dc

0800ac20 <__mcmp>:
 800ac20:	b530      	push	{r4, r5, lr}
 800ac22:	6902      	ldr	r2, [r0, #16]
 800ac24:	690c      	ldr	r4, [r1, #16]
 800ac26:	1b12      	subs	r2, r2, r4
 800ac28:	d10e      	bne.n	800ac48 <__mcmp+0x28>
 800ac2a:	f100 0314 	add.w	r3, r0, #20
 800ac2e:	3114      	adds	r1, #20
 800ac30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac40:	42a5      	cmp	r5, r4
 800ac42:	d003      	beq.n	800ac4c <__mcmp+0x2c>
 800ac44:	d305      	bcc.n	800ac52 <__mcmp+0x32>
 800ac46:	2201      	movs	r2, #1
 800ac48:	4610      	mov	r0, r2
 800ac4a:	bd30      	pop	{r4, r5, pc}
 800ac4c:	4283      	cmp	r3, r0
 800ac4e:	d3f3      	bcc.n	800ac38 <__mcmp+0x18>
 800ac50:	e7fa      	b.n	800ac48 <__mcmp+0x28>
 800ac52:	f04f 32ff 	mov.w	r2, #4294967295
 800ac56:	e7f7      	b.n	800ac48 <__mcmp+0x28>

0800ac58 <__mdiff>:
 800ac58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	4606      	mov	r6, r0
 800ac60:	4611      	mov	r1, r2
 800ac62:	4620      	mov	r0, r4
 800ac64:	4617      	mov	r7, r2
 800ac66:	f7ff ffdb 	bl	800ac20 <__mcmp>
 800ac6a:	1e05      	subs	r5, r0, #0
 800ac6c:	d110      	bne.n	800ac90 <__mdiff+0x38>
 800ac6e:	4629      	mov	r1, r5
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff fd0d 	bl	800a690 <_Balloc>
 800ac76:	b930      	cbnz	r0, 800ac86 <__mdiff+0x2e>
 800ac78:	4b39      	ldr	r3, [pc, #228]	; (800ad60 <__mdiff+0x108>)
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	f240 2132 	movw	r1, #562	; 0x232
 800ac80:	4838      	ldr	r0, [pc, #224]	; (800ad64 <__mdiff+0x10c>)
 800ac82:	f000 fc0d 	bl	800b4a0 <__assert_func>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	bfa4      	itt	ge
 800ac92:	463b      	movge	r3, r7
 800ac94:	4627      	movge	r7, r4
 800ac96:	4630      	mov	r0, r6
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	bfa6      	itte	ge
 800ac9c:	461c      	movge	r4, r3
 800ac9e:	2500      	movge	r5, #0
 800aca0:	2501      	movlt	r5, #1
 800aca2:	f7ff fcf5 	bl	800a690 <_Balloc>
 800aca6:	b920      	cbnz	r0, 800acb2 <__mdiff+0x5a>
 800aca8:	4b2d      	ldr	r3, [pc, #180]	; (800ad60 <__mdiff+0x108>)
 800acaa:	4602      	mov	r2, r0
 800acac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800acb0:	e7e6      	b.n	800ac80 <__mdiff+0x28>
 800acb2:	693e      	ldr	r6, [r7, #16]
 800acb4:	60c5      	str	r5, [r0, #12]
 800acb6:	6925      	ldr	r5, [r4, #16]
 800acb8:	f107 0114 	add.w	r1, r7, #20
 800acbc:	f104 0914 	add.w	r9, r4, #20
 800acc0:	f100 0e14 	add.w	lr, r0, #20
 800acc4:	f107 0210 	add.w	r2, r7, #16
 800acc8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800accc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800acd0:	46f2      	mov	sl, lr
 800acd2:	2700      	movs	r7, #0
 800acd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800acd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800acdc:	fa1f f883 	uxth.w	r8, r3
 800ace0:	fa17 f78b 	uxtah	r7, r7, fp
 800ace4:	0c1b      	lsrs	r3, r3, #16
 800ace6:	eba7 0808 	sub.w	r8, r7, r8
 800acea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800acee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800acf2:	fa1f f888 	uxth.w	r8, r8
 800acf6:	141f      	asrs	r7, r3, #16
 800acf8:	454d      	cmp	r5, r9
 800acfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acfe:	f84a 3b04 	str.w	r3, [sl], #4
 800ad02:	d8e7      	bhi.n	800acd4 <__mdiff+0x7c>
 800ad04:	1b2b      	subs	r3, r5, r4
 800ad06:	3b15      	subs	r3, #21
 800ad08:	f023 0303 	bic.w	r3, r3, #3
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	3415      	adds	r4, #21
 800ad10:	42a5      	cmp	r5, r4
 800ad12:	bf38      	it	cc
 800ad14:	2304      	movcc	r3, #4
 800ad16:	4419      	add	r1, r3
 800ad18:	4473      	add	r3, lr
 800ad1a:	469e      	mov	lr, r3
 800ad1c:	460d      	mov	r5, r1
 800ad1e:	4565      	cmp	r5, ip
 800ad20:	d30e      	bcc.n	800ad40 <__mdiff+0xe8>
 800ad22:	f10c 0203 	add.w	r2, ip, #3
 800ad26:	1a52      	subs	r2, r2, r1
 800ad28:	f022 0203 	bic.w	r2, r2, #3
 800ad2c:	3903      	subs	r1, #3
 800ad2e:	458c      	cmp	ip, r1
 800ad30:	bf38      	it	cc
 800ad32:	2200      	movcc	r2, #0
 800ad34:	441a      	add	r2, r3
 800ad36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad3a:	b17b      	cbz	r3, 800ad5c <__mdiff+0x104>
 800ad3c:	6106      	str	r6, [r0, #16]
 800ad3e:	e7a5      	b.n	800ac8c <__mdiff+0x34>
 800ad40:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad44:	fa17 f488 	uxtah	r4, r7, r8
 800ad48:	1422      	asrs	r2, r4, #16
 800ad4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad4e:	b2a4      	uxth	r4, r4
 800ad50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad54:	f84e 4b04 	str.w	r4, [lr], #4
 800ad58:	1417      	asrs	r7, r2, #16
 800ad5a:	e7e0      	b.n	800ad1e <__mdiff+0xc6>
 800ad5c:	3e01      	subs	r6, #1
 800ad5e:	e7ea      	b.n	800ad36 <__mdiff+0xde>
 800ad60:	0800d74c 	.word	0x0800d74c
 800ad64:	0800d7dc 	.word	0x0800d7dc

0800ad68 <__ulp>:
 800ad68:	b082      	sub	sp, #8
 800ad6a:	ed8d 0b00 	vstr	d0, [sp]
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	4912      	ldr	r1, [pc, #72]	; (800adbc <__ulp+0x54>)
 800ad72:	4019      	ands	r1, r3
 800ad74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	dd05      	ble.n	800ad88 <__ulp+0x20>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	ec43 2b10 	vmov	d0, r2, r3
 800ad84:	b002      	add	sp, #8
 800ad86:	4770      	bx	lr
 800ad88:	4249      	negs	r1, r1
 800ad8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ad8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ad92:	f04f 0200 	mov.w	r2, #0
 800ad96:	f04f 0300 	mov.w	r3, #0
 800ad9a:	da04      	bge.n	800ada6 <__ulp+0x3e>
 800ad9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ada0:	fa41 f300 	asr.w	r3, r1, r0
 800ada4:	e7ec      	b.n	800ad80 <__ulp+0x18>
 800ada6:	f1a0 0114 	sub.w	r1, r0, #20
 800adaa:	291e      	cmp	r1, #30
 800adac:	bfda      	itte	le
 800adae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800adb2:	fa20 f101 	lsrle.w	r1, r0, r1
 800adb6:	2101      	movgt	r1, #1
 800adb8:	460a      	mov	r2, r1
 800adba:	e7e1      	b.n	800ad80 <__ulp+0x18>
 800adbc:	7ff00000 	.word	0x7ff00000

0800adc0 <__b2d>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	6905      	ldr	r5, [r0, #16]
 800adc4:	f100 0714 	add.w	r7, r0, #20
 800adc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800adcc:	1f2e      	subs	r6, r5, #4
 800adce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800add2:	4620      	mov	r0, r4
 800add4:	f7ff fd52 	bl	800a87c <__hi0bits>
 800add8:	f1c0 0320 	rsb	r3, r0, #32
 800addc:	280a      	cmp	r0, #10
 800adde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ae5c <__b2d+0x9c>
 800ade2:	600b      	str	r3, [r1, #0]
 800ade4:	dc14      	bgt.n	800ae10 <__b2d+0x50>
 800ade6:	f1c0 0e0b 	rsb	lr, r0, #11
 800adea:	fa24 f10e 	lsr.w	r1, r4, lr
 800adee:	42b7      	cmp	r7, r6
 800adf0:	ea41 030c 	orr.w	r3, r1, ip
 800adf4:	bf34      	ite	cc
 800adf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800adfa:	2100      	movcs	r1, #0
 800adfc:	3015      	adds	r0, #21
 800adfe:	fa04 f000 	lsl.w	r0, r4, r0
 800ae02:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae06:	ea40 0201 	orr.w	r2, r0, r1
 800ae0a:	ec43 2b10 	vmov	d0, r2, r3
 800ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae10:	42b7      	cmp	r7, r6
 800ae12:	bf3a      	itte	cc
 800ae14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae18:	f1a5 0608 	subcc.w	r6, r5, #8
 800ae1c:	2100      	movcs	r1, #0
 800ae1e:	380b      	subs	r0, #11
 800ae20:	d017      	beq.n	800ae52 <__b2d+0x92>
 800ae22:	f1c0 0c20 	rsb	ip, r0, #32
 800ae26:	fa04 f500 	lsl.w	r5, r4, r0
 800ae2a:	42be      	cmp	r6, r7
 800ae2c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ae30:	ea45 0504 	orr.w	r5, r5, r4
 800ae34:	bf8c      	ite	hi
 800ae36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae3a:	2400      	movls	r4, #0
 800ae3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ae40:	fa01 f000 	lsl.w	r0, r1, r0
 800ae44:	fa24 f40c 	lsr.w	r4, r4, ip
 800ae48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae4c:	ea40 0204 	orr.w	r2, r0, r4
 800ae50:	e7db      	b.n	800ae0a <__b2d+0x4a>
 800ae52:	ea44 030c 	orr.w	r3, r4, ip
 800ae56:	460a      	mov	r2, r1
 800ae58:	e7d7      	b.n	800ae0a <__b2d+0x4a>
 800ae5a:	bf00      	nop
 800ae5c:	3ff00000 	.word	0x3ff00000

0800ae60 <__d2b>:
 800ae60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae64:	4689      	mov	r9, r1
 800ae66:	2101      	movs	r1, #1
 800ae68:	ec57 6b10 	vmov	r6, r7, d0
 800ae6c:	4690      	mov	r8, r2
 800ae6e:	f7ff fc0f 	bl	800a690 <_Balloc>
 800ae72:	4604      	mov	r4, r0
 800ae74:	b930      	cbnz	r0, 800ae84 <__d2b+0x24>
 800ae76:	4602      	mov	r2, r0
 800ae78:	4b25      	ldr	r3, [pc, #148]	; (800af10 <__d2b+0xb0>)
 800ae7a:	4826      	ldr	r0, [pc, #152]	; (800af14 <__d2b+0xb4>)
 800ae7c:	f240 310a 	movw	r1, #778	; 0x30a
 800ae80:	f000 fb0e 	bl	800b4a0 <__assert_func>
 800ae84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae8c:	bb35      	cbnz	r5, 800aedc <__d2b+0x7c>
 800ae8e:	2e00      	cmp	r6, #0
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	d028      	beq.n	800aee6 <__d2b+0x86>
 800ae94:	4668      	mov	r0, sp
 800ae96:	9600      	str	r6, [sp, #0]
 800ae98:	f7ff fd10 	bl	800a8bc <__lo0bits>
 800ae9c:	9900      	ldr	r1, [sp, #0]
 800ae9e:	b300      	cbz	r0, 800aee2 <__d2b+0x82>
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	f1c0 0320 	rsb	r3, r0, #32
 800aea6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	40c2      	lsrs	r2, r0
 800aeae:	6163      	str	r3, [r4, #20]
 800aeb0:	9201      	str	r2, [sp, #4]
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	61a3      	str	r3, [r4, #24]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bf14      	ite	ne
 800aeba:	2202      	movne	r2, #2
 800aebc:	2201      	moveq	r2, #1
 800aebe:	6122      	str	r2, [r4, #16]
 800aec0:	b1d5      	cbz	r5, 800aef8 <__d2b+0x98>
 800aec2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aec6:	4405      	add	r5, r0
 800aec8:	f8c9 5000 	str.w	r5, [r9]
 800aecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aed0:	f8c8 0000 	str.w	r0, [r8]
 800aed4:	4620      	mov	r0, r4
 800aed6:	b003      	add	sp, #12
 800aed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aee0:	e7d5      	b.n	800ae8e <__d2b+0x2e>
 800aee2:	6161      	str	r1, [r4, #20]
 800aee4:	e7e5      	b.n	800aeb2 <__d2b+0x52>
 800aee6:	a801      	add	r0, sp, #4
 800aee8:	f7ff fce8 	bl	800a8bc <__lo0bits>
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	6163      	str	r3, [r4, #20]
 800aef0:	2201      	movs	r2, #1
 800aef2:	6122      	str	r2, [r4, #16]
 800aef4:	3020      	adds	r0, #32
 800aef6:	e7e3      	b.n	800aec0 <__d2b+0x60>
 800aef8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aefc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af00:	f8c9 0000 	str.w	r0, [r9]
 800af04:	6918      	ldr	r0, [r3, #16]
 800af06:	f7ff fcb9 	bl	800a87c <__hi0bits>
 800af0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af0e:	e7df      	b.n	800aed0 <__d2b+0x70>
 800af10:	0800d74c 	.word	0x0800d74c
 800af14:	0800d7dc 	.word	0x0800d7dc

0800af18 <__ratio>:
 800af18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	4688      	mov	r8, r1
 800af1e:	4669      	mov	r1, sp
 800af20:	4681      	mov	r9, r0
 800af22:	f7ff ff4d 	bl	800adc0 <__b2d>
 800af26:	a901      	add	r1, sp, #4
 800af28:	4640      	mov	r0, r8
 800af2a:	ec55 4b10 	vmov	r4, r5, d0
 800af2e:	f7ff ff47 	bl	800adc0 <__b2d>
 800af32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800af3a:	eba3 0c02 	sub.w	ip, r3, r2
 800af3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af42:	1a9b      	subs	r3, r3, r2
 800af44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800af48:	ec51 0b10 	vmov	r0, r1, d0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfd6      	itet	le
 800af50:	460a      	movle	r2, r1
 800af52:	462a      	movgt	r2, r5
 800af54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af58:	468b      	mov	fp, r1
 800af5a:	462f      	mov	r7, r5
 800af5c:	bfd4      	ite	le
 800af5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800af62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af66:	4620      	mov	r0, r4
 800af68:	ee10 2a10 	vmov	r2, s0
 800af6c:	465b      	mov	r3, fp
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 fc6c 	bl	800084c <__aeabi_ddiv>
 800af74:	ec41 0b10 	vmov	d0, r0, r1
 800af78:	b003      	add	sp, #12
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af7e <__copybits>:
 800af7e:	3901      	subs	r1, #1
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	1149      	asrs	r1, r1, #5
 800af84:	6914      	ldr	r4, [r2, #16]
 800af86:	3101      	adds	r1, #1
 800af88:	f102 0314 	add.w	r3, r2, #20
 800af8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af94:	1f05      	subs	r5, r0, #4
 800af96:	42a3      	cmp	r3, r4
 800af98:	d30c      	bcc.n	800afb4 <__copybits+0x36>
 800af9a:	1aa3      	subs	r3, r4, r2
 800af9c:	3b11      	subs	r3, #17
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	3211      	adds	r2, #17
 800afa4:	42a2      	cmp	r2, r4
 800afa6:	bf88      	it	hi
 800afa8:	2300      	movhi	r3, #0
 800afaa:	4418      	add	r0, r3
 800afac:	2300      	movs	r3, #0
 800afae:	4288      	cmp	r0, r1
 800afb0:	d305      	bcc.n	800afbe <__copybits+0x40>
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800afb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800afbc:	e7eb      	b.n	800af96 <__copybits+0x18>
 800afbe:	f840 3b04 	str.w	r3, [r0], #4
 800afc2:	e7f4      	b.n	800afae <__copybits+0x30>

0800afc4 <__any_on>:
 800afc4:	f100 0214 	add.w	r2, r0, #20
 800afc8:	6900      	ldr	r0, [r0, #16]
 800afca:	114b      	asrs	r3, r1, #5
 800afcc:	4298      	cmp	r0, r3
 800afce:	b510      	push	{r4, lr}
 800afd0:	db11      	blt.n	800aff6 <__any_on+0x32>
 800afd2:	dd0a      	ble.n	800afea <__any_on+0x26>
 800afd4:	f011 011f 	ands.w	r1, r1, #31
 800afd8:	d007      	beq.n	800afea <__any_on+0x26>
 800afda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afde:	fa24 f001 	lsr.w	r0, r4, r1
 800afe2:	fa00 f101 	lsl.w	r1, r0, r1
 800afe6:	428c      	cmp	r4, r1
 800afe8:	d10b      	bne.n	800b002 <__any_on+0x3e>
 800afea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afee:	4293      	cmp	r3, r2
 800aff0:	d803      	bhi.n	800affa <__any_on+0x36>
 800aff2:	2000      	movs	r0, #0
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	4603      	mov	r3, r0
 800aff8:	e7f7      	b.n	800afea <__any_on+0x26>
 800affa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800affe:	2900      	cmp	r1, #0
 800b000:	d0f5      	beq.n	800afee <__any_on+0x2a>
 800b002:	2001      	movs	r0, #1
 800b004:	e7f6      	b.n	800aff4 <__any_on+0x30>

0800b006 <_calloc_r>:
 800b006:	b513      	push	{r0, r1, r4, lr}
 800b008:	434a      	muls	r2, r1
 800b00a:	4611      	mov	r1, r2
 800b00c:	9201      	str	r2, [sp, #4]
 800b00e:	f000 f859 	bl	800b0c4 <_malloc_r>
 800b012:	4604      	mov	r4, r0
 800b014:	b118      	cbz	r0, 800b01e <_calloc_r+0x18>
 800b016:	9a01      	ldr	r2, [sp, #4]
 800b018:	2100      	movs	r1, #0
 800b01a:	f7fc fbc9 	bl	80077b0 <memset>
 800b01e:	4620      	mov	r0, r4
 800b020:	b002      	add	sp, #8
 800b022:	bd10      	pop	{r4, pc}

0800b024 <_free_r>:
 800b024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b026:	2900      	cmp	r1, #0
 800b028:	d048      	beq.n	800b0bc <_free_r+0x98>
 800b02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02e:	9001      	str	r0, [sp, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	f1a1 0404 	sub.w	r4, r1, #4
 800b036:	bfb8      	it	lt
 800b038:	18e4      	addlt	r4, r4, r3
 800b03a:	f000 fa7b 	bl	800b534 <__malloc_lock>
 800b03e:	4a20      	ldr	r2, [pc, #128]	; (800b0c0 <_free_r+0x9c>)
 800b040:	9801      	ldr	r0, [sp, #4]
 800b042:	6813      	ldr	r3, [r2, #0]
 800b044:	4615      	mov	r5, r2
 800b046:	b933      	cbnz	r3, 800b056 <_free_r+0x32>
 800b048:	6063      	str	r3, [r4, #4]
 800b04a:	6014      	str	r4, [r2, #0]
 800b04c:	b003      	add	sp, #12
 800b04e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b052:	f000 ba75 	b.w	800b540 <__malloc_unlock>
 800b056:	42a3      	cmp	r3, r4
 800b058:	d90b      	bls.n	800b072 <_free_r+0x4e>
 800b05a:	6821      	ldr	r1, [r4, #0]
 800b05c:	1862      	adds	r2, r4, r1
 800b05e:	4293      	cmp	r3, r2
 800b060:	bf04      	itt	eq
 800b062:	681a      	ldreq	r2, [r3, #0]
 800b064:	685b      	ldreq	r3, [r3, #4]
 800b066:	6063      	str	r3, [r4, #4]
 800b068:	bf04      	itt	eq
 800b06a:	1852      	addeq	r2, r2, r1
 800b06c:	6022      	streq	r2, [r4, #0]
 800b06e:	602c      	str	r4, [r5, #0]
 800b070:	e7ec      	b.n	800b04c <_free_r+0x28>
 800b072:	461a      	mov	r2, r3
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	b10b      	cbz	r3, 800b07c <_free_r+0x58>
 800b078:	42a3      	cmp	r3, r4
 800b07a:	d9fa      	bls.n	800b072 <_free_r+0x4e>
 800b07c:	6811      	ldr	r1, [r2, #0]
 800b07e:	1855      	adds	r5, r2, r1
 800b080:	42a5      	cmp	r5, r4
 800b082:	d10b      	bne.n	800b09c <_free_r+0x78>
 800b084:	6824      	ldr	r4, [r4, #0]
 800b086:	4421      	add	r1, r4
 800b088:	1854      	adds	r4, r2, r1
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	6011      	str	r1, [r2, #0]
 800b08e:	d1dd      	bne.n	800b04c <_free_r+0x28>
 800b090:	681c      	ldr	r4, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	6053      	str	r3, [r2, #4]
 800b096:	4421      	add	r1, r4
 800b098:	6011      	str	r1, [r2, #0]
 800b09a:	e7d7      	b.n	800b04c <_free_r+0x28>
 800b09c:	d902      	bls.n	800b0a4 <_free_r+0x80>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	6003      	str	r3, [r0, #0]
 800b0a2:	e7d3      	b.n	800b04c <_free_r+0x28>
 800b0a4:	6825      	ldr	r5, [r4, #0]
 800b0a6:	1961      	adds	r1, r4, r5
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	bf04      	itt	eq
 800b0ac:	6819      	ldreq	r1, [r3, #0]
 800b0ae:	685b      	ldreq	r3, [r3, #4]
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	bf04      	itt	eq
 800b0b4:	1949      	addeq	r1, r1, r5
 800b0b6:	6021      	streq	r1, [r4, #0]
 800b0b8:	6054      	str	r4, [r2, #4]
 800b0ba:	e7c7      	b.n	800b04c <_free_r+0x28>
 800b0bc:	b003      	add	sp, #12
 800b0be:	bd30      	pop	{r4, r5, pc}
 800b0c0:	20000344 	.word	0x20000344

0800b0c4 <_malloc_r>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	1ccd      	adds	r5, r1, #3
 800b0c8:	f025 0503 	bic.w	r5, r5, #3
 800b0cc:	3508      	adds	r5, #8
 800b0ce:	2d0c      	cmp	r5, #12
 800b0d0:	bf38      	it	cc
 800b0d2:	250c      	movcc	r5, #12
 800b0d4:	2d00      	cmp	r5, #0
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	db01      	blt.n	800b0de <_malloc_r+0x1a>
 800b0da:	42a9      	cmp	r1, r5
 800b0dc:	d903      	bls.n	800b0e6 <_malloc_r+0x22>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	6033      	str	r3, [r6, #0]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e6:	f000 fa25 	bl	800b534 <__malloc_lock>
 800b0ea:	4921      	ldr	r1, [pc, #132]	; (800b170 <_malloc_r+0xac>)
 800b0ec:	680a      	ldr	r2, [r1, #0]
 800b0ee:	4614      	mov	r4, r2
 800b0f0:	b99c      	cbnz	r4, 800b11a <_malloc_r+0x56>
 800b0f2:	4f20      	ldr	r7, [pc, #128]	; (800b174 <_malloc_r+0xb0>)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	b923      	cbnz	r3, 800b102 <_malloc_r+0x3e>
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f000 f9a0 	bl	800b440 <_sbrk_r>
 800b100:	6038      	str	r0, [r7, #0]
 800b102:	4629      	mov	r1, r5
 800b104:	4630      	mov	r0, r6
 800b106:	f000 f99b 	bl	800b440 <_sbrk_r>
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	d123      	bne.n	800b156 <_malloc_r+0x92>
 800b10e:	230c      	movs	r3, #12
 800b110:	6033      	str	r3, [r6, #0]
 800b112:	4630      	mov	r0, r6
 800b114:	f000 fa14 	bl	800b540 <__malloc_unlock>
 800b118:	e7e3      	b.n	800b0e2 <_malloc_r+0x1e>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	1b5b      	subs	r3, r3, r5
 800b11e:	d417      	bmi.n	800b150 <_malloc_r+0x8c>
 800b120:	2b0b      	cmp	r3, #11
 800b122:	d903      	bls.n	800b12c <_malloc_r+0x68>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	441c      	add	r4, r3
 800b128:	6025      	str	r5, [r4, #0]
 800b12a:	e004      	b.n	800b136 <_malloc_r+0x72>
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	42a2      	cmp	r2, r4
 800b130:	bf0c      	ite	eq
 800b132:	600b      	streq	r3, [r1, #0]
 800b134:	6053      	strne	r3, [r2, #4]
 800b136:	4630      	mov	r0, r6
 800b138:	f000 fa02 	bl	800b540 <__malloc_unlock>
 800b13c:	f104 000b 	add.w	r0, r4, #11
 800b140:	1d23      	adds	r3, r4, #4
 800b142:	f020 0007 	bic.w	r0, r0, #7
 800b146:	1ac2      	subs	r2, r0, r3
 800b148:	d0cc      	beq.n	800b0e4 <_malloc_r+0x20>
 800b14a:	1a1b      	subs	r3, r3, r0
 800b14c:	50a3      	str	r3, [r4, r2]
 800b14e:	e7c9      	b.n	800b0e4 <_malloc_r+0x20>
 800b150:	4622      	mov	r2, r4
 800b152:	6864      	ldr	r4, [r4, #4]
 800b154:	e7cc      	b.n	800b0f0 <_malloc_r+0x2c>
 800b156:	1cc4      	adds	r4, r0, #3
 800b158:	f024 0403 	bic.w	r4, r4, #3
 800b15c:	42a0      	cmp	r0, r4
 800b15e:	d0e3      	beq.n	800b128 <_malloc_r+0x64>
 800b160:	1a21      	subs	r1, r4, r0
 800b162:	4630      	mov	r0, r6
 800b164:	f000 f96c 	bl	800b440 <_sbrk_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	d1dd      	bne.n	800b128 <_malloc_r+0x64>
 800b16c:	e7cf      	b.n	800b10e <_malloc_r+0x4a>
 800b16e:	bf00      	nop
 800b170:	20000344 	.word	0x20000344
 800b174:	20000348 	.word	0x20000348

0800b178 <__ssputs_r>:
 800b178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	688e      	ldr	r6, [r1, #8]
 800b17e:	429e      	cmp	r6, r3
 800b180:	4682      	mov	sl, r0
 800b182:	460c      	mov	r4, r1
 800b184:	4690      	mov	r8, r2
 800b186:	461f      	mov	r7, r3
 800b188:	d838      	bhi.n	800b1fc <__ssputs_r+0x84>
 800b18a:	898a      	ldrh	r2, [r1, #12]
 800b18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b190:	d032      	beq.n	800b1f8 <__ssputs_r+0x80>
 800b192:	6825      	ldr	r5, [r4, #0]
 800b194:	6909      	ldr	r1, [r1, #16]
 800b196:	eba5 0901 	sub.w	r9, r5, r1
 800b19a:	6965      	ldr	r5, [r4, #20]
 800b19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	444b      	add	r3, r9
 800b1a8:	106d      	asrs	r5, r5, #1
 800b1aa:	429d      	cmp	r5, r3
 800b1ac:	bf38      	it	cc
 800b1ae:	461d      	movcc	r5, r3
 800b1b0:	0553      	lsls	r3, r2, #21
 800b1b2:	d531      	bpl.n	800b218 <__ssputs_r+0xa0>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7ff ff85 	bl	800b0c4 <_malloc_r>
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	b950      	cbnz	r0, 800b1d4 <__ssputs_r+0x5c>
 800b1be:	230c      	movs	r3, #12
 800b1c0:	f8ca 3000 	str.w	r3, [sl]
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d4:	6921      	ldr	r1, [r4, #16]
 800b1d6:	464a      	mov	r2, r9
 800b1d8:	f7ff fa4c 	bl	800a674 <memcpy>
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	6126      	str	r6, [r4, #16]
 800b1ea:	6165      	str	r5, [r4, #20]
 800b1ec:	444e      	add	r6, r9
 800b1ee:	eba5 0509 	sub.w	r5, r5, r9
 800b1f2:	6026      	str	r6, [r4, #0]
 800b1f4:	60a5      	str	r5, [r4, #8]
 800b1f6:	463e      	mov	r6, r7
 800b1f8:	42be      	cmp	r6, r7
 800b1fa:	d900      	bls.n	800b1fe <__ssputs_r+0x86>
 800b1fc:	463e      	mov	r6, r7
 800b1fe:	4632      	mov	r2, r6
 800b200:	6820      	ldr	r0, [r4, #0]
 800b202:	4641      	mov	r1, r8
 800b204:	f000 f97c 	bl	800b500 <memmove>
 800b208:	68a3      	ldr	r3, [r4, #8]
 800b20a:	6822      	ldr	r2, [r4, #0]
 800b20c:	1b9b      	subs	r3, r3, r6
 800b20e:	4432      	add	r2, r6
 800b210:	60a3      	str	r3, [r4, #8]
 800b212:	6022      	str	r2, [r4, #0]
 800b214:	2000      	movs	r0, #0
 800b216:	e7db      	b.n	800b1d0 <__ssputs_r+0x58>
 800b218:	462a      	mov	r2, r5
 800b21a:	f000 f997 	bl	800b54c <_realloc_r>
 800b21e:	4606      	mov	r6, r0
 800b220:	2800      	cmp	r0, #0
 800b222:	d1e1      	bne.n	800b1e8 <__ssputs_r+0x70>
 800b224:	6921      	ldr	r1, [r4, #16]
 800b226:	4650      	mov	r0, sl
 800b228:	f7ff fefc 	bl	800b024 <_free_r>
 800b22c:	e7c7      	b.n	800b1be <__ssputs_r+0x46>
	...

0800b230 <_svfiprintf_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4698      	mov	r8, r3
 800b236:	898b      	ldrh	r3, [r1, #12]
 800b238:	061b      	lsls	r3, r3, #24
 800b23a:	b09d      	sub	sp, #116	; 0x74
 800b23c:	4607      	mov	r7, r0
 800b23e:	460d      	mov	r5, r1
 800b240:	4614      	mov	r4, r2
 800b242:	d50e      	bpl.n	800b262 <_svfiprintf_r+0x32>
 800b244:	690b      	ldr	r3, [r1, #16]
 800b246:	b963      	cbnz	r3, 800b262 <_svfiprintf_r+0x32>
 800b248:	2140      	movs	r1, #64	; 0x40
 800b24a:	f7ff ff3b 	bl	800b0c4 <_malloc_r>
 800b24e:	6028      	str	r0, [r5, #0]
 800b250:	6128      	str	r0, [r5, #16]
 800b252:	b920      	cbnz	r0, 800b25e <_svfiprintf_r+0x2e>
 800b254:	230c      	movs	r3, #12
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	e0d1      	b.n	800b402 <_svfiprintf_r+0x1d2>
 800b25e:	2340      	movs	r3, #64	; 0x40
 800b260:	616b      	str	r3, [r5, #20]
 800b262:	2300      	movs	r3, #0
 800b264:	9309      	str	r3, [sp, #36]	; 0x24
 800b266:	2320      	movs	r3, #32
 800b268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b270:	2330      	movs	r3, #48	; 0x30
 800b272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b41c <_svfiprintf_r+0x1ec>
 800b276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b27a:	f04f 0901 	mov.w	r9, #1
 800b27e:	4623      	mov	r3, r4
 800b280:	469a      	mov	sl, r3
 800b282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b286:	b10a      	cbz	r2, 800b28c <_svfiprintf_r+0x5c>
 800b288:	2a25      	cmp	r2, #37	; 0x25
 800b28a:	d1f9      	bne.n	800b280 <_svfiprintf_r+0x50>
 800b28c:	ebba 0b04 	subs.w	fp, sl, r4
 800b290:	d00b      	beq.n	800b2aa <_svfiprintf_r+0x7a>
 800b292:	465b      	mov	r3, fp
 800b294:	4622      	mov	r2, r4
 800b296:	4629      	mov	r1, r5
 800b298:	4638      	mov	r0, r7
 800b29a:	f7ff ff6d 	bl	800b178 <__ssputs_r>
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f000 80aa 	beq.w	800b3f8 <_svfiprintf_r+0x1c8>
 800b2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a6:	445a      	add	r2, fp
 800b2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 80a2 	beq.w	800b3f8 <_svfiprintf_r+0x1c8>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2be:	f10a 0a01 	add.w	sl, sl, #1
 800b2c2:	9304      	str	r3, [sp, #16]
 800b2c4:	9307      	str	r3, [sp, #28]
 800b2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b2cc:	4654      	mov	r4, sl
 800b2ce:	2205      	movs	r2, #5
 800b2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d4:	4851      	ldr	r0, [pc, #324]	; (800b41c <_svfiprintf_r+0x1ec>)
 800b2d6:	f7f4 ff83 	bl	80001e0 <memchr>
 800b2da:	9a04      	ldr	r2, [sp, #16]
 800b2dc:	b9d8      	cbnz	r0, 800b316 <_svfiprintf_r+0xe6>
 800b2de:	06d0      	lsls	r0, r2, #27
 800b2e0:	bf44      	itt	mi
 800b2e2:	2320      	movmi	r3, #32
 800b2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e8:	0711      	lsls	r1, r2, #28
 800b2ea:	bf44      	itt	mi
 800b2ec:	232b      	movmi	r3, #43	; 0x2b
 800b2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f8:	d015      	beq.n	800b326 <_svfiprintf_r+0xf6>
 800b2fa:	9a07      	ldr	r2, [sp, #28]
 800b2fc:	4654      	mov	r4, sl
 800b2fe:	2000      	movs	r0, #0
 800b300:	f04f 0c0a 	mov.w	ip, #10
 800b304:	4621      	mov	r1, r4
 800b306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b30a:	3b30      	subs	r3, #48	; 0x30
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	d94e      	bls.n	800b3ae <_svfiprintf_r+0x17e>
 800b310:	b1b0      	cbz	r0, 800b340 <_svfiprintf_r+0x110>
 800b312:	9207      	str	r2, [sp, #28]
 800b314:	e014      	b.n	800b340 <_svfiprintf_r+0x110>
 800b316:	eba0 0308 	sub.w	r3, r0, r8
 800b31a:	fa09 f303 	lsl.w	r3, r9, r3
 800b31e:	4313      	orrs	r3, r2
 800b320:	9304      	str	r3, [sp, #16]
 800b322:	46a2      	mov	sl, r4
 800b324:	e7d2      	b.n	800b2cc <_svfiprintf_r+0x9c>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	1d19      	adds	r1, r3, #4
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	9103      	str	r1, [sp, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfbb      	ittet	lt
 800b332:	425b      	neglt	r3, r3
 800b334:	f042 0202 	orrlt.w	r2, r2, #2
 800b338:	9307      	strge	r3, [sp, #28]
 800b33a:	9307      	strlt	r3, [sp, #28]
 800b33c:	bfb8      	it	lt
 800b33e:	9204      	strlt	r2, [sp, #16]
 800b340:	7823      	ldrb	r3, [r4, #0]
 800b342:	2b2e      	cmp	r3, #46	; 0x2e
 800b344:	d10c      	bne.n	800b360 <_svfiprintf_r+0x130>
 800b346:	7863      	ldrb	r3, [r4, #1]
 800b348:	2b2a      	cmp	r3, #42	; 0x2a
 800b34a:	d135      	bne.n	800b3b8 <_svfiprintf_r+0x188>
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	1d1a      	adds	r2, r3, #4
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	9203      	str	r2, [sp, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	bfb8      	it	lt
 800b358:	f04f 33ff 	movlt.w	r3, #4294967295
 800b35c:	3402      	adds	r4, #2
 800b35e:	9305      	str	r3, [sp, #20]
 800b360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b42c <_svfiprintf_r+0x1fc>
 800b364:	7821      	ldrb	r1, [r4, #0]
 800b366:	2203      	movs	r2, #3
 800b368:	4650      	mov	r0, sl
 800b36a:	f7f4 ff39 	bl	80001e0 <memchr>
 800b36e:	b140      	cbz	r0, 800b382 <_svfiprintf_r+0x152>
 800b370:	2340      	movs	r3, #64	; 0x40
 800b372:	eba0 000a 	sub.w	r0, r0, sl
 800b376:	fa03 f000 	lsl.w	r0, r3, r0
 800b37a:	9b04      	ldr	r3, [sp, #16]
 800b37c:	4303      	orrs	r3, r0
 800b37e:	3401      	adds	r4, #1
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b386:	4826      	ldr	r0, [pc, #152]	; (800b420 <_svfiprintf_r+0x1f0>)
 800b388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b38c:	2206      	movs	r2, #6
 800b38e:	f7f4 ff27 	bl	80001e0 <memchr>
 800b392:	2800      	cmp	r0, #0
 800b394:	d038      	beq.n	800b408 <_svfiprintf_r+0x1d8>
 800b396:	4b23      	ldr	r3, [pc, #140]	; (800b424 <_svfiprintf_r+0x1f4>)
 800b398:	bb1b      	cbnz	r3, 800b3e2 <_svfiprintf_r+0x1b2>
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	3307      	adds	r3, #7
 800b39e:	f023 0307 	bic.w	r3, r3, #7
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	9303      	str	r3, [sp, #12]
 800b3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a8:	4433      	add	r3, r6
 800b3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ac:	e767      	b.n	800b27e <_svfiprintf_r+0x4e>
 800b3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	e7a5      	b.n	800b304 <_svfiprintf_r+0xd4>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	3401      	adds	r4, #1
 800b3bc:	9305      	str	r3, [sp, #20]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	f04f 0c0a 	mov.w	ip, #10
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ca:	3a30      	subs	r2, #48	; 0x30
 800b3cc:	2a09      	cmp	r2, #9
 800b3ce:	d903      	bls.n	800b3d8 <_svfiprintf_r+0x1a8>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0c5      	beq.n	800b360 <_svfiprintf_r+0x130>
 800b3d4:	9105      	str	r1, [sp, #20]
 800b3d6:	e7c3      	b.n	800b360 <_svfiprintf_r+0x130>
 800b3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3dc:	4604      	mov	r4, r0
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e7f0      	b.n	800b3c4 <_svfiprintf_r+0x194>
 800b3e2:	ab03      	add	r3, sp, #12
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <_svfiprintf_r+0x1f8>)
 800b3ea:	a904      	add	r1, sp, #16
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7fc fa87 	bl	8007900 <_printf_float>
 800b3f2:	1c42      	adds	r2, r0, #1
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	d1d6      	bne.n	800b3a6 <_svfiprintf_r+0x176>
 800b3f8:	89ab      	ldrh	r3, [r5, #12]
 800b3fa:	065b      	lsls	r3, r3, #25
 800b3fc:	f53f af2c 	bmi.w	800b258 <_svfiprintf_r+0x28>
 800b400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b402:	b01d      	add	sp, #116	; 0x74
 800b404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b408:	ab03      	add	r3, sp, #12
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	462a      	mov	r2, r5
 800b40e:	4b06      	ldr	r3, [pc, #24]	; (800b428 <_svfiprintf_r+0x1f8>)
 800b410:	a904      	add	r1, sp, #16
 800b412:	4638      	mov	r0, r7
 800b414:	f7fc fd18 	bl	8007e48 <_printf_i>
 800b418:	e7eb      	b.n	800b3f2 <_svfiprintf_r+0x1c2>
 800b41a:	bf00      	nop
 800b41c:	0800d93c 	.word	0x0800d93c
 800b420:	0800d946 	.word	0x0800d946
 800b424:	08007901 	.word	0x08007901
 800b428:	0800b179 	.word	0x0800b179
 800b42c:	0800d942 	.word	0x0800d942

0800b430 <nan>:
 800b430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b438 <nan+0x8>
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	00000000 	.word	0x00000000
 800b43c:	7ff80000 	.word	0x7ff80000

0800b440 <_sbrk_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d06      	ldr	r5, [pc, #24]	; (800b45c <_sbrk_r+0x1c>)
 800b444:	2300      	movs	r3, #0
 800b446:	4604      	mov	r4, r0
 800b448:	4608      	mov	r0, r1
 800b44a:	602b      	str	r3, [r5, #0]
 800b44c:	f7f6 ff38 	bl	80022c0 <_sbrk>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_sbrk_r+0x1a>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_sbrk_r+0x1a>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20001100 	.word	0x20001100

0800b460 <strncmp>:
 800b460:	b510      	push	{r4, lr}
 800b462:	b16a      	cbz	r2, 800b480 <strncmp+0x20>
 800b464:	3901      	subs	r1, #1
 800b466:	1884      	adds	r4, r0, r2
 800b468:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b46c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b470:	4293      	cmp	r3, r2
 800b472:	d103      	bne.n	800b47c <strncmp+0x1c>
 800b474:	42a0      	cmp	r0, r4
 800b476:	d001      	beq.n	800b47c <strncmp+0x1c>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1f5      	bne.n	800b468 <strncmp+0x8>
 800b47c:	1a98      	subs	r0, r3, r2
 800b47e:	bd10      	pop	{r4, pc}
 800b480:	4610      	mov	r0, r2
 800b482:	e7fc      	b.n	800b47e <strncmp+0x1e>

0800b484 <__ascii_wctomb>:
 800b484:	b149      	cbz	r1, 800b49a <__ascii_wctomb+0x16>
 800b486:	2aff      	cmp	r2, #255	; 0xff
 800b488:	bf85      	ittet	hi
 800b48a:	238a      	movhi	r3, #138	; 0x8a
 800b48c:	6003      	strhi	r3, [r0, #0]
 800b48e:	700a      	strbls	r2, [r1, #0]
 800b490:	f04f 30ff 	movhi.w	r0, #4294967295
 800b494:	bf98      	it	ls
 800b496:	2001      	movls	r0, #1
 800b498:	4770      	bx	lr
 800b49a:	4608      	mov	r0, r1
 800b49c:	4770      	bx	lr
	...

0800b4a0 <__assert_func>:
 800b4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <__assert_func+0x2c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	68d8      	ldr	r0, [r3, #12]
 800b4ae:	b14c      	cbz	r4, 800b4c4 <__assert_func+0x24>
 800b4b0:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <__assert_func+0x30>)
 800b4b2:	9100      	str	r1, [sp, #0]
 800b4b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4b8:	4906      	ldr	r1, [pc, #24]	; (800b4d4 <__assert_func+0x34>)
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f000 f80e 	bl	800b4dc <fiprintf>
 800b4c0:	f000 fa84 	bl	800b9cc <abort>
 800b4c4:	4b04      	ldr	r3, [pc, #16]	; (800b4d8 <__assert_func+0x38>)
 800b4c6:	461c      	mov	r4, r3
 800b4c8:	e7f3      	b.n	800b4b2 <__assert_func+0x12>
 800b4ca:	bf00      	nop
 800b4cc:	20000140 	.word	0x20000140
 800b4d0:	0800d94d 	.word	0x0800d94d
 800b4d4:	0800d95a 	.word	0x0800d95a
 800b4d8:	0800d988 	.word	0x0800d988

0800b4dc <fiprintf>:
 800b4dc:	b40e      	push	{r1, r2, r3}
 800b4de:	b503      	push	{r0, r1, lr}
 800b4e0:	4601      	mov	r1, r0
 800b4e2:	ab03      	add	r3, sp, #12
 800b4e4:	4805      	ldr	r0, [pc, #20]	; (800b4fc <fiprintf+0x20>)
 800b4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ea:	6800      	ldr	r0, [r0, #0]
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	f000 f87d 	bl	800b5ec <_vfiprintf_r>
 800b4f2:	b002      	add	sp, #8
 800b4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4f8:	b003      	add	sp, #12
 800b4fa:	4770      	bx	lr
 800b4fc:	20000140 	.word	0x20000140

0800b500 <memmove>:
 800b500:	4288      	cmp	r0, r1
 800b502:	b510      	push	{r4, lr}
 800b504:	eb01 0402 	add.w	r4, r1, r2
 800b508:	d902      	bls.n	800b510 <memmove+0x10>
 800b50a:	4284      	cmp	r4, r0
 800b50c:	4623      	mov	r3, r4
 800b50e:	d807      	bhi.n	800b520 <memmove+0x20>
 800b510:	1e43      	subs	r3, r0, #1
 800b512:	42a1      	cmp	r1, r4
 800b514:	d008      	beq.n	800b528 <memmove+0x28>
 800b516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b51a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b51e:	e7f8      	b.n	800b512 <memmove+0x12>
 800b520:	4402      	add	r2, r0
 800b522:	4601      	mov	r1, r0
 800b524:	428a      	cmp	r2, r1
 800b526:	d100      	bne.n	800b52a <memmove+0x2a>
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b52e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b532:	e7f7      	b.n	800b524 <memmove+0x24>

0800b534 <__malloc_lock>:
 800b534:	4801      	ldr	r0, [pc, #4]	; (800b53c <__malloc_lock+0x8>)
 800b536:	f000 bc09 	b.w	800bd4c <__retarget_lock_acquire_recursive>
 800b53a:	bf00      	nop
 800b53c:	20001108 	.word	0x20001108

0800b540 <__malloc_unlock>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__malloc_unlock+0x8>)
 800b542:	f000 bc04 	b.w	800bd4e <__retarget_lock_release_recursive>
 800b546:	bf00      	nop
 800b548:	20001108 	.word	0x20001108

0800b54c <_realloc_r>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	4607      	mov	r7, r0
 800b550:	4614      	mov	r4, r2
 800b552:	460e      	mov	r6, r1
 800b554:	b921      	cbnz	r1, 800b560 <_realloc_r+0x14>
 800b556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b55a:	4611      	mov	r1, r2
 800b55c:	f7ff bdb2 	b.w	800b0c4 <_malloc_r>
 800b560:	b922      	cbnz	r2, 800b56c <_realloc_r+0x20>
 800b562:	f7ff fd5f 	bl	800b024 <_free_r>
 800b566:	4625      	mov	r5, r4
 800b568:	4628      	mov	r0, r5
 800b56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b56c:	f000 fc54 	bl	800be18 <_malloc_usable_size_r>
 800b570:	42a0      	cmp	r0, r4
 800b572:	d20f      	bcs.n	800b594 <_realloc_r+0x48>
 800b574:	4621      	mov	r1, r4
 800b576:	4638      	mov	r0, r7
 800b578:	f7ff fda4 	bl	800b0c4 <_malloc_r>
 800b57c:	4605      	mov	r5, r0
 800b57e:	2800      	cmp	r0, #0
 800b580:	d0f2      	beq.n	800b568 <_realloc_r+0x1c>
 800b582:	4631      	mov	r1, r6
 800b584:	4622      	mov	r2, r4
 800b586:	f7ff f875 	bl	800a674 <memcpy>
 800b58a:	4631      	mov	r1, r6
 800b58c:	4638      	mov	r0, r7
 800b58e:	f7ff fd49 	bl	800b024 <_free_r>
 800b592:	e7e9      	b.n	800b568 <_realloc_r+0x1c>
 800b594:	4635      	mov	r5, r6
 800b596:	e7e7      	b.n	800b568 <_realloc_r+0x1c>

0800b598 <__sfputc_r>:
 800b598:	6893      	ldr	r3, [r2, #8]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	b410      	push	{r4}
 800b5a0:	6093      	str	r3, [r2, #8]
 800b5a2:	da08      	bge.n	800b5b6 <__sfputc_r+0x1e>
 800b5a4:	6994      	ldr	r4, [r2, #24]
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	db01      	blt.n	800b5ae <__sfputc_r+0x16>
 800b5aa:	290a      	cmp	r1, #10
 800b5ac:	d103      	bne.n	800b5b6 <__sfputc_r+0x1e>
 800b5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b2:	f000 b94b 	b.w	800b84c <__swbuf_r>
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	1c58      	adds	r0, r3, #1
 800b5ba:	6010      	str	r0, [r2, #0]
 800b5bc:	7019      	strb	r1, [r3, #0]
 800b5be:	4608      	mov	r0, r1
 800b5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <__sfputs_r>:
 800b5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	460f      	mov	r7, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	18d5      	adds	r5, r2, r3
 800b5d0:	42ac      	cmp	r4, r5
 800b5d2:	d101      	bne.n	800b5d8 <__sfputs_r+0x12>
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	e007      	b.n	800b5e8 <__sfputs_r+0x22>
 800b5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5dc:	463a      	mov	r2, r7
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f7ff ffda 	bl	800b598 <__sfputc_r>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d1f3      	bne.n	800b5d0 <__sfputs_r+0xa>
 800b5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5ec <_vfiprintf_r>:
 800b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	b09d      	sub	sp, #116	; 0x74
 800b5f4:	4614      	mov	r4, r2
 800b5f6:	4698      	mov	r8, r3
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	b118      	cbz	r0, 800b604 <_vfiprintf_r+0x18>
 800b5fc:	6983      	ldr	r3, [r0, #24]
 800b5fe:	b90b      	cbnz	r3, 800b604 <_vfiprintf_r+0x18>
 800b600:	f000 fb06 	bl	800bc10 <__sinit>
 800b604:	4b89      	ldr	r3, [pc, #548]	; (800b82c <_vfiprintf_r+0x240>)
 800b606:	429d      	cmp	r5, r3
 800b608:	d11b      	bne.n	800b642 <_vfiprintf_r+0x56>
 800b60a:	6875      	ldr	r5, [r6, #4]
 800b60c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b60e:	07d9      	lsls	r1, r3, #31
 800b610:	d405      	bmi.n	800b61e <_vfiprintf_r+0x32>
 800b612:	89ab      	ldrh	r3, [r5, #12]
 800b614:	059a      	lsls	r2, r3, #22
 800b616:	d402      	bmi.n	800b61e <_vfiprintf_r+0x32>
 800b618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b61a:	f000 fb97 	bl	800bd4c <__retarget_lock_acquire_recursive>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	071b      	lsls	r3, r3, #28
 800b622:	d501      	bpl.n	800b628 <_vfiprintf_r+0x3c>
 800b624:	692b      	ldr	r3, [r5, #16]
 800b626:	b9eb      	cbnz	r3, 800b664 <_vfiprintf_r+0x78>
 800b628:	4629      	mov	r1, r5
 800b62a:	4630      	mov	r0, r6
 800b62c:	f000 f960 	bl	800b8f0 <__swsetup_r>
 800b630:	b1c0      	cbz	r0, 800b664 <_vfiprintf_r+0x78>
 800b632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b634:	07dc      	lsls	r4, r3, #31
 800b636:	d50e      	bpl.n	800b656 <_vfiprintf_r+0x6a>
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	b01d      	add	sp, #116	; 0x74
 800b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b642:	4b7b      	ldr	r3, [pc, #492]	; (800b830 <_vfiprintf_r+0x244>)
 800b644:	429d      	cmp	r5, r3
 800b646:	d101      	bne.n	800b64c <_vfiprintf_r+0x60>
 800b648:	68b5      	ldr	r5, [r6, #8]
 800b64a:	e7df      	b.n	800b60c <_vfiprintf_r+0x20>
 800b64c:	4b79      	ldr	r3, [pc, #484]	; (800b834 <_vfiprintf_r+0x248>)
 800b64e:	429d      	cmp	r5, r3
 800b650:	bf08      	it	eq
 800b652:	68f5      	ldreq	r5, [r6, #12]
 800b654:	e7da      	b.n	800b60c <_vfiprintf_r+0x20>
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	0598      	lsls	r0, r3, #22
 800b65a:	d4ed      	bmi.n	800b638 <_vfiprintf_r+0x4c>
 800b65c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b65e:	f000 fb76 	bl	800bd4e <__retarget_lock_release_recursive>
 800b662:	e7e9      	b.n	800b638 <_vfiprintf_r+0x4c>
 800b664:	2300      	movs	r3, #0
 800b666:	9309      	str	r3, [sp, #36]	; 0x24
 800b668:	2320      	movs	r3, #32
 800b66a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b66e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b672:	2330      	movs	r3, #48	; 0x30
 800b674:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b838 <_vfiprintf_r+0x24c>
 800b678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b67c:	f04f 0901 	mov.w	r9, #1
 800b680:	4623      	mov	r3, r4
 800b682:	469a      	mov	sl, r3
 800b684:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b688:	b10a      	cbz	r2, 800b68e <_vfiprintf_r+0xa2>
 800b68a:	2a25      	cmp	r2, #37	; 0x25
 800b68c:	d1f9      	bne.n	800b682 <_vfiprintf_r+0x96>
 800b68e:	ebba 0b04 	subs.w	fp, sl, r4
 800b692:	d00b      	beq.n	800b6ac <_vfiprintf_r+0xc0>
 800b694:	465b      	mov	r3, fp
 800b696:	4622      	mov	r2, r4
 800b698:	4629      	mov	r1, r5
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7ff ff93 	bl	800b5c6 <__sfputs_r>
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	f000 80aa 	beq.w	800b7fa <_vfiprintf_r+0x20e>
 800b6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a8:	445a      	add	r2, fp
 800b6aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 80a2 	beq.w	800b7fa <_vfiprintf_r+0x20e>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c0:	f10a 0a01 	add.w	sl, sl, #1
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	9307      	str	r3, [sp, #28]
 800b6c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ce:	4654      	mov	r4, sl
 800b6d0:	2205      	movs	r2, #5
 800b6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d6:	4858      	ldr	r0, [pc, #352]	; (800b838 <_vfiprintf_r+0x24c>)
 800b6d8:	f7f4 fd82 	bl	80001e0 <memchr>
 800b6dc:	9a04      	ldr	r2, [sp, #16]
 800b6de:	b9d8      	cbnz	r0, 800b718 <_vfiprintf_r+0x12c>
 800b6e0:	06d1      	lsls	r1, r2, #27
 800b6e2:	bf44      	itt	mi
 800b6e4:	2320      	movmi	r3, #32
 800b6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ea:	0713      	lsls	r3, r2, #28
 800b6ec:	bf44      	itt	mi
 800b6ee:	232b      	movmi	r3, #43	; 0x2b
 800b6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6fa:	d015      	beq.n	800b728 <_vfiprintf_r+0x13c>
 800b6fc:	9a07      	ldr	r2, [sp, #28]
 800b6fe:	4654      	mov	r4, sl
 800b700:	2000      	movs	r0, #0
 800b702:	f04f 0c0a 	mov.w	ip, #10
 800b706:	4621      	mov	r1, r4
 800b708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b70c:	3b30      	subs	r3, #48	; 0x30
 800b70e:	2b09      	cmp	r3, #9
 800b710:	d94e      	bls.n	800b7b0 <_vfiprintf_r+0x1c4>
 800b712:	b1b0      	cbz	r0, 800b742 <_vfiprintf_r+0x156>
 800b714:	9207      	str	r2, [sp, #28]
 800b716:	e014      	b.n	800b742 <_vfiprintf_r+0x156>
 800b718:	eba0 0308 	sub.w	r3, r0, r8
 800b71c:	fa09 f303 	lsl.w	r3, r9, r3
 800b720:	4313      	orrs	r3, r2
 800b722:	9304      	str	r3, [sp, #16]
 800b724:	46a2      	mov	sl, r4
 800b726:	e7d2      	b.n	800b6ce <_vfiprintf_r+0xe2>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	1d19      	adds	r1, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	9103      	str	r1, [sp, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfbb      	ittet	lt
 800b734:	425b      	neglt	r3, r3
 800b736:	f042 0202 	orrlt.w	r2, r2, #2
 800b73a:	9307      	strge	r3, [sp, #28]
 800b73c:	9307      	strlt	r3, [sp, #28]
 800b73e:	bfb8      	it	lt
 800b740:	9204      	strlt	r2, [sp, #16]
 800b742:	7823      	ldrb	r3, [r4, #0]
 800b744:	2b2e      	cmp	r3, #46	; 0x2e
 800b746:	d10c      	bne.n	800b762 <_vfiprintf_r+0x176>
 800b748:	7863      	ldrb	r3, [r4, #1]
 800b74a:	2b2a      	cmp	r3, #42	; 0x2a
 800b74c:	d135      	bne.n	800b7ba <_vfiprintf_r+0x1ce>
 800b74e:	9b03      	ldr	r3, [sp, #12]
 800b750:	1d1a      	adds	r2, r3, #4
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	9203      	str	r2, [sp, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	bfb8      	it	lt
 800b75a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b75e:	3402      	adds	r4, #2
 800b760:	9305      	str	r3, [sp, #20]
 800b762:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b848 <_vfiprintf_r+0x25c>
 800b766:	7821      	ldrb	r1, [r4, #0]
 800b768:	2203      	movs	r2, #3
 800b76a:	4650      	mov	r0, sl
 800b76c:	f7f4 fd38 	bl	80001e0 <memchr>
 800b770:	b140      	cbz	r0, 800b784 <_vfiprintf_r+0x198>
 800b772:	2340      	movs	r3, #64	; 0x40
 800b774:	eba0 000a 	sub.w	r0, r0, sl
 800b778:	fa03 f000 	lsl.w	r0, r3, r0
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	4303      	orrs	r3, r0
 800b780:	3401      	adds	r4, #1
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b788:	482c      	ldr	r0, [pc, #176]	; (800b83c <_vfiprintf_r+0x250>)
 800b78a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b78e:	2206      	movs	r2, #6
 800b790:	f7f4 fd26 	bl	80001e0 <memchr>
 800b794:	2800      	cmp	r0, #0
 800b796:	d03f      	beq.n	800b818 <_vfiprintf_r+0x22c>
 800b798:	4b29      	ldr	r3, [pc, #164]	; (800b840 <_vfiprintf_r+0x254>)
 800b79a:	bb1b      	cbnz	r3, 800b7e4 <_vfiprintf_r+0x1f8>
 800b79c:	9b03      	ldr	r3, [sp, #12]
 800b79e:	3307      	adds	r3, #7
 800b7a0:	f023 0307 	bic.w	r3, r3, #7
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	9303      	str	r3, [sp, #12]
 800b7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7aa:	443b      	add	r3, r7
 800b7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ae:	e767      	b.n	800b680 <_vfiprintf_r+0x94>
 800b7b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	2001      	movs	r0, #1
 800b7b8:	e7a5      	b.n	800b706 <_vfiprintf_r+0x11a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	3401      	adds	r4, #1
 800b7be:	9305      	str	r3, [sp, #20]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f04f 0c0a 	mov.w	ip, #10
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7cc:	3a30      	subs	r2, #48	; 0x30
 800b7ce:	2a09      	cmp	r2, #9
 800b7d0:	d903      	bls.n	800b7da <_vfiprintf_r+0x1ee>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d0c5      	beq.n	800b762 <_vfiprintf_r+0x176>
 800b7d6:	9105      	str	r1, [sp, #20]
 800b7d8:	e7c3      	b.n	800b762 <_vfiprintf_r+0x176>
 800b7da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7de:	4604      	mov	r4, r0
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e7f0      	b.n	800b7c6 <_vfiprintf_r+0x1da>
 800b7e4:	ab03      	add	r3, sp, #12
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	462a      	mov	r2, r5
 800b7ea:	4b16      	ldr	r3, [pc, #88]	; (800b844 <_vfiprintf_r+0x258>)
 800b7ec:	a904      	add	r1, sp, #16
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7fc f886 	bl	8007900 <_printf_float>
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	1c78      	adds	r0, r7, #1
 800b7f8:	d1d6      	bne.n	800b7a8 <_vfiprintf_r+0x1bc>
 800b7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7fc:	07d9      	lsls	r1, r3, #31
 800b7fe:	d405      	bmi.n	800b80c <_vfiprintf_r+0x220>
 800b800:	89ab      	ldrh	r3, [r5, #12]
 800b802:	059a      	lsls	r2, r3, #22
 800b804:	d402      	bmi.n	800b80c <_vfiprintf_r+0x220>
 800b806:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b808:	f000 faa1 	bl	800bd4e <__retarget_lock_release_recursive>
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	065b      	lsls	r3, r3, #25
 800b810:	f53f af12 	bmi.w	800b638 <_vfiprintf_r+0x4c>
 800b814:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b816:	e711      	b.n	800b63c <_vfiprintf_r+0x50>
 800b818:	ab03      	add	r3, sp, #12
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	462a      	mov	r2, r5
 800b81e:	4b09      	ldr	r3, [pc, #36]	; (800b844 <_vfiprintf_r+0x258>)
 800b820:	a904      	add	r1, sp, #16
 800b822:	4630      	mov	r0, r6
 800b824:	f7fc fb10 	bl	8007e48 <_printf_i>
 800b828:	e7e4      	b.n	800b7f4 <_vfiprintf_r+0x208>
 800b82a:	bf00      	nop
 800b82c:	0800d9ac 	.word	0x0800d9ac
 800b830:	0800d9cc 	.word	0x0800d9cc
 800b834:	0800d98c 	.word	0x0800d98c
 800b838:	0800d93c 	.word	0x0800d93c
 800b83c:	0800d946 	.word	0x0800d946
 800b840:	08007901 	.word	0x08007901
 800b844:	0800b5c7 	.word	0x0800b5c7
 800b848:	0800d942 	.word	0x0800d942

0800b84c <__swbuf_r>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	460e      	mov	r6, r1
 800b850:	4614      	mov	r4, r2
 800b852:	4605      	mov	r5, r0
 800b854:	b118      	cbz	r0, 800b85e <__swbuf_r+0x12>
 800b856:	6983      	ldr	r3, [r0, #24]
 800b858:	b90b      	cbnz	r3, 800b85e <__swbuf_r+0x12>
 800b85a:	f000 f9d9 	bl	800bc10 <__sinit>
 800b85e:	4b21      	ldr	r3, [pc, #132]	; (800b8e4 <__swbuf_r+0x98>)
 800b860:	429c      	cmp	r4, r3
 800b862:	d12b      	bne.n	800b8bc <__swbuf_r+0x70>
 800b864:	686c      	ldr	r4, [r5, #4]
 800b866:	69a3      	ldr	r3, [r4, #24]
 800b868:	60a3      	str	r3, [r4, #8]
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	071a      	lsls	r2, r3, #28
 800b86e:	d52f      	bpl.n	800b8d0 <__swbuf_r+0x84>
 800b870:	6923      	ldr	r3, [r4, #16]
 800b872:	b36b      	cbz	r3, 800b8d0 <__swbuf_r+0x84>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	6820      	ldr	r0, [r4, #0]
 800b878:	1ac0      	subs	r0, r0, r3
 800b87a:	6963      	ldr	r3, [r4, #20]
 800b87c:	b2f6      	uxtb	r6, r6
 800b87e:	4283      	cmp	r3, r0
 800b880:	4637      	mov	r7, r6
 800b882:	dc04      	bgt.n	800b88e <__swbuf_r+0x42>
 800b884:	4621      	mov	r1, r4
 800b886:	4628      	mov	r0, r5
 800b888:	f000 f92e 	bl	800bae8 <_fflush_r>
 800b88c:	bb30      	cbnz	r0, 800b8dc <__swbuf_r+0x90>
 800b88e:	68a3      	ldr	r3, [r4, #8]
 800b890:	3b01      	subs	r3, #1
 800b892:	60a3      	str	r3, [r4, #8]
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	1c5a      	adds	r2, r3, #1
 800b898:	6022      	str	r2, [r4, #0]
 800b89a:	701e      	strb	r6, [r3, #0]
 800b89c:	6963      	ldr	r3, [r4, #20]
 800b89e:	3001      	adds	r0, #1
 800b8a0:	4283      	cmp	r3, r0
 800b8a2:	d004      	beq.n	800b8ae <__swbuf_r+0x62>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	07db      	lsls	r3, r3, #31
 800b8a8:	d506      	bpl.n	800b8b8 <__swbuf_r+0x6c>
 800b8aa:	2e0a      	cmp	r6, #10
 800b8ac:	d104      	bne.n	800b8b8 <__swbuf_r+0x6c>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f000 f919 	bl	800bae8 <_fflush_r>
 800b8b6:	b988      	cbnz	r0, 800b8dc <__swbuf_r+0x90>
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <__swbuf_r+0x9c>)
 800b8be:	429c      	cmp	r4, r3
 800b8c0:	d101      	bne.n	800b8c6 <__swbuf_r+0x7a>
 800b8c2:	68ac      	ldr	r4, [r5, #8]
 800b8c4:	e7cf      	b.n	800b866 <__swbuf_r+0x1a>
 800b8c6:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <__swbuf_r+0xa0>)
 800b8c8:	429c      	cmp	r4, r3
 800b8ca:	bf08      	it	eq
 800b8cc:	68ec      	ldreq	r4, [r5, #12]
 800b8ce:	e7ca      	b.n	800b866 <__swbuf_r+0x1a>
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f000 f80c 	bl	800b8f0 <__swsetup_r>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d0cb      	beq.n	800b874 <__swbuf_r+0x28>
 800b8dc:	f04f 37ff 	mov.w	r7, #4294967295
 800b8e0:	e7ea      	b.n	800b8b8 <__swbuf_r+0x6c>
 800b8e2:	bf00      	nop
 800b8e4:	0800d9ac 	.word	0x0800d9ac
 800b8e8:	0800d9cc 	.word	0x0800d9cc
 800b8ec:	0800d98c 	.word	0x0800d98c

0800b8f0 <__swsetup_r>:
 800b8f0:	4b32      	ldr	r3, [pc, #200]	; (800b9bc <__swsetup_r+0xcc>)
 800b8f2:	b570      	push	{r4, r5, r6, lr}
 800b8f4:	681d      	ldr	r5, [r3, #0]
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	b125      	cbz	r5, 800b906 <__swsetup_r+0x16>
 800b8fc:	69ab      	ldr	r3, [r5, #24]
 800b8fe:	b913      	cbnz	r3, 800b906 <__swsetup_r+0x16>
 800b900:	4628      	mov	r0, r5
 800b902:	f000 f985 	bl	800bc10 <__sinit>
 800b906:	4b2e      	ldr	r3, [pc, #184]	; (800b9c0 <__swsetup_r+0xd0>)
 800b908:	429c      	cmp	r4, r3
 800b90a:	d10f      	bne.n	800b92c <__swsetup_r+0x3c>
 800b90c:	686c      	ldr	r4, [r5, #4]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b914:	0719      	lsls	r1, r3, #28
 800b916:	d42c      	bmi.n	800b972 <__swsetup_r+0x82>
 800b918:	06dd      	lsls	r5, r3, #27
 800b91a:	d411      	bmi.n	800b940 <__swsetup_r+0x50>
 800b91c:	2309      	movs	r3, #9
 800b91e:	6033      	str	r3, [r6, #0]
 800b920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	f04f 30ff 	mov.w	r0, #4294967295
 800b92a:	e03e      	b.n	800b9aa <__swsetup_r+0xba>
 800b92c:	4b25      	ldr	r3, [pc, #148]	; (800b9c4 <__swsetup_r+0xd4>)
 800b92e:	429c      	cmp	r4, r3
 800b930:	d101      	bne.n	800b936 <__swsetup_r+0x46>
 800b932:	68ac      	ldr	r4, [r5, #8]
 800b934:	e7eb      	b.n	800b90e <__swsetup_r+0x1e>
 800b936:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <__swsetup_r+0xd8>)
 800b938:	429c      	cmp	r4, r3
 800b93a:	bf08      	it	eq
 800b93c:	68ec      	ldreq	r4, [r5, #12]
 800b93e:	e7e6      	b.n	800b90e <__swsetup_r+0x1e>
 800b940:	0758      	lsls	r0, r3, #29
 800b942:	d512      	bpl.n	800b96a <__swsetup_r+0x7a>
 800b944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b946:	b141      	cbz	r1, 800b95a <__swsetup_r+0x6a>
 800b948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b94c:	4299      	cmp	r1, r3
 800b94e:	d002      	beq.n	800b956 <__swsetup_r+0x66>
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff fb67 	bl	800b024 <_free_r>
 800b956:	2300      	movs	r3, #0
 800b958:	6363      	str	r3, [r4, #52]	; 0x34
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	2300      	movs	r3, #0
 800b964:	6063      	str	r3, [r4, #4]
 800b966:	6923      	ldr	r3, [r4, #16]
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	f043 0308 	orr.w	r3, r3, #8
 800b970:	81a3      	strh	r3, [r4, #12]
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	b94b      	cbnz	r3, 800b98a <__swsetup_r+0x9a>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b97c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b980:	d003      	beq.n	800b98a <__swsetup_r+0x9a>
 800b982:	4621      	mov	r1, r4
 800b984:	4630      	mov	r0, r6
 800b986:	f000 fa07 	bl	800bd98 <__smakebuf_r>
 800b98a:	89a0      	ldrh	r0, [r4, #12]
 800b98c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b990:	f010 0301 	ands.w	r3, r0, #1
 800b994:	d00a      	beq.n	800b9ac <__swsetup_r+0xbc>
 800b996:	2300      	movs	r3, #0
 800b998:	60a3      	str	r3, [r4, #8]
 800b99a:	6963      	ldr	r3, [r4, #20]
 800b99c:	425b      	negs	r3, r3
 800b99e:	61a3      	str	r3, [r4, #24]
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	b943      	cbnz	r3, 800b9b6 <__swsetup_r+0xc6>
 800b9a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9a8:	d1ba      	bne.n	800b920 <__swsetup_r+0x30>
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	0781      	lsls	r1, r0, #30
 800b9ae:	bf58      	it	pl
 800b9b0:	6963      	ldrpl	r3, [r4, #20]
 800b9b2:	60a3      	str	r3, [r4, #8]
 800b9b4:	e7f4      	b.n	800b9a0 <__swsetup_r+0xb0>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e7f7      	b.n	800b9aa <__swsetup_r+0xba>
 800b9ba:	bf00      	nop
 800b9bc:	20000140 	.word	0x20000140
 800b9c0:	0800d9ac 	.word	0x0800d9ac
 800b9c4:	0800d9cc 	.word	0x0800d9cc
 800b9c8:	0800d98c 	.word	0x0800d98c

0800b9cc <abort>:
 800b9cc:	b508      	push	{r3, lr}
 800b9ce:	2006      	movs	r0, #6
 800b9d0:	f000 fa52 	bl	800be78 <raise>
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	f7f6 fbfb 	bl	80021d0 <_exit>
	...

0800b9dc <__sflush_r>:
 800b9dc:	898a      	ldrh	r2, [r1, #12]
 800b9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	0710      	lsls	r0, r2, #28
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	d458      	bmi.n	800ba9c <__sflush_r+0xc0>
 800b9ea:	684b      	ldr	r3, [r1, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	dc05      	bgt.n	800b9fc <__sflush_r+0x20>
 800b9f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	dc02      	bgt.n	800b9fc <__sflush_r+0x20>
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9fe:	2e00      	cmp	r6, #0
 800ba00:	d0f9      	beq.n	800b9f6 <__sflush_r+0x1a>
 800ba02:	2300      	movs	r3, #0
 800ba04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba08:	682f      	ldr	r7, [r5, #0]
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	d032      	beq.n	800ba74 <__sflush_r+0x98>
 800ba0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	075a      	lsls	r2, r3, #29
 800ba14:	d505      	bpl.n	800ba22 <__sflush_r+0x46>
 800ba16:	6863      	ldr	r3, [r4, #4]
 800ba18:	1ac0      	subs	r0, r0, r3
 800ba1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba1c:	b10b      	cbz	r3, 800ba22 <__sflush_r+0x46>
 800ba1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba20:	1ac0      	subs	r0, r0, r3
 800ba22:	2300      	movs	r3, #0
 800ba24:	4602      	mov	r2, r0
 800ba26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba28:	6a21      	ldr	r1, [r4, #32]
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	47b0      	blx	r6
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	d106      	bne.n	800ba42 <__sflush_r+0x66>
 800ba34:	6829      	ldr	r1, [r5, #0]
 800ba36:	291d      	cmp	r1, #29
 800ba38:	d82c      	bhi.n	800ba94 <__sflush_r+0xb8>
 800ba3a:	4a2a      	ldr	r2, [pc, #168]	; (800bae4 <__sflush_r+0x108>)
 800ba3c:	40ca      	lsrs	r2, r1
 800ba3e:	07d6      	lsls	r6, r2, #31
 800ba40:	d528      	bpl.n	800ba94 <__sflush_r+0xb8>
 800ba42:	2200      	movs	r2, #0
 800ba44:	6062      	str	r2, [r4, #4]
 800ba46:	04d9      	lsls	r1, r3, #19
 800ba48:	6922      	ldr	r2, [r4, #16]
 800ba4a:	6022      	str	r2, [r4, #0]
 800ba4c:	d504      	bpl.n	800ba58 <__sflush_r+0x7c>
 800ba4e:	1c42      	adds	r2, r0, #1
 800ba50:	d101      	bne.n	800ba56 <__sflush_r+0x7a>
 800ba52:	682b      	ldr	r3, [r5, #0]
 800ba54:	b903      	cbnz	r3, 800ba58 <__sflush_r+0x7c>
 800ba56:	6560      	str	r0, [r4, #84]	; 0x54
 800ba58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba5a:	602f      	str	r7, [r5, #0]
 800ba5c:	2900      	cmp	r1, #0
 800ba5e:	d0ca      	beq.n	800b9f6 <__sflush_r+0x1a>
 800ba60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba64:	4299      	cmp	r1, r3
 800ba66:	d002      	beq.n	800ba6e <__sflush_r+0x92>
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f7ff fadb 	bl	800b024 <_free_r>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	6360      	str	r0, [r4, #52]	; 0x34
 800ba72:	e7c1      	b.n	800b9f8 <__sflush_r+0x1c>
 800ba74:	6a21      	ldr	r1, [r4, #32]
 800ba76:	2301      	movs	r3, #1
 800ba78:	4628      	mov	r0, r5
 800ba7a:	47b0      	blx	r6
 800ba7c:	1c41      	adds	r1, r0, #1
 800ba7e:	d1c7      	bne.n	800ba10 <__sflush_r+0x34>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0c4      	beq.n	800ba10 <__sflush_r+0x34>
 800ba86:	2b1d      	cmp	r3, #29
 800ba88:	d001      	beq.n	800ba8e <__sflush_r+0xb2>
 800ba8a:	2b16      	cmp	r3, #22
 800ba8c:	d101      	bne.n	800ba92 <__sflush_r+0xb6>
 800ba8e:	602f      	str	r7, [r5, #0]
 800ba90:	e7b1      	b.n	800b9f6 <__sflush_r+0x1a>
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	e7ad      	b.n	800b9f8 <__sflush_r+0x1c>
 800ba9c:	690f      	ldr	r7, [r1, #16]
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	d0a9      	beq.n	800b9f6 <__sflush_r+0x1a>
 800baa2:	0793      	lsls	r3, r2, #30
 800baa4:	680e      	ldr	r6, [r1, #0]
 800baa6:	bf08      	it	eq
 800baa8:	694b      	ldreq	r3, [r1, #20]
 800baaa:	600f      	str	r7, [r1, #0]
 800baac:	bf18      	it	ne
 800baae:	2300      	movne	r3, #0
 800bab0:	eba6 0807 	sub.w	r8, r6, r7
 800bab4:	608b      	str	r3, [r1, #8]
 800bab6:	f1b8 0f00 	cmp.w	r8, #0
 800baba:	dd9c      	ble.n	800b9f6 <__sflush_r+0x1a>
 800babc:	6a21      	ldr	r1, [r4, #32]
 800babe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bac0:	4643      	mov	r3, r8
 800bac2:	463a      	mov	r2, r7
 800bac4:	4628      	mov	r0, r5
 800bac6:	47b0      	blx	r6
 800bac8:	2800      	cmp	r0, #0
 800baca:	dc06      	bgt.n	800bada <__sflush_r+0xfe>
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad2:	81a3      	strh	r3, [r4, #12]
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
 800bad8:	e78e      	b.n	800b9f8 <__sflush_r+0x1c>
 800bada:	4407      	add	r7, r0
 800badc:	eba8 0800 	sub.w	r8, r8, r0
 800bae0:	e7e9      	b.n	800bab6 <__sflush_r+0xda>
 800bae2:	bf00      	nop
 800bae4:	20400001 	.word	0x20400001

0800bae8 <_fflush_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	690b      	ldr	r3, [r1, #16]
 800baec:	4605      	mov	r5, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	b913      	cbnz	r3, 800baf8 <_fflush_r+0x10>
 800baf2:	2500      	movs	r5, #0
 800baf4:	4628      	mov	r0, r5
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	b118      	cbz	r0, 800bb02 <_fflush_r+0x1a>
 800bafa:	6983      	ldr	r3, [r0, #24]
 800bafc:	b90b      	cbnz	r3, 800bb02 <_fflush_r+0x1a>
 800bafe:	f000 f887 	bl	800bc10 <__sinit>
 800bb02:	4b14      	ldr	r3, [pc, #80]	; (800bb54 <_fflush_r+0x6c>)
 800bb04:	429c      	cmp	r4, r3
 800bb06:	d11b      	bne.n	800bb40 <_fflush_r+0x58>
 800bb08:	686c      	ldr	r4, [r5, #4]
 800bb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d0ef      	beq.n	800baf2 <_fflush_r+0xa>
 800bb12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb14:	07d0      	lsls	r0, r2, #31
 800bb16:	d404      	bmi.n	800bb22 <_fflush_r+0x3a>
 800bb18:	0599      	lsls	r1, r3, #22
 800bb1a:	d402      	bmi.n	800bb22 <_fflush_r+0x3a>
 800bb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb1e:	f000 f915 	bl	800bd4c <__retarget_lock_acquire_recursive>
 800bb22:	4628      	mov	r0, r5
 800bb24:	4621      	mov	r1, r4
 800bb26:	f7ff ff59 	bl	800b9dc <__sflush_r>
 800bb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb2c:	07da      	lsls	r2, r3, #31
 800bb2e:	4605      	mov	r5, r0
 800bb30:	d4e0      	bmi.n	800baf4 <_fflush_r+0xc>
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	059b      	lsls	r3, r3, #22
 800bb36:	d4dd      	bmi.n	800baf4 <_fflush_r+0xc>
 800bb38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb3a:	f000 f908 	bl	800bd4e <__retarget_lock_release_recursive>
 800bb3e:	e7d9      	b.n	800baf4 <_fflush_r+0xc>
 800bb40:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <_fflush_r+0x70>)
 800bb42:	429c      	cmp	r4, r3
 800bb44:	d101      	bne.n	800bb4a <_fflush_r+0x62>
 800bb46:	68ac      	ldr	r4, [r5, #8]
 800bb48:	e7df      	b.n	800bb0a <_fflush_r+0x22>
 800bb4a:	4b04      	ldr	r3, [pc, #16]	; (800bb5c <_fflush_r+0x74>)
 800bb4c:	429c      	cmp	r4, r3
 800bb4e:	bf08      	it	eq
 800bb50:	68ec      	ldreq	r4, [r5, #12]
 800bb52:	e7da      	b.n	800bb0a <_fflush_r+0x22>
 800bb54:	0800d9ac 	.word	0x0800d9ac
 800bb58:	0800d9cc 	.word	0x0800d9cc
 800bb5c:	0800d98c 	.word	0x0800d98c

0800bb60 <std>:
 800bb60:	2300      	movs	r3, #0
 800bb62:	b510      	push	{r4, lr}
 800bb64:	4604      	mov	r4, r0
 800bb66:	e9c0 3300 	strd	r3, r3, [r0]
 800bb6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb6e:	6083      	str	r3, [r0, #8]
 800bb70:	8181      	strh	r1, [r0, #12]
 800bb72:	6643      	str	r3, [r0, #100]	; 0x64
 800bb74:	81c2      	strh	r2, [r0, #14]
 800bb76:	6183      	str	r3, [r0, #24]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	305c      	adds	r0, #92	; 0x5c
 800bb7e:	f7fb fe17 	bl	80077b0 <memset>
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <std+0x38>)
 800bb84:	6263      	str	r3, [r4, #36]	; 0x24
 800bb86:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <std+0x3c>)
 800bb88:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <std+0x40>)
 800bb8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb8e:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <std+0x44>)
 800bb90:	6224      	str	r4, [r4, #32]
 800bb92:	6323      	str	r3, [r4, #48]	; 0x30
 800bb94:	bd10      	pop	{r4, pc}
 800bb96:	bf00      	nop
 800bb98:	0800beb1 	.word	0x0800beb1
 800bb9c:	0800bed3 	.word	0x0800bed3
 800bba0:	0800bf0b 	.word	0x0800bf0b
 800bba4:	0800bf2f 	.word	0x0800bf2f

0800bba8 <_cleanup_r>:
 800bba8:	4901      	ldr	r1, [pc, #4]	; (800bbb0 <_cleanup_r+0x8>)
 800bbaa:	f000 b8af 	b.w	800bd0c <_fwalk_reent>
 800bbae:	bf00      	nop
 800bbb0:	0800bae9 	.word	0x0800bae9

0800bbb4 <__sfmoreglue>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	1e4a      	subs	r2, r1, #1
 800bbb8:	2568      	movs	r5, #104	; 0x68
 800bbba:	4355      	muls	r5, r2
 800bbbc:	460e      	mov	r6, r1
 800bbbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbc2:	f7ff fa7f 	bl	800b0c4 <_malloc_r>
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	b140      	cbz	r0, 800bbdc <__sfmoreglue+0x28>
 800bbca:	2100      	movs	r1, #0
 800bbcc:	e9c0 1600 	strd	r1, r6, [r0]
 800bbd0:	300c      	adds	r0, #12
 800bbd2:	60a0      	str	r0, [r4, #8]
 800bbd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbd8:	f7fb fdea 	bl	80077b0 <memset>
 800bbdc:	4620      	mov	r0, r4
 800bbde:	bd70      	pop	{r4, r5, r6, pc}

0800bbe0 <__sfp_lock_acquire>:
 800bbe0:	4801      	ldr	r0, [pc, #4]	; (800bbe8 <__sfp_lock_acquire+0x8>)
 800bbe2:	f000 b8b3 	b.w	800bd4c <__retarget_lock_acquire_recursive>
 800bbe6:	bf00      	nop
 800bbe8:	2000110c 	.word	0x2000110c

0800bbec <__sfp_lock_release>:
 800bbec:	4801      	ldr	r0, [pc, #4]	; (800bbf4 <__sfp_lock_release+0x8>)
 800bbee:	f000 b8ae 	b.w	800bd4e <__retarget_lock_release_recursive>
 800bbf2:	bf00      	nop
 800bbf4:	2000110c 	.word	0x2000110c

0800bbf8 <__sinit_lock_acquire>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__sinit_lock_acquire+0x8>)
 800bbfa:	f000 b8a7 	b.w	800bd4c <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20001107 	.word	0x20001107

0800bc04 <__sinit_lock_release>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__sinit_lock_release+0x8>)
 800bc06:	f000 b8a2 	b.w	800bd4e <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20001107 	.word	0x20001107

0800bc10 <__sinit>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
 800bc14:	f7ff fff0 	bl	800bbf8 <__sinit_lock_acquire>
 800bc18:	69a3      	ldr	r3, [r4, #24]
 800bc1a:	b11b      	cbz	r3, 800bc24 <__sinit+0x14>
 800bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc20:	f7ff bff0 	b.w	800bc04 <__sinit_lock_release>
 800bc24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc28:	6523      	str	r3, [r4, #80]	; 0x50
 800bc2a:	4b13      	ldr	r3, [pc, #76]	; (800bc78 <__sinit+0x68>)
 800bc2c:	4a13      	ldr	r2, [pc, #76]	; (800bc7c <__sinit+0x6c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	bf04      	itt	eq
 800bc36:	2301      	moveq	r3, #1
 800bc38:	61a3      	streq	r3, [r4, #24]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 f820 	bl	800bc80 <__sfp>
 800bc40:	6060      	str	r0, [r4, #4]
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 f81c 	bl	800bc80 <__sfp>
 800bc48:	60a0      	str	r0, [r4, #8]
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 f818 	bl	800bc80 <__sfp>
 800bc50:	2200      	movs	r2, #0
 800bc52:	60e0      	str	r0, [r4, #12]
 800bc54:	2104      	movs	r1, #4
 800bc56:	6860      	ldr	r0, [r4, #4]
 800bc58:	f7ff ff82 	bl	800bb60 <std>
 800bc5c:	68a0      	ldr	r0, [r4, #8]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	2109      	movs	r1, #9
 800bc62:	f7ff ff7d 	bl	800bb60 <std>
 800bc66:	68e0      	ldr	r0, [r4, #12]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	2112      	movs	r1, #18
 800bc6c:	f7ff ff78 	bl	800bb60 <std>
 800bc70:	2301      	movs	r3, #1
 800bc72:	61a3      	str	r3, [r4, #24]
 800bc74:	e7d2      	b.n	800bc1c <__sinit+0xc>
 800bc76:	bf00      	nop
 800bc78:	0800d538 	.word	0x0800d538
 800bc7c:	0800bba9 	.word	0x0800bba9

0800bc80 <__sfp>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	4607      	mov	r7, r0
 800bc84:	f7ff ffac 	bl	800bbe0 <__sfp_lock_acquire>
 800bc88:	4b1e      	ldr	r3, [pc, #120]	; (800bd04 <__sfp+0x84>)
 800bc8a:	681e      	ldr	r6, [r3, #0]
 800bc8c:	69b3      	ldr	r3, [r6, #24]
 800bc8e:	b913      	cbnz	r3, 800bc96 <__sfp+0x16>
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7ff ffbd 	bl	800bc10 <__sinit>
 800bc96:	3648      	adds	r6, #72	; 0x48
 800bc98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	d503      	bpl.n	800bca8 <__sfp+0x28>
 800bca0:	6833      	ldr	r3, [r6, #0]
 800bca2:	b30b      	cbz	r3, 800bce8 <__sfp+0x68>
 800bca4:	6836      	ldr	r6, [r6, #0]
 800bca6:	e7f7      	b.n	800bc98 <__sfp+0x18>
 800bca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcac:	b9d5      	cbnz	r5, 800bce4 <__sfp+0x64>
 800bcae:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <__sfp+0x88>)
 800bcb0:	60e3      	str	r3, [r4, #12]
 800bcb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcb6:	6665      	str	r5, [r4, #100]	; 0x64
 800bcb8:	f000 f847 	bl	800bd4a <__retarget_lock_init_recursive>
 800bcbc:	f7ff ff96 	bl	800bbec <__sfp_lock_release>
 800bcc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcc8:	6025      	str	r5, [r4, #0]
 800bcca:	61a5      	str	r5, [r4, #24]
 800bccc:	2208      	movs	r2, #8
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcd4:	f7fb fd6c 	bl	80077b0 <memset>
 800bcd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bce0:	4620      	mov	r0, r4
 800bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce4:	3468      	adds	r4, #104	; 0x68
 800bce6:	e7d9      	b.n	800bc9c <__sfp+0x1c>
 800bce8:	2104      	movs	r1, #4
 800bcea:	4638      	mov	r0, r7
 800bcec:	f7ff ff62 	bl	800bbb4 <__sfmoreglue>
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	6030      	str	r0, [r6, #0]
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d1d5      	bne.n	800bca4 <__sfp+0x24>
 800bcf8:	f7ff ff78 	bl	800bbec <__sfp_lock_release>
 800bcfc:	230c      	movs	r3, #12
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	e7ee      	b.n	800bce0 <__sfp+0x60>
 800bd02:	bf00      	nop
 800bd04:	0800d538 	.word	0x0800d538
 800bd08:	ffff0001 	.word	0xffff0001

0800bd0c <_fwalk_reent>:
 800bd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd10:	4606      	mov	r6, r0
 800bd12:	4688      	mov	r8, r1
 800bd14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd18:	2700      	movs	r7, #0
 800bd1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd1e:	f1b9 0901 	subs.w	r9, r9, #1
 800bd22:	d505      	bpl.n	800bd30 <_fwalk_reent+0x24>
 800bd24:	6824      	ldr	r4, [r4, #0]
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	d1f7      	bne.n	800bd1a <_fwalk_reent+0xe>
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd30:	89ab      	ldrh	r3, [r5, #12]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d907      	bls.n	800bd46 <_fwalk_reent+0x3a>
 800bd36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	d003      	beq.n	800bd46 <_fwalk_reent+0x3a>
 800bd3e:	4629      	mov	r1, r5
 800bd40:	4630      	mov	r0, r6
 800bd42:	47c0      	blx	r8
 800bd44:	4307      	orrs	r7, r0
 800bd46:	3568      	adds	r5, #104	; 0x68
 800bd48:	e7e9      	b.n	800bd1e <_fwalk_reent+0x12>

0800bd4a <__retarget_lock_init_recursive>:
 800bd4a:	4770      	bx	lr

0800bd4c <__retarget_lock_acquire_recursive>:
 800bd4c:	4770      	bx	lr

0800bd4e <__retarget_lock_release_recursive>:
 800bd4e:	4770      	bx	lr

0800bd50 <__swhatbuf_r>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	460e      	mov	r6, r1
 800bd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	b096      	sub	sp, #88	; 0x58
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	461d      	mov	r5, r3
 800bd60:	da07      	bge.n	800bd72 <__swhatbuf_r+0x22>
 800bd62:	2300      	movs	r3, #0
 800bd64:	602b      	str	r3, [r5, #0]
 800bd66:	89b3      	ldrh	r3, [r6, #12]
 800bd68:	061a      	lsls	r2, r3, #24
 800bd6a:	d410      	bmi.n	800bd8e <__swhatbuf_r+0x3e>
 800bd6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd70:	e00e      	b.n	800bd90 <__swhatbuf_r+0x40>
 800bd72:	466a      	mov	r2, sp
 800bd74:	f000 f902 	bl	800bf7c <_fstat_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	dbf2      	blt.n	800bd62 <__swhatbuf_r+0x12>
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd86:	425a      	negs	r2, r3
 800bd88:	415a      	adcs	r2, r3
 800bd8a:	602a      	str	r2, [r5, #0]
 800bd8c:	e7ee      	b.n	800bd6c <__swhatbuf_r+0x1c>
 800bd8e:	2340      	movs	r3, #64	; 0x40
 800bd90:	2000      	movs	r0, #0
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	b016      	add	sp, #88	; 0x58
 800bd96:	bd70      	pop	{r4, r5, r6, pc}

0800bd98 <__smakebuf_r>:
 800bd98:	898b      	ldrh	r3, [r1, #12]
 800bd9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd9c:	079d      	lsls	r5, r3, #30
 800bd9e:	4606      	mov	r6, r0
 800bda0:	460c      	mov	r4, r1
 800bda2:	d507      	bpl.n	800bdb4 <__smakebuf_r+0x1c>
 800bda4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	2301      	movs	r3, #1
 800bdae:	6163      	str	r3, [r4, #20]
 800bdb0:	b002      	add	sp, #8
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	ab01      	add	r3, sp, #4
 800bdb6:	466a      	mov	r2, sp
 800bdb8:	f7ff ffca 	bl	800bd50 <__swhatbuf_r>
 800bdbc:	9900      	ldr	r1, [sp, #0]
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7ff f97f 	bl	800b0c4 <_malloc_r>
 800bdc6:	b948      	cbnz	r0, 800bddc <__smakebuf_r+0x44>
 800bdc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdcc:	059a      	lsls	r2, r3, #22
 800bdce:	d4ef      	bmi.n	800bdb0 <__smakebuf_r+0x18>
 800bdd0:	f023 0303 	bic.w	r3, r3, #3
 800bdd4:	f043 0302 	orr.w	r3, r3, #2
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	e7e3      	b.n	800bda4 <__smakebuf_r+0xc>
 800bddc:	4b0d      	ldr	r3, [pc, #52]	; (800be14 <__smakebuf_r+0x7c>)
 800bdde:	62b3      	str	r3, [r6, #40]	; 0x28
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	6020      	str	r0, [r4, #0]
 800bde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	9b00      	ldr	r3, [sp, #0]
 800bdec:	6163      	str	r3, [r4, #20]
 800bdee:	9b01      	ldr	r3, [sp, #4]
 800bdf0:	6120      	str	r0, [r4, #16]
 800bdf2:	b15b      	cbz	r3, 800be0c <__smakebuf_r+0x74>
 800bdf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f000 f8d1 	bl	800bfa0 <_isatty_r>
 800bdfe:	b128      	cbz	r0, 800be0c <__smakebuf_r+0x74>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f023 0303 	bic.w	r3, r3, #3
 800be06:	f043 0301 	orr.w	r3, r3, #1
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	89a0      	ldrh	r0, [r4, #12]
 800be0e:	4305      	orrs	r5, r0
 800be10:	81a5      	strh	r5, [r4, #12]
 800be12:	e7cd      	b.n	800bdb0 <__smakebuf_r+0x18>
 800be14:	0800bba9 	.word	0x0800bba9

0800be18 <_malloc_usable_size_r>:
 800be18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1c:	1f18      	subs	r0, r3, #4
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bfbc      	itt	lt
 800be22:	580b      	ldrlt	r3, [r1, r0]
 800be24:	18c0      	addlt	r0, r0, r3
 800be26:	4770      	bx	lr

0800be28 <_raise_r>:
 800be28:	291f      	cmp	r1, #31
 800be2a:	b538      	push	{r3, r4, r5, lr}
 800be2c:	4604      	mov	r4, r0
 800be2e:	460d      	mov	r5, r1
 800be30:	d904      	bls.n	800be3c <_raise_r+0x14>
 800be32:	2316      	movs	r3, #22
 800be34:	6003      	str	r3, [r0, #0]
 800be36:	f04f 30ff 	mov.w	r0, #4294967295
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be3e:	b112      	cbz	r2, 800be46 <_raise_r+0x1e>
 800be40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be44:	b94b      	cbnz	r3, 800be5a <_raise_r+0x32>
 800be46:	4620      	mov	r0, r4
 800be48:	f000 f830 	bl	800beac <_getpid_r>
 800be4c:	462a      	mov	r2, r5
 800be4e:	4601      	mov	r1, r0
 800be50:	4620      	mov	r0, r4
 800be52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be56:	f000 b817 	b.w	800be88 <_kill_r>
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d00a      	beq.n	800be74 <_raise_r+0x4c>
 800be5e:	1c59      	adds	r1, r3, #1
 800be60:	d103      	bne.n	800be6a <_raise_r+0x42>
 800be62:	2316      	movs	r3, #22
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	2001      	movs	r0, #1
 800be68:	e7e7      	b.n	800be3a <_raise_r+0x12>
 800be6a:	2400      	movs	r4, #0
 800be6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be70:	4628      	mov	r0, r5
 800be72:	4798      	blx	r3
 800be74:	2000      	movs	r0, #0
 800be76:	e7e0      	b.n	800be3a <_raise_r+0x12>

0800be78 <raise>:
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <raise+0xc>)
 800be7a:	4601      	mov	r1, r0
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f7ff bfd3 	b.w	800be28 <_raise_r>
 800be82:	bf00      	nop
 800be84:	20000140 	.word	0x20000140

0800be88 <_kill_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d07      	ldr	r5, [pc, #28]	; (800bea8 <_kill_r+0x20>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	4611      	mov	r1, r2
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	f7f6 f98b 	bl	80021b0 <_kill>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d102      	bne.n	800bea4 <_kill_r+0x1c>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	b103      	cbz	r3, 800bea4 <_kill_r+0x1c>
 800bea2:	6023      	str	r3, [r4, #0]
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop
 800bea8:	20001100 	.word	0x20001100

0800beac <_getpid_r>:
 800beac:	f7f6 b978 	b.w	80021a0 <_getpid>

0800beb0 <__sread>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	460c      	mov	r4, r1
 800beb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb8:	f000 f894 	bl	800bfe4 <_read_r>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	bfab      	itete	ge
 800bec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bec2:	89a3      	ldrhlt	r3, [r4, #12]
 800bec4:	181b      	addge	r3, r3, r0
 800bec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800beca:	bfac      	ite	ge
 800becc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bece:	81a3      	strhlt	r3, [r4, #12]
 800bed0:	bd10      	pop	{r4, pc}

0800bed2 <__swrite>:
 800bed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed6:	461f      	mov	r7, r3
 800bed8:	898b      	ldrh	r3, [r1, #12]
 800beda:	05db      	lsls	r3, r3, #23
 800bedc:	4605      	mov	r5, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	4616      	mov	r6, r2
 800bee2:	d505      	bpl.n	800bef0 <__swrite+0x1e>
 800bee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee8:	2302      	movs	r3, #2
 800beea:	2200      	movs	r2, #0
 800beec:	f000 f868 	bl	800bfc0 <_lseek_r>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800befa:	81a3      	strh	r3, [r4, #12]
 800befc:	4632      	mov	r2, r6
 800befe:	463b      	mov	r3, r7
 800bf00:	4628      	mov	r0, r5
 800bf02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf06:	f000 b817 	b.w	800bf38 <_write_r>

0800bf0a <__sseek>:
 800bf0a:	b510      	push	{r4, lr}
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf12:	f000 f855 	bl	800bfc0 <_lseek_r>
 800bf16:	1c43      	adds	r3, r0, #1
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	bf15      	itete	ne
 800bf1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf26:	81a3      	strheq	r3, [r4, #12]
 800bf28:	bf18      	it	ne
 800bf2a:	81a3      	strhne	r3, [r4, #12]
 800bf2c:	bd10      	pop	{r4, pc}

0800bf2e <__sclose>:
 800bf2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf32:	f000 b813 	b.w	800bf5c <_close_r>
	...

0800bf38 <_write_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d07      	ldr	r5, [pc, #28]	; (800bf58 <_write_r+0x20>)
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	4608      	mov	r0, r1
 800bf40:	4611      	mov	r1, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	f7f6 f969 	bl	800221e <_write>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_write_r+0x1e>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_write_r+0x1e>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	20001100 	.word	0x20001100

0800bf5c <_close_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d06      	ldr	r5, [pc, #24]	; (800bf78 <_close_r+0x1c>)
 800bf60:	2300      	movs	r3, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	f7f6 f975 	bl	8002256 <_close>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_close_r+0x1a>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_close_r+0x1a>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	20001100 	.word	0x20001100

0800bf7c <_fstat_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4d07      	ldr	r5, [pc, #28]	; (800bf9c <_fstat_r+0x20>)
 800bf80:	2300      	movs	r3, #0
 800bf82:	4604      	mov	r4, r0
 800bf84:	4608      	mov	r0, r1
 800bf86:	4611      	mov	r1, r2
 800bf88:	602b      	str	r3, [r5, #0]
 800bf8a:	f7f6 f970 	bl	800226e <_fstat>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d102      	bne.n	800bf98 <_fstat_r+0x1c>
 800bf92:	682b      	ldr	r3, [r5, #0]
 800bf94:	b103      	cbz	r3, 800bf98 <_fstat_r+0x1c>
 800bf96:	6023      	str	r3, [r4, #0]
 800bf98:	bd38      	pop	{r3, r4, r5, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20001100 	.word	0x20001100

0800bfa0 <_isatty_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4d06      	ldr	r5, [pc, #24]	; (800bfbc <_isatty_r+0x1c>)
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	f7f6 f96f 	bl	800228e <_isatty>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d102      	bne.n	800bfba <_isatty_r+0x1a>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	b103      	cbz	r3, 800bfba <_isatty_r+0x1a>
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	20001100 	.word	0x20001100

0800bfc0 <_lseek_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4d07      	ldr	r5, [pc, #28]	; (800bfe0 <_lseek_r+0x20>)
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	4608      	mov	r0, r1
 800bfc8:	4611      	mov	r1, r2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	602a      	str	r2, [r5, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f7f6 f968 	bl	80022a4 <_lseek>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_lseek_r+0x1e>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_lseek_r+0x1e>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	20001100 	.word	0x20001100

0800bfe4 <_read_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d07      	ldr	r5, [pc, #28]	; (800c004 <_read_r+0x20>)
 800bfe8:	4604      	mov	r4, r0
 800bfea:	4608      	mov	r0, r1
 800bfec:	4611      	mov	r1, r2
 800bfee:	2200      	movs	r2, #0
 800bff0:	602a      	str	r2, [r5, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	f7f6 f8f6 	bl	80021e4 <_read>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_read_r+0x1e>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_read_r+0x1e>
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	20001100 	.word	0x20001100

0800c008 <expf>:
 800c008:	b508      	push	{r3, lr}
 800c00a:	ed2d 8b02 	vpush	{d8}
 800c00e:	eef0 8a40 	vmov.f32	s17, s0
 800c012:	f000 f837 	bl	800c084 <__ieee754_expf>
 800c016:	4b16      	ldr	r3, [pc, #88]	; (800c070 <expf+0x68>)
 800c018:	f993 3000 	ldrsb.w	r3, [r3]
 800c01c:	3301      	adds	r3, #1
 800c01e:	eeb0 8a40 	vmov.f32	s16, s0
 800c022:	d011      	beq.n	800c048 <expf+0x40>
 800c024:	eeb0 0a68 	vmov.f32	s0, s17
 800c028:	f000 f900 	bl	800c22c <finitef>
 800c02c:	b160      	cbz	r0, 800c048 <expf+0x40>
 800c02e:	eddf 7a11 	vldr	s15, [pc, #68]	; 800c074 <expf+0x6c>
 800c032:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03a:	dd0a      	ble.n	800c052 <expf+0x4a>
 800c03c:	f7fb fb8e 	bl	800775c <__errno>
 800c040:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800c078 <expf+0x70>
 800c044:	2322      	movs	r3, #34	; 0x22
 800c046:	6003      	str	r3, [r0, #0]
 800c048:	eeb0 0a48 	vmov.f32	s0, s16
 800c04c:	ecbd 8b02 	vpop	{d8}
 800c050:	bd08      	pop	{r3, pc}
 800c052:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c07c <expf+0x74>
 800c056:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	d5f3      	bpl.n	800c048 <expf+0x40>
 800c060:	f7fb fb7c 	bl	800775c <__errno>
 800c064:	2322      	movs	r3, #34	; 0x22
 800c066:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800c080 <expf+0x78>
 800c06a:	6003      	str	r3, [r0, #0]
 800c06c:	e7ec      	b.n	800c048 <expf+0x40>
 800c06e:	bf00      	nop
 800c070:	20000314 	.word	0x20000314
 800c074:	42b17180 	.word	0x42b17180
 800c078:	7f800000 	.word	0x7f800000
 800c07c:	c2cff1b5 	.word	0xc2cff1b5
 800c080:	00000000 	.word	0x00000000

0800c084 <__ieee754_expf>:
 800c084:	ee10 2a10 	vmov	r2, s0
 800c088:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c08c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c090:	d902      	bls.n	800c098 <__ieee754_expf+0x14>
 800c092:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c096:	4770      	bx	lr
 800c098:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c09c:	d106      	bne.n	800c0ac <__ieee754_expf+0x28>
 800c09e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800c1e4 <__ieee754_expf+0x160>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	bf18      	it	ne
 800c0a6:	eeb0 0a67 	vmovne.f32	s0, s15
 800c0aa:	4770      	bx	lr
 800c0ac:	484e      	ldr	r0, [pc, #312]	; (800c1e8 <__ieee754_expf+0x164>)
 800c0ae:	4282      	cmp	r2, r0
 800c0b0:	dd04      	ble.n	800c0bc <__ieee754_expf+0x38>
 800c0b2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800c1ec <__ieee754_expf+0x168>
 800c0b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c0ba:	4770      	bx	lr
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	da03      	bge.n	800c0c8 <__ieee754_expf+0x44>
 800c0c0:	4a4b      	ldr	r2, [pc, #300]	; (800c1f0 <__ieee754_expf+0x16c>)
 800c0c2:	4291      	cmp	r1, r2
 800c0c4:	f200 808a 	bhi.w	800c1dc <__ieee754_expf+0x158>
 800c0c8:	4a4a      	ldr	r2, [pc, #296]	; (800c1f4 <__ieee754_expf+0x170>)
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c0d0:	d954      	bls.n	800c17c <__ieee754_expf+0xf8>
 800c0d2:	4a49      	ldr	r2, [pc, #292]	; (800c1f8 <__ieee754_expf+0x174>)
 800c0d4:	4291      	cmp	r1, r2
 800c0d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c0da:	d836      	bhi.n	800c14a <__ieee754_expf+0xc6>
 800c0dc:	4947      	ldr	r1, [pc, #284]	; (800c1fc <__ieee754_expf+0x178>)
 800c0de:	4411      	add	r1, r2
 800c0e0:	ed91 7a00 	vldr	s14, [r1]
 800c0e4:	4946      	ldr	r1, [pc, #280]	; (800c200 <__ieee754_expf+0x17c>)
 800c0e6:	440a      	add	r2, r1
 800c0e8:	edd2 7a00 	vldr	s15, [r2]
 800c0ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c0f0:	f1c3 0201 	rsb	r2, r3, #1
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c0fa:	ee60 6a00 	vmul.f32	s13, s0, s0
 800c0fe:	eddf 5a41 	vldr	s11, [pc, #260]	; 800c204 <__ieee754_expf+0x180>
 800c102:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800c208 <__ieee754_expf+0x184>
 800c106:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800c10a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800c20c <__ieee754_expf+0x188>
 800c10e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800c112:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800c210 <__ieee754_expf+0x18c>
 800c116:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800c11a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c214 <__ieee754_expf+0x190>
 800c11e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800c122:	eeb0 5a40 	vmov.f32	s10, s0
 800c126:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800c12a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c12e:	eef0 6a45 	vmov.f32	s13, s10
 800c132:	ee20 5a05 	vmul.f32	s10, s0, s10
 800c136:	bb92      	cbnz	r2, 800c19e <__ieee754_expf+0x11a>
 800c138:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800c13c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c140:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c144:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c148:	4770      	bx	lr
 800c14a:	4b33      	ldr	r3, [pc, #204]	; (800c218 <__ieee754_expf+0x194>)
 800c14c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c21c <__ieee754_expf+0x198>
 800c150:	4413      	add	r3, r2
 800c152:	edd3 7a00 	vldr	s15, [r3]
 800c156:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c15a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c220 <__ieee754_expf+0x19c>
 800c15e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c162:	ee17 2a90 	vmov	r2, s15
 800c166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c16a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c16e:	eeb0 7a40 	vmov.f32	s14, s0
 800c172:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800c224 <__ieee754_expf+0x1a0>
 800c176:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c17a:	e7bc      	b.n	800c0f6 <__ieee754_expf+0x72>
 800c17c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800c180:	d20b      	bcs.n	800c19a <__ieee754_expf+0x116>
 800c182:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800c1ec <__ieee754_expf+0x168>
 800c186:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c18a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c192:	dd02      	ble.n	800c19a <__ieee754_expf+0x116>
 800c194:	ee30 0a06 	vadd.f32	s0, s0, s12
 800c198:	4770      	bx	lr
 800c19a:	2200      	movs	r2, #0
 800c19c:	e7ad      	b.n	800c0fa <__ieee754_expf+0x76>
 800c19e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800c1a2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800c1a6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800c1aa:	bfb8      	it	lt
 800c1ac:	3264      	addlt	r2, #100	; 0x64
 800c1ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c1b2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c1b6:	ee76 7a40 	vsub.f32	s15, s12, s0
 800c1ba:	ee17 3a90 	vmov	r3, s15
 800c1be:	bfab      	itete	ge
 800c1c0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c1c4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c1c8:	ee00 3a10 	vmovge	s0, r3
 800c1cc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800c228 <__ieee754_expf+0x1a4>
 800c1d0:	bfbc      	itt	lt
 800c1d2:	ee00 3a10 	vmovlt	s0, r3
 800c1d6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c1da:	4770      	bx	lr
 800c1dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1e4 <__ieee754_expf+0x160>
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	00000000 	.word	0x00000000
 800c1e8:	42b17217 	.word	0x42b17217
 800c1ec:	7149f2ca 	.word	0x7149f2ca
 800c1f0:	42cff1b5 	.word	0x42cff1b5
 800c1f4:	3eb17218 	.word	0x3eb17218
 800c1f8:	3f851591 	.word	0x3f851591
 800c1fc:	0800d9f4 	.word	0x0800d9f4
 800c200:	0800d9fc 	.word	0x0800d9fc
 800c204:	3331bb4c 	.word	0x3331bb4c
 800c208:	b5ddea0e 	.word	0xb5ddea0e
 800c20c:	388ab355 	.word	0x388ab355
 800c210:	bb360b61 	.word	0xbb360b61
 800c214:	3e2aaaab 	.word	0x3e2aaaab
 800c218:	0800d9ec 	.word	0x0800d9ec
 800c21c:	3fb8aa3b 	.word	0x3fb8aa3b
 800c220:	3f317180 	.word	0x3f317180
 800c224:	3717f7d1 	.word	0x3717f7d1
 800c228:	0d800000 	.word	0x0d800000

0800c22c <finitef>:
 800c22c:	b082      	sub	sp, #8
 800c22e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c232:	9801      	ldr	r0, [sp, #4]
 800c234:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c238:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c23c:	bfac      	ite	ge
 800c23e:	2000      	movge	r0, #0
 800c240:	2001      	movlt	r0, #1
 800c242:	b002      	add	sp, #8
 800c244:	4770      	bx	lr
	...

0800c248 <_init>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	bf00      	nop
 800c24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24e:	bc08      	pop	{r3}
 800c250:	469e      	mov	lr, r3
 800c252:	4770      	bx	lr

0800c254 <_fini>:
 800c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c256:	bf00      	nop
 800c258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25a:	bc08      	pop	{r3}
 800c25c:	469e      	mov	lr, r3
 800c25e:	4770      	bx	lr
